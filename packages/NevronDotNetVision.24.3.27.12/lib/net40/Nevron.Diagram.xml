<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nevron.Diagram</name>
    </assembly>
    <members>
        <member name="T:Nevron.Diagram.Bridging.NBridgeablePaintInfo">
            <summary>
            The NBridgeablePaintInfo class represents the information, which is needed to paint a bridgeable path
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Bridging.NBridgeablePaintInfo.#ctor(Nevron.Diagram.BridgeShape,Nevron.Diagram.BridgeTargets,Nevron.GraphicsCore.NSizeF,System.Single,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Initializer constructor
            </summary>
            <param name="shape"></param>
            <param name="targets"></param>
            <param name="size"></param>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Diagram.Bridging.NBridgeablePaintInfo.Dispose">
            <summary>
            Disposes the path with bridges
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Bridging.NBridgeablePaintInfo.NeedsRecreation(Nevron.Diagram.BridgeShape,Nevron.Diagram.BridgeTargets,Nevron.GraphicsCore.NSizeF,System.Single)">
            <summary>
            Determines whether the info needs to be recreated
            </summary>
            <param name="shape"></param>
            <param name="targets"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Diagram.Bridging.NBridgeablePaintInfo.Shape">
            <summary>
            Bridge shape
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Bridging.NBridgeablePaintInfo.Targets">
            <summary>
            Bridge targets
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Bridging.NBridgeablePaintInfo.Size">
            <summary>
            Bridges size (in scene coordinates)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Bridging.NBridgeablePaintInfo.CornerRounding">
            <summary>
            The corner rounding
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Bridging.NBridgeablePaintInfo.Path">
            <summary>
            Path with bridges (in scene coordinates)
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Bridging.NBridgeableSegmentIterator">
            <summary>
            The NBridgeableSegmentIterator class is used to iterate through the bridgeable segments of a bridgable primitive
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Bridging.NBridgeableSegmentIterator.#ctor(Nevron.GraphicsCore.NPointF[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="points">points, which define the bridgeable segments</param>
        </member>
        <member name="M:Nevron.Diagram.Bridging.NBridgeableSegmentIterator.Clone">
            <summary>
            Creates an exact copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Bridging.NBridgeableSegmentIterator.Reset(System.Int32,System.Int32)">
            <summary>
            Resets the iterator to start iteration from the specified start segment until the specified end segment
            </summary>
            <param name="startSegment">start segment index</param>
            <param name="endSegment">end segment index</param>
            <returns>true if successfully reset, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Bridging.NBridgeableSegmentIterator.MoveNext">
            <summary>
            Moves the iterator to the next segment
            </summary>
            <returns>true if this successfully moved to the next segment, false if the end segment was reached</returns>
        </member>
        <member name="P:Nevron.Diagram.Bridging.NBridgeableSegmentIterator.CurSegment">
            <summary>
            Obtains the geometry line representing the current segment
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Bridging.NBridgeableSegmentIterator.SegmentsCount">
            <summary>
            Obtains the total count of segments
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NSceneTreeViewControlState">
            <summary>
            The NSceneTreeViewControlState is a descriptor of the current NSceneTreeViewControl state.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NSceneTreeViewControlState.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NSceneTreeViewControlState.ExpandedNodes">
            <summary>
            Holds the expanded nodes in the tree
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NSceneTreeViewControlState.SelectedNode">
            <summary>
            Holds the selected node in the tree
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NSceneTreeViewControl">
            <summary>
            The NSceneTreeViewControl control is used to display a subtree of the document scene.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NSceneTreeViewControl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NSceneTreeViewControl.RebuildFromContainer(Nevron.Diagram.INDiagramElementContainer)">
            <summary>
            Rebuilds the tree from the specified container
            </summary>
            <param name="container">container which serves as tree root</param>
        </member>
        <member name="M:Nevron.Diagram.NSceneTreeViewControl.SaveState">
            <summary>
            Saves the current tree state in a NSceneTreeViewControlState instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NSceneTreeViewControl.RestoreState(Nevron.Diagram.NSceneTreeViewControlState)">
            <summary>
            Restores the tree state from a NSceneTreeViewControlState instance
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Nevron.Diagram.NSceneTreeViewControl.BuildTreeNodeToDiagramElementTable(System.Windows.Forms.TreeNode,System.Collections.Hashtable@)">
            <summary>
            Builds a hashtable in which the key is a TreeNode and the value is an INDiagramElement
            </summary>
            <param name="parentNode"></param>
            <param name="table"></param>
        </member>
        <member name="M:Nevron.Diagram.NSceneTreeViewControl.BuildDiagramElementToTreeNodeTable(System.Windows.Forms.TreeNode,System.Collections.Hashtable@)">
            <summary>
            Builds a hashtable in which the key is a INDiagramElement and the value is a TreeNode 
            </summary>
            <param name="parentNode"></param>
            <param name="table"></param>
        </member>
        <member name="M:Nevron.Diagram.NSceneTreeViewControl.AddTreeNodeChildren(System.Windows.Forms.TreeNode,Nevron.Diagram.INDiagramElementContainer)">
            <summary>
            Recursive method, which wraps the specified container children as TreeNodes and adds them as children of the specified parentNode.
            </summary>
            <remarks>
            The method is called recursively for all children, which implement INDiagramElementContainer
            </remarks>
            <param name="parentNode">TreeNode of the parent</param>
            <param name="container">INDiagramElementContainer, whose children need to be added to the parentNode</param>
        </member>
        <member name="T:Nevron.Diagram.NAbilities">
            <summary>
            The NAbilities structure is used to define the abilities of a diagram element. 
            It is wrapper for the AbilitiesMask enumeration, with a convenient 
            interface to drop and raise the respective bits defined by the AbilitiesMask
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NAbilities.#ctor(Nevron.Diagram.AbilitiesMask)">
            <summary>
            Initializer constructor
            </summary>
            <param name="mask">mask with which to initialize</param>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.Select">
            <summary>
            Select
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.TrackersEdit">
            <summary>
            Trackers edit
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.ContextMenuEdit">
            <summary>
            Context menu edit
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.InplaceEdit">
            <summary>
            Inplace edit
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.ChangeStyle">
            <summary>
            Change style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.MoveX">
            <summary>
            Move X
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.MoveY">
            <summary>
            Move Y
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.ResizeX">
            <summary>
            Resize X
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.ResizeY">
            <summary>
            Resize Y
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.ChangeAspectRatio">
            <summary>
            Change aspect ratio
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.Rotate">
            <summary>
            Rotate
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.Delete">
            <summary>
            Delete
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.Ungroup">
            <summary>
            Ungroup
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.Compose">
            <summary>
            Compose
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.Decompose">
            <summary>
            Decompose
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.ChangeStartPoint">
            <summary>
            Change start point
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.ChangeEndPoint">
            <summary>
            Change end point
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.ReorderElements">
            <summary>
            Reorder elements
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.InsertElements">
            <summary>
            Insert elements
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.RemoveElements">
            <summary>
            Remove elements
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.Copy">
            <summary>
            Copy
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.Print">
            <summary>
            Print
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.Export">
            <summary>
            Export
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.None">
            <summary>
            None
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.All">
            <summary>
            All
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAbilities.Mask">
            <summary>
            Gets/sets the mask used to control the abilities
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NAbilities.Intersect(Nevron.Diagram.NAbilities)">
            <summary>
            Intersects this abilities with the specified abilities. (Bitwise AND)
            </summary>
            <param name="abilities">abilities to intersect with</param>
        </member>
        <member name="M:Nevron.Diagram.NAbilities.Intersect(Nevron.Diagram.AbilitiesMask)">
            <summary>
            Intersects this abilities with the specified abilities mask. (Bitwise AND)
            </summary>
            <param name="mask">abilities mask to intersect with</param>
        </member>
        <member name="M:Nevron.Diagram.NAbilities.Union(Nevron.Diagram.NAbilities)">
            <summary>
            Unions this abilities with the specified abilities. (Bitwise OR)
            </summary>
            <param name="abilities">abilities to union with</param>
        </member>
        <member name="M:Nevron.Diagram.NAbilities.Union(Nevron.Diagram.AbilitiesMask)">
            <summary>
            Unions this abilities with the specified abilities mask. (Bitwise OR)
            </summary>
            <param name="mask">abilities mask to union with</param>
        </member>
        <member name="M:Nevron.Diagram.NAbilities.Difference(Nevron.Diagram.NAbilities)">
            <summary>
            Obtains the different abilities between this and the specified abilities.
            </summary>
            <param name="abilities">abilities to compare with</param>
        </member>
        <member name="M:Nevron.Diagram.NAbilities.Difference(Nevron.Diagram.AbilitiesMask)">
            <summary>
            Obtains the different abilities between this and the specified abilities mask.
            </summary>
            <param name="mask">abilities mask to compare with</param>
        </member>
        <member name="M:Nevron.Diagram.NAbilities.Contains(Nevron.Diagram.NAbilities)">
            <summary>
            Determines whether this abilities contains all of the specified abilities.
            </summary>
            <param name="abilities">abilities to check</param>
            <returns>true if this abilities contains all of the specified abilities, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NAbilities.Contains(Nevron.Diagram.AbilitiesMask)">
            <summary>
            Determines whether this abilities contains all of the specified abilities.
            </summary>
            <param name="mask">abilities mask to check</param>
            <returns>true if this abilities contains all of the specified abilities, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.NArrowheadsPaintInfo">
            <summary>
            The NArrowheadsPaintInfo class represents the information, 
            which is needed to paint arrowheads
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadsPaintInfo.#ctor(Nevron.GraphicsCore.NPointF,System.Single,Nevron.GraphicsCore.NPointF,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="startLocation">start arrowhead location</param>
            <param name="startOrientation">start arrowhead orientation</param>
            <param name="endLocation">end arrowhead location</param>
            <param name="endOrientation">end arrowhead orientation</param>
        </member>
        <member name="F:Nevron.Diagram.NArrowheadsPaintInfo.StartLocation">
            <summary>
            Location of the start point
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NArrowheadsPaintInfo.StartOrientation">
            <summary>
            Orientation of the start point tangent (in radians)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NArrowheadsPaintInfo.EndLocation">
            <summary>
            Location of the end point
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NArrowheadsPaintInfo.EndOrientation">
            <summary>
            Orientation of the end point tangent (in radians)
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NBinaryState">
            <summary>
            The NBinaryState class is used to provide binary serialization design time support for diagram components and controls
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBinaryState.#ctor(System.Byte[])">
            <summary>
            Initilaizer constructor
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="F:Nevron.Diagram.NBinaryState.Bytes">
            <summary>
            Bytes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBinaryState.StoreObjectState(System.Object)">
            <summary>
            Stores the serializable object state in a binary stream
            </summary>
            <param name="obj">object whose state to store</param>
            <returns>binary state of the object</returns>
        </member>
        <member name="M:Nevron.Diagram.NBinaryState.RestoreObjectState(System.Object,Nevron.Diagram.NBinaryState)">
            <summary>
            Restores the serializable object state from a binary stream
            </summary>
            <param name="obj">object in which to restore state</param>
            <param name="state">state to restore</param>
        </member>
        <member name="T:Nevron.Diagram.NCartesianScaleFactors">
            <summary>
            Represents the factors, by which an aggregated model is scaled by its aggregate
            </summary>
            <remarks>
            When a model uses a cartesian scale inside its aggregate its width and height are computed with the following equasions:
            <para>
            model.Width = aggregate.Width * F1 + aggregate.Height * F2;
            model.Height = aggregate.Width * F3 + aggregate.Height * F4;
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NCartesianScaleFactors.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NCartesianScaleFactors.op_Equality(Nevron.Diagram.NCartesianScaleFactors,Nevron.Diagram.NCartesianScaleFactors)">
            <summary>
            Determines whether a is equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NCartesianScaleFactors.op_Inequality(Nevron.Diagram.NCartesianScaleFactors,Nevron.Diagram.NCartesianScaleFactors)">
            <summary>
            Determines whether a is not equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NCartesianScaleFactors.GetHashCode">
            <summary>
            Overriden because Equals was overriden
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NCartesianScaleFactors.Equals(System.Object)">
            <summary>
            Overriden to compare the scale factors
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Diagram.NCartesianScaleFactors.F1">
            <summary>
            F1
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NCartesianScaleFactors.F2">
            <summary>
            F2
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NCartesianScaleFactors.F3">
            <summary>
            F3
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NCartesianScaleFactors.F4">
            <summary>
            F4
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NCartesianScaleFactors.Empty">
            <summary>
            Empty cartesian scale factors (all factors are equal to 0)
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NConnection">
            <summary>
            Represents a connection between two diagram elements. 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NConnection.#ctor(System.Guid,System.Guid)">
            <summary>
            Initializes a new connection, between the elements with the specified unique ids
            </summary>
            <param name="uid1"></param>
            <param name="uid2"></param>
        </member>
        <member name="M:Nevron.Diagram.NConnection.ContainsId(System.Guid)">
            <summary>
            Queries whether uid is equal to either UniqueId1 or UniqueId2
            </summary>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NConnection.ContainsIds(System.Guid,System.Guid)">
            <summary>
            Queries whether the connection identified by uid1 and uid2 is identical to this connection 
            </summary>
            <param name="uid1"></param>
            <param name="uid2"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Diagram.NConnection.UniqueId1">
            <summary>
            Unique Id of the first element
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NConnection.UniqueId2">
            <summary>
            Unique Id of the second element
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NConnectionCollection">
            <summary>
            Represents an arraylist representation of the connections stored in a NConnectionContainer
            </summary>
            <remarks>
            This implementation is slower than the NConnectionStorage representation, but has a smaller memory footprint
            </remarks> 
        </member>
        <member name="M:Nevron.Diagram.NConnectionCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NConnectionCollection.#ctor(Nevron.Diagram.NConnectionCollection)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.NConnectionCollection.Clone">
            <summary>
            Creates an identical copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionCollection.CreateConnection(System.Guid,System.Guid)">
            <summary>
            Creates a new connection between the specified ids
            </summary>
            <param name="uid1"></param>
            <param name="uid2"></param>
        </member>
        <member name="M:Nevron.Diagram.NConnectionCollection.DestroyConnection(System.Guid,System.Guid)">
            <summary>
            Destroys the connection between the specified ids (if it exists)
            </summary>
            <param name="uid1"></param>
            <param name="uid2"></param>
        </member>
        <member name="M:Nevron.Diagram.NConnectionCollection.QueryConnected(System.Guid,System.Guid)">
            <summary>
            Queries whether a connection between the specified ids exists
            </summary>
            <param name="uid1"></param>
            <param name="uid2"></param>
            <returns>true if a connection between uid1 and uid2 exists, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionCollection.QueryConnected(System.Guid)">
            <summary>
            Queries whether the specified uid is a member of at least one connection
            </summary>
            <param name="uid"></param>
            <returns>true uid is connected, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionCollection.GetForeignUniqueIds(System.Guid)">
            <summary>
            For a given uid obtains the ids, which are connected to it
            </summary>
            <param name="uid">uid</param>
            <returns>array of ids connected to uid</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionCollection.GetForeignUniqueIdsCount(System.Guid)">
            <summary>
            For a given uid obtains the count of connections in which it participates
            </summary>
            <param name="uid">uid</param>
            <returns>count of ids connected to uid</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionCollection.GetNonDuplicateUniqueIds">
            <summary>
            Obtains an array of the unique ids involved in connections
            </summary>
            <returns>array of unique ids</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionCollection.GetDifferentUniqueIds(Nevron.Diagram.NConnectionCollection)">
            <summary>
            Compares this collection with the specified collection and returns an array of the ids, which are members of connections not present in both collections
            </summary>
            <returns>array of different ids</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionCollection.ReplaceUniqueIds(System.Collections.Hashtable)">
            <summary>
            Replaces all connection uids using the specified map of uids
            </summary>
            <param name="mapUIds">map of uids</param>
        </member>
        <member name="T:Nevron.Diagram.NConnectionStorage">
            <summary>
            Represents a hashtable representation of the connections stored in a NConnectionContainer
            </summary>
            <remarks>
            This implementation is less memory efficient than the NConnectionCollection representation, but is much faster
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NConnectionStorage.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NConnectionStorage.#ctor(Nevron.Diagram.NConnectionStorage)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NConnectionStorage.Clone">
            <summary>
            Creates an identical copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionStorage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.NConnectionStorage.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.NConnectionStorage.Clear">
            <summary>
            Clears all connections in the storage
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NConnectionStorage.CreateConnection(System.Guid,System.Guid)">
            <summary>
            Creates a new connection between the specified ids
            </summary>
            <param name="uid1"></param>
            <param name="uid2"></param>
        </member>
        <member name="M:Nevron.Diagram.NConnectionStorage.DestroyConnection(System.Guid,System.Guid)">
            <summary>
            Destroys the connection between the specified ids (if it exists)
            </summary>
            <param name="uid1"></param>
            <param name="uid2"></param>
        </member>
        <member name="M:Nevron.Diagram.NConnectionStorage.QueryConnected(System.Guid,System.Guid)">
            <summary>
            Queries whether a connection between the specified ids exists
            </summary>
            <param name="uid1"></param>
            <param name="uid2"></param>
            <returns>true if a connection between uid1 and uid2 exists, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionStorage.QueryConnected(System.Guid)">
            <summary>
            Queries whether the specified uid is a member of at least one connection
            </summary>
            <param name="uid"></param>
            <returns>true uid is connected, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionStorage.GetForeignUniqueIds(System.Guid)">
            <summary>
            For a given uid obtains the ids, which are connected to it
            </summary>
            <param name="uid">uid</param>
            <returns>array of ids connected to uid</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionStorage.GetForeignUniqueIdsCount(System.Guid)">
            <summary>
            For a given uid obtains the count of connections in which it participates
            </summary>
            <param name="uid">uid</param>
            <returns>count of ids connected to uid</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionStorage.GetNonDuplicateUniqueIds">
            <summary>
            Obtains an array of the unique ids involved in connections
            </summary>
            <returns>array of unique ids</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionStorage.GetDifferentUniqueIds(Nevron.Diagram.NConnectionStorage)">
            <summary>
            Compares this collection with the specified collection and returns an array of the ids, which are members of connections not present in both collections
            </summary>
            <returns>array of different ids</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionStorage.ReplaceUniqueIds(System.Collections.Hashtable)">
            <summary>
            Replaces all connection ids using the specified map of ids
            </summary>
            <param name="mapUIds">map of ids</param>
        </member>
        <member name="M:Nevron.Diagram.NConnectionStorage.ImportConnections(Nevron.Diagram.NConnectionCollection)">
            <summary>
            Imports the connections from the specified collection in the storage
            </summary>
            <param name="connections">connection to import</param> 
        </member>
        <member name="M:Nevron.Diagram.NConnectionStorage.ExportConnections">
            <summary>
            Exports the connections contained in the storage as collection
            </summary>
            <returns>connection collection</returns>
        </member>
        <member name="P:Nevron.Diagram.NConnectionStorage.Connections">
            <summary>
            Xml serialization is achieved by exporting/importing the storage content as collection
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NContentAlignment">
            <summary>
            Represents the alignment of a point relative to some rectangle
            </summary>
            <remarks>
            The alignment is stored in percents. (0, 0) is the MiddleCenter, (-50,-50) is the TopLeft and (50, 50) is BottomRight
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NContentAlignment.#ctor(System.Single,System.Single)">
            <summary>
            Initialized the alignment with the specified percents
            </summary>
            <param name="percentX"></param>
            <param name="percentY"></param>
        </member>
        <member name="M:Nevron.Diagram.NContentAlignment.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Initialized the alignment with the position of the point relative to the specified rect
            </summary>
            <param name="point"></param>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Diagram.NContentAlignment.#ctor(System.Drawing.ContentAlignment)">
            <summary>
            Initialized the alignment with the specified content alignment
            </summary>
            <param name="alignment"></param>
        </member>
        <member name="M:Nevron.Diagram.NContentAlignment.op_Equality(Nevron.Diagram.NContentAlignment,Nevron.Diagram.NContentAlignment)">
            <summary>
            Determines whether a is equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NContentAlignment.op_Inequality(Nevron.Diagram.NContentAlignment,Nevron.Diagram.NContentAlignment)">
            <summary>
            Determines whether a is not equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NContentAlignment.GetHashCode">
            <summary>
            Overriden because Equals was overriden
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NContentAlignment.Equals(System.Object)">
            <summary>
            Overriden to compare the scale factors
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NContentAlignment.Align(System.Drawing.ContentAlignment)">
            <summary>
            Resets the alignment percents to represent the specified content alignment
            </summary>
            <param name="alignment"></param>
        </member>
        <member name="M:Nevron.Diagram.NContentAlignment.GetAlignPoint(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Obtains a point aligned to the provided rectangle
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NContentAlignment.SetAlignPoint(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Resets the alignment percents in accordance with the point position in the specified rectangle
            </summary>
            <param name="point"></param>
            <param name="rect"></param>
        </member>
        <member name="P:Nevron.Diagram.NContentAlignment.PercentX">
            <summary>
            Gets/sets the X percent alignment
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NContentAlignment.PercentY">
            <summary>
            Gets/sets the Y percent alignment
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NGenericList`1">
            <summary>
            NGenericList
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NGenericList`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NGenericList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializer constructor
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Nevron.Diagram.NGenericList`1.#ctor(System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Nevron.Diagram.NGenericList`1.Clone">
            <summary>
            Creates a shallow copy of the current list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NGenericList`1.AddNoDuplicates(`0)">
            <summary>
            Adds a non duplicate vertex to the list
            </summary>
            <param name="value">vertex to add</param>
            <returns>The zero-based index at which the new vertex is inserted, or -1 if it already exists in the list</returns>
        </member>
        <member name="M:Nevron.Diagram.NGenericList`1.AddRangeNoDuplicates(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Copies the elements of the specified collection to the end of this collection and does not add any duplicate entries
            </summary>
            <param name="value">vertex collection</param>
        </member>
        <member name="T:Nevron.Diagram.NInteractionStyle">
            <summary>
            The NInteractionStyle structure is used to define the aspects of a shape,
            which can be edited via trackers when the shape is selected.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NInteractionStyle.#ctor(Nevron.Diagram.InteractionStyleMask)">
            <summary>
            Initializer constructor
            </summary>
            <param name="mask">mask with which to initialize the style</param>
        </member>
        <member name="P:Nevron.Diagram.NInteractionStyle.Bounds">
            <summary>
            Edit bounds
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NInteractionStyle.RotatedBounds">
            <summary>
            Edit rotated bounds
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NInteractionStyle.Rotation">
            <summary>
            Edit rotation
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NInteractionStyle.PinPoint">
            <summary>
            Edit pin position
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NInteractionStyle.GeometryPoints">
            <summary>
            Edit geometry base and control points
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NInteractionStyle.GeometryMidPoints">
            <summary>
            Edit Geometry mid points
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NInteractionStyle.ShapePlugs">
            <summary>
            Edit shape plugs (e.g. start and end plugs)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NInteractionStyle.ShapeControlPoints">
            <summary>
            Edit shape control points
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NInteractionStyle.None">
            <summary>
            None
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NInteractionStyle.All">
            <summary>
            All 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NInteractionStyle.Mask">
            <summary>
            Gets/sets the mask used to control the interaction style settings
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NInteractionStyle.Shape1D">
            <summary>
            Default interaction style for 1D shapes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NInteractionStyle.Shape2D">
            <summary>
            Default interaction style for 2D shapes
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NMargins">
            <summary>
            Represents the margins of some content relative to some rectangle
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NMargins.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes the margins with the specified values
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="top"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:Nevron.Diagram.NMargins.#ctor(System.Single)">
            <summary>
            Initializes all margins with the specified value
            </summary>
            <param name="all"></param>
        </member>
        <member name="M:Nevron.Diagram.NMargins.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            
            </summary>
            <param name="converter"></param>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:Nevron.Diagram.NMargins.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NMargins.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.NMargins.All">
            <summary>
            Gets/sets all margins
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NMargins.Left">
            <summary>
            Gets/sets the left margin
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NMargins.Right">
            <summary>
            Gets/sets the right margin
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NMargins.Top">
            <summary>
            Gets/sets the top margin
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NMargins.Bottom">
            <summary>
            Gets/sets the bottom margin
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NMargins.PercentInflateRectangle(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Inflates the rectangle with the contained margins (in percents)
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NMargins.PercentDeflateRectangle(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Deflates the rectangle with the contained margins (in percents)
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NMargins.InflateRectangle(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Inflates the specified rectangle with the contained margins
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NMargins.DeflateRectangle(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Deflates the specified rectangle with the contained margins
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NMargins.OnlyPositive">
            <summary>
            Detemines whether all margins are non negative
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Diagram.NMargins.Empty">
            <summary>
            Empty margins (all margins are equal to 0)
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NPageSettings">
            <summary>
            Represents an extraction of the settings, which can be applied on PageSettings
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPageSettings.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPageSettings.#ctor(Nevron.Diagram.NPageSettings)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.NPageSettings.#ctor(System.Drawing.Printing.PageSettings)">
            <summary>
            Initializes with the specified page settings
            </summary>
            <param name="pageSettings"></param>
        </member>
        <member name="M:Nevron.Diagram.NPageSettings.Clone">
            <summary>
            Creates an identical copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.NPageSettings.Color">
            <summary>
            Represents the PageSettings Color setting
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPageSettings.Landscape">
            <summary>
            Represents the PageSettings Landscape setting
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPageSettings.MarginsLeft">
            <summary>
            Represents the PageSettings.Margins.Left setting
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPageSettings.MarginsRight">
            <summary>
            Represents the PageSettings.Margins.Right setting
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPageSettings.MarginsTop">
            <summary>
            Represents the PageSettings.Margins.Top setting
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPageSettings.MarginsBottom">
            <summary>
            Represents the PageSettings.Margins.Bottom setting
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPageSettings.PaperName">
            <summary>
            Represents the PageSettings.PaperSize.PaperName setting
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPageSettings.PaperKind">
            <summary>
            Represents the PageSettings.PaperSize.Kind setting
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPageSettings.PaperWidth">
            <summary>
            Represents the PageSettings.PaperSize.Width setting
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPageSettings.PaperHeight">
            <summary>
            Represents the PageSettings.PaperSize.Height setting
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPageSettings.Apply(System.Drawing.Printing.PageSettings)">
            <summary>
            Applies the settings to the specified PageSettings
            </summary>
            <param name="pageSettings">PageSettings to apply this settings to</param>
        </member>
        <member name="M:Nevron.Diagram.NPageSettings.InitFromPageSettings(Nevron.Diagram.NPageSettings)">
            <summary>
            Initializes the page settings from another page settings instance
            </summary>
            <param name="source">source graphics settings instance</param>
        </member>
        <member name="T:Nevron.Diagram.NPointInfo">
            <summary>
            The NPointInfo class is uses to store the dymamically assembled information for geometry and shape points
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPointInfo.#ctor(Nevron.Diagram.PointType)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPointInfo.Type">
            <summary>
            Type of the point
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPointInfo.OwnerElement">
            <summary>
            Reference to the element, which provided information about the point. 
            In case of a shape point this can be a reference to a plug, port or control point.
            In case of geometry point this can be a reference to a model.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPointInfo.OwnerShape">
            <summary>
            Reference to the shape to which the point belongs. 
            In case of a shape point this is the shape to which the point belongs.
            In case of a geometry point this is the shape in which the model resides.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPointInfo.Index">
            <summary>
            Index of the point.
            In case this is a port or control shape point this is the index of the shape point inside its collection.
            In case of a start plug this is 0.
            In case of an end plug this is 1.
            In case of geometry base or control point this is the index of the point.
            In case of geometry segment mid point this is the index of the segment.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPointInfo.Location">
            <summary>
            Location (in scene coordinates)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPointInfo.Tooltip">
            <summary>
            Tooltip associated with the point
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPointInfo.CanMoveX">
            <summary>
            Specifies whether the point is X moveable
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPointInfo.CanMoveY">
            <summary>
            Specifies whether the point is Y moveable
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NReflexRequirements">
            <summary>
            An instance of this class is used to encapsulate the requirements of a reflexive shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NReflexRequirements.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NReflexRequirements.ReflectedShape">
            <summary>
            Reflexted shape
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NReflexRequirements.Start">
            <summary>
            Start point
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NReflexRequirements.End">
            <summary>
            End point
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NTextPaintInfo">
            <summary>
            Encapsulates text paint information
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTextPaintInfo.Corners">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTextPaintInfo.GetBasisPoints">
            <summary>
            Returns the points that serve as coordinate system for this paint info
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTextPaintInfo.GetBasisPoints(System.Single)">
            <summary>
            Returns the points that serve as coordinate system for this paint info
            </summary>
            <param name="rotation"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NTextPaintInfo.InitFromBasisPoints(Nevron.GraphicsCore.NPointF[],System.Boolean)">
            <summary>
            Initializes the text info from basis points
            </summary>
            <param name="points"></param>
            <param name="allowDownwardOrientation"></param>
        </member>
        <member name="M:Nevron.Diagram.NTextPaintInfo.GetModelRect">
            <summary>
            Gets the rectangle in the text rendering local coordinate system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NTextPaintInfo.NeedsTransform">
            <summary>
            Determines whether this paint info needs to alter the device transform for the text to be rendered correctly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NTextPaintInfo.TransformDeviceIfNeeded(Nevron.GraphicsCore.IN2DDevice)">
            <summary>
            Transform the specified device, if needed. 
            Returns a device state cookie that can be used to restore the previous device transform.
            If the returned cookie is -1, then the device was not transformed.
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NTextPaintInfo.TransformDeviceIfNeeded(Nevron.GraphicsCore.IN2DDevice,System.Single,System.Single)">
            <summary>
            Transform the specified device, if needed. 
            Returns a device state cookie that can be used to restore the previous device transform.
            If the returned cookie is -1, then the device was not transformed.
            </summary>
            <param name="device"></param>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Diagram.NTextPaintInfo.Size">
            <summary>
            Text size
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NTextPaintInfo.Origin">
            <summary>
            Text origin
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NTextPaintInfo.Orientation">
            <summary>
            Text orientation (in degrees)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NTextPaintInfo.FlipY">
            <summary>
            Y Flipping of local text coordinates
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NTextPaintInfo.Mode">
            <summary>
            Mode in which the text must be displayed
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NTransactionResult">
            <summary>
            Transaction result information
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTransactionResult.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="transactionName"></param>
        </member>
        <member name="P:Nevron.Diagram.NTransactionResult.TransactionName">
            <summary>
            Gets/sets the transaction name with which the batch result is associated
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTransactionResult.Status">
            <summary>
            Indicates the current state of the batch result
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTransactionResult.ErrorLog">
            <summary>
            Error log
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTransactionResult.Succeeded">
            <summary>
            Determines whether the transaction was successful
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTransactionResult.Combine(Nevron.Diagram.NTransactionResult,System.Boolean)">
            <summary>
            Combines the result of this batch with the result of another batch
            </summary>
            <param name="batchResult">result of another batch operation</param>
            <param name="rollbackOnFail">whether the batch to which this result belongs, must also fail, if the other batch failed 
            </param>
        </member>
        <member name="M:Nevron.Diagram.NTransactionResult.LogError(Nevron.Dom.INNode,System.Exception)">
            <summary>
            Logs an error, which occured when performing an action on a single node in the batch
            </summary>
            <param name="node"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Nevron.Diagram.NTransactionResult.LogError(Nevron.Dom.INNode,System.String)">
            <summary>
            Logs an error, which occured when performing an action on a single node in the batch
            </summary>
            <param name="node"></param>
            <param name="error"></param>
        </member>
        <member name="M:Nevron.Diagram.NTransactionResult.LogError(Nevron.Dom.INNode,Nevron.Diagram.AbilitiesMask)">
            <summary>
            Logs an error, which occured due to the fact that the specified node did not had a specific permission
            </summary>
            <param name="node"></param>
            <param name="permission"></param>
        </member>
        <member name="M:Nevron.Diagram.NTransactionResult.LogError(System.Exception)">
            <summary>
            Logs an error, which occured when performing an action on a single node in the batch
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Nevron.Diagram.NTransactionResult.FormatMessage">
            <summary>
            Formats a string representation of this message
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NTranslationSlaves">
            <summary>
            The NTranslationSlaves structure is used to specify the shapes, which must be translated when the shape is translated
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTranslationSlaves.#ctor(Nevron.Diagram.TranslationSlavesMask)">
            <summary>
            Initializer constructor
            </summary>
            <param name="mask">mask with which to initialize</param>
        </member>
        <member name="P:Nevron.Diagram.NTranslationSlaves.ReflexiveShapes">
            <summary>
            Translate with shapes which reflex it (e.g. 1D shapes whose both plugs are connected to the shape)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTranslationSlaves.IncomingShapes">
            <summary>
            Translate with the incoming shapes (e.g. 1D shapes whose end plug is connected to the shape)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTranslationSlaves.OutgoingShapes">
            <summary>
            Translate with the outgoing shapes (e.g. 1D shapes whose start plug is connected to the shape)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTranslationSlaves.FromShape">
            <summary>
            Translate with the FROM shape (e.g. the shape to which the start plug is connected). Applicable for 1D shapes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTranslationSlaves.ToShape">
            <summary>
            Translate with the TO shape (e.g. the shape to which the end plug is connected)). Applicable for 1D shapes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTranslationSlaves.ConnectedShapes">
            <summary>
            Translate with all possible connected shapes (e.g. IncomingShapes + OutgoingShapes + FromShape + ToShape)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTranslationSlaves.DestinationShapes">
            <summary>
            Translate with destination shapes (e.g. the shapes which are connected to the end plug of outgoing shapes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTranslationSlaves.SourceShapes">
            <summary>
            Translate with source shapes (e.g. the shapes which are connected to the start plug of incoming shapes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTranslationSlaves.NeighbourShapes">
            <summary>
            Translate with neighbour shapes (e.g. DestinationShapes + SourceShapes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTranslationSlaves.PredecessorShapes">
            <summary>
            Translate with predecessor shapes (e.g. SourceShapes + the predecessor shapes of the source shapes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTranslationSlaves.SuccessorShapes">
            <summary>
            Translate with successor shapes (e.g. DestinationShapes + the successor shapes of the destination shapes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTranslationSlaves.AccessibleShapes">
            <summary>
            Translate with all accessible shapes (e.g. PredecessorShapes + SuccessorShapes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTranslationSlaves.None">
            <summary>
            None
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTranslationSlaves.All">
            <summary>
            All
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTranslationSlaves.Mask">
            <summary>
            Gets/sets the mask used to control the slaves
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTranslationSlaves.Intersect(Nevron.Diagram.NTranslationSlaves)">
            <summary>
            Intersects this slaves with the specified slaves. (Bitwise AND)
            </summary>
            <param name="slaves">slaves to intersect with</param>
        </member>
        <member name="M:Nevron.Diagram.NTranslationSlaves.Intersect(Nevron.Diagram.TranslationSlavesMask)">
            <summary>
            Intersects this slaves with the specified slaves mask. (Bitwise AND)
            </summary>
            <param name="mask">slaves mask to intersect with</param>
        </member>
        <member name="M:Nevron.Diagram.NTranslationSlaves.Union(Nevron.Diagram.NTranslationSlaves)">
            <summary>
            Unions this slaves with the specified slaves. (Bitwise OR)
            </summary>
            <param name="slaves">slaves to union with</param>
        </member>
        <member name="M:Nevron.Diagram.NTranslationSlaves.Union(Nevron.Diagram.TranslationSlavesMask)">
            <summary>
            Unions this slaves with the specified slaves mask. (Bitwise OR)
            </summary>
            <param name="mask">slaves mask to union with</param>
        </member>
        <member name="M:Nevron.Diagram.NTranslationSlaves.Difference(Nevron.Diagram.NTranslationSlaves)">
            <summary>
            Obtains the different slaves between this and the specified slaves.
            </summary>
            <param name="slaves">slaves to compare with</param>
        </member>
        <member name="M:Nevron.Diagram.NTranslationSlaves.Difference(Nevron.Diagram.TranslationSlavesMask)">
            <summary>
            Obtains the different slaves between this and the specified slaves mask.
            </summary>
            <param name="mask">slaves mask to compare with</param>
        </member>
        <member name="M:Nevron.Diagram.NTranslationSlaves.Contains(Nevron.Diagram.NTranslationSlaves)">
            <summary>
            Determines whether this slaves contains all of the specified slaves.
            </summary>
            <param name="slaves">slaves to check</param>
            <returns>true if this slaves contains all of the specified slaves, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NTranslationSlaves.Contains(Nevron.Diagram.TranslationSlavesMask)">
            <summary>
            Determines whether this slaves contains all of the specified slaves.
            </summary>
            <param name="mask">slaves mask to check</param>
            <returns>true if this slaves contains all of the specified slaves, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.DataImport.ShapeImportedDelegate">
            <summary>
            Delegate for events, which receive infromation about shapes imported from a data record
            </summary>
            <param name="dataSourceImporter">data source importer, from which the shape was imported</param>
            <param name="shape">shape which was imported</param>
            <param name="record">record for which the shape was imported (can be null)</param>
        </member>
        <member name="T:Nevron.Diagram.DataImport.INDataRecord">
            <summary>
            Implemented by data record value providers
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataImport.INDataRecord.GetColumnValue(System.String)">
            <summary>
            Gets the data record value for a given column name
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.DataImport.NDataSourceImporter">
            <summary>
            Serves as base class for tree and graph datasource importers
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NDataSourceImporter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataImport.NDataSourceImporter.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="E:Nevron.Diagram.DataImport.NDataSourceImporter.ImportStarted">
            <summary>
            Raised when the import has started
            </summary>
        </member>
        <member name="E:Nevron.Diagram.DataImport.NDataSourceImporter.ImportSucceeded">
            <summary>
            Raised when the import has ended successfully
            </summary>
        </member>
        <member name="E:Nevron.Diagram.DataImport.NDataSourceImporter.ImportFailed">
            <summary>
            Raised when the import has ended unsuccessfully
            </summary>
        </member>
        <member name="E:Nevron.Diagram.DataImport.NDataSourceImporter.VertexImported">
            <summary>
            Raised when a vertex shape has been generated by the importer
            </summary>
        </member>
        <member name="E:Nevron.Diagram.DataImport.NDataSourceImporter.EdgeImported">
            <summary>
            Raised when an edge shape has been generated by the importer
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NDataSourceImporter.Import">
            <summary>
            Must override to perform the import
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NDataSourceImporter.GetImportedVertexShapes">
            <summary>
            Gets a list of the imported vertex shapes. 
            Call this method only while the data source importer is in importing state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NDataSourceImporter.GetImportedEdgeShapes">
            <summary>
            Gets a list of the imported edge shapes. 
            Call this method only while the data source importer is in importing state.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.DataImport.NDataSourceImporter.Document">
            <summary>
            Gets/sets the document in which the data source is imported. 
            By default the shapes are imported in the active layer of the specified document.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataImport.NDataSourceImporter.TransactionName">
            <summary>
            Gets/sets the name of the transaction, 
            which will be recorded in the document as a result of the import operation
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataImport.NDataSourceImporter.VertexShapesFactory">
            <summary>
            Gets/sets factory which must create shapes for the generated vertices.
            This property must be set to a valid instance before you call the Import method.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataImport.NDataSourceImporter.VertexShapesName">
            <summary>
            Gets/sets the name of the vertex shapes, which are created from the vertex shapes factory.
            This property must be set to a valid shape name for the chosen VertexShapesFactory.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataImport.NDataSourceImporter.VertexStyleSheetName">
            <summary>
            Gets/sets the name of the style sheet to apply to imported vertices
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataImport.NDataSourceImporter.EdgeShapesFactory">
            <summary>
            Gets/sets factory which must create shapes for the generated edges.
            If this property left unassigned the importer will generate NRoutableConnector edges.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataImport.NDataSourceImporter.EdgeShapesName">
            <summary>
            Gets/sets the name of the edge shapes, which are created from the edge shapes factory.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataImport.NDataSourceImporter.EdgeStyleSheetName">
            <summary>
            Gets/sets the name of the style sheet to apply to impoterd edges
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataImport.NDataSourceImporter.Layout">
            <summary>
            Gets/sets the layout, which must be applied to the imported shapes. 
            If set to null the data source importer will not layout the imported shapes.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataImport.NDataSourceImporter.Importing">
            <summary>
            Determines whether the data source importer is currently importing shapes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NDataSourceImporter.ValidateImport">
            <summary>
            Validates the import operation. Throws an exception if the import cannot be performed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NDataSourceImporter.OnImportStarted">
            <summary>
            Called when the import has started
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NDataSourceImporter.DoLayout">
            <summary>
            Performs the layout specified by the Layout property to the currently imported shapes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NDataSourceImporter.CreateLayoutContext">
            <summary>
            Creates a layout context for the imported shapes layout
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NDataSourceImporter.OnImportEnded(System.Boolean)">
            <summary>
            Called when the import has ended
            </summary>
            <param name="succeeded"></param>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NDataSourceImporter.ResetState(System.Boolean)">
            <summary>
            Resets any importer state maintained during the import operation
            </summary>
            <param name="start"></param>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NDataSourceImporter.ImportVertex(Nevron.Diagram.NShape,Nevron.Diagram.DataImport.INDataRecord)">
            <summary>
            Imports the vertex shape, which was created for the specified data record and raises the VertexImported event.
            </summary>
            <param name="shape"></param>
            <param name="dataRecord"></param>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NDataSourceImporter.ImportEdge(Nevron.Diagram.NShape,Nevron.Diagram.NShape,Nevron.Diagram.NShape,Nevron.Diagram.DataImport.INDataRecord)">
            <summary>
            Imports an edge shape, which was created for the specified data record and raises the EdgeImported event
            </summary>
            <param name="shape"></param>
            <param name="fromShape"></param>
            <param name="toShape"></param>
            <param name="dataRecord"></param>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NDataSourceImporter.NewVertex">
            <summary>
            Creates a new vertex shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NDataSourceImporter.NewEdge">
            <summary>
            Creates a new edge
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.DataImport.NGraphDataSourceImporter">
            <summary>
            Represents a data source importer, which is designed to import graph data structures 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataImport.NGraphDataSourceImporter.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataImport.NGraphDataSourceImporter.VertexDataSource">
            <summary>
            Gets/sets the data source from which to import the graph vertices
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataImport.NGraphDataSourceImporter.EdgeDataSource">
            <summary>
            Gets/sets the data source from which to import the graph edges
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataImport.NGraphDataSourceImporter.VertexIdColumnName">
            <summary>
            Gets/sets the name of the column in the vertex data source,
            which uniquely identifies each vertex
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataImport.NGraphDataSourceImporter.FromVertexIdColumnName">
            <summary>
            Gets/sets the name of the column in the edge data source, 
            which references the FROM vertex of the edge in the vertex data source.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataImport.NGraphDataSourceImporter.ToVertexIdColumnName">
            <summary>
            Gets/sets the name of the column in the edge data source, 
            which references the TO vertex of the edge in the vertex data source.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NGraphDataSourceImporter.Import">
            <summary>
            Performs the import of the tree data structure
            </summary>
            <returns>true if import succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NGraphDataSourceImporter.ValidateImport">
            <summary>
            Validates the import operation. Throws an exception if the import cannot be performed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NGraphDataSourceImporter.ResetState(System.Boolean)">
            <summary>
            Resets any importer state maintained during the import operation
            </summary>
            <param name="start"></param>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NGraphDataSourceImporter.CreateVertexShape(Nevron.Diagram.DataImport.INDataRecord)">
            <summary>
            Creates a vertex shape for the specified data record
            </summary>
            <param name="dataRecord"></param>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NGraphDataSourceImporter.CreateEdgeShape(Nevron.Diagram.DataImport.INDataRecord)">
            <summary>
            Creates an edge shape for the specified data record
            </summary>
            <param name="dataRecord"></param>
        </member>
        <member name="T:Nevron.Diagram.DataImport.NTreeDataSourceImporter">
            <summary>
            Represents a data source importer, which is designed to import tree data structures
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NTreeDataSourceImporter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataImport.NTreeDataSourceImporter.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NTreeDataSourceImporter.Import">
            <summary>
            Performs the import of the tree data structure
            </summary>
            <returns>true if import succeeded, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.DataImport.NTreeDataSourceImporter.DataSource">
            <summary>
            Gets/sets the data source from which to import the tree vertices
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataImport.NTreeDataSourceImporter.IdColumnName">
            <summary>
            Gets/sets the Id column name.
            The Id column in the data source must identify each record uniquely.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataImport.NTreeDataSourceImporter.ParentIdColumnName">
            <summary>
            Gets/sets the ParentId column name. 
            The ParentId column must contain the Id of record which is considered as parent parent record.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataImport.NTreeDataSourceImporter.CollapsibleSubtrees">
            <summary>
            If set to true all nodes in the diagram (except for the leafs of the tree)
            will have a show-hide subtree decorator.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NTreeDataSourceImporter.ValidateImport">
            <summary>
            Validates the import operation. Throws an exception if the import cannot be performed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NTreeDataSourceImporter.ResetState(System.Boolean)">
            <summary>
            Resets any importer state maintained during the import operation
            </summary>
            <param name="start"></param>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NTreeDataSourceImporter.CreateVertexShape(Nevron.Diagram.DataImport.INDataRecord)">
            <summary>
            Creates a vertex shape for the specified data record
            </summary>
            <param name="dataRecord"></param>
        </member>
        <member name="M:Nevron.Diagram.DataImport.NTreeDataSourceImporter.CreateEdgeShape(Nevron.Diagram.NShape,Nevron.Diagram.NShape)">
            <summary>
            Creates an edge shape which links the specified parent and child shapes
            </summary>
            <param name="parentShape"></param>
            <param name="childShape"></param>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NGraphBarycenterCrossingReductor">
            <summary>
            Implememnts the barycenter method for the layer-by-layer crossing reduction problem.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphBarycenterCrossingReductor.#ctor(Nevron.Diagram.DataStructures.NGraphVertexList,Nevron.Diagram.DataStructures.NGraphVertexList)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="layer1">The first layer of vertices.</param>
            <param name="layer2">The second layer of vertices.</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphBarycenterCrossingReductor.ReduceCrossings">
            <summary>
            Reduces the edge crossings in the given bipartite graph and returns the
            number of crosings after the reduction.
            </summary>
            <returns>The total number of crossings after the reduction process.</returns>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NGraphCrossingReductorBase">
            <summary>
            The base class for all crossing reductors for bipartite graphs.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphCrossingReductorBase.#ctor(Nevron.Diagram.DataStructures.NGraphVertexList,Nevron.Diagram.DataStructures.NGraphVertexList)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="layer1">The first layer of vertices.</param>
            <param name="layer2">The second layer of vertices.</param>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphCrossingReductorBase.DefaultOrder">
            <summary>
            Gets the defaul vertex order for the second layer (i.e. 1, 2, 3, ..., N).
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphCrossingReductorBase.ReduceCrossings">
            <summary>
            Reduces the edge crossings in the given bipartite graph and returns the
            number of crosings after the reduction.
            </summary>
            <returns>The total number of crossings after the reduction process.</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphCrossingReductorBase.IsFixed(System.Int32)">
            <summary>
            Returns true if the specified position in Layer2 contains a vertex with
            a fixed IndexInLayer defined by the user.
            </summary>
            <param name="vertexIndex">The index of the position to check.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphCrossingReductorBase.SetFixedVertices(System.Int32[])">
            <summary>
            Sets the vertices with fixed positions and returns the total number of
            fixed vertices.
            </summary>
            <param name="order">The vertex order.</param>
            <returns>The total number of fixed vertices.</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphCrossingReductorBase.GetNumberOfCrossings">
            <summary>
            Gets the number of crossings for the initial ordering of layer 2, i.e. 0, 1, 2, ..., n.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphCrossingReductorBase.GetNumberOfCrossings(System.Int32[])">
            <summary>
            Calculates the number of crossings between 2 layers using the 
            edge-crossing matrix.
            </summary>
            <param name="order">The order of the vertices in the second layer.</param>
            <remarks>The matrix is iterated through from bottom to top. We find
            the index of the first cell containig true on the current row and then 
            we increase the number of edge crossings by the number of the cells that 
            contain true and which index is greater than the index of the first cell 
            containing true on the current row. After that we move to the upper row 
            and repeat the whole procedure. And so on until we reach row 1.</remarks>
            <returns>The number of edge crossings between 2 adgjacent layers.</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphCrossingReductorBase.ApplyOrderToLayer(Nevron.Diagram.DataStructures.NGraphVertexList,System.Int32[])">
            <summary>
            Applies a new order of the vertices for a given layer.
            </summary>
            <param name="layer">The layer to be reordered.</param>
            <param name="order">The new order. The meaning of the array is as follows:
            in order[0] is stored the index in Layer2 of the vertex that should be first,
            in order[2] is the index of the vertex that should be second in the final
            ordering and so no.</param>
        </member>
        <member name="F:Nevron.Diagram.DataStructures.NGraphCrossingReductorBase.m_nVertexCount1">
            <summary>
            The number of vertices in layer 1.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DataStructures.NGraphCrossingReductorBase.m_nVertexCount2">
            <summary>
            The number of vertices in layer 2.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NGraphFullCrossingReductor">
            <summary>
            Investigates all possible permutations and provides an optimal solution
            for the one sided crossing reduction problem.
            </summary>
            <remarks>
            Note that finding an optimal solution is an NP-hard problem and requires
            N! time where N is the number of vertices in the non-fixed layer. Use this
            method for no more than 8 vertices.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphFullCrossingReductor.#ctor(Nevron.Diagram.DataStructures.NGraphVertexList,Nevron.Diagram.DataStructures.NGraphVertexList)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="layer1">The first layer of vertices.</param>
            <param name="layer2">The second layer of vertices.</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphFullCrossingReductor.ReduceCrossings">
            <summary>
            Reduces the edge crossings in the given bipartite graph and returns the
            number of crosings after the reduction.
            </summary>
            <returns>The total number of crossings after the reduction process.</returns>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NGraphGeneticCrossingReductor">
            <summary>
            Solves the crossing reduction problem by using genetic algorithm.
            </summary>
            <remarks>
            Through some tests the optimal parameters of the genetic algorithm were
            determined as follows:
            Population Size = 50
            Mutation Rate   = 0.03
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphGeneticCrossingReductor.#ctor(Nevron.Diagram.DataStructures.NGraphVertexList,Nevron.Diagram.DataStructures.NGraphVertexList)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="layer1">The first layer of vertices.</param>
            <param name="layer2">The second layer of vertices.</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphGeneticCrossingReductor.ReduceCrossings">
            <summary>
            Reduces the edge crossings in the given bipartite graph and returns the
            number of crosings after the reduction.
            </summary>
            <returns>The total number of crossings after the reduction process.</returns>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NShortestPathDijkstra">
            <summary>
            Implements a generalized Dijkstra's algorithm to calculate the shortest path problem.
            </summary>
            <remarks>
            For this algorithm, all nodes should be provided, and handled in the delegate methods,
            including the start and finish nodes.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NShortestPathDijkstra.#ctor(System.Int32,Nevron.Diagram.DataStructures.NShortestPathDijkstra.InternodeTraversalCost)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="nodeCount">The total number of nodes in the graph.</param>
            <param name="traversalCost">The delegate that can provide the cost of a transition 
            between any two nodes.</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NShortestPathDijkstra.#ctor(System.Int32,Nevron.Diagram.DataStructures.NShortestPathDijkstra.InternodeTraversalCost,Nevron.Diagram.DataStructures.NShortestPathDijkstra.NearbyNodesHint)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="nodeCount">The total number of nodes in the graph.</param>
            <param name="traversalCost">The delegate that can provide the cost of a transition 
            between any two nodes.</param>
            <param name="hint">An optional delegate that can provide a small subset of nodes
            that a given node may be connected to.</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NShortestPathDijkstra.GetShortestPath(System.Int32)">
            <summary>
            Performs the Dijkstra algorithm on the data provided when the 
            <see cref="T:Nevron.Diagram.DataStructures.NShortestPathDijkstra"/> object was instantiated.
            </summary>
            <param name="start">The node to use as a starting location.</param>
            <returns>The indexes of the vertices on the shortest path.</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NShortestPathDijkstra.GetShortestPath(System.Int32,System.Int32)">
            <summary>
            Uses Dijkstra's algorithm to find the shortest path from one node to another (including them both).
            Returns an empty array if the nodes are not connected.
            </summary>
            <param name="start">The node to use as a starting location.</param>
            <param name="finish">The node to use as a finishing location.</param>
            <returns>The indexes of the vertices on the shortest path.</returns>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NShortestPathDijkstra.NearbyNodesHint">
            <summary>
            An optional delegate that can help optimize the algorithm
            by showing it a subset of nodes to consider.  Very useful
            for limited connectivity graphs. (like pixels on a screen!)
            </summary>
            <param name="startingNode">The node that is being traveled away FROM.</param>
            <returns>
            An array of nodes that might be reached from the <paramref name="startingNode"/>.
            </returns>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NShortestPathDijkstra.InternodeTraversalCost">
            <summary>
            Determines the cost of moving from a given node to another given node.
            <para>
            The cost of the transition from <paramref name="start"/> to
            <paramref name="finish"/>, or <see cref="F:System.Int32.MaxValue"/>
            if the transition is impossible (i.e. there is no edge between 
            the two nodes).
            </para>
            </summary>
            <param name="start">The node being moved away from.</param>
            <param name="finish">The node that may be moved to.</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NPTreeVertex.#ctor(System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="indexInG">The index of the vertex in the graph.</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NPTreeVertex.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="indexInG">The index of the vertex in the graph.</param>
            <param name="treeLevel">The level in the tree at which the vertex is situated.</param>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NGraphAdapter">
            <summary>
            The NGraphAdapter class is used to abstract users 
            from the actual way in which the specified objects form graphs.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphAdapter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphAdapter.GetType(System.Object)">
            <summary>
            Gets the graph part type, which the object must represent (in case it is a graph part)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphAdapter.GetEdgeSource(System.Object)">
            <summary>
            For an edge object, returns its source
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphAdapter.GetEdgeDestination(System.Object)">
            <summary>
            For an edge object, returns its destination
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphAdapter.GetIncomingEdges(System.Object)">
            <summary>
            For a vertex object, returns a list of its incomming edges
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphAdapter.GetOutgoingEdges(System.Object)">
            <summary>
            For a vertex object, returns a list of its outgoing edges
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NGraphBuilder">
            <summary>
            The NGraphBuilder class is used for the construction of a graph,
            which represents a single or multiple connected object regions.
            </summary>
            <remarks>
            The graph builder takes two arguments - a graph adapter, 
            which abstracts the builder from the way in which the objects form graphs and 
            a graph part factory, which outsources the creation of vertices and edges.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphBuilder.#ctor(Nevron.Diagram.DataStructures.NGraphAdapter,Nevron.Diagram.DataStructures.NGraphPartFactory)">
            <summary>
            Initializer constructor
            </summary>
            <param name="adapter"></param>
            <param name="factory"></param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphBuilder.BuildGraph(System.Object,Nevron.Diagram.DataStructures.NObjectGraphPartMap@)">
            <summary>
            Builds a graph, which represents the connected region of the specified vertex object
            </summary>
            <param name="obj">object from which the graph must be built</param>
            <param name="map">resulting mapping of objects to graph parts</param>
            <returns>graph</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphBuilder.BuildGraphs(Nevron.Collections.NList,Nevron.Diagram.DataStructures.NObjectGraphPartMap@)">
            <summary>
            Builds graphs, which represent the connected regions of the specified objects
            </summary>
            <param name="objects">objects</param>
            <param name="map">resulting mapping of objects to graph parts</param>
            <returns>array of graphs</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphBuilder.BuildTree(System.Object,Nevron.Diagram.DataStructures.NObjectGraphPartMap@)">
            <summary>
            Builds a tree, which represents the subtree of the specified object
            </summary>
            <param name="obj">root object</param>
            <param name="map">resulting mapping of objects to graph parts</param>
            <returns>tree</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphBuilder.BuildTrees(Nevron.Collections.NList,Nevron.Diagram.DataStructures.NObjectGraphPartMap@)">
            <summary>
            Builds trees from the connected regions of the specified objects
            </summary>
            <param name="objects">list of objects from which to build the tree</param>
            <param name="map">resulting mapping of objects to graph parts</param>
            <returns>array of trees</returns>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphBuilder.Adapter">
            <summary>
            Gets/sets the adapter, which the builder uses to reveal the objects graph relations
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphBuilder.Factory">
            <summary>
            Gets/sets the factory, which the builder uses to create graph parts
            </summary>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NGraphPartFactory">
            <summary>
            The NGraphPartFactory class is used by the graph builder 
            for the actual construction of graph parts
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphPartFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphPartFactory.CreateGraphVertex(System.Object)">
            <summary>
            Called to create a graph vertex associated with the specified object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphPartFactory.CreateGraphEdge(System.Object)">
            <summary>
            Called to create a graph edge associated with the specified object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphPartFactory.CreateTreeVertex(System.Object)">
            <summary>
            Called to create a tree vertex associated with the specified object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphPartFactory.CreateTreeEdge(System.Object)">
            <summary>
            Called to create a tree edge associated with the specified object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NObjectGraphPartMap">
            <summary>
            The NObjectGraphPartMap class, represents a mapping between a logical object and a graph part.
            An instance of this class is produced by graph and tree builders.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NObjectGraphPartMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NObjectGraphPartMap.Map(System.Object,Nevron.Diagram.DataStructures.NGraphPart)">
            <summary>
            Creates a mapping, which links the specified object with the specified part
            </summary>
            <param name="obj"></param>
            <param name="part"></param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NObjectGraphPartMap.GetPartFromObject(System.Object)">
            <summary>
            Gets the graph part representing the specified object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NObjectGraphPartMap.GetObjectFromPart(Nevron.Diagram.DataStructures.NGraphPart)">
            <summary>
            Gets the object represented by the specified part
            </summary>
            <param name="part"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NObjectGraphPartMap.ContainsObject(System.Object)">
            <summary>
            Determines whether the specified object is contained in the map
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NObjectGraphPartMap.ContainsPart(Nevron.Diagram.DataStructures.NGraphPart)">
            <summary>
            Determines whether the specified part is contained in the map
            </summary>
            <param name="part"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NObjectGraphPartMap.RemoveObject(System.Object)">
            <summary>
            Removes an object from the map and destroys the object-part association
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NObjectGraphPartMap.RemovePart(Nevron.Diagram.DataStructures.NGraphPart)">
            <summary>
            Removes a part from the map and destroys the part-object association
            </summary>
            <param name="part"></param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NObjectGraphPartMap.GetPartsEnumerator">
            <summary>
            Gets an enumerator for the contained parts
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NObjectGraphPartMap.GetObjectsEnumerator">
            <summary>
            Gets an enumerator for the contained objects
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NShapeGraphAdapter">
            <summary>
            The NShapeGraphAdapter is used to adapt shapes and shapes connections as graph relations
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NShapeGraphAdapter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NShapeGraphAdapter.#ctor(System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="visibleOnly">specifies whether invisible shapes should be ignored from the layout</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NShapeGraphAdapter.#ctor(Nevron.Diagram.NGroup)">
            <summary>
            Creates a shape graph adapter which creates graphs only from the shapes in the specified group.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NShapeGraphAdapter.#ctor(Nevron.Dom.NNodeList)">
            <summary>
            Creates a shape graph adapter which creates graphs only from the shapes in the specified node list.
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NShapeGraphAdapter.GetType(System.Object)">
            <summary>
            Gets the graph part type, which the object must represent (in case it is a graph part)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NShapeGraphAdapter.GetEdgeSource(System.Object)">
            <summary>
            For an edge object, returns its source
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NShapeGraphAdapter.GetEdgeDestination(System.Object)">
            <summary>
            For an edge object, returns its destination
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NShapeGraphAdapter.GetIncomingEdges(System.Object)">
            <summary>
            For a vertex object, returns a list of its incomming edges
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NShapeGraphAdapter.GetOutgoingEdges(System.Object)">
            <summary>
            For a vertex object, returns a list of its outgoing edges
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NShapeGraphAdapter.EdgeOrder">
            <summary>
            Specifies the sorting order of the edges. By default set to Id.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NShapeGraphAdapter.CustomEdgeComparer">
            <summary>
            Gets/sets the custom edge comparer. Applicable when EdgeOrder is set to Custom.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NShapeGraphAdapter.Shapes">
            <summary>
            Specifies a list of shapes, which are explictly specified for graph adaption.
            A shape which is not part of this list is ignored.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NShapeGraphAdapter.VisibleOnly">
            <summary>
            Specifies whether only visible shapes should be adapted as graph parts.
            If set to true invisible shapes are ignored.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NShapeGraphAdapter.SortEdges(Nevron.Dom.NNodeList)">
            <summary>
            Sorts the specified list of edges 
            </summary>
            <param name="edges"></param>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NAccumulatingVisitor">
            <summary>
            The NAccumulatingVisitor class is used to accumulate the visited graph parts 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NAccumulatingVisitor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NAccumulatingVisitor.Visit(Nevron.Diagram.DataStructures.NGraphPart)">
            <summary>
            Overriden to accumulate the graph part in the respective array
            </summary>
            <param name="part"></param>
            <returns>true if visiting must continue, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NAccumulatingVisitor.Vertices">
            <summary>
            Gets the visited vertices
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NAccumulatingVisitor.Edges">
            <summary>
            Gets the visited edges
            </summary>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NBicomp">
            <summary>
            Decomposes a graph into its biconnected components and builds it
            block-cut tree, in which each node is a cut vertex or a biconnected component.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NBicomp.#ctor(Nevron.Diagram.DataStructures.NGraph)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="graph">The graph which block-cut tree to build.</param>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NBicomp.Tree">
            <summary>
            Gets the block-cut tree of the graph, in which each node is a cut vertex or
            a biconnected component.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NCountingVisitor">
            <summary>
            The NCountingVisitor is used to count the visited graph parts
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NCountingVisitor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NCountingVisitor.Visit(Nevron.Diagram.DataStructures.NGraphPart)">
            <summary>
            Overriden to increase the respective graph part counter
            </summary>
            <param name="part"></param>
            <returns>true if visiting must continue, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NCountingVisitor.VertexCount">
            <summary>
            Gets the count of visited vertices
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NCountingVisitor.EdgeCount">
            <summary>
            Gets the count of visited edges
            </summary>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NGraph">
            <summary>
            The NGraph class represents a graph
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraph.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraph.Vertices">
            <summary>
            Obtains a reference to the graph vertices
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraph.Edges">
            <summary>
            Obtains a reference to the graph edges
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraph.IsTree">
            <summary>
            Determines whether this graph is a tree (directed graph)
            </summary>
            <remarks>
            The graph is a tree if all vertices except one (the root) have only one incomming edge
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraph.IsConnected">
            <summary>
            Determines whether this is a connected graph (undirected graph)
            </summary>
            <remarks>
            The graph is connected if there is an undirected path between each pair of vertices in it
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraph.IsStronglyConnected">
            <summary>
            Determines whether this is a strongly connected digraph (directed graph)
            </summary>
            <remarks>
            The digraph is connected if there is a directed path between each pair of vertices in it
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraph.IsBiconnected">
            <summary>
            Determines whether this is a biconnected graph.
            </summary>
            <remarks>
            A biconnected graph is a nonseparable graph, meaning if any vertex were to be removed,
            the graph will remain connected.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraph.IsCyclic">
            <summary>
            Determines whether this is a cyclic digraph (directed graph)
            </summary>
            <remarks>
            The digraph is cyclic if it contains a directed cycle
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraph.IsPlanar">
            <summary>
            Checks whether this graph is planar.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraph.AddVertex(Nevron.Diagram.DataStructures.NGraphVertex)">
            <summary>
            Adds a vertex to the graph
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraph.RemoveVertex(Nevron.Diagram.DataStructures.NGraphVertex)">
            <summary>
            Removes the vertex from the graph
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraph.AddEdge(Nevron.Diagram.DataStructures.NGraphEdge)">
            <summary>
            Adds an edge to the graph
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraph.RemoveEdge(Nevron.Diagram.DataStructures.NGraphEdge)">
            <summary>
            Removes the edge from the graph
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraph.RemoveCycles">
            <summary>
            Removes the cycles in a cyclic directed graph by reversing some of the edges
            </summary>
            <returns>The reversed edges</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraph.ReverseEdges(Nevron.Diagram.DataStructures.NGraphEdgeList)">
            <summary>
            Reverses the specified list of edges
            </summary>
            <param name="edges">the edges to be reversed</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraph.FindEdge(Nevron.Diagram.GraphType,Nevron.Diagram.DataStructures.NGraphVertex,Nevron.Diagram.DataStructures.NGraphVertex)">
            <summary>
            Finds the edge, which connects the specified vertices
            </summary>
            <param name="graphType"></param> 
            <param name="fromVertex"></param>
            <param name="toVertex"></param>
            <returns>edge which connects the specified vetices, or null if such does not exist</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraph.DepthFirstTraversal(Nevron.Diagram.GraphType,Nevron.Diagram.DataStructures.NGraphPartVisitor,Nevron.Diagram.DataStructures.NGraphVertex)">
            <summary>
            Performs a depth first traversal visiting of the graph parts in this graph, starting from the specified vertex
            </summary>
            <param name="graphType">specifies the graph type</param>
            <param name="visitor">visitor to use</param>
            <param name="startVertex">vertex from which to start the traversal</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraph.BreadthFirstTraversal(Nevron.Diagram.GraphType,Nevron.Diagram.DataStructures.NGraphPartVisitor,Nevron.Diagram.DataStructures.NGraphVertex)">
            <summary>
            Performs a breath first traversal visiting of the graph parts in this graph, starting from the specified vertex
            </summary>
            <param name="graphType">specifies the graph type</param>
            <param name="visitor">visitor to use</param>
            <param name="startVertex">vertex from which to start the traversal</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraph.TopologicalOrderTraversal(Nevron.Diagram.DataStructures.NGraphPartVisitor)">
            <summary>
            Performs a topological order traversal of the graph parts in this graph (directed graph)
            </summary>
            <remarks>
            A topological traversal will traverse the vertices based on their topological sort order. 
            A topological sort order is such an order of the vertices of the graph in which for each pair of vertices (A, B),
            if B is a successor of A then B will be after A in the order. 
            </remarks>
            <param name="visitor">visitor to use</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraph.CreateDepthFirstSpanningTree(Nevron.Diagram.GraphType,Nevron.Diagram.DataStructures.NGraphVertex)">
            <summary>
            Creates a depth first spanning tree, by starting the traversal from the specified vertex
            </summary>
            <param name="graphType">graph type</param>
            <param name="startVertex">vertex from which to start the traversal</param>
            <returns>depth first spanning tree</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraph.CreateBreadthFirstSpanningTree(Nevron.Diagram.GraphType,Nevron.Diagram.DataStructures.NGraphVertex)">
            <summary>
            Creates a breadth first spanning tree, by starting the traversal from the specified vertex
            </summary>
            <param name="graphType">graph type</param>
            <param name="startVertex">vertex from which to start the traversal</param>
            <returns>breadth first spanning tree</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraph.CreateTopoligicalOrderTree">
            <summary>
            Creates a topological order tree
            </summary>
            <returns>topological order tree</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraph.GetShortestPath(Nevron.Diagram.DataStructures.NGraphVertex,Nevron.Diagram.DataStructures.NGraphVertex)">
            <summary>
            Returns the shortest path (if any) between the given vertices
            </summary>
            <param name="startVertex">The start vertex</param>
            <param name="endVertex">The end vertex</param>
            <returns>The vertices in the shortest path without the start and the end vertex</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraph.GetLongestPathLength(Nevron.Diagram.DataStructures.NGraphVertex,Nevron.Diagram.DataStructures.NGraphVertex)">
            <summary>
            Returns the longest path length between 2 vertices.
            </summary>
            <param name="fromVertex"></param>
            <param name="toVertex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraph.GetBiconnectedComponents">
            <summary>
            Returns the biconnected components of the graph, as well as the cut vertices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraph.GetSTOrdering(Nevron.Diagram.DataStructures.NGraphVertex,Nevron.Diagram.DataStructures.NGraphVertex)">
            <summary>
            Finds st-ordering of a biconnected graph.
            </summary>
            <param name="fromVertex">The s vertex.</param>
            <param name="toVertex">The t vertex.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraph.SupplementToBiconnectedGraph">
            <summary>
            Supplements the current graph to a biconnected one by adding a new vertex
            and connecting it to each biconnected component (but not to a cut vertex in it).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraph.ComputePlanarEmbedding">
            <summary>
            Computes the planar emebedding of the graph if it is planar (i.e. fills the planarly
            ordered edge list of each vertex in anticlockwise direction) and returns true.
            Returns false if the graph is not planar.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraph.ToAdjacencyList(System.Boolean)">
            <summary>
            Returns the adjacency list representation of the graph.
            </summary>
            <param name="directed">Determines if the graph is regarded as directed or not.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraph.RestoreVertexTags(System.Collections.Generic.List{System.Object})">
            <summary>
            Restores the vertices tags
            </summary>
            <param name="tags"></param>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NGraphEdge">
            <summary>
            The NGraphEdge class represents an edge connecting two vertices
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphEdge.#ctor">
            <summary>
            Creates a new graph edge
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphEdge.#ctor(Nevron.Diagram.DataStructures.NGraphVertex,Nevron.Diagram.DataStructures.NGraphVertex)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fromVertex"></param>
            <param name="toVertex"></param>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphEdge.FromVertex">
            <summary>
            Gets/sets the edge FROM vertex
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphEdge.ToVertex">
            <summary>
            Gets the edge TO vertex
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphEdge.SelfLoop">
            <summary>
            Checks if the edge is a self-loop edge
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphEdge.Graph">
            <summary>
            Obtains a reference to the graph in which the edge resides
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphEdge.GetOtherVertex(Nevron.Diagram.DataStructures.NGraphVertex)">
            <summary>
            Gets the other vertex, which this edge connects 
            </summary>
            <param name="vertex">from or to vertex</param>
            <returns>other vertex</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphEdge.GetPartType">
            <summary>
            Overriden to return GraphPartType.Edge
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphEdge.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NGraphEdgeList">
            <summary>
            The NGraphEdgeList class represents a typed list of NGraphEdge instances
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphEdgeList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphEdgeList.#ctor(System.Collections.Generic.IEnumerable{Nevron.Diagram.DataStructures.NGraphEdge})">
            <summary>
            Initializer constructor
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphEdgeList.#ctor(System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphEdgeList.GetEdgesForVertex(Nevron.Diagram.DataStructures.NGraphVertex,System.Boolean)">
            <summary>
            Gets the edges that contain the given vertex.
            </summary>
            <param name="vertex"></param>
            <param name="fromVertex"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NGraphPart">
            <summary>
            The NGraphPart class servers as base class for graph edges, graph vertices, tree edges and tree vertices
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphPart.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphPart.Container">
            <summary>
            Gets the graph part container to which the part belongs
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphPart.Id">
            <summary>
            Gets the part id (automatically assigned when the part is added to a container)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphPart.Tag">
            <summary>
            Gets/sets custom data associated with the graph part
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphPart.GetPartType">
            <summary>
            Must override to define the part type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NGraphPartContainer">
            <summary>
            The NGraphPartContainer class serves as base class for graphs and trees
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphPartContainer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphPartContainer.GetPartById(System.Int32)">
            <summary>
            Gets the graph part by its id
            </summary>
            <param name="id">graph part id</param>
            <returns>graph part, or null if there is no part with this id</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphPartContainer.GetPartsEnumerator">
            <summary>
            Gets a parts enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphPartContainer.BeginUpdate">
            <summary>
            Begins the graph part container update
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphPartContainer.EndUpdate">
            <summary>
            Ends the graph part container update
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphPartContainer.InvalidateCashe">
            <summary>
            Invalidates all cashed information in the container and its parts
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphPartContainer.RegisterPart(Nevron.Diagram.DataStructures.NGraphPart)">
            <summary>
            Adds a part to the container
            </summary>
            <param name="part"></param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphPartContainer.UnregisterPart(Nevron.Diagram.DataStructures.NGraphPart)">
            <summary>
            Removes a part from the container
            </summary>
            <param name="part"></param>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphPartContainer.IsUpdating">
            <summary>
            Determines whether the graph part container is currently being updated
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphPartContainer.Cashe">
            <summary>
            Cashe for time consuming graph part container checks
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphPartContainer.CurAutoId">
            <summary>
            Gets/sets the current auto id which 
            will be assigned to the next part 
            added to the container
            </summary>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NGraphPartVisitor">
            <summary>
            The NGraphPartVisitor class is used to visit the parts of graphs and trees 
            and serves as base class for all types of graph part visitors
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphPartVisitor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphPartVisitor.Visit(Nevron.Diagram.DataStructures.NGraphPart)">
            <summary>
            Must override to visit the part
            </summary>
            <param name="part"></param>
            <returns>true if visiting must continue, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphPartVisitor.VisitEdges">
            <summary>
            Determines whether edges should be visited or not. By default set to true
            </summary>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NGraphVertex">
            <summary>
            The NGraphVertex class represents a vertex in a graph
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphVertex.#ctor">
            <summary>
            Creates a new graph vertex 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphVertex.IncomingEdges">
            <summary>
            Gets the graph vertex incoming edges (directed graph)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphVertex.OutgoingEdges">
            <summary>
            Gets the graph vertex outgoing edges (directed graph)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphVertex.Edges">
            <summary>
            Gets the edges connected to the graph vertex (undirected graph)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphVertex.IncomingEdgesCount">
            <summary>
            Gets the graph vertex incoming edges count (e.g. in-degree)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphVertex.OutgoingEdgesCount">
            <summary>
            Gets the graph vertex outgoing edges count (e.g. out-degree)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphVertex.EdgesCount">
            <summary>
            Gets the count of the edges connected to the graph vertex (e.g degree)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphVertex.SourceVertices">
            <summary>
            Gets the source vertices for this graph vertex (directed graph)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphVertex.DestinationVertices">
            <summary>
            Gets the destination vertices for this graph vertex (directed graph)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphVertex.NeighbourVertices">
            <summary>
            Gets the neighbour vertices for this graph vertex (undirected graph)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphVertex.SuccessorVertices">
            <summary>
            Gets all successor vertices of this vertex (directed graph)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphVertex.PredecessorVertices">
            <summary>
            Gets all predecessor vertices of this vertex (directed graph)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphVertex.AccessibleVertices">
            <summary>
            Gets all accessible vertices of this vertex (undirected graph)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NGraphVertex.Graph">
            <summary>
            Obtains a reference to the graph in which the vertex resides
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphVertex.GetPartType">
            <summary>
            Overriden to return GraphPartType.Vertex
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphVertex.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NGraphVertexDegreeComparer">
            <summary>
            The NGraphVertexDegreeComparer class implements the IComparer interface 
            and compares graph vertices by their degree
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphVertexDegreeComparer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphVertexDegreeComparer.Compare(Nevron.Diagram.DataStructures.NGraphVertex,Nevron.Diagram.DataStructures.NGraphVertex)">
            <summary>
            Returns -1 if v1 degree is smaller than v2 degree.
            Returns 1 if v1 degree is larger than v2 degree.
            Returns 0 if v1 degree is equal to v2 degree.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NGraphVertexList">
            <summary>
            The NGraphVertexList class represents a typed list of NGraphVertex instances
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphVertexList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphVertexList.#ctor(System.Collections.Generic.IEnumerable{Nevron.Diagram.DataStructures.NGraphVertex})">
            <summary>
            Initializer constructor
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphVertexList.#ctor(System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NGraphVertexList.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NTree">
            <summary>
            The NTree class represents a tree
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTree.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NTree.Vertices">
            <summary>
            Obtains a reference to the tree vertices
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NTree.Edges">
            <summary>
            Obtains a reference to the tree edges
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NTree.Root">
            <summary>
            Gets the tree root vertex
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NTree.IsBinary">
            <summary>
            Determines whether this is a binary tree. 
            </summary>
            <remarks>
            The tree is binary if each vertex in the tree has 0 or 2 children
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NTree.Height">
            <summary>
            Gets the height (i.e. the total number of layers) of the tree.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTree.FindEdge(Nevron.Diagram.DataStructures.NTreeVertex)">
            <summary>
            Returns the edge connecting the given child to its parent or null if the
            specified vertex is a root.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTree.AddVertex(Nevron.Diagram.DataStructures.NTreeVertex)">
            <summary>
            Adds a vertex to the tree
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTree.RemoveVertex(Nevron.Diagram.DataStructures.NTreeVertex)">
            <summary>
            Removes the vertex from the tree
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTree.AddEdge(Nevron.Diagram.DataStructures.NTreeEdge)">
            <summary>
            Adds an edge to the tree
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTree.RemoveEdge(Nevron.Diagram.DataStructures.NTreeEdge)">
            <summary>
            Removes the edge from the tree
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTree.GetVerticesAtLevel(System.Int32)">
            <summary>
            Obtains a list of the vertices at the specified level
            </summary>
            <param name="level">level of the tree - the root is at level 0</param>
            <returns>list of the vertices at the specified level</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTree.PostOrderTraversal(Nevron.Diagram.DataStructures.NGraphPartVisitor,Nevron.Diagram.DataStructures.NTreeVertex)">
            <summary>
            Performs a post order (depth first) traversal visiting of the parts in the tree, starting from the specified vertex
            </summary>
            <param name="visitor">visitor to use</param>
            <param name="startVertex">vertex from which to start the traversal</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTree.PreOrderTraversal(Nevron.Diagram.DataStructures.NGraphPartVisitor,Nevron.Diagram.DataStructures.NTreeVertex)">
            <summary>
            Performs a pre order (depth first) traversal visiting of the parts in the tree, starting from the specified vertex
            </summary>
            <param name="visitor">visitor to use</param>
            <param name="startVertex">vertex from which to start the traversal</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTree.BreadthFirstTraversal(Nevron.Diagram.DataStructures.NGraphPartVisitor,Nevron.Diagram.DataStructures.NTreeVertex)">
            <summary>
            Performs a breath first traversal visiting of the parts in the tree, starting from the specified vertex
            </summary>
            <param name="visitor">visitor to use</param>
            <param name="startVertex">vertex from which to start the traversal</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTree.InvalidateCashe">
            <summary>
            Overriden to invalidate the cashe of the contained vertices and edges
            </summary>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NTreeEdge">
            <summary>
            The NTreeEdge class represents an edge connecting two tree vertices
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeEdge.#ctor">
            <summary>
            Creates a new tree edge 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NTreeEdge.Parent">
            <summary>
            Gets the edge Parent vertex
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NTreeEdge.Child">
            <summary>
            Gets the edge Child vertex
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NTreeEdge.Tree">
            <summary>
            Obtains a reference to the tree in which the edge resides
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeEdge.GetOtherVertex(Nevron.Diagram.DataStructures.NTreeVertex)">
            <summary>
            Gets the other vertex, which this edge connects 
            </summary>
            <param name="vertex">child or parent vertex</param>
            <returns>other vertex</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeEdge.GetPartType">
            <summary>
            Overriden to return GraphPartType.Edge
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeEdge.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NTreeEdgeList">
            <summary>
            The NTreeEdgeList class represents a typed list of NTreeEdge instances
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeEdgeList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeEdgeList.#ctor(System.Collections.Generic.IEnumerable{Nevron.Diagram.DataStructures.NTreeEdge})">
            <summary>
            Initializer constructor
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeEdgeList.#ctor(System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NTreeVertex">
            <summary>
            The NTreeVertex class represents a vertex in a tree (tree item)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertex.#ctor">
            <summary>
            Creates a new tree vertex
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NTreeVertex.Root">
            <summary>
            Gets the root vertex
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NTreeVertex.Parent">
            <summary>
            Gets/sets the parent vertex
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NTreeVertex.Children">
            <summary>
            Gets a list of the children vertices
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NTreeVertex.Siblings">
            <summary>
            Obtains the children of this vertex parent. Returns null if the vertex does not have a parent
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NTreeVertex.Edges">
            <summary>
            Gets the list of edges, which connect this vertex with its children
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NTreeVertex.PrevSibling">
            <summary>
            Obtains the previous sibling of this vertex. Returns null if such does not exist
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NTreeVertex.NextSibling">
            <summary>
            Obtains the next sibling of this vertex. Returns null if such does not exist
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NTreeVertex.Level">
            <summary>
            Gets the level of this tree vertex from the root. The root vertex is with level 0
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NTreeVertex.Height">
            <summary>
            Gets the height of this tree vertex sub tree. If the vertex is a leaf (has no children) then its height is 0.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NTreeVertex.ChildrenCount">
            <summary>
            Gets the number of child vertices
            </summary>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NTreeVertex.Tree">
            <summary>
            Obtains a reference to the tree in which the vertex resides
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertex.GetPartType">
            <summary>
            Overriden to return GraphPartType.Vertex
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertex.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertex.FindEdgeWithChild(Nevron.Diagram.DataStructures.NTreeVertex)">
            <summary>
            Finds the edge, which connects this vertex with the specified child
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.DataStructures.NTreeVertexList">
            <summary>
            The NTreeVertexList class represents a typed list of NTreeVertex instances
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertexList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertexList.#ctor(System.Collections.ArrayList)">
            <summary>
            Shallow copy constructor
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertexList.#ctor(System.Collections.ICollection)">
            <summary>
            Shallow copy constructor
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertexList.Add(Nevron.Diagram.DataStructures.NTreeVertex)">
            <summary>
            Adds the tree vertex to the end of the collection
            </summary>
            <param name="value">tree vertex to add</param>
            <returns>The zero-based index at which the new tree vertex is inserted</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertexList.AddRange(Nevron.Diagram.DataStructures.NTreeVertex[])">
            <summary>
            Copies the elements of a tree vertex array to the end of the collection.
            </summary>
            <param name="value">tree vertex array</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertexList.AddRange(Nevron.Diagram.DataStructures.NTreeVertexList)">
            <summary>
            Copies the elements of a tree vertex list to the end of the collection.
            </summary>
            <param name="value">tree vertex list</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertexList.AddRange(System.Collections.ICollection)">
            <summary>
            Copies the elements of the specified collection to the end of this collection.
            </summary>
            <param name="value">tree vertex collection</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertexList.Contains(Nevron.Diagram.DataStructures.NTreeVertex)">
            <summary>
            Determines whether the specified tree vertex is in the collection
            </summary>
            <param name="value">tree vertex</param>
            <returns>true if tree vertex is found in the collection, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertexList.CopyTo(Nevron.Diagram.DataStructures.NTreeVertex[],System.Int32)">
            <summary>
            Copies the entire collection values to a one-dimensional array of tree vertexs, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array of tree vertexs that is the destination of the elements copied from collection. The Array must have zero-based indexing</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertexList.IndexOf(Nevron.Diagram.DataStructures.NTreeVertex)">
            <summary>
            Searches for the specified tree vertex and returns the zero-based index of the first occurrence within the collection
            </summary>
            <param name="value">the tree vertex to locate</param>
            <returns>index of the tree vertex</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertexList.Insert(System.Int32,Nevron.Diagram.DataStructures.NTreeVertex)">
            <summary>
            Inserts the tree vertex at the specified index
            </summary>
            <param name="index">index at which the tree vertex is inserted</param>
            <param name="value">the tree vertex to insert</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertexList.Remove(Nevron.Diagram.DataStructures.NTreeVertex)">
            <summary>
            Removes the first occurrence of a specific tree vertex from the collection
            </summary>
            <param name="value">tree vertex to remove</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertexList.Filter(Nevron.Filters.NFilter)">
            <summary>
            Filters the elements of this list and returns a new list in which all elements satisfy the filter criteria
            </summary>
            <param name="filter">filter to use, or null if no filter should be used</param>
            <returns>filtered list</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertexList.FilterCount(Nevron.Filters.NFilter)">
            <summary>
            Determines the count of elements in this array, which satisfy the specified filter
            </summary>
            <param name="filter">filter to apply</param>
            <returns>count on elements which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertexList.AddNoDuplicates(Nevron.Diagram.DataStructures.NTreeVertex)">
            <summary>
            Adds a non duplicate tree vertex to the list
            </summary>
            <param name="value">tree vertex to add</param>
            <returns>The zero-based index at which the new tree vertex is inserted, or -1 if it already exists in the list</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertexList.AddRangeNoDuplicates(System.Collections.ICollection)">
            <summary>
            Copies the elements of the specified collection to the end of this collection and does not add any duplicate entries
            </summary>
            <param name="value">tree vertex collection</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertexList.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the element of this list with the specified comparer
            </summary>
            <param name="comparer">comparer to use</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertexList.ToArray(System.Type)">
            <summary>
            Copies the elements of this list to a new array of the specified type.
            </summary>
            <param name="type">he type of array to create and copy elements to.</param>
            <returns>an array of the specified type containing copies of the elements in this list</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertexList.RemoveRange(System.Collections.ICollection)">
            <summary>
            Removes the specified range of elements from the collection
            </summary>
            <param name="value">tree vertex collection</param>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertexList.IntersectsWith(System.Collections.ICollection)">
            <summary>
            Determines whether this and the specified collection have common entries
            </summary>
            <param name="value">tree vertex collection</param>
            <returns>true if common entries have been founds, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.DataStructures.NTreeVertexList.Clone">
            <summary>
            Creates an exact replica of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.DataStructures.NTreeVertexList.Item(System.Int32)">
            <summary>
            Typed indexer
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NodeTransformCancelEventHandler">
            <summary>
            Delegate for events, which require to have control over node transform changes
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NodeBoundsCancelEventHandler">
            <summary>
            Delegate for events, which require to have control over node bounds changes
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ConnectionEventHandler">
            <summary>
            Delegate for events, which receive infromation about connection actions
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ConnectionCancelEventHandler">
            <summary>
            Delegate for events, which require to have control over connection actions
            </summary>
        </member>
        <member name="T:Nevron.Diagram.CanConnectPlugEventHandler">
            <summary>
            Delegate for events, which require to have control over connection actions
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NodeMouseEventHandler">
            <summary>
            Delegate for events, which receive infromation about node mouse event actions
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NodeKeyEventHandler">
            <summary>
            Delegate for events, which receive infromation about node key down/up event actions
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NodeKeyPressEventHandler">
            <summary>
            Delegate for events, which receive infromation about node key press event actions
            </summary>
        </member>
        <member name="T:Nevron.Diagram.IsInputKey">
            <summary>
            Delegate for IsInputKey queries
            </summary>
        </member>
        <member name="T:Nevron.Diagram.IsInputChar">
            <summary>
            Delegate for IsInputChar queries
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NodeDragEventHandler">
            <summary>
            Delegate for DragEnter, DragDrop and DragOver events 
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NodeViewEventHandler">
            <summary>
            Delegate for View events fired for nodes
            </summary>
        </member>
        <member name="T:Nevron.Diagram.DocumentEventHandler">
            <summary>
            Delegate for document events
            </summary>
        </member>
        <member name="T:Nevron.Diagram.DocumentCancelEventHandler">
            <summary>
            Delegate for document cancel events
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NArrowheadStyle">
            <summary>
            The NArrowheadStyle is a style attribute, which controls the shape, size and appearance of arrowheads
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadStyle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadStyle.#ctor(Nevron.Diagram.ArrowheadShape,System.String,Nevron.GraphicsCore.NSizeL,Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="shape">arrow head shape</param>
            <param name="customShapeName">custom shape name</param>
            <param name="size">size</param>
            <param name="fillStyle">fill style</param>
            <param name="strokeStyle">stroke style</param>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadStyle.#ctor(Nevron.Diagram.NArrowheadStyle)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadStyle.Clone">
            <summary>
            Creates an identical copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadStyle.Equals(System.Object)">
            <summary>
            Overriden to compare the nested styles
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadStyle.GetHashCode">
            <summary>
            Overriden because Equals was overriden
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadStyle.ToString">
            <summary>
            Overriden to return a string containing the shape and the size of the arrowhead
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.NArrowheadStyle.FillStyle">
            <summary>
            Controls the fill style of the arrowhead
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NArrowheadStyle.StrokeStyle">
            <summary>
            Controls the stroke style of the arrowhead
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NArrowheadStyle.Shape">
            <summary>
            Controls the shape of the arrowhead
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NArrowheadStyle.CustomShapeName">
            <summary>
            Specifies the name of the custom shape when the Shape property is set to Custom
            </summary>
            <remarks>
            The NArrowheadShapeStencil passed in the paint context, must contain a shape with this name 
            in order for the arrowhead to be displayed
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NArrowheadStyle.Size">
            <summary>
            Controls the size of the arrowhead
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NUmlFieldCollection">
            <summary>
            A strongly typed collection containing UML fields, properties or methods.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NUmlFieldCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NUmlFieldCollection.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NUmlFieldCollection.AddChild(Nevron.Dom.INNode)">
            <summary>
            Adds a child node
            </summary>
            <param name="node">node to add</param>
        </member>
        <member name="M:Nevron.Diagram.NUmlFieldCollection.RemoveChild(Nevron.Dom.INNode)">
            <summary>
            Removes the specified child node from the container's children
            </summary>
            <param name="node">child node to remove</param>
        </member>
        <member name="M:Nevron.Diagram.NUmlFieldCollection.RemoveChildAt(System.Int32)">
            <summary>
            Removes the child node at the specified index
            </summary>
            <param name="index">index of child node to remove</param>
        </member>
        <member name="M:Nevron.Diagram.NUmlFieldCollection.InsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Inserts a child node at the specified index
            </summary>
            <param name="index">index at which to insert the child node</param>
            <param name="node">node to insert</param>
        </member>
        <member name="M:Nevron.Diagram.NUmlFieldCollection.EnumInstantiatableTypes">
            <summary>
            Enumerates the known types, which can be instanciated and added to this composite at runtime
            </summary>
            <remarks>
            Overriden to return the type of NUmlField
            </remarks>
            <returns>types of the nodes which can be instanciated and added to this composite at runtime</returns>
        </member>
        <member name="M:Nevron.Diagram.NUmlFieldCollection.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Overriden to accept only nodes of type NUmlField
            </summary>
            <param name="index">index at which the node must be inserted</param>
            <param name="node">node which must be inserted</param>
            <returns>true if the node can be inserted, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.NVisioMaster">
            <summary>
            The NVisioMaster class represents a Visio element inside a NLibraryDocument instance
            </summary>
            <remarks>
            The NVisioMaster class is used to wrap reusable content 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NVisioMaster.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NVisioMaster.#ctor(Nevron.Diagram.INDiagramElement,Nevron.GraphicsCore.NMeasurementUnit,System.String,System.String)">
            <summary>
            Creates a new master, which hosts the specified element
            </summary>
            <param name="element">element of the master</param>
            <param name="measurementUnit">measurement unit of the masters</param>
            <param name="name">master name</param>
            <param name="prompt">master prompt</param>
        </member>
        <member name="M:Nevron.Diagram.NVisioMaster.#ctor(Nevron.Diagram.INDiagramElement[],Nevron.GraphicsCore.NMeasurementUnit,System.String,System.String)">
            <summary>
            Creates a new master, which hosts the specified elements
            </summary>
            <param name="elements">elements of the master</param>
            <param name="measurementUnit">measurement unit of the masters</param>
            <param name="name">master name</param>
            <param name="prompt">master prompt</param>
        </member>
        <member name="M:Nevron.Diagram.NVisioMaster.#ctor(Nevron.Diagram.INDiagramElement[],Nevron.Diagram.NConnectionCollection,Nevron.GraphicsCore.NMeasurementUnit,System.String,System.String)">
            <summary>
            Creates a new master, which hosts the specified elements
            </summary>
            <param name="elements">elements of the master</param>
            <param name="connections">connections between the elements of the master</param>
            <param name="measurementUnit">measurement unit of the masters</param>
            <param name="name">master name</param>
            <param name="prompt">master prompt</param>
        </member>
        <member name="T:Nevron.Diagram.NWinFormControlHostPrimitive">
            <summary>
            Represents a box primitive which hosts a windows forms control
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NWinFormControlHostPrimitive.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NWinFormControlHostPrimitive.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializer constructor
            </summary>
            <param name="control"></param>
        </member>
        <member name="P:Nevron.Diagram.NWinFormControlHostPrimitive.Abilities">
            <summary>
            Gets the element abilities 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NWinFormControlHostPrimitive.Permissions">
            <summary>
            Gets the allowed element abilities (e.g its permissions)
            </summary>
            <remarks>
            Overriden to drop the InplaceEdit permission if the InplaceEdit permission of aggregate 
            in which the primitive may reside is also dropped.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NWinFormControlHostPrimitive.Clone">
            <summary>
            Overriden 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NWinFormControlHostPrimitive.CreateInplaceEditControl">
            <summary>
            Creates an inplace edit control. This implementation creates a surrogate control
            </summary>
            <returns>control which must implement the INInplaceEditControl interface</returns>
        </member>
        <member name="M:Nevron.Diagram.NWinFormControlHostPrimitive.Dispose">
            <summary>
            Disposes all resources usef by this node
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NWinFormControlHostPrimitive.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Overriden to paint the control
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Nevron.Diagram.NWinFormControlHostPrimitive.Control">
            <summary>
            Gets/sets the hosted control.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NWinFormControlHostPrimitive.DeactiveOnLostFocus">
            <summary>
            Specifies whether the inplace edit control created for the hosted control must be deactivated when the control looses focus. By default set to true.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NWinFormControlHostPrimitive.PaintAppearance(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the hosted control
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.NWinFormControlHostPrimitive.DrawToBitmap(System.Windows.Forms.Control,System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="control"></param>
            <param name="bitmap"></param>
            <param name="targetBounds"></param>
        </member>
        <member name="M:Nevron.Diagram.NWinFormControlHostPrimitive.DisposeBitmap">
            <summary>
            Disposes the hosted control bitmap
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NWinFormControlHostPrimitive.SaveControl(System.Windows.Forms.Control)">
            <summary>
            Saves control to a state string
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NWinFormControlHostPrimitive.LoadControl(System.String)">
            <summary>
            Loads the control from a state string
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.NWinFormControlHostPrimitive.DesignStateXML">
            <summary>
            Gets/sets the design state of the hosted control
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NWinFormControlHostPrimitive.NBasicDesignerLoader">
            <summary>
            Serves as base classs for loader and savers to XML
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NWinFormControlHostPrimitive.NBasicDesignerLoader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NWinFormControlHostPrimitive.bMCE.PerformLoad(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
            <summary>
            Called by the host when we load a document.
            </summary>
            <param name="dMCE"></param>
        </member>
        <member name="M:Nevron.Diagram.NWinFormControlHostPrimitive.bMCE.PerformFlush(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
            <summary>
            
            </summary>
            <param name="EMCE"></param>
        </member>
        <member name="M:Nevron.Diagram.NWinFormControlHostPrimitive.fnCE.PerformLoad(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
            <summary>
            Called by the host when we load a document.
            </summary>
            <param name="hnCE"></param>
        </member>
        <member name="M:Nevron.Diagram.NWinFormControlHostPrimitive.fnCE.PerformFlush(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
            <summary>
            This method is called by the designer host whenever it wants the
            designer loader to flush any pending changes.  Flushing changes
            does not mean the same thing as saving to disk.  For example,
            In Visual Studio, flushing changes causes new code to be generated
            and inserted into the text editing window.  The user can edit
            the new code in the editing window, but nothing has been saved
            to disk.  This sample adheres to this separation between flushing
            and saving, since a flush occurs whenever the code windows are
            displayed or there is a build. Neither of those items demands a save.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NFrameDecoratorHeader">
            <summary>
            The NFrameDecoratorHeader class is a simple styleable element,
            which is used to compose the styling needed for a frame decorator header
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecoratorHeader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NFrameDecoratorHeader.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NFrameDecoratorHeader.Permissions">
            <summary>
            Gets the allowed element abilities (e.g its permissions)
            </summary>
            <remarks>
            Overriden to drop the InplaceEdit permission if the shape 
            InplaceEdit permission is also dropped.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecoratorHeader.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.NFrameDecoratorHeader.Visible">
            <summary>
            Controls the visibility of the header
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecoratorHeader.HitTest(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the node by point with the specified context
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecoratorHeader.HitTest(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the node by rectangle with the specified context
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NFrameDecoratorHeader.Text">
            <summary>
            Gets/sets the header text
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecoratorHeader.GetWorldTextPaintInfo(System.String,Nevron.Diagram.NTextPaintInfo@)">
            <summary>
            Obtains text paint info in world coordinates
            </summary>
            <param name="text">text for which to obtain paint info</param> 
            <param name="info">result paint info</param>
            <returns>true if paint info was successfully obtained, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecoratorHeader.CreateInplaceEditControl">
            <summary>
            Creates an inplace edit control
            </summary>
            <returns>control which must implement the INInplaceEditControl interface</returns>
        </member>
        <member name="P:Nevron.Diagram.NFrameDecoratorHeader.Size">
            <summary>
            Controls the size of the header
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NFrameDecoratorHeader.Margins">
            <summary>
            Controls the margins of the header text
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecoratorHeader.Invalidate">
            <summary>
            Invalidates the projection of the object on the drawing surface
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecoratorHeader.MustHitTest(Nevron.Diagram.NHitTestContext)">
            <summary>
            Determines whether the frame decorator herader must be hit tested. 
            Typically a frame decorator does not need to be hit tested, 
            if it is not visible or the shape to which it belongs is collapsed.
            </summary>
            <param name="context">hit test context</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NToggleDecoratorSymbol">
            <summary>
            The NToggleDecoratorSymbol class is a simple styleable element,
            which is used to compose the styling needed for a toggle decorator symbol
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecoratorSymbol.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NToggleDecoratorSymbol.Visible">
            <summary>
            Controls the visibility of the background
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecoratorSymbol.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecoratorSymbol.Invalidate">
            <summary>
            Invalidates the projection of the object on the drawing surface
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NToggleDecoratorSymbol.Shape">
            <summary>
            Controls the shape of the symbol
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NToggleDecoratorSymbol.Margins">
            <summary>
            Controls the margins of the symbol relative to the decorator bounds
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NExpandCollapseDecorator">
            <summary>
            The NExpandCollapseDecorator is used to display a collapse/expand check box,
            which toggles the collapsed/expanded state of the shape.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NExpandCollapseDecorator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NExpandCollapseDecorator.GetState">
            <summary>
            Overriden to return the value of the shape Collapsed property
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NExpandCollapseDecorator.ToggleState">
            <summary>
            Overriden to toggle the Collapsed property of the shape
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NFrameDecorator">
            <summary>
            The NFrameDecorator is used to display a frame around the shape model bounds.
            The decorator has a header and background. Only the header is visible 
            when the shape is collapsed.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.HitTest(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the decorator by point
            </summary>
            <param name="point"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.HitTest(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the decorator by rectangle
            </summary>
            <param name="rectangle"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to update the references of all contained elements
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <remarks>
            Overriden to propagate the call to all contained nodes
            </remarks>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.GetEnumerator">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.GetChildByName(System.String)">
            <summary>
            Gets the first child element with the specified name
            </summary>
            <param name="name">child name</param>
            <returns>child diagram element</returns>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.GetChildByName(System.String,System.Int32)">
            <summary>
            Gets the first child element with the specified name
            </summary>
            <param name="name">child name</param>
            <param name="startIndex">index to start from</param>
            <returns>child diagram element</returns>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.GetChildFromId(System.Int32)">
            <summary>
            Obtains a child element by its id
            </summary>
            <param name="id">id of the node</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.GetChildFromUniqueId(System.Guid)">
            <summary>
            Obtains a child element by its unique id
            </summary>
            <param name="uid">unique id of the element</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.GetDescendantFromId(System.Int32,System.Int32)">
            <summary>
            Obtains a element node by its id
            </summary>
            <param name="id">id of the element</param>
            <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.GetDescendantFromUniqueId(System.Guid,System.Int32)">
            <summary>
            Obtains a child element by its unique id
            </summary>
            <param name="uid">unique id of the node</param>
            <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.IndexOfChild(Nevron.Dom.INNode)">
            <summary>
            Gets the index of the specified node in the container
            </summary>
            <param name="node">the node to locate</param>
            <returns>index of the node</returns>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.GetChildAt(System.Int32)">
            <summary>
            Gets the child node at the specified index
            </summary>
            <param name="index">index</param>
            <returns>node at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.SetChildIndex(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Sets a new index of the specified child node
            </summary>
            <param name="node">node whose index to change</param>
            <param name="index">new index</param>
            <returns>previous node index</returns>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.IsChild(Nevron.Dom.INNode)">
            <summary>
            Determines whether the specified node is a child node for this container
            </summary>
            <param name="node">node to check</param>
            <returns>true if it is a child node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.ChildrenCount(Nevron.Filters.INFilter)">
            <summary>
            Returns the number of child nodes which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <returns>children count, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.Children(Nevron.Filters.INFilter)">
            <summary>
            Obtains the child nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.AccumulateChildren(Nevron.Filters.INFilter,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the children contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="list">list to which to append the child nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.IsDescendant(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Queries whether the specified node is a descendant of this node
            </summary>
            <param name="node">node to look for</param>
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>true if the node is a descendant node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.DescendantsCount(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Returns the number of descendant nodes, which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>count of descendants, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.Descendants(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Obtains the descentant nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.AccumulateDescendants(Nevron.Filters.INFilter,System.Int32,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the descendants contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <param name="list">list to which to append the descendant nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.GetEnumerator(Nevron.Filters.INFilter)">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.PaintForeground(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the decorator foreground
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.PaintBackground(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the decorator background
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Nevron.Diagram.NFrameDecorator.HitTestBackground">
            <summary>
            Gets/sets whether the decorator is considered hit, if its background is hit
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NFrameDecorator.HitTestHeader">
            <summary>
            Gets/sets whether the decorator is considered hit, if its header is hit
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NFrameDecorator.HitTestFrame">
            <summary>
            Gets/sets whether the decorator is considered hit, if its frame(outline) is hit
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NFrameDecorator.Header">
            <summary>
            Gets the frame header
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NFrameDecorator.Background">
            <summary>
            Gets the frame background
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecorator.MeasureDirtyInflate(Nevron.GraphicsCore.NLengthConverter)">
            <summary>
            Measures the dirty inflate of the decorator
            </summary>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.NFrameDecorator.Nodes">
            <summary>
            Used by XML serialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NBridgeManager">
            <summary>
            The NBridgeManager attribute is used to provide the container, which hosts it 
            with the ability to generate bridges
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBridgeManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBridgeManager.#ctor(Nevron.Diagram.NBridgeManager)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Diagram.NBridgeManager.IsPaused">
            <summary>
            Determines whether the bridge manager is currently paused
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NBridgeManager.Enabled">
            <summary>
            Gets/sets whether the bridge manager is enabled. 
            Setting this property to false will globally disable bridging
            </summary>
            <remarks>
            By default set to true
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NBridgeManager.Pause">
            <summary>
            Pauses the bridge manager
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBridgeManager.Resume">
            <summary>
            Resumes the bridge manager
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBridgeManager.OnShapeBoundsChanged(Nevron.Diagram.NShape)">
            <summary>
            Called by the container when the specified shape bounds have changed
            </summary>
            <param name="shape">shape whose bounds have changed</param>
        </member>
        <member name="M:Nevron.Diagram.NBridgeManager.OnShapeRemoved(Nevron.Diagram.NShape)">
            <summary>
            Called by the container when the specified shape has been removed from the container subtree
            </summary>
            <param name="shape">shape which has been removed</param>
        </member>
        <member name="M:Nevron.Diagram.NBridgeManager.OnShapeInserted(Nevron.Diagram.NShape)">
            <summary>
            Called by the container when the specified shape has been inserted to the container subtree
            </summary>
            <param name="shape">shape which has been inserted</param>
        </member>
        <member name="M:Nevron.Diagram.NBridgeManager.OnShapeIndexChanged(Nevron.Diagram.NShape)">
            <summary>
            Called by the container when the index of a shape inside its container has changed
            </summary>
            <param name="shape">shape whose index has changed</param>
        </member>
        <member name="M:Nevron.Diagram.NBridgeManager.OnLayerInserted(Nevron.Diagram.NLayer)">
            <summary>
            Called by the container when the specified layer has been inserted
            </summary>
            <param name="layer">layer which has been inserted</param>
        </member>
        <member name="M:Nevron.Diagram.NBridgeManager.OnLayerRemoved(Nevron.Diagram.NLayer)">
            <summary>
            Called by the container when the specified layer has been removed
            </summary>
            <param name="layer">layer which has been removed</param>
        </member>
        <member name="M:Nevron.Diagram.NBridgeManager.OnLayerIndexChanged(Nevron.Diagram.NLayer)">
            <summary>
            Called when the index of a layer inside its container has changed
            </summary>
            <param name="layer">layer whose index has changed</param>
        </member>
        <member name="M:Nevron.Diagram.NBridgeManager.CreateBridgedPath(Nevron.Diagram.INBridgeablePath,Nevron.Diagram.BridgeTargets,Nevron.Diagram.BridgeShape,Nevron.GraphicsCore.NSizeF,System.Single)">
            <summary>
            Creates a bridged path for the specified bridgeable primitive
            </summary>
            <param name="primitive">bridgeable primitive for which to create bridged path</param>
            <param name="targets">targets for bridging</param>
            <param name="shape">bridges shape</param>
            <param name="size">bridges size</param>
            <returns>bridged path, or null if such cannot be created</returns>
        </member>
        <member name="M:Nevron.Diagram.NBridgeManager.GetBridgeablePathTargets(Nevron.Diagram.INBridgeablePath)">
            <summary>
            Given a bridgeable path primitive, obtains the bridgeable path descendants, with which the specified primitive must create bridges
            </summary>
            <param name="primitive">primitive to look for</param>
            <returns>array of bridgeable paths with which the path must create bridges</returns>
        </member>
        <member name="M:Nevron.Diagram.NBridgeManager.InvalidateAllBridges">
            <summary>
            Invalidates the bridges of all INBridgeablePath descendants of the container
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBridgeManager.fQCE.Undo(Nevron.Dom.NElementHistoryService)">
            <summary>
            Undoes the operation
            </summary>
            <remarks>
            Destroys the connection
            </remarks>
            <param name="IQCE">reference to the history service</param>
        </member>
        <member name="M:Nevron.Diagram.NBridgeManager.fQCE.Redo(Nevron.Dom.NElementHistoryService)">
            <summary>
            Redoes the operation
            </summary>
            <remarks>
            Creates the connection
            </remarks> 
            <param name="jQCE">reference to the history service</param>
        </member>
        <member name="T:Nevron.Diagram.NBridgeStyle">
            <summary>
            The NBridgeStyle is a style attribute, which controls the bridges' shape and the size
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBridgeStyle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBridgeStyle.#ctor(Nevron.Diagram.BridgeShape,Nevron.GraphicsCore.NSizeL)">
            <summary>
            Initializer constructor
            </summary>
            <param name="shape">bridges shape</param>
            <param name="size">bridges size</param>
        </member>
        <member name="M:Nevron.Diagram.NBridgeStyle.#ctor(Nevron.Diagram.NBridgeStyle)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.NBridgeStyle.ToString">
            <summary>
            Overriden to return a string containing the shape and the size of the bridge
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NBridgeStyle.Clone">
            <summary>
            Creates an identical copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.NBridgeStyle.Shape">
            <summary>
            Controls the shape of the bridge
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NBridgeStyle.Size">
            <summary>
            Controls the size of the bridge
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NConnectionContainer">
            <summary>
            The NConnectionContainer attribute is used to store the connections between diagram elements in a diagram document
            </summary>
            <remarks>
            A reference to an instance of this class can be obtained from from the ConnectionContainer property of the NDrawingDocument and NLibraryDocument classes.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NConnectionContainer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NConnectionContainer.#ctor(Nevron.Diagram.NConnectionContainer)">
            <summary>
            Copy constructor
            </summary>
            <param name="source">source container</param>
        </member>
        <member name="M:Nevron.Diagram.NConnectionContainer.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Updates the references stored by the object
            </summary>
            <remarks>
            Overriden to store a reference to the document
            </remarks>
            <param name="provider">provider from which to obtain references</param>
        </member>
        <member name="M:Nevron.Diagram.NConnectionContainer.Clone">
            <summary>
            Creates an identical copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.NConnectionContainer.Document">
            <summary>
            Obtains a reference to the document to which this attribute belongs
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NConnectionContainer.EventSinkService">
            <summary>
            Obtains a reference to the document event sink service
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NConnectionContainer.ConnectElements(Nevron.Dom.INElement,Nevron.Dom.INElement)">
            <summary>
            Connects the specified elements
            </summary>
            <param name="element1"></param>
            <param name="element2"></param>
            <returns>true if the elements are connected after the operation, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionContainer.SingleConnectElement(Nevron.Dom.INElement,Nevron.Dom.INElement)">
            <summary>
            Forces element1 to be only connected to element2
            </summary>
            <param name="element1">element to single connect</param>
            <param name="element2">element to connect to</param>
            <returns>true if after the operation element1 is single connected to element2, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionContainer.DisconnectElements(Nevron.Dom.INElement,Nevron.Dom.INElement)">
            <summary>
            Disconnects the specified elements
            </summary>
            <param name="element1"></param>
            <param name="element2"></param>
            <returns>true if after the operation element1 and element2 are disconnected, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionContainer.DisconnectElement(Nevron.Dom.INElement)">
            <summary>
            Disconnects the specified element from all elements it is currently connected to
            </summary>
            <param name="element">element to disconnect</param>
            <returns>true if after the operation element is not connected, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionContainer.QueryElementsConnected(Nevron.Dom.INElement,Nevron.Dom.INElement)">
            <summary>
            Queries whether the speecified elements are connected
            </summary>
            <param name="element1"></param>
            <param name="element2"></param>
            <returns>true if the elements are connected, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionContainer.QueryElementConnected(Nevron.Dom.INElement)">
            <summary>
            Queries whether the speecified element is connected
            </summary>
            <param name="element">element to look for</param>
            <returns>true if element is connected, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionContainer.GetConnectedElements(Nevron.Dom.INElement,Nevron.Filters.NFilter)">
            <summary>
            Obtains the elements connected to the specified element, which satisfy the specified filter
            </summary>
            <param name="element">element whose connections to obtain</param>
            <param name="filter">filter for the connected elements</param>
            <returns>array of the elements connected to the specified element</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionContainer.GetConnectedElements(Nevron.Filters.NFilter)">
            <summary>
            Obtains the elements which are connected
            </summary>
            <returns>array of the elements which are connected</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionContainer.ImportConnections(Nevron.Diagram.NConnectionCollection)">
            <summary>
            Imports the specified connections
            </summary>
            <param name="connections">connections to import</param>
        </member>
        <member name="M:Nevron.Diagram.NConnectionContainer.ExportConnections">
            <summary>
            Exports the content of this container as a NConnectionCollection instance.
            </summary>
            <returns>connection collection</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionContainer.CreateConnection(System.Guid,System.Guid)">
            <summary>
            Called to establish a new connection between the specified uids
            </summary>
            <remarks>
            If the attribute is connected to an event sink this method will fire the Connecting - Connected events pair. 
            If the attribute is connected to a history service this method will also record the state of the container prior to the change.
            </remarks>
            <param name="uid1"></param>
            <param name="uid2"></param>
            <returns>true if a connection between uid1 and uid2 exists or has been created, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionContainer.DestroyConnection(System.Guid,System.Guid)">
            <summary>
            Called to destroy a connection between the specified ids
            </summary>
            <remarks>
            If the attribute is connected to an event sink this method will fire the Disconnecting - Disconnected events pair. 
            If the attribute is connected to a history service this method will also record the state of the container prior to the change.
            </remarks>
            <param name="uid1"></param>
            <param name="uid2"></param>
            <returns>true if connection between uid1 and uid2 does not exist or has been destroyed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionContainer.GetElementsFromUniqueIds(System.Collections.ArrayList,Nevron.Filters.NFilter)">
            <summary>
            Called to resolve the specified uids to valid diagram element references
            </summary>
            <param name="uids">uids which to resolve to references</param>
            <param name="filter">filter to use</param> 
            <returns>array of elements corresponding to the specified uids, which satisfy the filter criteria</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionContainer.hrCE.Undo(Nevron.Dom.NElementHistoryService)">
            <summary>
            Undoes the operation
            </summary>
            <remarks>
            Destroys the connection
            </remarks>
            <param name="lrCE">reference to the history service</param>
        </member>
        <member name="M:Nevron.Diagram.NConnectionContainer.hrCE.Redo(Nevron.Dom.NElementHistoryService)">
            <summary>
            Redoes the operation
            </summary>
            <remarks>
            Creates the connection
            </remarks> 
            <param name="MrCE">reference to the history service</param>
        </member>
        <member name="M:Nevron.Diagram.NConnectionContainer.nrCE.Undo(Nevron.Dom.NElementHistoryService)">
            <summary>
            Undoes the operation
            </summary>
            <remarks>
            Creates the connection
            </remarks>
            <param name="rrCE">reference to the history service</param>
        </member>
        <member name="M:Nevron.Diagram.NConnectionContainer.nrCE.Redo(Nevron.Dom.NElementHistoryService)">
            <summary>
            Redoes the operation
            </summary>
            <remarks>
            Destroys the connection
            </remarks> 
            <param name="SrCE">reference to the history service</param>
        </member>
        <member name="M:Nevron.Diagram.NConnectionContainer.trCE.Undo(Nevron.Dom.NElementHistoryService)">
            <summary>
            Undoes the operation
            </summary>
            <remarks>
            Destroys the connection
            </remarks>
            <param name="WrCE">reference to the history service</param>
        </member>
        <member name="M:Nevron.Diagram.NConnectionContainer.trCE.Redo(Nevron.Dom.NElementHistoryService)">
            <summary>
            Redoes the operation
            </summary>
            <remarks>
            Creates the connection
            </remarks> 
            <param name="xrCE">reference to the history service</param>
        </member>
        <member name="P:Nevron.Diagram.NConnectionContainer.Connections">
            <summary>
            Xml serialization is achieved with a simple array of connections contained in this container
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NDocumentInfo">
            <summary>
            An instance of the NDocumentInfo attribute is used to provide each diagram document with generic, human readable information
            </summary>
            <remarks>
            A reference to this class can be obtained from the Info property of the NDocument class.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDocumentInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocumentInfo.#ctor(Nevron.Diagram.NDocumentInfo)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocumentInfo.Clone">
            <summary>
            Creates an identical copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.NDocumentInfo.Title">
            <summary>
            Gets/sets the document title
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocumentInfo.Subject">
            <summary>
            Gets/sets the document subject
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocumentInfo.Author">
            <summary>
            Gets/sets the document author
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocumentInfo.Manager">
            <summary>
            Gets/sets the document manager
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocumentInfo.Company">
            <summary>
            Gets/sets the document company
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocumentInfo.Category">
            <summary>
            Gets/sets the document category
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocumentInfo.Keywords">
            <summary>
            Gets/sets the document keywords
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocumentInfo.Description">
            <summary>
            Gets/sets the document description
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NGlobalVisibility">
            <summary>
            The NGlobalVisibility class is an attribute, which is used to store global visibility settings
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NGlobalVisibility.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NGlobalVisibility.#ctor(Nevron.Diagram.NGlobalVisibility)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.NGlobalVisibility.OnStateChangedFromHistory(System.String)">
            <summary>
            Overrriden to call the OnChanged method if the hint is ShowAll or HideAll
            </summary>
            <param name="hint"></param>
        </member>
        <member name="P:Nevron.Diagram.NGlobalVisibility.ShowPorts">
            <summary>
            Controls the global visibility of ports
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NGlobalVisibility.ShowGuidelines">
            <summary>
            Controls the global visibility of guidelines
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NGlobalVisibility.ShowArrowheads">
            <summary>
            Controls the global visibility of the arrowheads
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NGlobalVisibility.ShowShadows">
            <summary>
            Controls the global visibility of shadows
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NGlobalVisibility.ShowAll">
            <summary>
            Shows all
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NGlobalVisibility.HideAll">
            <summary>
            Hides all
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NGraphicsSettings">
            <summary>
            Represents an extraction of the settings, which can be applied on Graphics
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NGraphicsSettings.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NGraphicsSettings.#ctor(Nevron.Diagram.NGraphicsSettings)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.NGraphicsSettings.#ctor(System.Drawing.Graphics)">
            <summary>
            Initializer constructor
            </summary>
            <param name="graphics"></param>
        </member>
        <member name="P:Nevron.Diagram.NGraphicsSettings.CompositingMode">
            <summary>
            Represents the Graphics CompositingMode setting
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NGraphicsSettings.CompositingQuality">
            <summary>
            Represents the Graphics CompositingQuality setting
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NGraphicsSettings.InterpolationMode">
            <summary>
            Represents the Graphics InterpolationMode setting
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NGraphicsSettings.PixelOffsetMode">
            <summary>
            Represents the Graphics PixelOffsetMode setting
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NGraphicsSettings.RenderingOrigin">
            <summary>
            Represents the Graphics RenderingOrigin setting
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NGraphicsSettings.SmoothingMode">
            <summary>
            Represents the Graphics SmoothingMode setting
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NGraphicsSettings.TextContrast">
            <summary>
            Represents the Graphics TextContrast setting
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NGraphicsSettings.TextRenderingHint">
            <summary>
            Represents the Graphics TextRenderingHint setting
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NGraphicsSettings.Apply(System.Drawing.Graphics)">
            <summary>
            Applies the settings to the specified graphics
            </summary>
            <param name="graphics">Graphics to apply this settings to</param>
        </member>
        <member name="M:Nevron.Diagram.NGraphicsSettings.Apply(Nevron.GraphicsCore.IN2DDevice)">
            <summary>
            Applies the settings to the specified device
            </summary>
            <param name="device"></param>
        </member>
        <member name="T:Nevron.Diagram.NHitTestSettings">
            <summary>
            The NHitTestSettings attribute is used to store global hit test preferences
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NHitTestSettings.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NHitTestSettings.HitTestVisibleOnly">
            <summary>
            Specifies whether only visible nodes should be hit tested 
            </summary>
            <remarks>
            By default set to true
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NHitTestSettings.PointHitTestType">
            <summary>
            Specifies the type of the point test used to acquire point hit info from the document and the view
            </summary>
            <remarks>
            By default set to Region
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NHitTestSettings.RectangleHitTestType">
            <summary>
            Specifies the type of the rectangle hit test used to acquire rectangle hit info from the document and the view
            </summary>
            <remarks>
            By default set to RegionIntersect
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NHitTestSettings.OpenFigureWiden">
            <summary>
            Controls the widen applied to open figures when they are hit tested (in pixels)
            </summary>
            <remarks>
            By default set to 10.0f
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NHitTestSettings.ClosedFigureWiden">
            <summary>
            Controls the widen applied to closed figures when they are hit tested (in pixels)
            </summary>
            <remarks>
            By default set to 0
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NHitTestSettings.TextWiden">
            <summary>
            Controls the widen applied to texts when they are hit tested (in pixels)
            </summary>
            <remarks>
            By default set to 0
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NHitTestSettings.PointWiden">
            <summary>
            Controls the widen applied to points when they are hit tested (in pixels)
            </summary>
            <remarks>
            By default set to 5
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NHitTestSettings.PortWiden">
            <summary>
            Controls the widen applied to ports when they are hit tested (in pixels)
            </summary>
            <remarks>
            By default set to 5
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NHitTestSettings.GuidelineWiden">
            <summary>
            Controls the widen applied to guidelines when they are hit tested (in pixels)
            </summary>
            <remarks>
            By default set to 5
            </remarks>
        </member>
        <member name="T:Nevron.Diagram.NLayoutData">
            <summary>
            The NLayoutData attribute is used to store the per shape defined properties,
            which layouts use when arranging shapes.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLayoutData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLayoutData.#ctor(Nevron.Diagram.NLayoutData)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.NLayoutData.Clone">
            <summary>
            Creates an identical copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLayoutData.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.NLayoutData.SpringStiffness">
            <summary>
            Gets/sets the spring stiffness for a shape, which is threated as a spring.
            Used by force directed layouts with a spring force. Applicable for 1D shapes only.
            When set to -1 the shape uses the default spring stiffness.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayoutData.SpringLength">
            <summary>
            Gets/sets the spring length for a shape, which is threated as a spring.
            Used by force directed layouts with a spring force. Applicable for 1D shapes only.
            When set to -1 the shape uses the default spring length.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayoutData.UseDefaultMagnetizationType">
            <summary>
            Gets/sets whether the layout default magnetization type must be used. 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayoutData.MagnetizationType">
            <summary>
            Gets/sets the magnetization type for a shape, which is threated as a magnetized needle trying to align itself with a magnetic field. 
            Used by force directed layouts with magnetic forces. 
            Applicable for 1D shapes only, when UseDefaultMagnetizationType is set to false. 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayoutData.ForceXMoveable">
            <summary>
            Gets/sets whether a shape is moveable by force directed layouts in the X direction.
            Used by force directed layouts. Applicable for 2D shapes only.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayoutData.ForceYMoveable">
            <summary>
            Gets/sets whether a shape is moveable by force directed layouts in the Y direction.
            Used by force directed layouts. Applicable for 2D shapes only.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayoutData.ElectricalCharge">
            <summary>
            Gets/sets the electrical charge of a shape, which is threated as electrically charged partical.
            Used by force directed layouts with electrical force. Applicable for 2D shapes only.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayoutData.Mass">
            <summary>
            Gets/sets the mass of a shape, which is threated as a physical body with a certain mass (weight).
            Used by force directed layouts with a baricenter force. Applicable for 2D shapes only.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayoutData.TipOverChildrenPlacement">
            <summary>
            Gets/sets the children placement of a 2D shape.
            Used by tip over tree layout. Applicable for 2D shapes only.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayoutData.UseDefaultHorizontalContentPlacement">
            <summary>
            Gets/sets whether the layout default horizontal content placement must be used.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayoutData.HorizontalContentPlacement">
            <summary>
            Gets/sets how the shape is resized/repositioned horizontally to fit the cell slot allocated by a cells layout. 
            Used by all cells layouts (stack, flow, dock etc.). Applicable for 2D shapes only, when UseDefaultHorizontalContentPlacement is set to false.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayoutData.UseDefaultVerticalContentPlacement">
            <summary>
            Gets/sets whether the layout default vertical content placement must be used.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayoutData.VerticalContentPlacement">
            <summary>
            Gets/sets how the shape is resized/repositioned vertically to fit the cell slot allocated by a cells layout.
            Used by all cells layouts (stack, flow, dock etc.). Applicable for 2D shapes only, when UseDefaultVerticalContentPlacement is set to false.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayoutData.DockArea">
            <summary>
            Gets/sets the docking area occupied by the shape when it is threated as a docking cell.
            Used by dock layout. 
            Applicable for 2D shapes only.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayoutData.UseShapeWidth">
            <summary>
            Gets/sets whether the current shape width is the desired width of the shape
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayoutData.DesiredWidth">
            <summary>
            Gets/sets the desired width of the shape. Used by all layouts. Applicable for 2D shapes only, when UseShapeWidth is false. By default set to 0
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayoutData.UseShapeHeight">
            <summary>
            Gets/sets whether the current shape height is the desired height of the shape
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayoutData.DesiredHeight">
            <summary>
            Gets/sets the desired height of the shape. Used by all layouts. Applicable for 2D shapes only, when UseShapeHeight is false. By default set to 0
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayoutData.MinSize">
            <summary>
            Gets/sets the min size of the shape.
            Used by all cells layouts (stack, flow, dock etc.). Applicable for 2D shapes only.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayoutData.MaxSize">
            <summary>
            Gets/sets the max size of the shape.
            Used by all cells layouts (stack, flow, dock etc.). Applicable for 2D shapes only.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayoutData.IndexInLayer">
            <summary>
            Determines the index of the node in its layer when Layered Graph Layout is applied. By default set to -1,
            which means that the index will be determined automatically.
            </summary>
            <remarks>
            If you want the node to be the first in its layer set this property to 0. If set it to a
            value greater than or equal to the number of vertices in the layer, the node will be placed
            last in the layer. If the value of this property is negative the node index in the layer
            will be determined by the Layered Graph Layout algorithm.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NLayoutData.LayerIndex">
            <summary>
            Determines layer index of the node when Layered Graph Layout is applied. By default
            set to -1, which means that the index will be determined automatically.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLayoutData.ShouldSerializeSpringStiffness">
            <summary>
            Determines whether the SpringStiffness property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLayoutData.ShouldSerializeSpringLength">
            <summary>
            Determines whether the SpringLength property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLayoutData.ShouldSerializeMagnetizationType">
            <summary>
            Determines whether the MagnetizationType property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLayoutData.ShouldSerializeForceXMoveable">
            <summary>
            Determines whether the ForceXMoveable property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLayoutData.ShouldSerializeForceYMoveable">
            <summary>
            Determines whether the ForceYMoveable property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLayoutData.ShouldSerializeElectricalCharge">
            <summary>
            Determines whether the ElectricalCharge property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLayoutData.ShouldSerializeMass">
            <summary>
            Determines whether the Mass property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLayoutData.ShouldSerializeTipOverChildrenPlacement">
            <summary>
            Determines whether the TipOverChildrenPlacement property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLayoutData.ShouldSerializeHorizontalContentPlacement">
            <summary>
            Determines whether the HorizontalContentPlacement property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLayoutData.ShouldSerializeVerticalContentPlacement">
            <summary>
            Determines whether the VerticalContentPlacement property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLayoutData.ShouldSerializeDesiredWidth">
            <summary>
            Determines whether the DesiredWidth property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLayoutData.ShouldSerializeDesiredHeight">
            <summary>
            Determines whether the DesiredHeight property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLayoutData.ShouldSerializeMinSize">
            <summary>
            Determines whether the MinSize property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLayoutData.ShouldSerializeMaxSize">
            <summary>
            Determines whether the MaxSize property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLayoutData.ShouldSerializeDockArea">
            <summary>
            Determines whether the DockArea property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLayoutData.ShouldSerializeIndexInLayer">
            <summary>
            Determines whether the IndexInLayer property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLayoutData.ShouldSerializeLayerIndex">
            <summary>
            Determines whether the LayerIndex property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NRoutingManager">
            <summary>
            The NRoutingManager attribute is used to provide the container, which hosts it 
            with the ability to route the routable shape it contains
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NRoutingManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NRoutingManager.#ctor(Nevron.Diagram.NRoutingManager)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.NRoutingManager.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this attribute 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.NRoutingManager.Enabled">
            <summary>
            Gets/sets whether the routing manager is enabled. 
            Setting this property to false will globally disable automatic routing. 
            </summary>
            <remarks>
            By default set to true.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NRoutingManager.RoutingGridType">
            <summary>
            Controls the type of routing grid created for the routing of HV (orthogonal) routes
            </summary>
            <remarks>
            By default set to SidesAndCenters
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NRoutingManager.RoutingMeshType">
            <summary>
            Controls the type of routing mesh created for the routing of polyline and curved routes
            </summary>
            <remarks>
            By default set to CornersAndMiddles
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NRoutingManager.AvoidInvisibleObstacles">
            <summary>
            Indicates whether invisible obstacles should be avoided by routes
            </summary>
            <remarks>
            By default set to false
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NRoutingManager.ChangeDirectionCost">
            <summary>
            Gets/sets the cost for making a turn (change direction). Applicable for grid routing only
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NRoutingManager.ObstacleInteriorDeflate">
            <summary>
            Gets/sets the deflate of the non intersectable obstacles (2D shapes) interior
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NRoutingManager.ObstaclePadding">
            <summary>
            Gets/sets the padding applied to the obstacles (2D shapes) bounds
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NRoutingManager.MergePointDistance">
            <summary>
            Controls the distance between two routing points, below which the routing points are considered identical
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NRoutingManager.MaxAvoidedGridObstacles">
            <summary>
            Controls the maximum count of obstacles (2D shapes) for which grid routing must be performed
            </summary>
            <remarks>
            By default set to 100
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NRoutingManager.MaxAvoidedMeshObstacles">
            <summary>
            Controls the maximum count of obstacles (2D shapes) for which mesh routing must be performed
            </summary>
            <remarks>
            By default set to 50
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NRoutingManager.IsPaused">
            <summary>
            Determines whether the routing manager is currently paused
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NRoutingManager.Pause">
            <summary>
            Pauses the routing manager
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NRoutingManager.Resume">
            <summary>
            Resumes the routing manager
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NRoutingManager.FindRoute(Nevron.Diagram.Routing.NRouteRequirements)">
            <summary>
            Finds the points of the best route, which satisfies the specified route requirements
            </summary>
            <param name="requirements">route requirements</param>
            <returns>route points if such route exists, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NRoutingManager.GetObstacleExterior(Nevron.Diagram.NShape)">
            <summary>
            Obtains the exterior bounds of a shape
            </summary>
            <param name="obstacle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NRoutingManager.GetObstacleInterior(Nevron.Diagram.NShape)">
            <summary>
            Obtains the interior bounds of a shape
            </summary>
            <param name="obstacle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NRoutingManager.OnShapeBoundsChanged(Nevron.Diagram.NShape)">
            <summary>
            Called by the container when the specified shape bounds have changed
            </summary>
            <param name="shape">shape whose bounds have changed</param>
        </member>
        <member name="M:Nevron.Diagram.NRoutingManager.OnShapeRemoved(Nevron.Diagram.NShape)">
            <summary>
            Called by the container when the specified shape has been removed from the container subtree
            </summary>
            <param name="shape">shape which has been removed</param>
        </member>
        <member name="M:Nevron.Diagram.NRoutingManager.OnShapeInserted(Nevron.Diagram.NShape)">
            <summary>
            Called by the container when the specified shape has been inserted to the container subtree
            </summary>
            <param name="shape">shape which has been inserted</param>
        </member>
        <member name="M:Nevron.Diagram.NRoutingManager.OnLayerInserted(Nevron.Diagram.NLayer)">
            <summary>
            Called by the container when the specified layer has been inserted
            </summary>
            <param name="layer">layer which has been inserted</param>
        </member>
        <member name="M:Nevron.Diagram.NRoutingManager.OnLayerRemoved(Nevron.Diagram.NLayer)">
            <summary>
            Called by the container when the specified layer has been removed
            </summary>
            <param name="layer">layer which has been removed</param>
        </member>
        <member name="M:Nevron.Diagram.NRoutingManager.InvalidateRoutingGraphs">
            <summary>
            Invalidates the cashed routing graphs.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NRoutingManager.InvalidateObstaclesAndRoutesLists">
            <summary>
            Invalidates the cashed obstacles and routes lists.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NRoutingManager.GetAllObstacles">
            <summary>
            Gets all obstacle shapes (all 2D shapes, which reside in the container subtree)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NRoutingManager.GetAllRoutes">
            <summary>
            Gets all route shapes (all 1D shapes, which implement the INRoutableShaper interface, and reside in the container subtree)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NRoutingManager.GetAllRerouteAlwaysRoutes">
            <summary>
            Gets all reroute always routes (1D Shapes, which implement the INRoutableShape interface and whose RerouteAutomatically is set to Always)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NRoutingManager.GetAllAutomaticRoutes">
            <summary>
            Gets all automatic routes (1D Shapes, which implement the INRoutableShape interface and whose RerouteAutomatically is set to Always or WhenNeeded)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NRoutingManager.GetAllAutomaticRoutes(Nevron.Diagram.NShape)">
            <summary>
            Gets all automatic routes (1D Shapes, which implement the INRoutableShape interface) 
            that need to be rerouted when the bounds of the specified shape have changed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NRoutingManager.Reroute(System.Collections.Generic.List{Nevron.Diagram.INRoutableShape})">
            <summary>
            Reroutes the specified routes
            </summary>
            <param name="routes"></param>
        </member>
        <member name="M:Nevron.Diagram.NRoutingManager.bvCE.Undo(Nevron.Dom.NElementHistoryService)">
            <summary>
            Undoes the operation
            </summary>
            <remarks>
            Destroys the connection
            </remarks>
            <param name="EvCE">reference to the history service</param>
        </member>
        <member name="M:Nevron.Diagram.NRoutingManager.bvCE.Redo(Nevron.Dom.NElementHistoryService)">
            <summary>
            Redoes the operation
            </summary>
            <remarks>
            Creates the connection
            </remarks> 
            <param name="fvCE">reference to the history service</param>
        </member>
        <member name="T:Nevron.Diagram.NSnapStrength">
            <summary>
            The NSnapStrength attribute is used to store the strength with which different objects attract coordinates and points
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NSnapStrength.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NSnapStrength.Grid">
            <summary>
            Specifies the strength (area) in which the grid lines attracts coordinates (in pixels)
            </summary>
            <remarks>
            By default set to 10
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NSnapStrength.Rulers">
            <summary>
            Specifies the strength (area) in which the rulers ticks attracts coordinates (in pixels)
            </summary>
            <remarks>
            By default set to 5
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NSnapStrength.Guidelines">
            <summary>
            Specifies the strength (area) in which the guidelines attracts coordinates (in pixels)
            </summary>
            <remarks>
            By default set to 20
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NSnapStrength.GeometryPoints">
            <summary>
            Specifies the strength (area) in which the geometry points attract points (in pixels)
            </summary>
            <remarks>
            By default set to 10
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NSnapStrength.Ports">
            <summary>
            Specifies the strength (area) in which the ports attract points (in pixels)
            </summary>
            <remarks>
            By default set to 30
            </remarks>
        </member>
        <member name="T:Nevron.Diagram.NSnapTargets">
            <summary>
            The NSnapTargets class represents an attribute, which is used to control the targets to which elements and points are snapped
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NSnapTargets.#ctor">
            <summary>
            Default constructor. Sets all permissions to true
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NSnapTargets.#ctor(Nevron.Diagram.SnapTargetsMask)">
            <summary>
            Copy constructor. Uses the specified mask to initialize the snap targets.
            </summary>
            <param name="mask"></param>
        </member>
        <member name="M:Nevron.Diagram.NSnapTargets.#ctor(Nevron.Diagram.NSnapTargets)">
            <summary>
            Copy constructor. Uses the specified source to initialize the permissions.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.NSnapTargets.Clone">
            <summary>
            Creates an identical copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.NSnapTargets.All">
            <summary>
            Setting this property to true will set all snap targets to true. If the value of this property is true then all snap targets are set to true.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NSnapTargets.None">
            <summary>
            Setting this property to true will set all snap targets to false. If the value of this property is true then all snap targets are set to false.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.NSnapTargets.Grid">
            <summary>
            Specifies whether coordinates should be snapped to the grid
            </summary>
            <remarks>
            By default set to true
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NSnapTargets.Rulers">
            <summary>
            Specifies whether coordinates should be snapped to the rulers
            </summary>
            <remarks>
            By default set to true
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NSnapTargets.Guidelines">
            <summary>
            Specifies whether coordinates should be snapped to guidelines
            </summary>
            <remarks>
            By default set to true
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NSnapTargets.GeometryPoints">
            <summary>
            Specifies whether to snap to geometry points
            </summary>
            <remarks>
            By default set to true
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NSnapTargets.Ports">
            <summary>
            Specifies whether to snap to shape ports
            </summary>
            <remarks>
            By default set to true
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NSnapTargets.Mask">
            <summary>
            Gets/sets the mask used to control the snap targets
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NStyle">
            <summary>
            The NStyle class represents an attribute, which is used to control the local appearance of the node to which it is attached. 
            It serves as a container for the actual styles used by the node.
            </summary>
            <remarks>
            Nodes declare the fact that they contains a NStyle attribute, by implementing the INStyleable interface.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NStyle.#ctor">
            <summary>
            Default constructor. Sets all styles to null (automatic)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NStyle.#ctor(Nevron.Diagram.NStyle)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Diagram.NStyle.Attributes">
            <summary>
            Gets the list of child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyle.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyle.GetAttributeByName(System.String)">
            <summary>
            Gets a child or descendant attribute by its name
            </summary>
            <param name="attributeName">child name or full attribute name</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyle.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
            <summary>
            Sets a child or descendant attribute by its name
            </summary>
            <param name="attributeName">attribute name</param>
            <param name="attribute">attribute to set</param>
        </member>
        <member name="M:Nevron.Diagram.NStyle.Clone">
            <summary>
            Creates an identical copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.NStyle.StrokeStyle">
            <summary>
            Gets/sets the stroke style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NStyle.ShadowStyle">
            <summary>
            Gets/sets the shadow style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NStyle.FillStyle">
            <summary>
            Gets/sets the fill style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NStyle.TextStyle">
            <summary>
            Gets/sets the text style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NStyle.BridgeStyle">
            <summary>
            Gets/sets the bridge style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NStyle.StartArrowheadStyle">
            <summary>
            Gets/sets the start arrowhead style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NStyle.EndArrowheadStyle">
            <summary>
            Gets/sets the end arrowhead style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NStyle.InteractivityStyle">
            <summary>
            Gets/sets the interactivity style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NStyle.AnimationsStyle">
            <summary>
            Gets/Sets the animations style. Note that animations are not supported on all devices.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NStyle.IsEmpty">
            <summary>
            Determines whether the Style is empty (all styles are equal to null)
            </summary>
            <returns>true if the style is empty, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyle.ContainsEmptyStyle">
            <summary>
            Determines whether at least one of the contained styles is null
            </summary>
            <returns>true if at least one of the contained styles is null, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyle.GetAnimationsStyle(Nevron.Diagram.INStyleable)">
            <summary>
            Safely gets the local animations style of a styleable node
            </summary>
            <param name="styleable"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NStyle.SetAnimationsStyle(Nevron.Diagram.INStyleable,Nevron.GraphicsCore.NAnimationsStyle)">
            <summary>
            Safely sets the local animations style of a styleable node (if needed creates the style attribute)
            </summary>
            <param name="styleable"></param>
            <param name="animationsStyle"></param>
        </member>
        <member name="M:Nevron.Diagram.NStyle.GetStrokeStyle(Nevron.Diagram.INStyleable)">
            <summary>
            Safely gets the local stroke style of a styleable node
            </summary>
            <param name="styleable"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NStyle.SetStrokeStyle(Nevron.Diagram.INStyleable,Nevron.GraphicsCore.NStrokeStyle)">
            <summary>
            Safely sets the local stroke style of a styleable node (if needed creates the style attribute)
            </summary>
            <param name="styleable"></param>
            <param name="strokeStyle"></param>
        </member>
        <member name="M:Nevron.Diagram.NStyle.GetShadowStyle(Nevron.Diagram.INStyleable)">
            <summary>
            Safely gets the local shadow style of a styleable node
            </summary>
            <param name="styleable"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NStyle.SetShadowStyle(Nevron.Diagram.INStyleable,Nevron.GraphicsCore.NShadowStyle)">
            <summary>
            Safely sets the local shadow style of a styleable node (if needed creates the style attribute)
            </summary>
            <param name="styleable"></param>
            <param name="shadowStyle"></param>
        </member>
        <member name="M:Nevron.Diagram.NStyle.GetFillStyle(Nevron.Diagram.INStyleable)">
            <summary>
            Safely gets the local fill style of a styleable node
            </summary>
            <param name="styleable"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NStyle.SetFillStyle(Nevron.Diagram.INStyleable,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Safely sets the local fill style of a styleable node (if needed creates the style attribute)
            </summary>
            <param name="styleable"></param>
            <param name="fillStyle"></param>
        </member>
        <member name="M:Nevron.Diagram.NStyle.GetTextStyle(Nevron.Diagram.INStyleable)">
            <summary>
            Safely gets the local text style of a styleable node
            </summary>
            <param name="styleable"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NStyle.SetTextStyle(Nevron.Diagram.INStyleable,Nevron.GraphicsCore.NTextStyle)">
            <summary>
            Safely sets the local text style of a styleable node (if needed creates the style attribute)
            </summary>
            <param name="styleable"></param>
            <param name="textStyle"></param>
        </member>
        <member name="M:Nevron.Diagram.NStyle.GetBridgeStyle(Nevron.Diagram.INStyleable)">
            <summary>
            Safely gets the local bridge style of a styleable node
            </summary>
            <param name="styleable"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NStyle.SetBridgeStyle(Nevron.Diagram.INStyleable,Nevron.Diagram.NBridgeStyle)">
            <summary>
            Safely sets the local bridge style of a styleable node (if needed creates the style attribute)
            </summary>
            <param name="styleable"></param>
            <param name="bridgeStyle"></param>
        </member>
        <member name="M:Nevron.Diagram.NStyle.GetStartArrowheadStyle(Nevron.Diagram.INStyleable)">
            <summary>
            Safely gets the local start arrowhead style of a styleable node
            </summary>
            <param name="styleable"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NStyle.SetStartArrowheadStyle(Nevron.Diagram.INStyleable,Nevron.Diagram.NArrowheadStyle)">
            <summary>
            Safely sets the local start arrowhead style of a styleable node (if needed creates the style attribute)
            </summary>
            <param name="styleable"></param>
            <param name="arrowheadStyle"></param>
        </member>
        <member name="M:Nevron.Diagram.NStyle.GetEndArrowheadStyle(Nevron.Diagram.INStyleable)">
            <summary>
            Safely gets the local end arrowhead style of a styleable node
            </summary>
            <param name="styleable"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NStyle.SetEndArrowheadStyle(Nevron.Diagram.INStyleable,Nevron.Diagram.NArrowheadStyle)">
            <summary>
            Safely sets the local end arrowhead style of a styleable node (if needed creates the style attribute)
            </summary>
            <param name="styleable"></param>
            <param name="arrowheadStyle"></param>
        </member>
        <member name="M:Nevron.Diagram.NStyle.GetInteractivityStyle(Nevron.Diagram.INStyleable)">
            <summary>
            Safely gets the local interactivity style of a styleable node
            </summary>
            <param name="styleable"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NStyle.SetInteractivityStyle(Nevron.Diagram.INStyleable,Nevron.GraphicsCore.NInteractivityStyle)">
            <summary>
            Safely sets the local interactivity style of a styleable node (if needed creates the style attribute)
            </summary>
            <param name="styleable"></param>
            <param name="interactivityStyle"></param>
        </member>
        <member name="T:Nevron.Diagram.Batches.NBatch">
            <summary>
            The NBatch class represents a logically connected set of nodes and serves as base class for more specialized batches
            </summary>
            <remarks>
            Before using a batch you must call the Build method, which takes only one parameter - the nodes from which the batch must be built
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatch.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatch.#ctor(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatch.#ctor(Nevron.Diagram.NDocument,Nevron.Dom.NNodeList)">
            <summary>
            Creates a new batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="nodes">building nodes</param> 
        </member>
        <member name="P:Nevron.Diagram.Batches.NBatch.Nodes">
            <summary>
            Gets/sets the nodes representing the batch
            </summary>
            <remarks>
            The batch nodes are automatically populated from the Build method.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.Batches.NBatch.Document">
            <summary>
            Gets/sets the document associated with the batch
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Batches.NBatch.Bounds">
            <summary>
            Gets the batch bounds
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Batches.NBatch.ConstrainBounds">
            <summary>
            Gets the batch constrain bounds
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Batches.NBatch.IsBoundsConstrained">
            <summary>
            Determines whether the batch is bounds constrained
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatch.Build(Nevron.Dom.NNodeList)">
            <summary>
            Builds the batch from the specified nodes
            </summary>
            <param name="nodes">nodes from which to build the batch</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatch.VerifyNodesPermissions(Nevron.Dom.NNodeList,Nevron.Diagram.AbilitiesMask)">
            <summary>
            Verifies if the batch nodes have the required permissions
            </summary>
            <param name="nodes">nodes to test</param> 
            <param name="permissions">permissions</param>
            <returns>true if all nodes satisfy the permissions, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatch.VerifyPermissions(Nevron.Dom.INNode,Nevron.Diagram.AbilitiesMask)">
            <summary>
            Verifies if the specified node has the required permissions
            </summary>
            <param name="permissions">permissions mask</param>
            <param name="node">node</param>
            <returns>true if the node has the required permissions, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatch.StoreSceneTransforms(Nevron.Dom.NNodeList)">
            <summary>
            Stores the scene transformations of the specified nodes
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatch.RestoreSceneTransforms(Nevron.Dom.NNodeList,System.Collections.Hashtable)">
            <summary>
            Restores the scene transformations of the specified nodes
            </summary>
            <param name="nodes"></param>
            <param name="table"></param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatch.StoreConnections(Nevron.Dom.NNodeList,Nevron.Diagram.NDrawingDocument)">
            <summary>
            Stores the connections in which the specified nodes participate
            </summary>
            <param name="nodes"></param>
            <param name="drawing"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatch.RestoreConnections(Nevron.Diagram.NConnectionCollection,Nevron.Diagram.NDrawingDocument)">
            <summary>
            Restores the specified connections
            </summary>
            <param name="connections"></param>
            <param name="drawing"></param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatch.RemoveFromComposites(Nevron.Dom.NNodeList,System.Boolean,Nevron.Diagram.NTransactionResult)">
            <summary>
            Removes the specified nodes from the composites in which they reside
            </summary>
            <param name="nodes">nodes to remove</param>
            <param name="rollbackOnFail">whether to rethrow any exceptions</param> 
            <param name="result">result to populate with error</param>
            <returns>list of the nodes which were successfully removed</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatch.AddToComposite(Nevron.Dom.NNodeList,Nevron.Diagram.INDiagramElementComposite)">
            <summary>
            Adds the nodes to the specified composite
            </summary>
            <param name="nodes">nodes to add</param>
            <param name="composite">composite in which to add nodes</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatch.StartTransaction(System.String)">
            <summary>
            Starts a new transaction
            </summary>
            <remarks>
            Safely calls the StartTransaction method of the document history service (if attached to document)
            </remarks>
            <param name="description">transaction description</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatch.Commit">
            <summary>
            Commits the current transaction
            </summary>
            <remarks>
            Safely calls the Commit method of the document history service (if attached to document)
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatch.Rollback">
            <summary>
            Rolls back the current transaction
            </summary>
            <remarks>
            Safely calls the Rollback method of the document history service (if attached to document)
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatch.BeginUpdate">
            <summary>
            Safely calls the BeginUpdate method of the drawing document (if the batch is executed for a drawing document)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatch.EndUpdate">
            <summary>
            Safely calls the EndUpdate method of the drawing document (if the batch is executed for a drawing document)
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Batches.NBatchAction">
            <summary>
            The NBatchAction class is used to provide miscellaneous transaction based operations, 
            which are not constrained by permissions and purely rely on the interfaces implemented by the batch nodes 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchAction.#ctor(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new action batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchAction.#ctor(Nevron.Diagram.NDocument,Nevron.Dom.NNodeList)">
            <summary>
            Creates a new action batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="nodes">building nodes</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchAction.Build(Nevron.Dom.NNodeList)">
            <summary>
            Builds the action batch from the specified building nodes
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchAction.CanUpdateModelBounds">
            <summary>
            Determines whether the batch contains at least one node which is a NAggregateModel instance
            </summary>
            <returns>true if the batch contains at least one node which implements the NAggregateModel interface, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchAction.UpdateModelBounds(System.Boolean)">
            <summary>
            Calls the UpdateModelBounds method of all contained nodes, which are NAggregateModel instances
            </summary>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the model bounds cannot be updated</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchAction.CanReverse">
            <summary>
            Determines whether the batch contains at least one model 
            </summary>
            <returns>true if the batch contains at least one model, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchAction.Reverse(System.Boolean)">
            <summary>
            Calls the Reverse method of all contained models
            </summary>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the models cannot be reversed</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchAction.CanReroute">
            <summary>
            Determines whether the batch contains at least one shape which can be rerouted
            </summary>
            <returns>true if the batch contains at least one shape, which can be rerouted, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchAction.Reroute(System.Boolean)">
            <summary>
            Calls the Reroute method of all contained nodes, which implement the INRoutableShape interface
            </summary>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes cannot be rerouted</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchAction.CanReflex">
            <summary>
            Determines whether the batch contains at least one shape which can be reflexed
            </summary>
            <returns>true if the batch contains at least one shape, which can be reflexed, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchAction.Reflex(System.Boolean)">
            <summary>
            Calls the RerouteReflexive method of all contained nodes, which implement the INReflexiveShape interface
            </summary>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes cannot be rerouted reflexively</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchAction.CanChangeVisibility">
            <summary>
            Determines whether the batch contains at least one node which implements the INVisible interface
            </summary>
            <returns>true if the batch contains at least one node which implements the INVisible interface, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchAction.ChangeVisibility(System.Boolean,System.Boolean)">
            <summary>
            Changes the visible property of all contained nodes which implement INVisible interface
            </summary>
            <param name="visible">whether show/hide the nodes</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back, if some of the nodes Visible property cannot be set</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchAction.CanChangeProtection">
            <summary>
            Determines whether the batch contains at least one node, which implements the INDiagramElement interface
            </summary>
            <returns>true if the batch contains at least one diagram element, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchAction.ChangeProtection(Nevron.Diagram.NAbilities,System.Boolean)">
            <summary>
            Changes the protection of all contained shapes
            </summary>
            <param name="protection">protection to set</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back, if some of the nodes permissions cannot be set</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchAction.CanChangeInteractionStyle">
            <summary>
            Determines whether the batch contains at least one shape
            </summary>
            <returns>true if the batch contains at least one shape, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchAction.ChangeInteractionStyle(Nevron.Diagram.InteractionStyleMask,System.Boolean)">
            <summary>
            Changes the interaction style of all contained shapes
            </summary>
            <param name="mask">interaction style mask to set</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back, if some of the nodes interaction style cannot be set</param> 
            <returns>batch result</returns>
        </member>
        <member name="T:Nevron.Diagram.Batches.NBatchCompose">
            <summary>
            The NBatchCompose class is used to facilitate the composition of shapes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchCompose.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchCompose.#ctor(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchCompose.#ctor(Nevron.Diagram.NDocument,Nevron.Dom.NNodeList)">
            <summary>
            Creates a new batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="nodes">building nodes</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchCompose.Build(Nevron.Dom.NNodeList)">
            <summary>
            Builds the batch from the specified building nodes
            </summary>
            <remarks>
            The implementation will filter the building nodes for PermissionCompose
            </remarks>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchCompose.CanCompose(Nevron.Diagram.INDiagramElementComposite,System.Boolean)">
            <summary>
            Determines whether all contained batch nodes can form a new composite shape under the specified composite
            </summary>
            <remarks>
            The nodes array must contain at least 1 node. All shapes in the array must have a compose permission.
            </remarks>
            <param name="composite">optional composite in which the shape must be added</param> 
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes cannot be composed</param> 
            <returns>true if all nodes can be composed, otherwise false</returns>s
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchCompose.Compose(Nevron.Diagram.INDiagramElementComposite,System.Boolean,Nevron.Diagram.NCompositeShape@)">
            <summary>
            Creates a new composite shape containing the primitives of all selected shapes and adds it in the specified composite (if it is provided)
            </summary>
            <param name="composite">composite in which to add the new composite shape (can be null)</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the shapes cannot be composed</param> 
            <param name="compositeShape">the newly created composite shape</param>
            <returns>batch result</returns>
        </member>
        <member name="T:Nevron.Diagram.Batches.NBatchDecompose">
            <summary>
            The NBatchDecompose class is used to facilitate the decomposition of shapes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchDecompose.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchDecompose.#ctor(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchDecompose.#ctor(Nevron.Diagram.NDocument,Nevron.Dom.NNodeList)">
            <summary>
            Creates a new batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="nodes">building nodes</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchDecompose.Build(Nevron.Dom.NNodeList)">
            <summary>
            Builds the batch from the specified building nodes
            </summary>
            <remarks>
            The implementation will filter the building nodes for PermissionDecompose
            </remarks>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchDecompose.CanDecompose(Nevron.Diagram.INDiagramElementComposite,System.Boolean)">
            <summary>
            Determines whether all contained batch nodes can be decomposed 
            </summary>
            <remarks>
            The nodes array must contain at least 1 shape. All shapes in the array must have a decompose permission.
            </remarks>
            <param name="composite">optional composite in which the resulting shapes must be added</param> 
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes cannot be composed</param> 
            <returns>true if all nodes can be composed, otherwise false</returns>s
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchDecompose.Decompose(Nevron.Diagram.INDiagramElementComposite,System.Boolean,Nevron.Dom.NNodeList@)">
            <summary>
            Creates a new primitive shape for each primitive model contained in the batch shapes, and destroys the batch shapes. 
            Optionally adds the new shapes to the specified composite (if it is provided)
            </summary>
            <param name="composite">composite in which to add the new shapes (can be null)</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the shapes cannot be decomposed</param> 
            <param name="primitiveShapes">the newly created primitive shapes</param>
            <returns>batch result</returns>
        </member>
        <member name="T:Nevron.Diagram.Batches.NBatchDelete">
            <summary>
            The NBatchDelete class is used to facilitate the deletion of multiple nodes 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchDelete.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchDelete.#ctor(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new delete batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchDelete.#ctor(Nevron.Diagram.NDocument,Nevron.Dom.NNodeList)">
            <summary>
            Creates a new delete batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="nodes">building nodes</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchDelete.Build(Nevron.Dom.NNodeList)">
            <summary>
            Builds the delete batch from the specified building nodes
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchDelete.CanDelete(System.Boolean)">
            <summary>
            Determines whether all contained batch nodes can be deleted
            </summary>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes cannot be deleted</param> 
            <returns>true if all nodes can be deleted, otherwise false</returns>s
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchDelete.Delete(System.Boolean)">
            <summary>
            Deletes all batch nodes from their composites 
            </summary>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes cannot be deleted</param> 
            <returns>batch result</returns>
        </member>
        <member name="T:Nevron.Diagram.Batches.NBatchFormat">
            <summary>
            The NBatchFormat class is used to provide transaction based format operations for styleable nodes
            </summary>
            <remarks>
            The Build method filters the building nodes for INStyleable interface implementation.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchFormat.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchFormat.#ctor(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new format batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchFormat.#ctor(Nevron.Diagram.NDocument,Nevron.Dom.NNodeList)">
            <summary>
            Creates a new format batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="nodes">building nodes</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchFormat.Build(Nevron.Dom.NNodeList)">
            <summary>
            Builds the format batch from the specified building nodes
            </summary>
            <remarks>
            The implementation will filter the building nodes for TypeINStyleable interface implementation
            </remarks>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchFormat.CanChangeStyle(System.Boolean)">
            <summary>
            Determines whether the style of all contained batch nodes can be change
            </summary>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes style cannot be changed</param> 
            <returns>true if all styles can be changed, otherwise false</returns>s
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchFormat.ChangeFillStyle(Nevron.GraphicsCore.NFillStyle,System.Boolean)">
            <summary>
            Changes the fill style all contained nodes which implement the INStyleable interface
            </summary>
            <param name="fillStyle">fill style to set</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes style cannot be changed</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchFormat.ChangeStrokeStyle(Nevron.GraphicsCore.NStrokeStyle,System.Boolean)">
            <summary>
            Changes the stroke style all contained nodes which implement the INStyleable interface
            </summary>
            <param name="strokeStyle">stroke style to set</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes style cannot be changed</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchFormat.ChangeShadowStyle(Nevron.GraphicsCore.NShadowStyle,System.Boolean)">
            <summary>
            Changes the shadow style all contained nodes which implement the INStyleable interface
            </summary>
            <param name="shadowStyle">shadow style to set</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes style cannot be changed</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchFormat.ChangeTextStyle(Nevron.GraphicsCore.NTextStyle,System.Boolean)">
            <summary>
            Changes the text style all contained nodes which implement the INStyleable interface
            </summary>
            <param name="textStyle">text style to set</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes style cannot be changed</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchFormat.ChangeStartArrowheadStyle(Nevron.Diagram.NArrowheadStyle,System.Boolean)">
            <summary>
            Changes the start arrowhead style of all contained nodes which implement the INStyleable interface
            </summary>
            <param name="arrowStyle">start arrowhead style to set</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes style cannot be changed</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchFormat.ChangeEndArrowheadStyle(Nevron.Diagram.NArrowheadStyle,System.Boolean)">
            <summary>
            Changes the end arrowhead style of all contained nodes which implement the INStyleable interface
            </summary>
            <param name="arrowStyle">end arrowhead style to set</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes style cannot be changed</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchFormat.ChangeBridgeStyle(Nevron.Diagram.NBridgeStyle,System.Boolean)">
            <summary>
            Changes the bridge style of all contained nodes which implement the INStyleable interface
            </summary>
            <param name="bridgeStyle">bridge style to set</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes style cannot be changed</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchFormat.ChangeInteractivityStyle(Nevron.GraphicsCore.NInteractivityStyle,System.Boolean)">
            <summary>
            Changes the interactivity style of all contained nodes which implement the INStyleable interface
            </summary>
            <param name="interactivityStyle">interactivity style to set</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes style cannot be changed</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchFormat.ChangeStyle(Nevron.Diagram.NStyle,System.Boolean)">
            <summary>
            Changes the entire style of all contained nodes which implement the INStyleable interface
            </summary>
            <param name="style">style to set</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes style cannot be changed</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchFormat.MakeBoldText(System.Boolean,System.Boolean)">
            <summary>
            Makes bold the font style of all contained nodes which implement the INStyleable interface
            </summary>
            <param name="bold">whether to make bold or not</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes style cannot be changed</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchFormat.MakeItalicText(System.Boolean,System.Boolean)">
            <summary>
            Makes italic the font style of all contained nodes which implement the INStyleable interface
            </summary>
            <param name="italic">whether to make italic or not</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes style cannot be changed</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchFormat.MakeUnderlinedText(System.Boolean,System.Boolean)">
            <summary>
            Makes underlined the font style of all contained nodes which implement the INStyleable interface
            </summary>
            <param name="underline">whether to make underlined or not</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes style cannot be changed</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchFormat.AlignTextHorizontally(Nevron.HorzAlign,System.Boolean)">
            <summary>
            Changes the horizontal text alignment of all batch nodes, which implement the INStyleable interface
            </summary>
            <param name="align">horizontal alignment to set</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes style cannot be changed</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchFormat.AlignTextVertically(Nevron.VertAlign,System.Boolean)">
            <summary>
            Changes the vertical text alignment of all batch nodes, which implement the INStyleable interface
            </summary>
            <param name="align">vertical alignment to set</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes style cannot be changed</param> 
            <returns>batch result</returns>
        </member>
        <member name="T:Nevron.Diagram.Batches.NBatchGroup">
            <summary>
            The NBatchGroup class is used to facilitate the grouping of shapes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchGroup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchGroup.#ctor(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchGroup.#ctor(Nevron.Diagram.NDocument,Nevron.Dom.NNodeList)">
            <summary>
            Creates a new batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="nodes">building nodes</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchGroup.Build(Nevron.Dom.NNodeList)">
            <summary>
            Builds the group batch from the specified building nodes
            </summary>
            <remarks>
            The implementation will filter the building nodes for PermissionGroup
            </remarks>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchGroup.CanGroup(Nevron.Diagram.INDiagramElementComposite,System.Boolean)">
            <summary>
            Determines whether all contained batch nodes can form a new group under the specified composite
            </summary>
            <remarks>
            The nodes array must contain at least 1 node. All shapes in the array must have a group permission. 
            </remarks>
            <param name="composite">optional composite in which the group must be added</param> 
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes cannot be grouped</param> 
            <returns>true if all nodes can be grouped, otherwise false</returns>s
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchGroup.Group(Nevron.Diagram.INDiagramElementComposite,System.Boolean,Nevron.Diagram.NGroup@)">
            <summary>
            Creates a new group containing all batch shapes and adds it in the specified composite (if it is provided)
            </summary>
            <param name="composite">composite in which to add the new group (can be null)</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes cannot be grouped</param> 
            <param name="group">the newly created group</param>
            <returns>batch result</returns>
        </member>
        <member name="T:Nevron.Diagram.Batches.NBatchInsert">
            <summary>
            The NBatchInsert class is used to facilitate the insertion of multiple nodes in one composite
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchInsert.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchInsert.#ctor(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new insert batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchInsert.#ctor(Nevron.Diagram.NDocument,Nevron.Dom.NNodeList)">
            <summary>
            Creates a new insert batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="nodes">building nodes</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchInsert.#ctor(Nevron.Diagram.NDocument,Nevron.Dom.INNode)">
            <summary>
            Creates a new insert batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="node">building node</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchInsert.Build(Nevron.Dom.NNodeList)">
            <summary>
            Builds the insert batch from the specified building nodes
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchInsert.CanInsert(Nevron.Diagram.INDiagramElementComposite,System.Int32,System.Boolean)">
            <summary>
            Determines whether the nodes contained in the batch can be inserted in the specified composite
            </summary>
            <param name="composite">composite</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes cannot be inserted</param> 
            <param name="startIndex">index from which to start insertion</param> 
            <returns>true if the nodes can be inserted in the composite, otherwise false</returns>s
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchInsert.Insert(Nevron.Diagram.INDiagramElementComposite,System.Int32,System.Boolean)">
            <summary>
            Inserts all batch nodes in the specified composite
            </summary>
            <param name="composite">composite</param>
            <param name="startIndex">index from which to start the insertion</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes cannot be inserted</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchInsert.Append(Nevron.Diagram.INDiagramElementComposite,System.Boolean)">
            <summary>
            Appends all batch nodes to the specified composite
            </summary>
            <param name="composite">composite</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes cannot be inserted</param> 
            <returns>batch result</returns>
        </member>
        <member name="P:Nevron.Diagram.Batches.NBatchInsert.Connections">
            <summary>
            Optional connections to import
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Batches.NBatchInsert.ConnectionContainer">
            <summary>
            Optional connections container in which to import connections
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Batches.NBatchLayout">
            <summary>
            The NBatchLayout class is used to provide transaction based layout operations
            </summary>
            <remarks>
            The Build method filters the building nodes for valid bounds. Once the batch is built you can execute the following set of layout commands:
            <list type="bullet">
            <item>
            	<term>Alignment</term>
            	<description>helps you align nodes to a virtual grid, align their lefts, rights, tops and bottoms as well as align their centers and middles</description>
            </item>	
            <item>
            	<term>Resize</term>
            	<description>helps you size to nodes to a virtual grid, make their size, width and height identical, as well as increase the nodes width and height</description>
            </item>	
            <item>
            	<term>Horizontal spacing</term>
            	<description>helps you increase, decrease, remove and make equal the horizontal spacing of nodes</description>
            </item>	
            <item>
            	<term>Vertical spacing</term>
            	<description>helps you increase, decrease, remove and make equal the vertical spacing of nodes</description>
            </item>	
            <item>
            	<term>Center in document</term>
            	<description>helps you center the nodes horizontally or vertically in the document</description>
            </item>	
            </list>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.#ctor(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new layout batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.#ctor(Nevron.Diagram.NDocument,Nevron.Dom.NNodeList)">
            <summary>
            Creates a new layout batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="nodes">building nodes</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.Build(Nevron.Dom.NNodeList)">
            <summary>
            Builds the formatter batch from the specified building nodes
            </summary>
            <remarks>
            The implementation will remove all nodes which are descendants of other nodes and fill filter the remaining nodes with a NValidBoundsFilter filter.
            </remarks>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.CanAlignToGrid(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF,System.Boolean)">
            <summary>
            Determines whether the aling to grid operation can be performed
            </summary>
            <param name="gridOrigin">grid origin</param> 
            <param name="gridCellSize">grid cell size</param> 
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes permissions do not allow the operation</param> 
            <returns>true if the to align grid operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.AlignToGrid(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF,System.Boolean)">
            <summary>
            Aligns the locations of the nodes from this batch to the specified virtual grid (defined by origin and cell size)
            </summary>
            <remarks>
            If a valid document is provided this method will record the changes in a single transaction.
            </remarks>
            <param name="gridOrigin">origin point of the grid in scene coordinates</param>
            <param name="gridCellSize">grid cell size in scene coordinates</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes style cannot be changed</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.CanAlignHorizontally(Nevron.Dom.INNode,System.Boolean)">
            <summary>
            Determines whether the aling lefts operation can be performed
            </summary>
            <param name="anchor">anchor to which to align</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes permissions do not allow the operation</param> 
            <returns>true if the align lefts operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.AlignHorizontally(Nevron.Dom.INNode,Nevron.HorzAlign,System.Boolean)">
            <summary>
            Aligns the lefts of the nodes from this batch to the specified anchor left
            </summary>
            <remarks>
            If a valid document is provided this method will record the changes in a single transaction.
            </remarks>
            <param name="anchor">anchor to which to align</param>
            <param name="align">horizontal align</param> 
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes style cannot be changed</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.CanAlignVertically(Nevron.Dom.INNode,System.Boolean)">
            <summary>
            Determines whether the aling tops operation can be performed
            </summary>
            <param name="anchor">anchor to which to align</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes permissions do not allow the operation</param> 
            <returns>true if the align tops operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.AlignVertically(Nevron.Dom.INNode,Nevron.VertAlign,System.Boolean)">
            <summary>
            Aligns the tops of the nodes from this batch to the specified anchor top
            </summary>
            <remarks>
            If a valid document is provided this method will record the changes in a single transaction.
            </remarks>
            <param name="anchor">anchor to which to align</param>
            <param name="align">vertical align</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes permissions do not allow the operation</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.CanSizeToGrid(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF,System.Boolean)">
            <summary>
            Determines whether the size to grid operation can be performed
            </summary>
            <param name="gridOrigin">grid origin</param> 
            <param name="gridCellSize">grid cell size</param> 
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes permissions do not allow the operation</param> 
            <returns>true if the to align grid operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.SizeToGrid(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF,System.Boolean)">
            <summary>
            Sizes the nodes from this batch to fit specified virtual grid cells (defined by origin and cell size)
            </summary>
            <remarks>
            If a valid document is provided this method will record the changes in a single transaction.
            </remarks>
            <param name="gridOrigin">origin point of the grid in scene coordinates</param>
            <param name="gridCellSize">grid cell size in scene coordinates</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes permissions do not allow the operation</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.CanMakeSameWidth(Nevron.Dom.INNode,System.Boolean)">
            <summary>
            Determines whether the make same width operation can be performed
            </summary>
            <param name="anchor">anchor</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes permissions do not allow the operation</param> 
            <returns>true if the make same width operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.MakeSameWidth(Nevron.Dom.INNode,System.Boolean)">
            <summary>
            Makes the width of the nodes from this batch equal to the specified anchor width
            </summary>
            <remarks>
            If a valid document is provided this method will record the changes in a single transaction.
            </remarks>
            <param name="anchor">anchor whose width to use</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes permissions do not allow the operation</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.CanMakeSameHeight(Nevron.Dom.INNode,System.Boolean)">
            <summary>
            Determines whether the make same height operation can be performed
            </summary>
            <param name="anchor">anchor</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes permissions do not allow the operation</param> 
            <returns>true if the make same height operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.MakeSameHeight(Nevron.Dom.INNode,System.Boolean)">
            <summary>
            Makes the height of the nodes from this batch equal to the specified anchor height
            </summary>
            <remarks>
            If a valid document is provided this method will record the changes in a single transaction.
            </remarks>
            <param name="anchor">anchor whose height to use</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes permissions do not allow the operation</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.CanMakeSameSize(Nevron.Dom.INNode,System.Boolean)">
            <summary>
            Determines whether the make same size operation can be performed
            </summary>
            <param name="anchor">anchor</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes permissions do not allow the operation</param> 
            <returns>true if the make same size operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.MakeSameSize(Nevron.Dom.INNode,System.Boolean)">
            <summary>
            Makes the size of the nodes from this batch equal to the specified anchor size
            </summary>
            <remarks>
            If a valid document is provided this method will record the changes in a single transaction.
            </remarks>
            <param name="anchor">anchor whose size to use</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes permissions do not allow the operation</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.CanIncreaseWidth(System.Single,System.Boolean)">
            <summary>
            Determines whether the increase width operation can be performed
            </summary>
            <param name="step">step with which to increase the width of all nodes (can be negative)</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes permissions do not allow the operation</param> 
            <returns>true if the increase width operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.IncreaseWidth(System.Single,System.Boolean)">
            <summary>
            Increased the width of the nodes from this batch with the specified step
            </summary>
            <remarks>
            Depending on whether the step is positive or not this method will record either an increase width or decrease width transaction. 
            </remarks>
            <param name="step">step with which to increase the width of all nodes (can be negative)</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes permissions do not allow the operation</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.CanIncreaseHeight(System.Single,System.Boolean)">
            <summary>
            Determines whether the increase height operation can be performed
            </summary>
            <param name="step">step with which to increase the height of all nodes (can be negative)</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes permissions do not allow the operation</param> 
            <returns>true if the increase height operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.IncreaseHeight(System.Single,System.Boolean)">
            <summary>
            Increased the height of the nodes from this batch with the specified step
            </summary>
            <remarks>
            Depending on whether the step is positive or not this method will record either an increase height or decrease height transaction. 
            </remarks>
            <param name="step">step with which to increase the height of all nodes (can be negative)</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes permissions do not allow the operation</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.CanMakeHorizontalSpacingEqual">
            <summary>
            Determines whether the make horizontal spacing equal operation can be performed
            </summary>
            <returns>true if the make horizontal spacing equal operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.MakeHorizontalSpacingEqual">
            <summary>
            Makes the horizontal spacing between the batch nodes equal
            </summary>
            <remarks>
            The first and end nodes between which the rest of the batch nodes are evenly spaced are the nodes with smaller and larger X position.
            </remarks>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.CanIncreaseHorizontalSpacing(Nevron.Dom.INNode,System.Single)">
            <summary>
            Determines whether the increase horizontal spacing operation can be performed
            </summary>
            <param name="anchor">anchor</param> 
            <param name="spacingStep">spacing step</param> 
            <returns>true if the increase horizontal spacing operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.IncreaseHorizontalSpacing(Nevron.Dom.INNode,System.Single)">
            <summary>
            Increases the horizontal spacing between the batch nodes with the specified spacing step and preserves the location of the specified anchor
            </summary>
            <param name="anchor">anchor node</param>
            <param name="spacingStep">spacing step</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.CanDecreaseHorizontalSpacing(Nevron.Dom.INNode,System.Single)">
            <summary>
            Determines whether the decrease horizontal spacing operation can be performed
            </summary>
            <param name="anchor">anchor</param> 
            <param name="spacingStep">spacing step</param> 
            <returns>true if the decrease horizontal spacing operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.DecreaseHorizontalSpacing(Nevron.Dom.INNode,System.Single)">
            <summary>
            Decreases the horizontal spacing between the batch nodes with the specified spacing step and preserves the location of the specified anchor
            </summary>
            <param name="anchor">anchor node</param>
            <param name="spacingStep">spacing step</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.CanRemoveHorizontalSpacing(Nevron.Dom.INNode)">
            <summary>
            Determines whether the remove horizontal spacing operation can be performed
            </summary>
            <param name="anchor">anchor</param> 
            <returns>true if the remove horizontal spacing operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.RemoveHorizontalSpacing(Nevron.Dom.INNode)">
            <summary>
            Removes the horizontal spacing between the batch nodes and preserves the location of the specified anchor
            </summary>
            <param name="anchor">anchor node</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.CanMakeVerticalSpacingEqual">
            <summary>
            Determines whether the make vertical spacing equal operation can be performed
            </summary>
            <returns>true if the make vertical spacing equal operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.MakeVerticalSpacingEqual">
            <summary>
            Makes the vertical spacing between the batch nodes equal
            </summary>
            <remarks>
            The first and end nodes between which the rest of the batch nodes are evenly spaced are the nodes with smaller and larger Y position.
            </remarks>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.CanIncreaseVerticalSpacing(Nevron.Dom.INNode,System.Single)">
            <summary>
            Determines whether the increase horizontal spacing operation can be performed
            </summary>
            <param name="anchor">anchor</param> 
            <param name="spacingStep">spacing step</param> 
            <returns>true if the increase horizontal spacing operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.IncreaseVerticalSpacing(Nevron.Dom.INNode,System.Single)">
            <summary>
            Increases the vertical spacing between the batch nodes with the specified spacing step and preserves the location of the specified anchor
            </summary>
            <param name="anchor">anchor node</param>
            <param name="spacingStep">spacing step</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.CanDecreaseVerticalSpacing(Nevron.Dom.INNode,System.Single)">
            <summary>
            Determines whether the decrease vertical spacing operation can be performed
            </summary>
            <param name="anchor">anchor</param> 
            <param name="spacingStep">spacing step</param> 
            <returns>true if the decrease vertical spacing operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.DecreaseVerticalSpacing(Nevron.Dom.INNode,System.Single)">
            <summary>
            Decreases the vertical spacing between the batch nodes with the specified spacing step and preserves the location of the specified anchor
            </summary>
            <param name="anchor">anchor node</param>
            <param name="spacingStep">spacing step</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.CanRemoveVerticalSpacing(Nevron.Dom.INNode)">
            <summary>
            Determines whether the remove vertical spacing operation can be performed
            </summary>
            <param name="anchor">anchor</param> 
            <returns>true if the remove vertical spacing operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.RemoveVerticalSpacing(Nevron.Dom.INNode)">
            <summary>
            Removes the vertical spacing between the batch nodes and preserves the location of the specified anchor
            </summary>
            <param name="anchor">anchor node</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.CanCenterInDocumentHorizontally(System.Boolean)">
            <summary>
            Determines whether the center in document horizontally operation can be performed
            </summary>
            <returns>true if the center in document horizontally operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.CenterInDocumentHorizontally(System.Boolean)">
            <summary>
            Centers the batch nodes horizontally in the document
            </summary>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.CanCenterInDocumentVertically(System.Boolean)">
            <summary>
            Determines whether the center in document vertically operation can be performed
            </summary>
            <returns>true if the center in document vertically operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.CenterInDocumentVertically(System.Boolean)">
            <summary>
            Centers the batch nodes vertically in the document
            </summary>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.VerifyAnchor(Nevron.Dom.INNode)">
            <summary>
            Verifies if the specified node is a valid anchor node
            </summary>
            <remarks>
            By default a valid anchor node is a a not null node reference, which has valid bounds and is a member of the batch.
            </remarks>
            <param name="anchor">anchor to test</param>
            <returns>true if the node is a valid anchor, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.SnapPoint(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Snaps the specified point to a virtual grid
            </summary>
            <param name="point">point to snap</param>
            <param name="gridOrigin">grid origin</param>
            <param name="gridCellSize">grid cell size</param>
            <returns>point snapped to the grid</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.SortNodes(Nevron.Dom.NNodeList,System.Collections.IComparer)">
            <summary>
            Sorts the specified nodes using the specified comparer
            </summary>
            <param name="nodes">nodes to sort</param> 
            <param name="comparer">comparer to use</param>
            <returns>NNodeList containing the sorted batch nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.pWCE.Compare(System.Object,System.Object)">
            <summary>
            Compares the X position of the a and b object bounds
            </summary>
            <param name="QWCE"></param>
            <param name="rWCE"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchLayout.SWCE.Compare(System.Object,System.Object)">
            <summary>
            Compares the Y position of the a and b object bounds
            </summary>
            <param name="tWCE"></param>
            <param name="UWCE"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Batches.NBatchReorder">
            <summary>
            The NBatchReorder class is used to facilitate the reorder of nodes in their containers
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchReorder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchReorder.#ctor(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new reorder batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchReorder.#ctor(Nevron.Diagram.NDocument,Nevron.Dom.NNodeList)">
            <summary>
            Creates a new reorder batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="nodes">building nodes</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchReorder.Build(Nevron.Dom.NNodeList)">
            <summary>
            Builds the reorder batch from the specified building nodes
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchReorder.CanBringForward(System.Boolean)">
            <summary>
            Determines whether the bring forward operation can be performed
            </summary>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes cannot be brought forward</param> 
            <returns>true if the operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchReorder.BringForward(System.Boolean)">
            <summary>
            Brings the batch nodes forward in the ZOrder
            </summary>
            <param name="rollbackOnFail">whether the transaction should be rolled back, if some of the nodes cannot be brought forward</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchReorder.BringToFront(System.Boolean)">
            <summary>
            Brings the batch nodes to front most position in the ZOrder
            </summary>
            <param name="rollbackOnFail">whether the transaction should be rolled back, if some of the nodes cannot be brought to front</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchReorder.CanSendBackward(System.Boolean)">
            <summary>
            Determines whether the send backward operation can be performed
            </summary>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes cannot be brought forward</param> 
            <returns>true if the operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchReorder.SendBackward(System.Boolean)">
            <summary>
            Sends the batch nodes backward in the ZOrder
            </summary>
            <param name="rollbackOnFail">whether the transaction should be rolled back, if some of the nodes cannot be send backward</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchReorder.SendToBack(System.Boolean)">
            <summary>
            Sends the batch nodes to back most position in the ZOrder
            </summary>
            <param name="rollbackOnFail">whether the transaction should be rolled back, if some of the nodes cannot be send to back</param> 
            <returns>batch result</returns>
        </member>
        <member name="T:Nevron.Diagram.Batches.NBatchTransform">
            <summary>
            The NBatchTransform class is used to facilitate transformation based operations on a set of nodes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchTransform.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchTransform.#ctor(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new transform batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchTransform.#ctor(Nevron.Diagram.NDocument,Nevron.Dom.NNodeList)">
            <summary>
            Creates a new transform batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="nodes">building nodes</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchTransform.Build(Nevron.Dom.NNodeList)">
            <summary>
            Builds the transformer batch from the specified building nodes
            </summary>
            <remarks>
            The implementation will filter the building nodes for NModel base type
            </remarks>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchTransform.CanFlip(System.Boolean)">
            <summary>
            Determines whether a flip operation can be performed
            </summary>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes style cannot be changed</param> 
            <returns>true if a flip operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchTransform.FlipHorizontal(System.Boolean)">
            <summary>
            Flips the batch nodes horizontally
            </summary>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes style cannot be changed</param> 
            <returns>true if the flip was successful, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchTransform.FlipVertical(System.Boolean)">
            <summary>
            Flips the batch nodes vertically
            </summary>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes style cannot be changed</param> 
            <returns>true if the flip was successful, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchTransform.CanRotate(System.Single,System.Boolean)">
            <summary>
            Determines whether the rotate operation can be performed
            </summary>
            <param name="rotationStep"></param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes style cannot be changed</param> 
            <returns>true if the rotate operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchTransform.Rotate(System.Single,System.Boolean)">
            <summary>
            Rotates the batch nodes to the left with the specified step (in degrees)
            </summary>
            <param name="rotationStep">rotation step in degrees</param> 
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes style cannot be changed</param> 
            <returns>true if the rotate was successful, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.Batches.NBatchTranslate">
            <summary>
            The NBatchTranslate class is used to facilitate the translation 
            of multiple nodes together with their translation slaves
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchTranslate.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchTranslate.#ctor(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new translate entity associated with the specified document
            </summary>
            <param name="document">document with which the entity is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchTranslate.#ctor(Nevron.Diagram.NDocument,Nevron.Dom.NNodeList)">
            <summary>
            Creates a new translate entity associated with the specified document and builds it
            </summary>
            <param name="document">document with which the entity is associated (can be null)</param>
            <param name="nodes">building nodes</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchTranslate.Build(Nevron.Dom.NNodeList)">
            <summary>
            Builds the translator entity from the specified building nodes
            </summary>
            <remarks>
            The implementation will first filter the building nodes for INTranslatable interface implementation. 
            Then it will append the resulting node translation slaves. 
            </remarks>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchTranslate.CanTranslate(System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the translate can be performed with the specified offsets
            </summary>
            <param name="dx">dx</param>
            <param name="dy">dy</param>
            <param name="discardMovePermissions">indicates whether the move permissions of the nodes must be discarded</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes cannot be translated</param> 
            <returns>true if the translation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchTranslate.Translate(System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Translates the entity with the specified x and y amount
            </summary>
            <remarks>
            If the move permissions of a particular node do not allow x or y move the respective delta will be set to 0. 
            In this case the transaction will be considered as incomplete.
            </remarks>
            <param name="dx">x translate in scene coordinates</param>
            <param name="dy">y translate in scene coordinates</param>
            <param name="discardMovePermissions">indicates whether the move permissions of the nodes must be discarded</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes cannot be translated</param> 
            <returns>true if the nodes were successfully translated, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchTranslate.CanTranslate(Nevron.GraphicsCore.CompassDirection,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the translate can be performed with the specified parameterd
            </summary>
            <param name="direction">translate direction</param> 
            <param name="step">translate step</param> 
            <param name="discardMovePermissions">indicates whether the move permissions of the nodes must be discarded</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes cannot be translated</param> 
            <returns>true if the operation succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchTranslate.Translate(Nevron.GraphicsCore.CompassDirection,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Translates the entity with the specified step in the specified direction
            </summary>
            <param name="direction">translate direction</param> 
            <param name="step">translate step</param> 
            <param name="discardMovePermissions">indicates whether the move permissions of the nodes must be discarded</param>
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the nodes cannot be translated</param> 
            <returns>batch result</returns> 
        </member>
        <member name="P:Nevron.Diagram.Batches.NBatchTranslate.ContainsXMoveable">
            <summary>
            Indicates whether the entity contains a X moveable node
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Batches.NBatchTranslate.ContainsYMoveable">
            <summary>
            Indicates whether the entity contains a Y moveable node
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchTranslate.LockDependantShapesUpdates(System.Boolean)">
            <summary>
            Locks/unlocks the updates between connectes shapes
            </summary>
            <param name="lockUpdates"></param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchTranslate.AppendTranslationSlaves">
            <summary>
            Appends all translation slaves to the Nodes array.
            </summary>
            <remarks>
            The method will recursively add the translation slaves of translation slaves. 
            This method is called by the Build method after the Nodes array has been initialized with the specified building nodes.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchTranslate.UnionMovePermissions">
            <summary>
            Unions the entity nodes move permissions
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchTranslate.GetOffsetFromDirectionAndStep(Nevron.GraphicsCore.CompassDirection,System.Single,System.Single@,System.Single@)">
            <summary>
            Obtains a translation offset from a compass direction and step 
            </summary>
            <param name="direction"></param>
            <param name="step"></param>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="T:Nevron.Diagram.Batches.NBatchUngroup">
            <summary>
            The NBatchUngroup class is used to facilitate the ungrouping of groups
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchUngroup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchUngroup.#ctor(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchUngroup.#ctor(Nevron.Diagram.NDocument,Nevron.Dom.NNodeList)">
            <summary>
            Creates a new batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="nodes">building nodes</param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchUngroup.Build(Nevron.Dom.NNodeList)">
            <summary>
            Builds the batch from the specified building nodes
            </summary>
            <remarks>
            The implementation will filter the building nodes for PermissionUngroup
            </remarks>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchUngroup.CanUngroup(Nevron.Diagram.INDiagramElementComposite,System.Boolean)">
            <summary>
            Determines whether all contained groups can be ungrouped
            </summary>
            <param name="composite">optional composite in which the group shapes must be added</param> 
            <param name="rollbackOnFail">whether the transaction should be rolled back if some of the groups cannot be ungrouped</param> 
            <returns>true if all groups can be grouped, otherwise false</returns>s
        </member>
        <member name="M:Nevron.Diagram.Batches.NBatchUngroup.Ungroup(Nevron.Diagram.INDiagramElementComposite,System.Boolean,Nevron.Dom.NNodeList@)">
            <summary>
            Ungroups all contained groups and adds their shapes in the specified composite (if it is provided).
            </summary>
            <param name="composite">Composite in which to add the groups shapes (can be null).</param>
            <param name="rollbackOnFail">Determines whether the transaction should be rolled back if some of the groups cannot be ungrouped.</param> 
            <param name="shapes">List of resulting shapes.</param>
            <returns>batch result</returns>
        </member>
        <member name="T:Nevron.Diagram.NControlPointCollection">
            <summary>
            The NControlPointCollection is a strongly typed collection containing NControlPoint instances
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NControlPointCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NControlPointCollection.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NControlPointCollection.EnumInstantiatableTypes">
            <summary>
            Enumerates the known types, which can be instanciated and added to this composite at runtime
            </summary>
            <remarks>
            Overriden to return the type of NControlPoint
            </remarks>
            <returns>types of the nodes which can be instanciated and added to this composite at runtime</returns>
        </member>
        <member name="M:Nevron.Diagram.NControlPointCollection.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Overriden to accept only nodes of type NControlPoint
            </summary>
            <param name="index">index at which the node must be inserted</param>
            <param name="node">node which must be inserted</param>
            <returns>true if the node can be inserted, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.NDecoratorCollection">
            <summary>
            The NDecoratorCollection is a strongly typed collection containing NDecorator instances
            </summary>
            <remarks>
            A reference to this class can be obtained from the Decorators property of the NShape class
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDecoratorCollection.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            Initially the AllowSelect permission are set to false. 
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDecoratorCollection.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDecoratorCollection.EnumInstantiatableTypes">
            <summary>
            Enumerates the known types, which can be instanciated and added to this composite at runtime
            </summary>
            <remarks>
            Overriden to return the types of the NBoundsLabel, NRotatedBoundsLabel and NLogicalLineLabel 
            </remarks>
            <returns>types of the nodes which can be instanciated and added to this composite at runtime</returns>
        </member>
        <member name="M:Nevron.Diagram.NDecoratorCollection.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Overriden to accept only nodes of type NDecorator
            </summary>
            <param name="index">index at which the node must be inserted</param>
            <param name="node">node which must be inserted</param>
            <returns>true if the node can be inserted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDecoratorCollection.Invalidate">
            <summary>
            Invalidates the contained labels
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDecoratorCollection.PaintBackground(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the background of all contained decorators
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.NDecoratorCollection.PaintForeground(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the foreground of all contained decorators
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.NDecoratorCollection.HitTest(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext,System.Boolean)">
            <summary>
            Hit tests the decorators by point
            </summary>
            <param name="point"></param>
            <param name="context"></param>
            <param name="shapeHitTestableOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDecoratorCollection.HitTest(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext,System.Boolean)">
            <summary>
            Hit tests the decorators by rectangle
            </summary>
            <param name="rectangle"></param>
            <param name="context"></param>
            <param name="shapeHitTestableOnly"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NDiagramElementCollection">
            <summary>
            The NDiagramElementCollection class represents a generic collection of diagram elements and 
            serves as base class for all strongly typed collections in the DOM.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to update the references of all contained elements
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <remarks>
            Overriden to propagate the call to all contained nodes
            </remarks>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.NDiagramElementCollection.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.GetEnumerator">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.EnumInstantiatableTypes">
            <summary>
            Enumerates the known types, which can be instantiated and inserted to this composite at runtime
            </summary>
            <returns>types of the nodes which can be instanciated and inserted to this composite at runtime</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.QueryNextName(Nevron.Diagram.INDiagramElement)">
            <summary>
            Queries for the next unique name, which will be assigned to the specified element if it is inserted to this composite
            </summary>
            <param name="element">element for which to obtain unique name</param>
            <returns>unique name</returns>
        </member>
        <member name="P:Nevron.Diagram.NDiagramElementCollection.AutoGenerateUniqueNames">
            <summary>
            Gets/sets the whether the composite must automatically generate unique names for newly inserted nodes.
            Set this property to false if a large number of nodes is about to be inserted in the composite
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.GetChildByName(System.String)">
            <summary>
            Gets the first child element with the specified name
            </summary>
            <param name="name">child name</param>
            <returns>child diagram element</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.GetChildByName(System.String,System.Int32)">
            <summary>
            Gets the first child element with the specified name
            </summary>
            <param name="name">child name</param>
            <param name="startIndex">index to start from</param>
            <returns>child diagram element</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.GetChildFromId(System.Int32)">
            <summary>
            Obtains a child element by its id
            </summary>
            <param name="id">id of the node</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.GetChildFromUniqueId(System.Guid)">
            <summary>
            Obtains a child element by its unique id
            </summary>
            <param name="uid">unique id of the element</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.GetDescendantFromId(System.Int32,System.Int32)">
            <summary>
            Obtains a element node by its id
            </summary>
            <param name="id">id of the element</param>
            <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.GetDescendantFromUniqueId(System.Guid,System.Int32)">
            <summary>
            Obtains a child element by its unique id
            </summary>
            <param name="uid">unique id of the node</param>
            <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.IndexOfChild(Nevron.Dom.INNode)">
            <summary>
            Gets the index of the specified node in the container
            </summary>
            <param name="node">the node to locate</param>
            <returns>index of the node</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.GetChildAt(System.Int32)">
            <summary>
            Gets the child node at the specified index
            </summary>
            <param name="index">index</param>
            <returns>node at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.SetChildIndex(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Sets a new index of the specified child node
            </summary>
            <param name="node">node whose index to change</param>
            <param name="index">new index</param>
            <returns>previous node index</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.IsChild(Nevron.Dom.INNode)">
            <summary>
            Determines whether the specified node is a child node for this container
            </summary>
            <param name="node">node to check</param>
            <returns>true if it is a child node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.ChildrenCount(Nevron.Filters.INFilter)">
            <summary>
            Returns the number of child nodes which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <returns>children count, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.Children(Nevron.Filters.INFilter)">
            <summary>
            Obtains the child nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.AccumulateChildren(Nevron.Filters.INFilter,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the children contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="list">list to which to append the child nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.IsDescendant(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Queries whether the specified node is a descendant of this node
            </summary>
            <param name="node">node to look for</param>
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>true if the node is a descendant node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.DescendantsCount(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Returns the number of descendant nodes, which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>count of descendants, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.Descendants(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Obtains the descentant nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.AccumulateDescendants(Nevron.Filters.INFilter,System.Int32,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the descendants contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <param name="list">list to which to append the descendant nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.GetEnumerator(Nevron.Filters.INFilter)">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.AddChild(Nevron.Dom.INNode)">
            <summary>
            Adds a child node
            </summary>
            <param name="node">node to add</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.InsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Inserts a child node at the specified index
            </summary>
            <param name="index">index at which to insert the child node</param>
            <param name="node">node to insert</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Queries whether the specified node can be inserted at the specified index
            </summary>
            <param name="index">index at which the child node will be inserted</param>
            <param name="node">child node to insert</param>
            <returns>true if the node can be inserted at the specified index, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.RemoveChild(Nevron.Dom.INNode)">
            <summary>
            Removes the specified child node from the container children
            </summary>
            <param name="node">child node to remove</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.RemoveChildAt(System.Int32)">
            <summary>
            Removes the child node at the specified index
            </summary>
            <param name="index">index of child node to remove</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.RemoveAllChildren">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCollection.CanRemoveChild(Nevron.Dom.INNode)">
            <summary>
            Queries whether the specified child node can be removed
            </summary>
            <param name="node">child node to remove</param>
            <returns>true if the node can be removed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NDiagramElementCollection.Nodes">
            <summary>
            Used by XML serialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NDiagramNodeCollection">
            <summary>
            The NDiagramNodeCollection class represents a generic collection of diagram nodes and 
            serves as base class for all strongly typed nodes collections.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCollection.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to update the references of all contained nodes
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCollection.GetEnumerator">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCollection.IndexOfChild(Nevron.Dom.INNode)">
            <summary>
            Gets the index of the specified node in the container
            </summary>
            <param name="node">the node to locate</param>
            <returns>index of the node</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCollection.GetChildAt(System.Int32)">
            <summary>
            Gets the child node at the specified index
            </summary>
            <param name="index">index</param>
            <returns>node at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCollection.SetChildIndex(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Sets a new index of the specified child node
            </summary>
            <param name="node">node whose index to change</param>
            <param name="index">new index</param>
            <returns>previous node index</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCollection.IsChild(Nevron.Dom.INNode)">
            <summary>
            Determines whether the specified node is a child node for this container
            </summary>
            <param name="node">node to check</param>
            <returns>true if it is a child node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCollection.ChildrenCount(Nevron.Filters.INFilter)">
            <summary>
            Returns the number of child nodes which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <returns>children count, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCollection.Children(Nevron.Filters.INFilter)">
            <summary>
            Obtains the child nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCollection.AccumulateChildren(Nevron.Filters.INFilter,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the children contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="list">list to which to append the child nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCollection.IsDescendant(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Queries whether the specified node is a descendant of this node
            </summary>
            <param name="node">node to look for</param>
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>true if the node is a descendant node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCollection.DescendantsCount(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Returns the number of descendant nodes, which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>count of descendants, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCollection.Descendants(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Obtains the descentant nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCollection.AccumulateDescendants(Nevron.Filters.INFilter,System.Int32,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the descendants contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <param name="list">list to which to append the descendant nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCollection.GetEnumerator(Nevron.Filters.INFilter)">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCollection.AddChild(Nevron.Dom.INNode)">
            <summary>
            Adds a child node
            </summary>
            <param name="node">node to add</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCollection.InsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Inserts a child node at the specified index
            </summary>
            <param name="index">index at which to insert the child node</param>
            <param name="node">node to insert</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCollection.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Queries whether the specified node can be inserted at the specified index
            </summary>
            <param name="index">index at which the child node will be inserted</param>
            <param name="node">child node to insert</param>
            <returns>true if the node can be inserted at the specified index, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCollection.RemoveChild(Nevron.Dom.INNode)">
            <summary>
            Removes the specified child node from the container children
            </summary>
            <param name="node">child node to remove</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCollection.RemoveChildAt(System.Int32)">
            <summary>
            Removes the child node at the specified index
            </summary>
            <param name="index">index of child node to remove</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCollection.RemoveAllChildren">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCollection.CanRemoveChild(Nevron.Dom.INNode)">
            <summary>
            Queries whether the specified child node can be removed
            </summary>
            <param name="node">child node to remove</param>
            <returns>true if the node can be removed, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.NErmColumnCollection">
            <summary>
            A strongly typed collection containing ERM columns.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NErmColumnCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NErmColumnCollection.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NErmColumnCollection.AddChild(Nevron.Dom.INNode)">
            <summary>
            Adds a child node
            </summary>
            <param name="node">node to add</param>
        </member>
        <member name="M:Nevron.Diagram.NErmColumnCollection.RemoveChild(Nevron.Dom.INNode)">
            <summary>
            Removes the specified child node from the container children
            </summary>
            <param name="node">child node to remove</param>
        </member>
        <member name="M:Nevron.Diagram.NErmColumnCollection.RemoveChildAt(System.Int32)">
            <summary>
            Removes the child node at the specified index
            </summary>
            <param name="index">index of child node to remove</param>
        </member>
        <member name="M:Nevron.Diagram.NErmColumnCollection.InsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Inserts a child node at the specified index
            </summary>
            <param name="index">index at which to insert the child node</param>
            <param name="node">node to insert</param>
        </member>
        <member name="M:Nevron.Diagram.NErmColumnCollection.EnumInstantiatableTypes">
            <summary>
            Enumerates the known types, which can be instanciated and added to this composite at runtime
            </summary>
            <remarks>
            Overriden to return the type of NControlPoint
            </remarks>
            <returns>types of the nodes which can be instanciated and added to this composite at runtime</returns>
        </member>
        <member name="M:Nevron.Diagram.NErmColumnCollection.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Overriden to accept only nodes of type NControlPoint
            </summary>
            <param name="index">index at which the node must be inserted</param>
            <param name="node">node which must be inserted</param>
            <returns>true if the node can be inserted, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.NGuidelineCollection">
            <summary>
            The NGuidelineCollection is a strongly typed collection containing NGuideline instances
            </summary>
            <remarks>
            The NGuidelineCollection implements the INPaintable interface in order to propagate the painting to the contained guidelines. 
            A reference to this class can be obtained from the Guidelines property of the NDrawingDocument (implements INGuidelinesContainer).
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NGuidelineCollection.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            Initially the AllowPrint and AllowImageExport permissions are set to false. 
            The style of the guidelines is initialized from the NStockStyles.DefaultGuidelinesStyle member.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NGuidelineCollection.EnumInstantiatableTypes">
            <summary>
            Overriden to return an array containing the types of the NHorizontalGuideline and NVerticalGuideline
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NGuidelineCollection.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Overriden to accept only nodes of type NGuideline
            </summary>
            <param name="index">index at which the node must be inserted</param>
            <param name="node">node which must be inserted</param>
            <returns>true if the node can be inserted, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NGuidelineCollection.Visible">
            <summary>
            Controls the visibility of the guidelines
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NGuidelineCollection.Invalidate">
            <summary>
            Invalidates all contained guidelines
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NGuidelineCollection.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the contained guidelines in the specified context
            </summary>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.NGuidelineCollection.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determine whether the guidelines collection can be painted.
            </summary>
            <remarks>
            The collection cannot be painted if the context VerifyPermissions method returned false or the 
            the context ShowGuidelines field is set to false
            </remarks>
            <param name="context">paint content to check for</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NGuidelineCollection.HitTest(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests by point all node descendants, which satisfy the specified filter
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>list of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.NGuidelineCollection.HitTest(Nevron.GraphicsCore.NRectangleF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests by rectangle all node descendants, which satisfy the specified filter
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>array of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.NGuidelineCollection.LastHit(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Returns the last hit descendant by point, which statisfies the specified filter
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>hit node, or null if there is not hit node</returns>
        </member>
        <member name="T:Nevron.Diagram.NLabelCollection">
            <summary>
            The NLabelCollection is a strongly typed collection containing NLabel instances
            </summary>
            <remarks>
            The NLabelCollection implements the INPaintable interface in order to propagate the painting to the contained labels. 
            The DefaultLabelUniqueId property controls the default label, which must be a child of this collection. 
            A reference to this class can be obtained from the Labels property of the NShape class.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NLabelCollection.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            Initially the AllowSelect permission are set to false. 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NLabelCollection.ReplaceForeignUniqueIds(System.Collections.Hashtable,System.Boolean)">
            <summary>
            Replaces any foreign Ids (references to other nodes)
            </summary>
            <remarks>
            Overriden to replace the default label id.
            </remarks>
            <param name="mapUIds">map of ids which is used to find the new foreign id value</param>
            <param name="makeNotFoundEmpty">indicates whether the not found foreign ids must be set to Guid.Empty</param>
        </member>
        <member name="P:Nevron.Diagram.NLabelCollection.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLabelCollection.EnumInstantiatableTypes">
            <summary>
            Enumerates the known types, which can be instanciated and added to this composite at runtime
            </summary>
            <remarks>
            Overriden to return the types of the NBoundsLabel, NRotatedBoundsLabel and NLogicalLineLabel 
            </remarks>
            <returns>types of the nodes which can be instanciated and added to this composite at runtime</returns>
        </member>
        <member name="M:Nevron.Diagram.NLabelCollection.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Overriden to accept only nodes of type NLabel
            </summary>
            <param name="index">index at which the node must be inserted</param>
            <param name="node">node which must be inserted</param>
            <returns>true if the node can be inserted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NLabelCollection.GetFilterForReferenceProperty(System.String)">
            <summary>
            Provides a filter for the specified id property
            </summary>
            <remarks>
            For the DefaultLabelUniqueId property will return the NFilters.TypeNLabel filter.
            </remarks>
            <param name="property">property exposing id, for which to obtain filter</param>
            <returns>filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NLabelCollection.GetRootForReferenceProperty(System.String)">
            <summary>
            Obtains the root, from which to search for the referenced node
            </summary>
            <remarks>
            For the DefaultLabelUniqueId will return this.
            </remarks>
            <param name="property">property exposing id</param>
            <returns>root for the search</returns>
        </member>
        <member name="P:Nevron.Diagram.NLabelCollection.Visible">
            <summary>
            Controls the visibility of the labels collection
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLabelCollection.Invalidate">
            <summary>
            Invalidates the contained labels
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLabelCollection.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the contained labels in the specified context
            </summary>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.NLabelCollection.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the collection can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the node can be painted, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NLabelCollection.DefaultLabelUniqueId">
            <summary>
            Gets/sets the id of the child label, which is considered to be the default label
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLabelCollection.DefaultLabel">
            <summary>
            Obtains a reference to the default label
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NLayerCollection">
            <summary>
            The NLayerCollection is a strongly typed collection containing NLayer instances
            </summary>
            <remarks>
            The NLayerCollection implements the INPaintable interface in order to propagate the painting to the contained layers. 
            A reference to this class can be obtained from the Layers property of the NDrawingDocument. 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NLayerCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLayerCollection.EnumInstantiatableTypes">
            <summary>
            Enumerates the known types, which can be instanciated and added to this composite at runtime
            </summary>
            <remarks>
            Overriden to return the type of NLayer
            </remarks>
            <returns>types of the nodes which can be instanciated and added to this composite at runtime</returns>
        </member>
        <member name="M:Nevron.Diagram.NLayerCollection.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Overriden to accept only nodes of type NLayer
            </summary>
            <param name="index">index at which the node must be inserted</param>
            <param name="node">node which must be inserted</param>
            <returns>true if the node can be inserted, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NLayerCollection.Visible">
            <summary>
            Controls the visibility of the layers
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLayerCollection.Invalidate">
            <summary>
            Invalidates the contained layers
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLayerCollection.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the node in the specified context
            </summary>
            <remarks>
            This implementation simply delegates the call to all contained layers
            </remarks>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.NLayerCollection.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the node can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the node can be painted, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.NPlugContainer">
            <summary>
            The NPlugContainer is a used to store the start and end plugs of a shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPlugContainer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPlugContainer.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to update the references of all contained elements
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.NPlugContainer.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <remarks>
            Overriden to propagate the call to all contained nodes
            </remarks>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.NPlugContainer.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPlugContainer.GetEnumerator">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Diagram.NPlugContainer.GetChildByName(System.String)">
            <summary>
            Gets the first child element with the specified name
            </summary>
            <param name="name">child name</param>
            <returns>child diagram element</returns>
        </member>
        <member name="M:Nevron.Diagram.NPlugContainer.GetChildByName(System.String,System.Int32)">
            <summary>
            Gets the first child element with the specified name
            </summary>
            <param name="name">child name</param>
            <param name="startIndex">index to start from</param>
            <returns>child diagram element</returns>
        </member>
        <member name="M:Nevron.Diagram.NPlugContainer.GetChildFromId(System.Int32)">
            <summary>
            Obtains a child element by its id
            </summary>
            <param name="id">id of the node</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NPlugContainer.GetChildFromUniqueId(System.Guid)">
            <summary>
            Obtains a child element by its unique id
            </summary>
            <param name="uid">unique id of the element</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NPlugContainer.GetDescendantFromId(System.Int32,System.Int32)">
            <summary>
            Obtains a element node by its id
            </summary>
            <param name="id">id of the element</param>
            <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NPlugContainer.GetDescendantFromUniqueId(System.Guid,System.Int32)">
            <summary>
            Obtains a child element by its unique id
            </summary>
            <param name="uid">unique id of the node</param>
            <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NPlugContainer.IndexOfChild(Nevron.Dom.INNode)">
            <summary>
            Gets the index of the specified node in the container
            </summary>
            <param name="node">the node to locate</param>
            <returns>index of the node</returns>
        </member>
        <member name="M:Nevron.Diagram.NPlugContainer.GetChildAt(System.Int32)">
            <summary>
            Gets the child node at the specified index
            </summary>
            <param name="index">index</param>
            <returns>node at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.NPlugContainer.SetChildIndex(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Sets a new index of the specified child node
            </summary>
            <param name="node">node whose index to change</param>
            <param name="index">new index</param>
            <returns>previous node index</returns>
        </member>
        <member name="M:Nevron.Diagram.NPlugContainer.IsChild(Nevron.Dom.INNode)">
            <summary>
            Determines whether the specified node is a child node for this container
            </summary>
            <param name="node">node to check</param>
            <returns>true if it is a child node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPlugContainer.ChildrenCount(Nevron.Filters.INFilter)">
            <summary>
            Returns the number of child nodes which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <returns>children count, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NPlugContainer.Children(Nevron.Filters.INFilter)">
            <summary>
            Obtains the child nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NPlugContainer.AccumulateChildren(Nevron.Filters.INFilter,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the children contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="list">list to which to append the child nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.NPlugContainer.IsDescendant(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Queries whether the specified node is a descendant of this node
            </summary>
            <param name="node">node to look for</param>
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>true if the node is a descendant node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPlugContainer.DescendantsCount(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Returns the number of descendant nodes, which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>count of descendants, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NPlugContainer.Descendants(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Obtains the descentant nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NPlugContainer.AccumulateDescendants(Nevron.Filters.INFilter,System.Int32,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the descendants contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <param name="list">list to which to append the descendant nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.NPlugContainer.GetEnumerator(Nevron.Filters.INFilter)">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>node enumerator</returns>
        </member>
        <member name="P:Nevron.Diagram.NPlugContainer.Nodes">
            <summary>
            Used by XML serialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NPortCollection">
            <summary>
            The NPortCollection is a strongly typed collection containing NPort instances
            </summary>
            <remarks>
            The NPortCollection provides a two types of default ports: a default inward port and a default outward port.
            <para>
            The default inward port is controlled by the DefaultInwardPortUniqueId property. 
            When set to Guid.Empty the the DefaultInwardPort property will return the first inward port in the collection.
            The default inward port is used in implicit connections when the inward port in the connection 
            is not explicitly specified (e.g. in the FromShape, ToShape and OutwardShape property setters)
            </para>
            <para>
            Similarly the default outward port is controlled by the DefaultOutwardPortUniqueId property. 
            When set to Guid.Empty the the DefaultOutwardPort property will return the first outward port in the collection.
            The default outward port is used in implicit connections when the outward port in the connection 
            is not explicitly specified (e.g. in the OutwardShape property setter)
            </para>
            Since the default ports are referenced by their ids, the NPortCollection class implements the INDiagramElementReferenceHolder interface.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPortCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPortCollection.ReplaceForeignUniqueIds(System.Collections.Hashtable,System.Boolean)">
            <summary>
            Replaces any foreign Ids (references to other nodes)
            </summary>
            <remarks>
            Overriden to replace the default port id
            </remarks>
            <param name="mapUIds">map of ids which is used to find the new foreign id value</param>
            <param name="makeNotFoundEmpty">indicates whether the not found foreign ids must be set to Guid.Empty</param>
        </member>
        <member name="P:Nevron.Diagram.NPortCollection.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPortCollection.EnumInstantiatableTypes">
            <summary>
            Overriden to return an array containing the types of the NPort, NBoundsPort, NRotatedBoundsPort, NPointPort, NDynamicPort and NLogicalLinePort ports
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPortCollection.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Overriden to accept only nodes of type NPort
            </summary>
            <param name="index"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.NPortCollection.Visible">
            <summary>
            Controls the visibility of the collection
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPortCollection.Invalidate">
            <summary>
            Invalidates the node
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPortCollection.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the node in the specified context
            </summary>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.NPortCollection.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the node can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the node can be painted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPortCollection.GetFilterForReferenceProperty(System.String)">
            <summary>
            Provides a filter for the specified id property
            </summary>
            <remarks>
            This implementation will return NFilters.TypeNPort for the DefaultInwardPortUniqueId property.
            </remarks>
            <param name="property">property exposing id, for which to obtain filter</param>
            <returns>filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NPortCollection.GetRootForReferenceProperty(System.String)">
            <summary>
            Obtains the root, from which to search for the referenced node
            </summary>
            <remarks>
            This implementation simply returns this for the DefaultInwardPortUniqueId property
            </remarks>
            <param name="property">property exposing id</param>
            <returns>root for the search</returns>
        </member>
        <member name="P:Nevron.Diagram.NPortCollection.DefaultInwardPortUniqueId">
            <summary>
            Specifies the default inward port by its id
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPortCollection.DefaultInwardPort">
            <summary>
            Gets a valid reference to the default inward port
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPortCollection.DefaultOutwardPortUniqueId">
            <summary>
            Specifies the default outward port by its id
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPortCollection.DefaultOutwardPort">
            <summary>
            Gets a valid reference to the default outward port
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NPrimitiveModelCollection">
            <summary>
            The NPrimitiveModelCollection is a strongly typed collection containing NPrimitiveModel instances
            </summary>
            <remarks>
            The NPrimitiveModelCollection implements the INPaintable interface in order to propagate the painting to the contained primitives 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPrimitiveModelCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPrimitiveModelCollection.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Overriden to accept only nodes of type NPrimitiveModel
            </summary>
            <param name="index">index at which the node must be inserted</param>
            <param name="node">node which must be inserted</param>
            <returns>true if the node can be inserted, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NPrimitiveModelCollection.Visible">
            <summary>
            Controls the visibility of the primitives
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPrimitiveModelCollection.Invalidate">
            <summary>
            Invalidates all contained primitives
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPrimitiveModelCollection.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the contained primitives in the specified context
            </summary>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.NPrimitiveModelCollection.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determine whether the collection can be painted.
            </summary>
            <param name="context">paint content to check for</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NPrimitiveModelCollection.HitTest(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests by point all node descendants, which satisfy the specified filter
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>list of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.NPrimitiveModelCollection.HitTest(Nevron.GraphicsCore.NRectangleF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests by rectangle all node descendants, which satisfy the specified filter
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>array of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.NPrimitiveModelCollection.LastHit(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Returns the last hit descendant by point, which statisfies the specified filter
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>hit node, or null if there is not hit node</returns>
        </member>
        <member name="T:Nevron.Diagram.NShapeCollection">
            <summary>
            The NShapeCollection is a strongly typed collection containing NShape instances
            </summary>
            <remarks>
            The NShapeCollection implements the INPaintable interface in order to propagate the painting to the contained shapes. 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NShapeCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShapeCollection.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Overriden to accept only nodes of type NShape
            </summary>
            <param name="index">index at which the node must be inserted</param>
            <param name="node">node which must be inserted</param>
            <returns>true if the node can be inserted, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NShapeCollection.Visible">
            <summary>
            Controls the visibility of the shapes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShapeCollection.Invalidate">
            <summary>
            Invalidates all contained shapes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShapeCollection.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the contained shapes in the specified context
            </summary>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.NShapeCollection.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determine whether the shapes collection can be painted.
            </summary>
            <param name="context">paint content to check for</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NShapeCollection.HitTest(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests by point all node descendants, which satisfy the specified filter
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>list of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.NShapeCollection.HitTest(Nevron.GraphicsCore.NRectangleF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests by rectangle all node descendants, which satisfy the specified filter
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>array of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.NShapeCollection.LastHit(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Returns the last hit descendant by point, which statisfies the specified filter
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>hit node, or null if there is not hit node</returns>
        </member>
        <member name="T:Nevron.Diagram.NStyleSheetCollection">
            <summary>
            The NStyleSheetCollection is a strongly typed collection containing NStyleSheet instances
            </summary>
            <remarks>
            A reference to this class can be obtained from the StyleSheets property of the NDrawingDocument (implements INStyleSheetContainer). 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NStyleSheetCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NStyleSheetCollection.EnumInstantiatableTypes">
            <summary>
            Enumerates the known types, which can be instanciated and added to this composite at runtime
            </summary>
            <remarks>
            Overriden to return the type of NStyleSheet
            </remarks>
            <returns>types of the nodes which can be instanciated and added to this composite at runtime</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleSheetCollection.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Overriden to accept only nodes of type NStyleSheet
            </summary>
            <param name="index">index at which the node must be inserted</param>
            <param name="node">node which must be inserted</param>
            <returns>true if the node can be inserted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleSheetCollection.CreateDefaultStyleSheets">
            <summary>
            Called by the constructor to create the default style sheets
            </summary>
            <remarks>
            This implementation creates the guidelines and connectors stylesheets, by using the 
            DefaultGuidelines and DefaultConnectors stock styles
            </remarks>
        </member>
        <member name="T:Nevron.Diagram.NTableCellCollection">
            <summary>
            A strongly typed collection containing table cells.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTableCellCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableCellCollection.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTableCellCollection.EnumInstantiatableTypes">
            <summary>
            Enumerates the known types, which can be instanciated and added to this composite at runtime
            </summary>
            <remarks>
            Overriden to return the type of NTableCell
            </remarks>
            <returns>types of the nodes which can be instanciated and added to this composite at runtime</returns>
        </member>
        <member name="M:Nevron.Diagram.NTableCellCollection.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Overriden to accept only nodes of type NControlPoint
            </summary>
            <param name="index">index at which the node must be inserted</param>
            <param name="node">node which must be inserted</param>
            <returns>true if the node can be inserted, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.NTableColumnCollection">
            <summary>
            A strongly typed collection containing table columns.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTableColumnCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableColumnCollection.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTableColumnCollection.EnumInstantiatableTypes">
            <summary>
            Enumerates the known types, which can be instanciated and added to this composite at runtime
            </summary>
            <remarks>
            Overriden to return the type of NControlPoint
            </remarks>
            <returns>types of the nodes which can be instanciated and added to this composite at runtime</returns>
        </member>
        <member name="M:Nevron.Diagram.NTableColumnCollection.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Overriden to accept only nodes of type NControlPoint
            </summary>
            <param name="index">index at which the node must be inserted</param>
            <param name="node">node which must be inserted</param>
            <returns>true if the node can be inserted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NTableColumnCollection.AddChild(Nevron.Dom.INNode)">
            <summary>
            Adds a child node
            </summary>
            <param name="node">node to add</param>
        </member>
        <member name="T:Nevron.Diagram.NContext">
            <summary>
            The NContext class serves as base class for painting and hit text contexts
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NContext.#ctor(Nevron.GraphicsCore.IN2DDevice)">
            <summary>
            Creates a new context based on the specified device
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:Nevron.Diagram.NContext.#ctor(Nevron.GraphicsCore.IN2DDevice,Nevron.Diagram.NGlobalVisibility)">
            <summary>
            Initializer constructor
            </summary>
            <param name="device">rendering devicey</param>
            <param name="globalVisibility">context global visibility</param>
        </member>
        <member name="F:Nevron.Diagram.NContext.GlobalVisibility">
            <summary>
            Reference to the global visibility, which must be used by the context
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NHitTestContext">
            <summary>
            The NHitTestContext class is used to store various hit test information
            </summary>
            <remarks>
            A valid reference to this class is passed to all nodes which implement the INHitTestable and INHitTest interfaces.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NHitTestContext.#ctor(Nevron.GraphicsCore.IN2DDevice)">
            <summary>
            Initializer constructor
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:Nevron.Diagram.NHitTestContext.#ctor(Nevron.GraphicsCore.IN2DDevice,Nevron.Diagram.NGlobalVisibility,Nevron.Diagram.NHitTestSettings)">
            <summary>
            Initializer constructor
            </summary>
            <param name="device">rendering device</param>
            <param name="globalVisibility">context global visibility settings (can be null)</param>
            <param name="settings">hit test settings (can be null)</param> 
        </member>
        <member name="M:Nevron.Diagram.NHitTestContext.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NHitTestContext.HitTestSettings">
            <summary>
            Reference to the hit test settings, which must be used by the context
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NHitTestContext.Window">
            <summary>
            Window in which the viewport is displayed (in device coordinates)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NHitTestContext.Viewport">
            <summary>
            Viewport - the portion of the document displayed in the window (in scene coordinates)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NHitTestContext.WorldToDevice">
            <summary>
            World to device transformation
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NHitTestContext.SceneToDevice">
            <summary>
            Scene to device transformation
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NHitTestContext.WorldScaleToPixelsX">
            <summary>
            X scaling of world units to pixels (world to device X scale)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NHitTestContext.WorldScaleToPixelsY">
            <summary>
            Y scaling of world units to pixels (world to device Y scale)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NHitTestContext.Pen">
            <summary>
            Pen for widening (resused by hit tested objects)
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NPaintContext">
            <summary>
            The NPaintContext class is used to store various painting information
            </summary>
            <remarks>
            A valid reference to this class is passed to all nodes, which implement the INPaintable interface.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPaintContext.#ctor(Nevron.GraphicsCore.IN2DDevice)">
            <summary>
            Creates a new paint context based on the specified device
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:Nevron.Diagram.NPaintContext.#ctor(Nevron.GraphicsCore.IN2DDevice,Nevron.Diagram.NGlobalVisibility)">
            <summary>
            Creates a new paint context based on the specified device and global visibility
            </summary>
            <param name="device"></param>
            <param name="globalVisibility"></param>
        </member>
        <member name="M:Nevron.Diagram.NPaintContext.MustDisplayNodeAsSelected(Nevron.Dom.INNode)">
            <summary>
            Determines whether the node must be displayed as selected
            </summary>
            <remarks>
            The node must be displayed as selected if either its or some 
            ot its ancestors hashcodes reside as key in the SelectedNodes table.
            This method is internally called by the ActivateAppearance method.
            </remarks>
            <param name="node">node to test</param>
            <returns>true if the node must be displayed as selected, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPaintContext.MustDisplayNodeAsHighlighted(Nevron.Dom.INNode)">
            <summary>
            Determines whether the node must be displayed as highlighted
            </summary>
            <remarks>
            The node must be displayed as highlighted if either its or some 
            ot its ancestors hashcodes reside as key in the HighlightedNodes table.
            This method is internally called by the ActivateAppearance method.
            </remarks> 
            <param name="node">node to test</param>
            <returns>true if the node must be displayed as highlighted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPaintContext.VerifyPermissions(Nevron.Diagram.INDiagramElement)">
            <summary>
            Verifies whether the permissions allow the element to be painted for the current paint reason
            </summary>
            <param name="element">diagram element whose permissions to check</param>
            <returns>true if the element can be painted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPaintContext.ActivateAppearance(Nevron.Dom.INNode,Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle)">
            <summary>
            Activates the node appearance
            </summary>
            <remarks>
            If appearance activation has been locked this method will do nothing and return false.
            If the context has valid InteractiveAppearance, this method will override the 
            node fillStyle and stokeStyle if the node must be displayed as selected or highlighted.
            </remarks>
            <param name="node">node, which must be tested</param>
            <param name="fillStyle">original node fill style</param>
            <param name="strokeStyle">original node stroke style</param>
            <returns>true if the actual fill style or stroke style activated in the device differs from the ones passed as arguments, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPaintContext.ActivateTextAppearance(Nevron.Dom.INNode,Nevron.GraphicsCore.NTextStyle,Nevron.GraphicsCore.NTextStyle@)">
            <summary>
            Activates the text appearance
            </summary>
            <param name="node">node, which must be tested</param>
            <param name="textStyle">original node text style</param>
            <param name="renderTextStyle">text style which must be used for the text rendering</param> 
            <returns>true if the text fill style was changed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPaintContext.PaintText(Nevron.Diagram.INText,System.String,Nevron.Diagram.NTextPaintInfo@,Nevron.GraphicsCore.NTextStyle)">
            <summary>
            Paints the specified text with the specified parameters
            </summary>
            <param name="text"></param>
            <param name="str"></param>
            <param name="info"></param>
            <param name="textStyle"></param>
        </member>
        <member name="M:Nevron.Diagram.NPaintContext.PaintText(Nevron.Diagram.INText,System.String,Nevron.Diagram.NTextPaintInfo@,Nevron.GraphicsCore.NTextStyle,System.Drawing.FontStyle)">
            <summary>
            Paints the specified text with the specified parameters
            </summary>
            <param name="text"></param>
            <param name="str"></param>
            <param name="info"></param>
            <param name="textStyle"></param>
            <param name="fontStyle"></param>
        </member>
        <member name="M:Nevron.Diagram.NPaintContext.PaintTextCommon(Nevron.Diagram.INText,System.String,Nevron.Diagram.NTextPaintInfo@,Nevron.GraphicsCore.NTextStyle)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="str"></param>
            <param name="info"></param>
            <param name="textStyle"></param>
        </member>
        <member name="M:Nevron.Diagram.NPaintContext.CanPaintArrowheads">
            <summary>
            Determines whether arrowheads can be painted
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NPaintContext.PaintModelToWorld(Nevron.Diagram.NModel,Nevron.GraphicsCore.NMatrix2DF)">
            <summary>
            Paints the specified model to the world coordinate space
            </summary>
            <param name="model">model to paint</param>
            <param name="worldTransform">transformation of the model to world coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.NPaintContext.PaintModelToDevice(Nevron.Diagram.NModel,Nevron.GraphicsCore.NMatrix2DF)">
            <summary>
            Paints the specified model to the device coordinate space
            </summary>
            <param name="model">model to paint</param>
            <param name="deviceTransform">transformation of the model to device coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.NPaintContext.StartWorldPaint">
            <summary>
            Opens a direct world paint channel
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPaintContext.EndWorldPaint">
            <summary>
            Closes a direct world paint channel
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPaintContext.StartDevicePaint">
            <summary>
            Starts painting in the device coordinate system
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPaintContext.EndDevicePaint">
            <summary>
            Ends painting in the device coordinate system
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPaintContext.SetPageMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Sets the specifies measurement unit as the page unit and updates the device length convertor
            </summary>
            <param name="unit">measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.NPaintContext.InDevicePaint">
            <summary>
            Determines whether the context is configured to directly render output to the device
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPaintContext.InWorldPaint">
            <summary>
            Determines whether the context is configured to directly render output to the world
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPaintContext.LockAppearanceActivation">
            <summary>
            Locks/unlocks appearance activation
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPaintContext.LockDecorationsPaint">
            <summary>
            Locks/unlocks decorations painting
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPaintContext.SceneToWorld">
            <summary>
            Transformation, which transforms scene coordinates to world coordinates
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPaintContext.SceneToDevice">
            <summary>
            Transformation, which transforms scene coordinates to device coordinates
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPaintContext.ClipPaintArea">
            <summary>
            Indicates whether the painting area is clipped.
            </summary>
            <remarks>
            When this field is set to true, nodes must try not to paint themselves if they are 
            outside the current paint area
            </remarks>
        </member>
        <member name="F:Nevron.Diagram.NPaintContext.ScenePaintArea">
            <summary>
            Defines the paint area in scene coordinates
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPaintContext.WorldPaintArea">
            <summary>
            Defines the paint area in world coordinates
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPaintContext.DevicePaintArea">
            <summary>
            Defines the paint area in device coordinates
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPaintContext.ViewportArea">
            <summary>
            Defines the total viewport area
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPaintContext.PaintPass">
            <summary>
            Current paint pass 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPaintContext.PaintReason">
            <summary>
            Reason for which the painting occurs
            </summary>
            <remarks>
            Nodes must not be painted unless they have permissions to be painted for a particular reason
            </remarks>
        </member>
        <member name="F:Nevron.Diagram.NPaintContext.PaintPassMask">
            <summary>
            Current content paint pass mask
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPaintContext.ShadowsZOrder">
            <summary>
            Shadows Z order
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPaintContext.SelectedNodes">
            <summary>
            Hashtable, whose keys contain the hash codes of the selected nodes. 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPaintContext.HighlightedNodes">
            <summary>
            Hashtable, whose keys contain the hash codes of the highlighted nodes. 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPaintContext.InteractiveAppearance">
            <summary>
            Interactive appearance to apply to selected or highlighted nodes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPaintContext.ArrowheadShapeStencil">
            <summary>
            Reference to an arrowhead shape stencil (can be null)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPaintContext.PointShapeStencil">
            <summary>
            Reference to a point shape stencil (can be null)
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NSnapContext">
            <summary>
            The NSnapContext class is used to store various snapping information
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NSnapContext.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NSnapContext.SceneScaleToPixelsX">
            <summary>
            X scale of scene unit to pixels
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NSnapContext.SceneScaleToPixelsY">
            <summary>
            Y scale of scene unit to pixels
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NSnapContext.SnapStrength">
            <summary>
            A reference to snap strengh settings which must be used
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NDataObjectAdaptor">
            <summary>
            The NDataObjectAdaptor class serves as base class for all data object adapters
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDataObjectAdaptor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDataObjectAdaptor.Clone">
            <summary>
            Creates an exact copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDataObjectAdaptor.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Updates the references stored by the object
            </summary>
            <remarks>
            The object can query the specified provider for references 
            </remarks>
            <param name="provider">provider from which to obtain references</param>
        </member>
        <member name="M:Nevron.Diagram.NDataObjectAdaptor.CreateNonSerializedObjects">
            <summary>
            Creates any non serialized objects, which the holder posseses
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDataObjectAdaptor.GetReferenceProvider">
            <summary>
            Obtains the reference provider to which the object is currently attached
            </summary>
            <returns>reference provider</returns>
        </member>
        <member name="M:Nevron.Diagram.NDataObjectAdaptor.CanAdapt(System.Windows.Forms.IDataObject)">
            <summary>
            Determines whether the adapter can adapt the specified data object
            </summary>
            <param name="dataObject">data object to adapt</param>
            <returns>true if the data object can be adapted</returns>
        </member>
        <member name="M:Nevron.Diagram.NDataObjectAdaptor.Adapt(System.Windows.Forms.IDataObject)">
            <summary>
            Adapts the specified data object 
            </summary>
            <param name="dataObject">data object to adapt</param>
            <returns>adapted data object</returns>
        </member>
        <member name="T:Nevron.Diagram.NDataObjectAdaptorCollection">
            <summary>
            The NDataObjectAdaptorCollection class is a strongly typed collection, containging NDataObjectAdaptor instances
            </summary>
            <remarks>
            A reference to this class can be obtained from the NDocument DataObjectAdaptors property.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDataObjectAdaptorCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDataObjectAdaptorCollection.Clone">
            <summary>
            Creates an exact copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDataObjectAdaptorCollection.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.NDataObjectAdaptorCollection.CreateNonSerializedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDataObjectAdaptorCollection.GetReferenceProvider">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDataObjectAdaptorCollection.ProvideReference(System.Type)">
            <summary>
            
            </summary>
            <param name="parentType"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.NDataObjectAdaptorCollection.Item(System.Int32)">
            <summary>
            Gets/sets the adapter at the specified index
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDataObjectAdaptorCollection.Add(Nevron.Diagram.NDataObjectAdaptor)">
            <summary>
            Adds the specified adapter
            </summary>
            <param name="adapter">adapter to add</param>
            <returns>index of the adapter in the collection</returns>
        </member>
        <member name="M:Nevron.Diagram.NDataObjectAdaptorCollection.IndexOf(Nevron.Diagram.NDataObjectAdaptor)">
            <summary>
            Determines the index of the adapter in the collection
            </summary>
            <param name="adapter">adapter</param>
            <returns>index of the adapter or -1 if it is not in the collection</returns>
        </member>
        <member name="M:Nevron.Diagram.NDataObjectAdaptorCollection.Insert(System.Int32,Nevron.Diagram.NDataObjectAdaptor)">
            <summary>
            Inserts a the specified adapter at the specified index
            </summary>
            <param name="index">index</param>
            <param name="adapter">adapter</param>
        </member>
        <member name="M:Nevron.Diagram.NDataObjectAdaptorCollection.Remove(Nevron.Diagram.NDataObjectAdaptor)">
            <summary>
            Removes the specified adapter
            </summary>
            <param name="adapter">adapter to remove</param>
        </member>
        <member name="M:Nevron.Diagram.NDataObjectAdaptorCollection.Contains(Nevron.Diagram.NDataObjectAdaptor)">
            <summary>
            Determines whether the specified adapter is contained in this collection
            </summary>
            <param name="adapter">adapter</param>
            <returns>true if the adapter is contained in this collection, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDataObjectAdaptorCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Overriden to check the type of the inserted object
            </summary>
            <param name="index"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Diagram.NDataObjectAdaptorCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Overriden to check the type of the removed object
            </summary>
            <param name="index"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Diagram.NDataObjectAdaptorCollection.OnValidate(System.Object)">
            <summary>
            Overriden to check the type of the object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Diagram.NDataObjectAdaptorCollection.GetAdaptorForDataObject(System.Windows.Forms.IDataObject)">
            <summary>
            Gets the first adapter which can adapt the specified data object
            </summary>
            <param name="dataObject">data object which must be adapted</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NDrawingDataObjectAdaptor">
            <summary>
            The NDrawingDataObjectAdaptor is used to adapt data objects for drawing documents
            </summary>
            <remarks>
            The NDrawingDataObjectAdaptor can adapt text, NLibraryDataObject and NDrawingDataObject data objects as a NDrawingDataObject instance
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDataObjectAdaptor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDataObjectAdaptor.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to store a reference to the drawing view hosting the adapter
            </summary>
            <param name="provider">provider from which to obtain references</param>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDataObjectAdaptor.Document">
            <summary>
            Obtains a reference to the drawing document hosting the adapter
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDataObjectAdaptor.CanAdapt(System.Windows.Forms.IDataObject)">
            <summary>
            Determines whether the adapter can adapt the specified data object
            </summary>
            <remarks>
            Overriden to return true if the data object contains data in the following formats:
            DataFormats.Text, NLibraryDataObject.FormatName and NDrawingDataObject.FormatName
            </remarks>
            <param name="dataObject">data object to adapt</param>
            <returns>true if the data object can be adapted</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDataObjectAdaptor.Adapt(System.Windows.Forms.IDataObject)">
            <summary>
            Adapts the specified data object 
            </summary>
            <remarks>
            Overriden to adapt the data object as an INDiagramElement[] instance
            </remarks>
            <param name="dataObject">data object to adapt</param>
            <returns>adapted data object</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDataObjectAdaptor.AdaptText(System.String)">
            <summary>
            Adapts the specified text as a drawing data object, ready to be inserted in a drawing document
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDataObjectAdaptor.AdaptLibraryDataObject(Nevron.Diagram.NLibraryDataObject)">
            <summary>
            Adapts the specified library data object as a drawing data object, ready to be inserted in a drawing document
            </summary>
            <param name="ldo"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDataObjectAdaptor.AdaptDrawingDataObject(Nevron.Diagram.NDrawingDataObject)">
            <summary>
            Adapts the specified drawing data object as a drawing data object, ready to be inserted in a drawing document
            </summary>
            <param name="ddo"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NLibraryDataObjectAdaptor">
            <summary>
            The NLibraryDataObjectAdaptor is used to adapt data objects for library documents
            </summary>
            <remarks>
            The NLibraryDataObjectAdaptor can adapt text, NDrawingDataObject and NLibraryDataObject data objects as a NLibraryDataObject instance
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDataObjectAdaptor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDataObjectAdaptor.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to store a reference to the library view hosting the adapter
            </summary>
            <param name="provider">provider from which to obtain references</param>
        </member>
        <member name="P:Nevron.Diagram.NLibraryDataObjectAdaptor.Document">
            <summary>
            Obtains a reference to the library document hosting the adapter
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDataObjectAdaptor.CanAdapt(System.Windows.Forms.IDataObject)">
            <summary>
            Determines whether the adapter can adapt the specified data object
            </summary>
            <remarks>
            Overriden to return true if the data object contains data in the following formats:
            DataFormats.Text, NLibraryDataObject.FormatName and NDrawingDataObject.FormatName
            </remarks>
            <param name="dataObject">data object to adapt</param>
            <returns>true if the data object can be adapted</returns>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDataObjectAdaptor.Adapt(System.Windows.Forms.IDataObject)">
            <summary>
            Adapts the specified data object 
            </summary>
            <remarks>
            Overriden to adapt the data object as an NMaster[] instance
            </remarks>
            <param name="dataObject">data object to adapt</param>
            <returns>adapted data object</returns>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDataObjectAdaptor.AdaptText(System.String)">
            <summary>
            Adapts the specified text as a library data object, ready to be inserted in a library document
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDataObjectAdaptor.AdaptLibraryDataObject(Nevron.Diagram.NLibraryDataObject)">
            <summary>
            Adapts the specified library data object as a library data object, ready to be inserted in a library document
            </summary>
            <param name="ldo"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDataObjectAdaptor.AdaptDrawingDataObject(Nevron.Diagram.NDrawingDataObject)">
            <summary>
            Adapts the specified drawing data object as a library data object, ready to be inserted in a library document
            </summary>
            <param name="ddo"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NDiagramDataObject">
            <summary>
            The NDiagramDataObject represents an atomic diagram unit, which can be transfered across 
            documents via Clipboard and Drag and Drop operations
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramDataObject.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramDataObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramDataObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramDataObject.SerializeToString(System.String@)">
            <summary>
            Serializes the state of the data object as a string
            </summary>
            <param name="state">state string</param>
            <returns>true if serialization succeeded, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramDataObject.DeserializeFromString(System.String@)">
            <summary>
            Deserializes the state of the data object from a string
            </summary>
            <param name="state">state string</param>
            <returns>true if deserialization succeeded, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramDataObject.Serialize(System.IO.Stream)">
            <summary>
            Must override to serialize the state of the data object
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramDataObject.Deserialize(System.IO.Stream)">
            <summary>
            Must override to deserialize the state of the data object
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:Nevron.Diagram.NDrawingDataObject">
            <summary>
            The NDrawingDataObject represents an atomic drawing document unit, 
            which can be transfered across documents via Clipboard and Drag and Drop operations
            </summary>
            <remarks>
            The NDrawingDataObject is used to host an array of element clonings, the connections between them and their default measurement unit. 
            The NDrawingDataObject class can also be used for dublicating drawing clippings.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDataObject.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDataObject.#ctor(Nevron.Diagram.NDrawingDocument,Nevron.Diagram.INDiagramElement[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="drawing"></param>
            <param name="elements"></param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDataObject.#ctor(Nevron.Diagram.NDrawingDocument,Nevron.Dom.NNodeList)">
            <summary>
            Initializer constructor
            </summary>
            <param name="drawing"></param>
            <param name="elements"></param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDataObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDataObject.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Converts the measurement unit of all elements in the data object to the target measurement unit and updates the MeasurementUnit property
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDataObject.DocumentUniqueId">
            <summary>
            Gets/sets the source document unique id (valid after initialization)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDataObject.MeasurementUnit">
            <summary>
            Gets/sets the measurement unit of the elements (valid after initialization)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDataObject.Elements">
            <summary>
            Gets/sets the elements (valid after initialization)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDataObject.Connections">
            <summary>
            Gets/sets the element connections (valid after initialization)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDataObject.Initialize(Nevron.Diagram.NDrawingDocument,Nevron.Diagram.INDiagramElement[])">
            <summary>
            Initializes the data object from the elements of the specified drawing
            </summary>
            <param name="drawing"></param>
            <param name="elements"></param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDataObject.Duplicate">
            <summary>
            Creates a duplicate drawing data object, which differs only by the unique ids of the elements 
            (and their possible descendants) and their connections
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDataObject.AddInComposite(Nevron.Diagram.NDrawingDocument,Nevron.Diagram.INDiagramElementComposite)">
            <summary>
            Adds the content of this drawing data object in the specified drawing composite element
            </summary>
            <param name="drawing">drawing document</param>
            <param name="composite">composite diagram element</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDataObject.InsertInComposite(Nevron.Diagram.NDrawingDocument,Nevron.Diagram.INDiagramElementComposite,System.Int32)">
            <summary>
            Inserts the content of this drawing data object in the specified drawing composite element
            </summary>
            <param name="drawing">drawing document</param>
            <param name="composite">composite diagram element</param> 
            <param name="index">index at which to insert the elements</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDataObject.Serialize(System.IO.Stream)">
            <summary>
            Overriden to serialize the data object
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDataObject.Deserialize(System.IO.Stream)">
            <summary>
            Overriden to deserialize the data object
            </summary>
            <param name="stream"></param>
        </member>
        <member name="F:Nevron.Diagram.NDrawingDataObject.FormatName">
            <summary>
            Name for the Drawing Data Object format
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDataObject.SetOnClipboard(Nevron.Diagram.NDrawingDataObject)">
            <summary>
            Sets the specified drawing data object on the clipboard
            </summary>
            <param name="dataObject"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDataObject.WrapInDataObject(Nevron.Diagram.NDrawingDataObject)">
            <summary>
            Wraps the specified drawing data object in a new DataObject instance
            </summary>
            <param name="dataObject"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NLibraryDataObject">
            <summary>
            The NLibraryDataObject represents an atomic library document unit, which can be transfered across documents via Clipboard and Drag and Drop operations
            </summary>
            <remarks>
            The NLibraryDataObject is used to host an array masters clonings.
            The NLibraryDataObject class can also be used for the creation of masters duplicates.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDataObject.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDataObject.#ctor(Nevron.Diagram.NLibraryDocument,Nevron.Diagram.NMaster[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="library"></param>
            <param name="masters"></param>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDataObject.#ctor(Nevron.Diagram.NLibraryDocument,Nevron.Dom.NNodeList)">
            <summary>
            Initializer constructor
            </summary>
            <param name="library"></param>
            <param name="elements"></param>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDataObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Nevron.Diagram.NLibraryDataObject.DocumentUniqueId">
            <summary>
            Gets/sets the source document unique id (valid after initialization)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLibraryDataObject.Masters">
            <summary>
            Gets/sets the master (valid after initialization)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDataObject.Initialize(Nevron.Diagram.NLibraryDocument,Nevron.Diagram.NMaster[])">
            <summary>
            Initializes the data object from the masters of the specified library
            </summary>
            <param name="library"></param>
            <param name="masters"></param>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDataObject.Duplicate">
            <summary>
            Creates a duplicate library data object, which differs only by the unique ids of the masters (and their descendants)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDataObject.AddInLibrary(Nevron.Diagram.NLibraryDocument)">
            <summary>
            Adds the content of this library data object in the specified library document
            </summary>
            <param name="library">library document</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDataObject.InsertInLibrary(Nevron.Diagram.NLibraryDocument,System.Int32)">
            <summary>
            Insertes the content of this library data object in the specified library document
            </summary>
            <param name="library">library document</param>
            <param name="index">index at which to insert the masters</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDataObject.Serialize(System.IO.Stream)">
            <summary>
            Overriden to serialize the data object
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDataObject.Deserialize(System.IO.Stream)">
            <summary>
            Overriden to deserialize the data object
            </summary>
            <param name="stream"></param>
        </member>
        <member name="F:Nevron.Diagram.NLibraryDataObject.FormatName">
            <summary>
            Name for the Library Data Object format
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDataObject.SetOnClipboard(Nevron.Diagram.NLibraryDataObject)">
            <summary>
            Sets the specified library data object on the clipboard
            </summary>
            <param name="dataObject"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDataObject.WrapInDataObject(Nevron.Diagram.NLibraryDataObject)">
            <summary>
            Wraps the specified library data object in a new DataObject instance
            </summary>
            <param name="dataObject"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NDrawingSettings">
            <summary>
            The NDrawingSettings attribute is used to store global drawing document settings and preferences
            </summary>
            <remarks>
            A reference to this class can be obtained from the Settings property of the NDrawingDocument class. 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDrawingSettings.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDrawingSettings.#ctor(Nevron.Diagram.NDrawingSettings)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingSettings.Clone">
            <summary>
            Creates an identical copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingSettings.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this attribute 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.NDrawingSettings.PageSettings">
            <summary>
            Controls the page settings of the document
            </summary>
            <remarks>
            The document is by default printed with these page settings
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDrawingSettings.MergePointDistance">
            <summary>
            Controls the oriented distance from the line formed by the point neighbours, below which the point is considered colinear and must be merged (removed)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingSettings.NudgeLeft">
            <summary>
            Controls the nudge step in the left direction (in pixels)
            </summary>
            <remarks>
            By default set to 2
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDrawingSettings.NudgeRight">
            <summary>
            Controls the nudge step in the right direction  (in pixels)
            </summary>
            <remarks>
            By default set to 2
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDrawingSettings.NudgeTop">
            <summary>
            Controls the nudge step in the top direction (in pixels)
            </summary>
            <remarks>
            By default set to 2
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDrawingSettings.NudgeBottom">
            <summary>
            Controls the nudge step in the bottom direction
            </summary>
            <remarks>
            By default set to 2
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDrawingSettings.WidthStep">
            <summary>
            Controls the resize width step (in pixels)
            </summary>
            <remarks>
            By default set to 2
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDrawingSettings.HeightStep">
            <summary>
            Controls the resize height step (in pixels)
            </summary>
            <remarks>
            By default set to 2
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDrawingSettings.ZoomStep">
            <summary>
            Controls the zoom step (in ZoomIn and ZoomOut commands)
            </summary>
            <remarks>
            By default set to 0.10f
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDrawingSettings.MaxZoomFactor">
            <summary>
            Controls the maximum zoom factor
            </summary>
            <remarks>
            By default set to 10.0f
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDrawingSettings.MinZoomFactor">
            <summary>
            Controls the minimum zoom factor
            </summary>
            <remarks>
            By default set to 0.01f
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDrawingSettings.HorizontalSpacingStep">
            <summary>
            Controls the horizontal spacing step
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingSettings.VerticalSpacingStep">
            <summary>
            Controls the vertical spacing step
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingSettings.RotationStep">
            <summary>
            Controls the rotation step (for commands like RotateLeft and RotateRight)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingSettings.DragDropEffects">
            <summary>
            Controls the allowed drag drop effects
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingSettings.PastePositionMode">
            <summary>
            Controls the way pasted content is positioned in the document
            </summary>
            <remarks>
            By default set to OffsetInSameDocument
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDrawingSettings.PasteOffsetX">
            <summary>
            Controls the X offset of pasted content. Valid only if the PastePositionMode is set OffsetInSameDocument
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingSettings.PasteOffsetY">
            <summary>
            Controls the Y offset of pasted content. Valid only if the PastePositionMode is set to OffsetInSameDocument
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingSettings.DefaultExportBoundsPadding">
            <summary>
            Controls the default export bounds padding, which you can use to inflate the export bounds from the image export visual interface
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NDrawingDocument">
            <summary>
            The NDrawingDocument class represents a diagram document, which can be used for generic drawing
            </summary>
            <remarks>
            The content of each drawing is divided in layers. The layers of a drawing are accessible from the Layers property.
            Of all layers in a drawing only one can be active. The active layer is obtained from the ActiveLayer property and is controlled by the 
            ActiveLayerUniqueId property.
            <para>
            The content of a drawing is measured in logical measurement units. The logical measurement unit is controlled by 
            the MeasurementUnit property. The measurement unit in which the content is painted is called world measurement unit. 
            In case there is no drawing scale the world measurement unit is equal to the logical measurement unit. 
            </para>
            <para>
            The bounds of the drawing are measured in the logical measurement unit. The drawing bounds can be calculated in several modes:
            <list type="bullet">
            <item>
            	<term>CustomNonConstrained</term>
            	<description>
            	User defined bounds are used. The descendant nodes can be placed outside the drawing bounds.
            	</description>
            </item>	
            <item>
            	<term>CustomConstrained</term>
            	<description>
            	User defined bounds are used. The descendant nodes cannot be placed outside the drawing bounds.
            	</description>
            </item>	
            <item>
            	<term>AutoSizeToContent</term>
            	<description>
            	The drawing bounds are automatically sized to the content bounds.
            	</description>
            </item>	
            <item>	
            	<term>AutoInflateToContent</term>
            	<description>
            	The document bounds are automatically inflated to contain the content bounds.
            	</description>
            </item>	
            </list>	 
            In case the mode is set to AutoInflateToContent or AutoSizeToContent, the drawing 
            will take into accout the AutoBoundsPadding property (controls the padding applied to the computed bounds) 
            and the AutoBoundsMinSize property (controls the minimal size of automatic bounds).
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="E:Nevron.Diagram.NDrawingDocument.BoundsChanging">
            <summary>
            Bounds changing event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDrawingDocument.BoundsChanged">
            <summary>
            Bounds changed event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDrawingDocument.MouseEnter">
            <summary>
            Mouse enter event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDrawingDocument.MouseMove">
            <summary>
            Mouse move event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDrawingDocument.MouseHover">
            <summary>
            Mouse hover event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDrawingDocument.MouseDown">
            <summary>
            Mouse button down event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDrawingDocument.MouseUp">
            <summary>
            Mouse button up event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDrawingDocument.MouseWheel">
            <summary>
            Mouse wheel event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDrawingDocument.MouseLeave">
            <summary>
            Mouse leave event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDrawingDocument.Click">
            <summary>
            Click event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDrawingDocument.DoubleClick">
            <summary>
            Double click event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDrawingDocument.KeyDown">
            <summary>
            Key down event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDrawingDocument.KeyUp">
            <summary>
            Key up event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDrawingDocument.KeyPress">
            <summary>
            Key press event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDrawingDocument.DragEnter">
            <summary>
            Drag enter event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDrawingDocument.DragOver">
            <summary>
            Drag over event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDrawingDocument.DragDrop">
            <summary>
            Drag drop event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDrawingDocument.DragLeave">
            <summary>
            Drag leave event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serilization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable implementation
            </summary>
            <remarks>
            Serializes the members of NDrawingDocument
            </remarks>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Binds the object to its parent object
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.CreateNonSerializedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.Attributes">
            <summary>
            Gets the list of child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnAttributePropertyChanging(System.String,System.String,System.Object)">
            <summary>
            Called by child or descendants attributes when an attribute property is changing
            </summary>
            <remarks>
            Overriden to reject the change if a property of the style attribute is going to be set to null.
            </remarks>
            <param name="attributeFullName">full attribute name</param>
            <param name="attributeProperty">attribute property name</param>
            <param name="newValue">new property value</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnAttributePropertyChanged(System.String,System.String)">
            <summary>
            Called by child or descendants attributes when an attribute property has changed
            </summary>
            <remarks>
            Overriden to invalidate the document if the Style attribute has changed
            </remarks>
            <param name="attributeFullName">full attribute name</param>
            <param name="attributeProperty">attribute property name</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnAttributeChanged(System.String)">
            <summary>
            Called by child or descendants attributes when an attribute has changed
            </summary>
            <remarks>
            Overriden to invalidate the document if the Style attribute has changed
            </remarks>
            <param name="attributeFullName">full attribute name</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnStateChangedFromHistory(System.String)">
            <summary>
            Called when the history has modified the object state
            </summary>
            <remarks>
            Do not call this method directly
            </remarks>
            <param name="hint">hint used when the state was recorded</param>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.Verbs">
            <summary>
            Obtains an array list of NCommand instances representing the verbs supported by the node
            </summary>
            <remarks>
            Overriden to add the Size to Content and Inflate to Context verbs
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.UnregisterElement(Nevron.Dom.INElement)">
            <summary>
            Unregisters the specified element from the document
            </summary>
            <remarks>
            Overriden to destroy all element connections
            </remarks>
            <param name="element">element to unregister</param>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.Visible">
            <summary>
            Controls the document visibility
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.Style">
            <summary>
            Gets/sets the style of the document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.ComposeStyle">
            <summary>
            Composes a new style, which contains cloning of the composes styles
            </summary>
            <returns>new composed style</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.ComposeStrokeStyle">
            <summary>
            Composes the stroke style
            </summary>
            <returns>reference to the composed stroke style</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.ComposeShadowStyle">
            <summary>
            Composes the shadow style
            </summary>
            <returns>reference to the composed shadow style</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.ComposeFillStyle">
            <summary>
            Composes the fill style
            </summary>
            <returns>reference to the composed fill style</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.ComposeTextStyle">
            <summary>
            Composes the text style
            </summary>
            <returns>reference to the composed text style</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.ComposeBridgeStyle">
            <summary>
            Composes the bridge style
            </summary>
            <returns>reference to the composed bridge style</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.ComposeStartArrowheadStyle">
            <summary>
            Composes the start arrowhead style
            </summary>
            <returns>reference to the composed start arrowhead style</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.ComposeEndArrowheadStyle">
            <summary>
            Composes the end arrowhead style
            </summary>
            <returns>reference to the composed end arrowhead style</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.ComposeInteractivityStyle">
            <summary>
            Composes the interactivity style
            </summary>
            <returns>reference to the interactivity style</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.ComposeAnimationsStyle">
            <summary>
            Composes the animations style
            </summary>
            <returns>reference to the animations style</returns>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.ConnectionContainer">
            <summary>
            Gets/sets the connection container, which stores the connections between elements
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.RoutingManager">
            <summary>
            Gets/sets the routing manager
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.BridgeManager">
            <summary>
            Gets/sets the bridge manager
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.Resolution">
            <summary>
            Gets/sets the resolution used for convertion between device dependant and device independant measurement units (in dots per inch)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.MeasurementUnit">
            <summary>
            Specifies the measurement unit associated with the document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.MeasurementContext">
            <summary>
            Obtains a graphics device which can be used for measurements
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.MeasurementSystemManager">
            <summary>
            Obtains a measurement system manager
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.MeasurementUnitConverter">
            <summary>
            Obtains a measurement unit converter
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.WorldMeasurementUnit">
            <summary>
            Gets the current world measurement unit
            </summary>
            <remarks>
            Returns the value of CustomWorldMeasurementUnit if the drawing scale mode is set to CustomScale. 
            Othwerwise returns the MeasurementUnit property value.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.SceneScaleToWorldX">
            <summary>
            Obtains the current X scaling of scene units to world units
            </summary>
            <remarks>
            Returns the value of CustomScale if the drawing scale mode is set to CustomScale. 
            Otherwise returns 1.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.SceneScaleToWorldY">
            <summary>
            Obtains the current Y scaling of scene units to world units
            </summary>
            <remarks>
            Returns the value of CustomScale if the drawing scale mode is set to CustomScale.
            Otherwise returns 1.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.SceneToWorld">
            <summary>
            Obtains the current scene to world transform
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnMouseEnter(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the mouse entered the document
            </summary>
            <remarks>
            This implementation will fire the NodeMouseEnter event for the document
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnMouseMove(Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Called when the mouse moves in the document
            </summary>
            <remarks>
            The implementation will first request cursor and tooltip using the composed document interactivity style.
            It will then fire the NodeMouseMove event for the document.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnMouseHover(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the mouse hovers in the document
            </summary>
            <remarks>
            This implementation will fire the NodeMouseHover event for the document
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnMouseDown(Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Called when a mouse button is down in the document
            </summary>
            <remarks>
            This implementation will fire the NodeMouseDown event for the document
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnMouseUp(Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Called when a mouse button is up in the document 
            </summary>
            <remarks>
            This implementation will fire the NodeMouseUp event for the document
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnMouseWheel(Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Called when a mouse wheel was moved in the document
            </summary>
            <remarks>
            This implementation will fire the NodeMouseWheel event for the document
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnMouseLeave(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the mouse leaves the document
            </summary>
            <remarks>
            This implementation will fire the NodeMouseLeave event for the document
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnClick(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the user clicked on the node
            </summary>
            <remarks>
            This implementation will fire the NodeClick event for the document
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnDoubleClick(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the user double clicked on the node
            </summary>
            <remarks>
            This implementation will fire the NodeDoubleClick event for the document
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnKeyDown(Nevron.Diagram.NKeyEventArgs)">
            <summary>
            Handles the key down event
            </summary>
            <remarks>
            The implementation will fire the NodeKeyDown event for the document.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnKeyPress(Nevron.Diagram.NKeyPressEventArgs)">
            <summary>
            Handles the key press event
            </summary>
            <remarks>
            The implementation will fire the NodeKeyPress event for the document.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnKeyUp(Nevron.Diagram.NKeyEventArgs)">
            <summary>
            Handles the key up event
            </summary>
            <remarks>
            The implementation will fire the NodeKeyUp event for the document.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is an input key
            </summary>
            <param name="keyData">key</param>
            <returns>true if the key is an input key, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.IsInputChar(System.Char)">
            <summary>
            Determines whether the specified character is an input charecter
            </summary>
            <remarks>
            The implementation will return the result of the QueryIsInputChar method for the document
            </remarks>
            <param name="charCode">character</param>
            <returns>true if the character is an input character, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnDragEnter(Nevron.Diagram.NDragEventArgs)">
            <summary>
            Called when a dragged object entered the document
            </summary>
            <remarks>
            This implementation will fire the NodeDragEnter event for the document
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnDragDrop(Nevron.Diagram.NDragEventArgs)">
            <summary>
            Called when a dragged object is dropped in the document
            </summary>
            <remarks>
            This implementation will fire the NodeDragDrop event for the document
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnDragLeave(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when a dragged object leaves the document
            </summary>
            <remarks>
            This implementation will fire the NodeDragLeave event for the document
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnDragOver(Nevron.Diagram.NDragEventArgs)">
            <summary>
            Called when a dragged object is moved over the document
            </summary>
            <remarks>
            This implementation will fire the NodeDragOver event for the document
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.HitTest(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests by point all node descendants, which satisfy the specified filter
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>list of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.HitTest(Nevron.GraphicsCore.NRectangleF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests by rectangle all node descendants, which satisfy the specified filter
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>array of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.LastHit(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Returns the last hit descendant by point, which statisfies the specified filter
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>hit node, or null if there is not hit node</returns>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.Bounds">
            <summary>
            Gets/sets the document bounds (in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.Center">
            <summary>
            Gets/sets the document bounds center (in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.Location">
            <summary>
            Gets/sets the document bounds location (in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.Width">
            <summary>
            Controls the document width (in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.Height">
            <summary>
            Controls the document height (in scene coordinates)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the document content in the specified context
            </summary>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the document can be painted in the specified context
            </summary>
            <param name="context">true if it can be painted in the specified context, otherwise false</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnLayerInserted(Nevron.Diagram.NLayer)">
            <summary>
            Called when a layer has been inserted
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnLayerRemoved(Nevron.Diagram.NLayer)">
            <summary>
            Called when a layer has been removed
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnLayerIndexChanged(Nevron.Diagram.NLayer)">
            <summary>
            Called when the index of a layer inside its container has changed
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnShapeInserted(Nevron.Diagram.NShape)">
            <summary>
            Called when a shape has been inserted
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnShapeRemoved(Nevron.Diagram.NShape)">
            <summary>
            Called when a shape has been removed
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnShapeIndexChanged(Nevron.Diagram.NShape)">
            <summary>
            Called when the index of a shape inside its container has changed
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnShapeBoundsChanged(Nevron.Diagram.NShape)">
            <summary>
            Called when the bounds of the specified shape has changed
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.IsShapeConstrained(Nevron.Diagram.NShape)">
            <summary>
            Determines whether the document constrains the bounds of the specified shape
            </summary>
            <param name="shape">shape to check</param>
            <returns>true if the shape is constrained, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.GetShapeConstrainBounds(Nevron.Diagram.NShape)">
            <summary>
            Obtains the constrain bounds for the specified shape
            </summary>
            <param name="shape">shape to get constrain bounds for</param>
            <returns>constrain bounds</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.GetFilterForReferenceProperty(System.String)">
            <summary>
            Provides a filter for the specified id property
            </summary>
            <remarks>
            This implementation will return the NFilters.TypeNLayer filter for the ActiveLayerUniqueId property
            </remarks>
            <param name="property">property exposing id, for which to obtain filter</param>
            <returns>filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.GetRootForReferenceProperty(System.String)">
            <summary>
            Obtains the root, from which to search for the referenced node
            </summary>
            <remarks>
            This implementation will return this for the ActiveLayerUniqueId property
            </remarks>
            <param name="property">property exposing id</param>
            <returns>root for the search</returns>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.ActiveLayer">
            <summary>
            Obtains a reference to the currently active layer
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.ActiveLayerUniqueId">
            <summary>
            Controls the currently active layer
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.ShadowsZOrder">
            <summary>
            Controls the Z order of the node shadows
            </summary>
            <remarks>
            By default set to BehindAggregate
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.GraphicsSettings">
            <summary>
            Gets/sets the graphics settings, with which the drawing scene must be rendered
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.Settings">
            <summary>
            Gets/sets the document settings
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.HitTestSettings">
            <summary>
            Gets/sets the hit test settings of the document
            </summary>
            <remarks>
            The document is by default hit tested with these settings
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.FocusedElement">
            <summary>
            Obtains a reference to the currently focused keyboard handler
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.FocusedElementUniqueId">
            <summary>
            Gets/sets the unique id of the currently focused element
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.ArrowheadShapeStencil">
            <summary>
            Gets/sets the Arrowhead Shape Stencil 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.PointShapeStencil">
            <summary>
            Obtains a reference to the point shape stencil
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.StyleSheets">
            <summary>
            Obtains a reference to the collection of stylesheets
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.Layers">
            <summary>
            Obtains a reference to the collection of layers 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.Guidelines">
            <summary>
            Obtains a reference to the collection of guidelines
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.DrawingScaleMode">
            <summary>
            Gets/set the drawing scale mode
            </summary>
            <remarks>
            By default set to NoScale
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.CustomScale">
            <summary>
            Get/set the ratio between MeasurementUnit and WorldMeasurementUnit, when DrawingScaleMode is set to CustomScale
            </summary>
            <remarks>
            By default set to 1
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.CustomWorldMeasurementUnit">
            <summary>
            Specifies the measurement unit associated with the world when the DrawingScaleMode is set to CustomScale
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.AutoBoundsMode">
            <summary>
            Controls the auto bounds mode
            </summary>
            <remarks>
            By default set to CustomNonConstrained
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.AutoBoundsPadding">
            <summary>
            Controls the auto bounds padding
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.AutoBoundsMinSize">
            <summary>
            Controls the auto bounds min size
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.IsUpdated">
            <summary>
            Determines whether the document is currently being updated
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.GetActiveContainers">
            <summary>
            Obtains the a list of the drawing document containers which are active (editable)
            </summary>
            <remarks>
            This implementation returns the active layer (if any) and the guidelines collection
            </remarks>
            <returns>node list containing the drawing document active containers</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.PaintBackground(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the document in the specified context during the Background Paint Pass
            </summary>
            <param name="context">paint content to use</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.CanPaintBackground(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the document can be painted during the Background Paint Pass
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if it can be painted in the specified context, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.InflateToContent(Nevron.GraphicsCore.NSizeF,Nevron.Diagram.NMargins)">
            <summary>
            Inflates the document bounds to fit the document content
            </summary>
            <param name="minSize">minimal new document bounds</param>
            <param name="padding">padding applied to document content</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.InflateToContent">
            <summary>
            Inflates the document bounds to fit the document content
            </summary>
            <remarks>
            This implementation uses the default min size and content padding
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.SizeToContent(Nevron.GraphicsCore.NSizeF,Nevron.Diagram.NMargins)">
            <summary>
            Sizes the document to exactly fit the document content
            </summary>
            <param name="minSize">minimal new document bounds</param>
            <param name="padding">padding applied to document content</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.SizeToContent(Nevron.GraphicsCore.NSizeF,Nevron.Diagram.NMargins,Nevron.Filters.NFilter)">
            <summary>
            Sizes the document to exactly fit the document content
            </summary>
            <param name="minSize">minimal new document bounds</param>
            <param name="padding">padding applied to document content</param>
            <param name="filter">filter used to filter the nodes which are considered in the operation</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.SizeToContent">
            <summary>
            Sizes the document to exactly fit the document content 
            </summary>
            <remarks>
            This implementation uses the default min size and content padding
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.MeasureStringInWorld(System.String,Nevron.GraphicsCore.NTextStyle,Nevron.GraphicsCore.NSizeF@)">
            <summary>
            Measures the specified string in world units
            </summary>
            <param name="str">string to measure</param>
            <param name="style">text style of the string</param>
            <param name="size">result size in world measurement units</param>
            <returns>true if the measurement succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.MeasureStringInScene(System.String,Nevron.GraphicsCore.NTextStyle,Nevron.GraphicsCore.NSizeF@)">
            <summary>
            Measures the specified string in scene units
            </summary>
            <param name="str">string to measure</param>
            <param name="style">text style of the string</param>
            <param name="size">result size in scene measurement units</param>
            <returns>true if the measurement succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.Reset">
            <summary>
            Resets the drawing document to its default settings
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.BeginUpdate">
            <summary>
            Begins an update of the document - pair it with EndUpdate
            </summary>
            <remarks>
            Overriden to pause the routing and bridge managers. 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.EndUpdate">
            <summary>
            Ends an update of the document - pair it with BeginUpdate
            </summary>
            <remarks>
            Overriden to resume the routing and bridge managers. 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.ResetDrawingDocument">
            <summary>
            Called from the overriden Reset method to reset only the fields declared in NDrawingDocument
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnMeasurementUnitChanged">
            <summary>
            Called when the measurement unit has changed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnResolutionChanged">
            <summary>
            Called when the document resulution has changed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnBoundsChanging(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Called when the bounds of the document are about to change
            </summary>
            <remarks>
            The method will fire the NodeBoundsChanging event and update all views
            </remarks>
            <param name="newBounds">new document bounds</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.OnBoundsChanged">
            <summary>
            Called when the bounds of the document have changed
            </summary>
            <remarks>
            The method will fire the NodeBoundsChanged event and update all views
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.ComputeNewBounds(Nevron.Diagram.AutoBoundsMode,Nevron.Diagram.NMargins,Nevron.GraphicsCore.NSizeF,Nevron.Filters.NFilter,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Called by the auto bounds implementation in order to compute new bounds
            </summary>
            <param name="mode">auto bounds mode to use</param>
            <param name="padding">padding applied to document content</param>
            <param name="minSize">min allowed document size</param>
            <param name="filter">filter used to filter the nodes which are considered in the operation</param> 
            <param name="customBounds">custom bounds to use in case the mode parameter is set to CustomConstrained or CustomNonConstrained</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.UpdateBounds">
            <summary>
            Updates the drawing bounds in accordance with the auto bounds settings
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.DoVerb(System.Object,Nevron.UI.WinForm.Controls.CommandEventArgs)">
            <summary>
            Executes the specified verb
            </summary>
            <remarks>
            Overriden to handle the Size to Content and Inflate to Content verbs
            </remarks>
            <param name="sender"></param>
            <param name="e">command event arguments for the verb command</param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.Dispose(System.Boolean)">
            <summary>
            Overriden to dispose internal measurement bitmap and graphics
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Nevron.Diagram.NDrawingDocument.CreateDataObjectAdaptors">
            <summary>
            Called to create the data object adapters aplicable for this document and add them in the document data object adapters collection
            </summary>
            <remarks>
            Overriden to add the NDrawingDataObjectAdaptor adapter
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.MeasurementUnitXML">
            <summary>
            Used by XML serialization
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDrawingDocument.CustomWorldMeasurementUnitXML">
            <summary>
            Used by XML serialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NMasterImageGenerator">
            <summary>
            The NMasterImageGenerator attribute, is used to provide library documents with 
            the ability to automatically generate images for the masters they contain
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NMasterImageGenerator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NMasterImageGenerator.Attributes">
            <summary>
            Gets the list of child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Diagram.NMasterImageGenerator.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Diagram.NMasterImageGenerator.GetAttributeByName(System.String)">
            <summary>
            Gets a child or descendant attribute by its name
            </summary>
            <param name="attributeName">child name or full attribute name</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="M:Nevron.Diagram.NMasterImageGenerator.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
            <summary>
            Sets a child or descendant attribute by its name
            </summary>
            <param name="attributeName">attribute name</param>
            <param name="attribute">attribute to set</param>
        </member>
        <member name="M:Nevron.Diagram.NMasterImageGenerator.GenerateImage(Nevron.Diagram.NMaster,Nevron.GraphicsCore.NSize)">
            <summary>
            Generates an image for the specified master with the specified size
            </summary>
            <param name="master">master for which to generate image</param>
            <param name="imageSize">image size</param>
            <returns>image</returns>
        </member>
        <member name="P:Nevron.Diagram.NMasterImageGenerator.BackgroundStyle">
            <summary>
            Gets/sets the style of the background which is used when the image is generated
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NMasterImageGenerator.Enabled">
            <summary>
            Gets/sets whether the image generator is enabled. 
            Setting this property to false will globally disable automatic master image generation
            </summary>
            <remarks>
            By default set to true
            </remarks>
        </member>
        <member name="T:Nevron.Diagram.NLibraryDocument">
            <summary>
            The NLibraryDocument class represents a diagram document, which is used to store a collection of NMaster instances
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDocument.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDocument.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serilization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDocument.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable implementation
            </summary>
            <remarks>
            Serializes the members of NLibraryDocument
            </remarks>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Nevron.Diagram.NLibraryDocument.Attributes">
            <summary>
            Gets the list of child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDocument.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="P:Nevron.Diagram.NLibraryDocument.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDocument.EnumInstantiatableTypes">
            <summary>
            Enumerates the known types, which can be instantiated and inserted to this composite at runtime
            </summary>
            <returns>types of the nodes which can be instanciated and inserted to this composite at runtime</returns>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDocument.QueryNextName(Nevron.Diagram.INDiagramElement)">
            <summary>
            Queries for the next unique name, which will be assigned to the specified element if it is inserted to this composite
            </summary>
            <param name="element">element for which to obtain unique name</param>
            <returns>unique name</returns>
        </member>
        <member name="P:Nevron.Diagram.NLibraryDocument.AutoGenerateUniqueNames">
            <summary>
            Gets/sets the whether the composite must automatically generate unique names for newly inserted nodes.
            Set this property to false if a large number of nodes is about to be inserted in the composite
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDocument.AddChild(Nevron.Dom.INNode)">
            <summary>
            Adds a child node
            </summary>
            <param name="node">node to add</param>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDocument.InsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Inserts a child node at the specified index
            </summary>
            <param name="index">index at which to insert the child node</param>
            <param name="node">node to insert</param>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDocument.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Queries whether the specified node can be inserted at the specified index
            </summary>
            <remarks>
            This impementation will only accept nodes of type NMaster
            </remarks>
            <param name="index">index at which the child node will be inserted</param>
            <param name="node">child node to insert</param>
            <returns>true if the node can be inserted at the specified index, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDocument.RemoveChild(Nevron.Dom.INNode)">
            <summary>
            Removes the specified child node from the container children
            </summary>
            <param name="node">child node to remove</param>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDocument.RemoveChildAt(System.Int32)">
            <summary>
            Removes the child node at the specified index
            </summary>
            <param name="index">index of child node to remove</param>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDocument.RemoveAllChildren">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDocument.CanRemoveChild(Nevron.Dom.INNode)">
            <summary>
            Queries whether the specified child node can be removed
            </summary>
            <param name="node">child node to remove</param>
            <returns>true if the node can be removed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NLibraryDocument.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLibraryDocument.MasterImageGenerator">
            <summary>
            Gets/sets the image generator, which is used to automatically generate master icons
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDocument.InitWithConnectors(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Initializes the library with the predefined connectors
            </summary>
            <param name="measurementUnit">measurement unit of the connectors</param>
            <param name="connectorSize">size of the connectors in the specified measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDocument.Reset">
            <summary>
            Resets the library document to its default settings
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDocument.CreateDataObjectAdaptors">
            <summary>
            Called to create the data object adapters aplicable for this document and add them in the document data object adapters collection
            </summary>
            <remarks>
            Overriden to add the NLibraryDataObjectAdaptor adapter
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NLibraryDocument.ResetLibraryDocument">
            <summary>
            Called from the overriden Reset method to reset only the fields declared in NLibrary
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NDocument">
            <summary>
            The NDocument class is a component, which implements core DOM document features and serves as base class for all types of diagram documents
            </summary>
            <remarks>
            The NDocument class is the root of a diagram elements hierarchy and as such it implements the core Nevron DOM INDocument interface. 
            <para>
            The services exposed by the document are maintained in an instance of the NServiceManager class, which is accessible from the ServiceManager property. 
            Currently the NDocument class registers the following services:
            <list type="bullet">
            <item>
            	<term>NDocumentEventSinkService</term>
            	<description>
            	All events are routed to this service. 
            	A reference to this service can be obtained from the EventSinkService property. 
            	</description>	
            </item>
            <item>
            	<term>NDocumentSmartPaintService</term>
            	<description>
            	This service is used by elements to invalidate themselves (request to be repainted) in all views. 
            	A reference to this service can be obtained from the SmartPaintService property. 
            	</description>	
            </item>
            <item>
            	<term>NDocumentHistoryService</term>
            	<description>
            	This service is used by elements to record history operations and transactions. 
            	A reference to this service can be obtained from the HistoryService property. 
            	</description>	
            </item>
            </list>
            </para>
            A single document can be displayed by multiple views. The NDocument class is 
            responsible for maintainging a list of the views currently displaying it.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDocument.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="E:Nevron.Diagram.NDocument.Modified">
            <summary>
            Modified event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDocument.ViewsChanged">
            <summary>
            Fired when the views displaying the document have changed
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDocument.PropertyChanging">
            <summary>
            Property changing event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDocument.PropertyChanged">
            <summary>
            Property changed event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDocument.AttributePropertyChanging">
            <summary>
            Attribute property changing event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDocument.AttributePropertyChanged">
            <summary>
            Attribute property changed event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDocument.AttributeChanged">
            <summary>
            Attribute changed event
            </summary>
            <remarks>
            The document must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDocument.Clone">
            <summary>
            Creates an identical copy of this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serilization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable implementation
            </summary>
            <remarks>
            Serializes the members of NDocument
            </remarks>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.GetEnumerator">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Binds the object to its parent object
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.CreateNonSerializedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocument.GetReferenceProvider">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.ProvideReference(System.Type)">
            <summary>
            
            </summary>
            <param name="parentType"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.GetServiceOfType(System.Type)">
            <summary>
            Gets a reference to a service of the specified type
            </summary>
            <param name="serviceType">service type</param>
            <returns>service instance or null if a service of this type cannot be located</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.GetElementFromId(System.Int32)">
            <summary>
            Obtains an element from its id
            </summary>
            <param name="id">element id</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.GetElementFromUniqueId(System.Guid)">
            <summary>
            Obtains an element from its unique id
            </summary>
            <param name="uid">unique id</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.RegisterElement(Nevron.Dom.INElement)">
            <summary>
            Registers the specified element in the document
            </summary>
            <param name="element">element to register</param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.UnregisterElement(Nevron.Dom.INElement)">
            <summary>
            Unregisters the specified element from the document
            </summary>
            <param name="element">element to unregister</param>
        </member>
        <member name="P:Nevron.Diagram.NDocument.RootNode">
            <summary>
            Since the document is the scene root node this property will always return this 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocument.ParentNode">
            <summary>
            Since the document is the scene root node this property will always return null 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocument.UniqueId">
            <summary>
            Gets/sets the unique id of the document
            </summary>
            <remarks>
            The set implementation has been provided for Cloning with new Ids. Do not call it directly.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDocument.Id">
            <summary>
            Gets/sets the id of the document
            </summary>
            <remarks>
            The set implementation has been provided, so that the internally contained element index can assign a valid id. Do not call it directly
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDocument.Tag">
            <summary>
            User defined data associated with the document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocument.Name">
            <summary>
            User defined name of the document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocument.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocument.Protection">
            <summary>
            Gets/sets the element protection
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocument.Permissions">
            <summary>
            Gets the allowed element abilities (e.g its permissions)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocument.CloneWithNewUniqueId(System.Collections.Hashtable)">
            <summary>
            Creates an identical copy of the element, which differs only by the element unique id
            </summary>
            <param name="mapUIds">map of unique ids, which must be populated with the made id changes</param>
            <returns>cloning which differs by Id only</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.ReplaceForeignUniqueIds(System.Collections.Hashtable,System.Boolean)">
            <summary>
            Replaces any foreign Ids (references to other nodes)
            </summary>
            <param name="mapUIds">map of ids which is used to find the new foreign id value</param>
            <param name="makeNotFoundEmpty">indicates whether the not found foreign ids must be set to Guid.Empty</param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.Nevron#Dom#INElement#RegisterElement(Nevron.Dom.NElementIndex)">
            <summary>
            Register the element in the element index
            </summary>
            <param name="AddE"></param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.Nevron#Dom#INElement#UnregisterElement(Nevron.Dom.NElementIndex)">
            <summary>
            Unregister the element from the element index
            </summary>
            <param name="bddE"></param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.GetChildByName(System.String)">
            <summary>
            Gets the first child element with the specified name
            </summary>
            <param name="name">child name</param>
            <returns>child diagram element</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.GetChildByName(System.String,System.Int32)">
            <summary>
            Gets the first child element with the specified name
            </summary>
            <param name="name">child name</param>
            <param name="startIndex">index to start from</param>
            <returns>child diagram element</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.GetChildFromId(System.Int32)">
            <summary>
            Obtains a child element by its id
            </summary>
            <param name="id">id of the node</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.GetChildFromUniqueId(System.Guid)">
            <summary>
            Obtains a child element by its unique id
            </summary>
            <param name="uid">unique id of the element</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.GetDescendantFromId(System.Int32,System.Int32)">
            <summary>
            Obtains a element node by its id
            </summary>
            <param name="id">id of the element</param>
            <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.GetDescendantFromUniqueId(System.Guid,System.Int32)">
            <summary>
            Obtains a child element by its unique id
            </summary>
            <param name="uid">unique id of the node</param>
            <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.IndexOfChild(Nevron.Dom.INNode)">
            <summary>
            Gets the index of the specified node in the container
            </summary>
            <param name="node">the node to locate</param>
            <returns>index of the node</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.GetChildAt(System.Int32)">
            <summary>
            Gets the child node at the specified index
            </summary>
            <param name="index">index</param>
            <returns>node at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.SetChildIndex(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Sets a new index of the specified child node
            </summary>
            <param name="node">node whose index to change</param>
            <param name="index">new index</param>
            <returns>previous node index</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.IsChild(Nevron.Dom.INNode)">
            <summary>
            Determines whether the specified node is a child node for this container
            </summary>
            <param name="node">node to check</param>
            <returns>true if it is a child node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.ChildrenCount(Nevron.Filters.INFilter)">
            <summary>
            Returns the number of child nodes which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <returns>children count, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.Children(Nevron.Filters.INFilter)">
            <summary>
            Obtains the child nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.AccumulateChildren(Nevron.Filters.INFilter,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the children contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="list">list to which to append the child nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.IsDescendant(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Queries whether the specified node is a descendant of this node
            </summary>
            <param name="node">node to look for</param>
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>true if the node is a descendant node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.DescendantsCount(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Returns the number of descendant nodes, which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>count of descendants, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.Descendants(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Obtains the descentant nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.AccumulateDescendants(Nevron.Filters.INFilter,System.Int32,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the descendants contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <param name="list">list to which to append the descendant nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.GetEnumerator(Nevron.Filters.INFilter)">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>node enumerator</returns>
        </member>
        <member name="P:Nevron.Diagram.NDocument.Attributes">
            <summary>
            Gets the list of child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.GetAttributeByName(System.String)">
            <summary>
            Gets a child or descendant attribute by its name
            </summary>
            <param name="attributeName">child name or full attribute name</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
            <summary>
            Sets a child or descendant attribute by its name
            </summary>
            <param name="attributeName">attribute name</param>
            <param name="attribute">attribute to set</param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.OnAttributePropertyChanging(System.String,System.String,System.Object)">
            <summary>
            Called by child or descendants attributes when an attribute property is changing
            </summary>
            <remarks>
            Fires NodeAttributePropertyChanging events and invalidates the document 
            if the Style attribute is changing. It also constrains the properties of the style attribute to be null.
            </remarks>
            <param name="attributeFullName">full attribute name</param>
            <param name="attributeProperty">attribute property name</param>
            <param name="newValue">new property value</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.OnAttributePropertyChanged(System.String,System.String)">
            <summary>
            Called by child or descendants attributes when an attribute property has changed
            </summary>
            <remarks>
            Fires the NodeAttributePropertyChanged event
            </remarks>
            <param name="attributeFullName">full attribute name</param>
            <param name="attributeProperty">attribute property name</param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.OnAttributeChanged(System.String)">
            <summary>
            Called by child or descendants attributes when an attribute has changed
            </summary>
            <remarks>
            Fires the NodeAttributeChanged event
            </remarks>
            <param name="attributeFullName">full attribute name</param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.OnStateChangingFromHistory(System.String)">
            <summary>
            Called when the history is about to modify the object state
            </summary>
            <remarks>
            Do not call this method directly
            </remarks>
            <param name="hint">hint used when the state was recorded</param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.OnStateChangedFromHistory(System.String)">
            <summary>
            Called when the history has modified the object state
            </summary>
            <remarks>
            Do not call this method directly
            </remarks>
            <param name="hint">hint used when the state was recorded</param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.OnHistoryAction(System.String)">
            <summary>
            Called to perform a history action
            </summary>
            <remarks>
            Do not call this method directly
            </remarks>
            <param name="action">action name, which was passed when the action was recorded</param>
        </member>
        <member name="P:Nevron.Diagram.NDocument.Verbs">
            <summary>
            Obtains an array list of NCommand instances representing the verbs supported by the node
            </summary>
            <remarks>
            This implementation will return one command correspoint to the Properties verb. 
            The command event handler is the DoVerb method.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDocument.Invalidate">
            <summary>
            Invalidates the entire document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocument.OnSerializing">
            <summary>
            Called when the document is about to be serialized
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocument.OnDeserialized">
            <summary>
            Called when the document has been deserialized
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocument.IsModified">
            <summary>
            Specifies whether the document is considered modified from an earlier state 
            </summary>
            <remarks>
            This property is set to true when an attemp to record a history operation has been made. 
            Since all methods and property calls in the DOM are protected by history, this ensures 
            that the IsModified flag is raised correctly only when the document indeed changed.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDocument.ServiceManager">
            <summary>
            Gets/sets the service manager, which used to maintain the collection of services registed for this document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocument.EventSinkService">
            <summary>
            Obtains a reference to the document event sink service
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocument.HistoryService">
            <summary>
            Obtains a reference to the document history service
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocument.SmartPaintService">
            <summary>
            Obtains a reference to the document smart paint service
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocument.Views">
            <summary>
            Gets the views currently displaying this document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocument.DataObjectAdaptors">
            <summary>
            Obtains a reference to the collection of data object adapters
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocument.Info">
            <summary>
            Gets/sets the document info attribute
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocument.BackgroundStyle">
            <summary>
            Gets/sets the document background style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocument.DesignTimeState">
            <summary>
            Gets/sets the design time state of the document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocument.ShouldSerializeTag">
            <summary>
            Determines whether the Tag property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.ShouldSerializeProtection">
            <summary>
            Determines whether the Protection property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.Reset">
            <summary>
            Resets the document to its default settings
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocument.StartTransaction(System.String)">
            <summary>
            Starts a new transaction
            </summary>
            <remarks>
            Safely calls the StartTransaction method of the history service (if connected to history service)
            </remarks>
            <param name="description">transaction description</param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.Commit">
            <summary>
            Commits the current transaction
            </summary>
            <remarks>
            Safely calls the Commit method of the history service (if connected to history service)
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDocument.Rollback">
            <summary>
            Rolls back the current transaction
            </summary>
            <remarks>
            Safely calls the Rollback method of the history service (if connected to history service)
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDocument.AddView(Nevron.Diagram.INView)">
            <summary>
            Adds the specified view
            </summary>
            <param name="view">view to add</param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.RemoveView(Nevron.Diagram.INView)">
            <summary>
            Removes the specified view
            </summary>
            <param name="view">view to remove</param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.SmartRefreshAllViews">
            <summary>
            Performs a smart refresh of all views displaying this document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocument.RefreshAllViews">
            <summary>
            Performs a total refresh of all views displaying this document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocument.UpdateAllViews">
            <summary>
            Updates all views displaying this document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocument.BeginInit">
            <summary>
            Begins an initialization of the document - pair it with EndInit
            </summary>
            <remarks>
            This implementation will pause all services and call the BeginUpdate method
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDocument.EndInit">
            <summary>
            Ends an initialization of the document - pair it with BeginInit
            </summary>
            <remarks>
            This implementation will call the EndUpdate method and resume all services
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDocument.BeginUpdate">
            <summary>
            Begins an update of the document - pair it with EndUpdate
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocument.EndUpdate">
            <summary>
            Ends an update of the drawing document - pair it with BeginUpdate
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocument.ToString">
            <summary>
            Overriden to return the document name
            </summary>
            <returns>the name of the document</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.ResetDocument">
            <summary>
            Called to reset the fields declared in NDocument
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocument.CreateServices">
            <summary>
            Called to create the services and add them in the service manager
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocument.CreateDataObjectAdaptors">
            <summary>
            Called to create the data object adapters aplicable for this document and add them in the document data object adapters collection
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocument.OnViewAdded(Nevron.Diagram.INView)">
            <summary>
            Called when the specified view has been added
            </summary>
            <remarks>
            This implementation calls the OnViewsChanged() method
            </remarks>
            <param name="view"></param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.OnViewRemoved(Nevron.Diagram.INView)">
            <summary>
            Called when the specified view has been removed
            </summary>
            <remarks>
            This implementation calls the OnViewsChanged() method
            </remarks>
            <param name="view"></param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.OnViewsChanged">
            <summary>
            Called when the views displaying this document have changed
            </summary>
            <remarks>
            This implementation fires the document views changed event
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDocument.OnPropertyChanging(System.String,System.Object)">
            <summary>
            Fires a property changing event
            </summary>
            <param name="propertyName">property name</param>
            <param name="newValue">new property value</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocument.OnPropertyChanged(System.String)">
            <summary>
            Fire a property changed event
            </summary>
            <param name="propertyName">property name</param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.PauseEventSinkService">
            <summary>
            Safely pauses the event sink service to which this node is connected
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocument.ResumeEventSinkService">
            <summary>
            Safely resumes the event sink service to which this node is connected
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocument.PauseHistoryService">
            <summary>
            Safely pauses the history service
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocument.ResumeHistoryService">
            <summary>
            Safely resumes the history service
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocument.RecordOperation(Nevron.Dom.NOperation)">
            <summary>
            Safely records a custom operation in the history service to which the document is connected
            </summary>
            <param name="operation">operation to record</param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.RecordProperty(System.String)">
            <summary>
            Records the state of the specified property before it is changed
            </summary>
            <remarks>
            Safely calls the RecordPropertyChange method of the history service (if connected to history service)
            </remarks>
            <param name="propertyName">property name</param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.StartProperty(System.String)">
            <summary>
            Records the state of the specified property before it is changed and pauses the history service. Pair it with the EndProperty method.
            </summary>
            <remarks>
            Safely calls the RecordPropertyChange method of the history service (if connected to history service) and pauses it.
            </remarks>
            <param name="propertyName">property name</param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.EndProperty">
            <summary>
            Resumes the history service. Pair it with the StartProperty method.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocument.RecordState(System.String,System.String)">
            <summary>
            Records the entire state of the node
            </summary>
            <remarks>
            Safely calls the RecordElementStateChange method of the history service (if connected to a history service).
            When this operation is undone or redone from history, the history will call the 
            OnStateChangingFromHistory and OnStateChangedFromHistory methods with the specified hint.
            </remarks>
            <param name="description">history operation description</param>
            <param name="hint">state change hint</param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.RecordState(System.String,System.String[],System.String)">
            <summary>
            Records the state of the specified node fields
            </summary>
            <remarks>
            Safely calls the RecordElementStateChange method of the history service (if connected to a history service).
            When this operation is undone or redone from history, the history will call the 
            OnStateChangingFromHistory and OnStateChangedFromHistory methods with the specified hint.
            </remarks>
            <param name="description">history operation description</param>
            <param name="fields">fields to record</param>
            /// <param name="hint">state change hint</param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.RecordAction(System.String)">
            <summary>
            Records an action
            </summary>
            <remarks>
            When the operation is undone or redone history will call the OnHistoryAction method of the document
            </remarks>
            <param name="description">human readable operation description</param>
        </member>
        <member name="M:Nevron.Diagram.NDocument.DoVerb(System.Object,Nevron.UI.WinForm.Controls.CommandEventArgs)">
            <summary>
            Executes the specified verb
            </summary>
            <param name="sender"></param>
            <param name="e">arguments holding the command which was executed</param>
        </member>
        <member name="P:Nevron.Diagram.NDocument.Nodes">
            <summary>
            Used by XML serialization
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocument.DataObjectAtaptorsXML">
            <summary>
            Used by XML serialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NGuideline">
            <summary>
            The abstract NGuideline class represents a guideline to which X or Y coordinates can be snapped 
            and serves as base class for horizontal and vertical guidelines.
            </summary>
            <remarks>
            NGuideline exposes properties, which are common for both horizontal and vertical guidelines.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NGuideline.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            By default the AllowCopy permission of guidelines is set to false, so that guidelines 
            cannot be recreated from the Clipboard or Drag and Drop operations.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NGuideline.#ctor(System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <remarks>
            By default the AllowCopy permission of guidelines is set to false, so that guidelines 
            cannot be recreated from the Clipboard or Drag and Drop operations.
            </remarks>
            <param name="coordinate">the coordinate of the guideline</param>
        </member>
        <member name="P:Nevron.Diagram.NGuideline.Visible">
            <summary>
            Controls the visibility of the guideline
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NGuideline.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the guideline in the specified context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.NGuideline.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the guideline can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the node can be painted, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NGuideline.Coordinate">
            <summary>
            Controls the coordinate of the guideline
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NGuideline.CreateDefaultStyle">
            <summary>
            Called by the NStyleableElement contructor to create the default style. 
            Overriden to create a valid NStyle attribute. 
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NHorizontalGuideline">
            <summary>
            The NHorizontalGuideline class represents a horizontal guideline
            </summary>
            <remarks>
            NHorizontalGuideline implements INHitTestable, but you can only hit test a horizontal guideline with a point hit test.
            It also implements INYCoordinateSnapper to indicate its ability to snap Y coordinates
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NHorizontalGuideline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NHorizontalGuideline.#ctor(System.Single)">
            <summary>
            Creates a new guideline with the specified parameters
            </summary>
            <param name="coordinate">Y coordinate of the guideline</param>
        </member>
        <member name="P:Nevron.Diagram.NHorizontalGuideline.Abilities">
            <summary>
            Gets the element abilities 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NHorizontalGuideline.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints an infinite horizontal guideline in the specified context
            </summary>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.NHorizontalGuideline.Invalidate">
            <summary>
            Invalidates an infinite horizontal guideline
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NHorizontalGuideline.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <remarks>
            Overriden to scale the internal guideline coordinate as an Y value
            </remarks>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.NHorizontalGuideline.Translate(System.Single,System.Single)">
            <summary>
            Translates the node with the specified offset
            </summary>
            <param name="dx">x offset</param>
            <param name="dy">y offset</param>
        </member>
        <member name="M:Nevron.Diagram.NHorizontalGuideline.HitTest(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the guideline by point with the specified context
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NHorizontalGuideline.HitTest(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the guideline by rectangle with the specified context
            </summary>
            <remarks>
            This implementation will simply return false.
            </remarks>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NHorizontalGuideline.SnapY(System.Single,Nevron.Diagram.NSnapContext,System.Single@)">
            <summary>
            Tries to snap the specified Y coordinate
            </summary>
            <param name="y">y coordinate to snap</param>
            <param name="context">snap context</param>
            <param name="snappedY">snapped Y coordinate</param>
            <returns>true if successfully snapped, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.NVerticalGuideline">
            <summary>
            The NVerticalGuideline class represents a vertical guideline
            </summary>
            <remarks>
            NVerticalGuideline implements INHitTestable, but you can only hit test a vertical guideline with a point hit test.
            It also implements INXCoordinateSnapper to indicate its ability to snap X coordinates.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NVerticalGuideline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NVerticalGuideline.#ctor(System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="coordinate">X coordinate of the guideline</param>
        </member>
        <member name="P:Nevron.Diagram.NVerticalGuideline.Abilities">
            <summary>
            Gets the element abilities 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NVerticalGuideline.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints an infinite vertical guideline in the specified context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.NVerticalGuideline.Invalidate">
            <summary>
            Invalidates an infinite vertical guideline
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NVerticalGuideline.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <remarks>
            Overriden to scale the internal guideline coordinate as a X value
            </remarks>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.NVerticalGuideline.Translate(System.Single,System.Single)">
            <summary>
            Translates the node with the specified offset
            </summary>
            <param name="dx">x offset</param>
            <param name="dy">y offset</param>
        </member>
        <member name="M:Nevron.Diagram.NVerticalGuideline.HitTest(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the guideline by point with the specified context
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NVerticalGuideline.HitTest(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the guideline by rectangle with the specified context
            </summary>
            <remarks>
            This implementation will simply return false.
            </remarks>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NVerticalGuideline.SnapX(System.Single,Nevron.Diagram.NSnapContext,System.Single@)">
            <summary>
            Tries to snap the specified X coordinate
            </summary>
            <param name="x">x coordinate to snap</param>
            <param name="context">snap context</param>
            <param name="snappedX">snapped X coordinate</param>
            <returns>true if successfully snapped, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.NAggregateModel">
            <summary>
            The NAggregateModel is a model, assembled from other models
            </summary>
            <remarks>
            Although the aggregate model is an element container, the models which an aggregate model aggregates may not 
            be it's direct children. It is up to derived classes to override the GetAggregatedModels method in order to provide 
            the aggregate with the models it should aggregate.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to update the references of all contained elements
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:Nevron.Diagram.NAggregateModel.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <remarks>
            Overriden to delegate the call to all contained nodes
            </remarks>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.Invalidate">
            <summary>
            Invalidates the node
            </summary>
            <remarks>
            Overriden to invalidate the contained nodes
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.HitTest(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the node by point with the specified context
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.HitTest(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the node by rectangle with the specified context
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the aggragate model in the specified context
            </summary>
            <remarks>
            Overriden to delegate the call to all INPaintable children
            </remarks>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.OnAncestorTransformChanging(Nevron.Dom.INNode,Nevron.GraphicsCore.NMatrix2DF)">
            <summary>
            Called when the transformaiton of the specified ancestor is changing
            </summary>
            <remarks>
            Overriden to delegate the call to the aggregated models
            </remarks>
            <param name="ancestor">ancestor whose transformation is changing</param>
            <param name="newTransform">new ancestor transformation</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.OnAncestorTransformChanged(Nevron.Dom.INNode)">
            <summary>
            Called when the transformaiton of the specified ancestor has changed
            </summary>
            <remarks>
            Overriden to delegate the call to the aggregated models
            </remarks>
            <param name="ancestor">ancestor whose transformation has changed</param>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.GetEnumerator">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.GetChildByName(System.String)">
            <summary>
            Gets the first child element with the specified name
            </summary>
            <param name="name">child name</param>
            <returns>child diagram element</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.GetChildByName(System.String,System.Int32)">
            <summary>
            Gets the first child element with the specified name
            </summary>
            <param name="name">child name</param>
            <param name="startIndex">index to start from</param>
            <returns>child diagram element</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.GetChildFromId(System.Int32)">
            <summary>
            Obtains a child element by its id
            </summary>
            <param name="id">id of the node</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.GetChildFromUniqueId(System.Guid)">
            <summary>
            Obtains a child element by its unique id
            </summary>
            <param name="uid">unique id of the element</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.GetDescendantFromId(System.Int32,System.Int32)">
            <summary>
            Obtains a element node by its id
            </summary>
            <param name="id">id of the element</param>
            <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.GetDescendantFromUniqueId(System.Guid,System.Int32)">
            <summary>
            Obtains a child element by its unique id
            </summary>
            <param name="uid">unique id of the node</param>
            <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.IndexOfChild(Nevron.Dom.INNode)">
            <summary>
            Gets the index of the specified node in the container
            </summary>
            <param name="node">the node to locate</param>
            <returns>index of the node</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.GetChildAt(System.Int32)">
            <summary>
            Gets the child node at the specified index
            </summary>
            <param name="index">index</param>
            <returns>node at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.SetChildIndex(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Sets a new index of the specified child node
            </summary>
            <param name="node">node whose index to change</param>
            <param name="index">new index</param>
            <returns>previous node index</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.IsChild(Nevron.Dom.INNode)">
            <summary>
            Determines whether the specified node is a child node for this container
            </summary>
            <param name="node">node to check</param>
            <returns>true if it is a child node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.ChildrenCount(Nevron.Filters.INFilter)">
            <summary>
            Returns the number of child nodes which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <returns>children count, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.Children(Nevron.Filters.INFilter)">
            <summary>
            Obtains the child nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.AccumulateChildren(Nevron.Filters.INFilter,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the children contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="list">list to which to append the child nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.IsDescendant(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Queries whether the specified node is a descendant of this node
            </summary>
            <param name="node">node to look for</param>
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>true if the node is a descendant node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.DescendantsCount(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Returns the number of descendant nodes, which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>count of descendants, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.Descendants(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Obtains the descentant nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.AccumulateDescendants(Nevron.Filters.INFilter,System.Int32,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the descendants contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <param name="list">list to which to append the descendant nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.GetEnumerator(Nevron.Filters.INFilter)">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.HitTest(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests by point all node descendants, which satisfy the specified filter
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>list of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.HitTest(Nevron.GraphicsCore.NRectangleF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests by rectangle all node descendants, which satisfy the specified filter
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>array of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.LastHit(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Returns the last hit descendant by point, which statisfies the specified filter
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>hit node, or null if there is not hit node</returns>
        </member>
        <member name="P:Nevron.Diagram.NAggregateModel.LockUpdatesFromAggregatedModels">
            <summary>
            Locks/unlocks the updates from aggregated models
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAggregateModel.ResizeAggregatedModels">
            <summary>
            Gets/sets the default way in which the aggregate model resizes the models it aggregates
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAggregateModel.AutoUpdateModelBounds">
            <summary>
            Gets/sets whether the model bounds of the aggregate should be automatically updated, 
            when some of the aggregated models has changed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NAggregateModel.Padding">
            <summary>
            Gets/sets the padding applied to the aggregated model bounds, when the aggregate model automatically computes model bounds for itself
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.ShouldSerializeResizeAggregatedModels">
            <summary>
            Determines whether the ResizeAggregatedModels property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.ShouldSerializeAutoUpdateModelBounds">
            <summary>
            Determines whether the AutoUpdateModelBounds property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.ShouldSerializePadding">
            <summary>
            Determines whether the Padding property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.ScaleModel(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
            <summary>
            Scales the model around the specified pin (in model coordinates)
            </summary>
            <remarks>
            Overriden to scale the aggregated models in accordance with their ResizeInAggregate setting
            </remarks>
            <param name="scaleX">x scale</param>
            <param name="scaleY">y scale</param>
            <param name="pin">pin (in model coordinates)</param>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.UpdateModelBounds(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Updates the model bounds with the specified bounds
            </summary>
            <param name="newModelBounds">model bounds</param>
            <returns>true if the model bounds were successfully updated, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.UpdateModelBounds">
            <summary>
            Updates the model bounds with the exact bounds of the aggregated models
            </summary>
            <returns>true if the model bounds were successfully updated, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.OnAggregatedModelChanging(Nevron.Diagram.NModel,Nevron.Diagram.ModelChangeHint,System.Object)">
            <summary>
            Called by aggregated models, when they are about to change
            </summary>
            <param name="model">model, which is changing</param>
            <param name="hint">hint for the change</param>
            <param name="data">data associated with the change</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.OnAggregatedModelChanged(Nevron.Diagram.NModel,Nevron.Diagram.ModelChangeHint)">
            <summary>
            Called by aggregated models, when they have changed
            </summary>
            <param name="model">model, which has changed</param>
            <param name="hint">hint for the change</param>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.OnAggregatedModelInserted(Nevron.Diagram.NModel)">
            <summary>
            Called when an aggreagated model has been inserted in the aggregate
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.OnAggregatedModelRemoved(Nevron.Diagram.NModel)">
            <summary>
            Called when an aggreagated model has been removed from the aggregate
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.GetAggregatedModels">
            <summary>
            Gets the aggregated models
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.OnModelBoundsUpdated">
            <summary>
            Called when the model bounds of the aggregate has been automatically or manually updated
            </summary>
            <remarks>
            This implementation will invalidate the cartesian scale factors of the contained models
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.MustAutoUpdateModelBounds(System.Boolean)">
            <summary>
            Determines whether the model bounds must be automatically updated.
            </summary>
            <param name="aggregatedModelChanged">whether the update is caused by an aggregated model change</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.ComputeModelBounds">
            <summary>
            Computes the model bounds of the aggregated model
            </summary>
            <returns>model bounds of the aggregate</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.ComputeModelBounds(Nevron.Diagram.NModel,Nevron.Diagram.ModelChangeHint,System.Object)">
            <summary>
            Computes the model bounds of the aggregate model based on an expected change of the specified model
            </summary>
            <param name="model"></param>
            <param name="hint"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.GetAggregatedModelsPadding">
            <summary>
            Gets the padding, which is applied to the aggregated models, when the model bounds of the aggregate are computed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.GetModelResizeParameters(Nevron.Diagram.NModel)">
            <summary>
            Gets the resize parameters for the specified aggregated model
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.OnAggregateScalingStarted(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
            <summary>
            Called when the aggregate model starts to scale the models it aggregates
            </summary>
            <param name="scaleX">scale X</param>
            <param name="scaleY">scale Y</param>
            <param name="pin">pin in model coordinates</param>
            <returns>scale 2D info</returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.ScaleAggregatedModel(Nevron.Diagram.NModel,Nevron.Diagram.NAggregateModel.EEdE)">
            <summary>
            Called by the ScaleModel method in order to scale the specified aggregated model
            </summary>
            <param name="model">aggregated model which must be scaled</param>
            <param name="info">info associated with the scaling</param>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.OnAggregateScalingEnded(System.Boolean,Nevron.Diagram.NAggregateModel.EEdE)">
            <summary>
            Called when the aggregate model has scaled the models it aggregates
            </summary>
            <param name="successful">true if sucessfully scaled, otherwise false</param>
            <param name="info">info associated with the scaling</param>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.GetLock(Nevron.Diagram.AggregateModelLocks)">
            <summary>
            Gets whether the specified lock is raised
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.SetLock(Nevron.Diagram.AggregateModelLocks,System.Boolean)">
            <summary>
            Raises or drops the specified lock 
            </summary>
            <param name="key"></param>
            <param name="raise"></param>
        </member>
        <member name="M:Nevron.Diagram.NAggregateModel.GetDefaultPropertyValue(Nevron.Diagram.DiagramElementProperties)">
            <summary>
            Obtains the default value for the specified property
            </summary>
            <param name="property">property</param>
            <returns>default value</returns>
        </member>
        <member name="P:Nevron.Diagram.NAggregateModel.Nodes">
            <summary>
            Used by XML serialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NCompositeGeometry">
            <summary>
            The NCompositeGeometry class represents an aggregate model, which aggregates path primitives
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NCompositeGeometry.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NCompositeGeometry.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NCompositeGeometry.EnumInstantiatableTypes">
            <summary>
            Enumerates the known types, which can be instantiated and inserted to this composite at runtime
            </summary>
            <returns>types of the nodes which can be instanciated and inserted to this composite at runtime</returns>
        </member>
        <member name="M:Nevron.Diagram.NCompositeGeometry.QueryNextName(Nevron.Diagram.INDiagramElement)">
            <summary>
            Queries for the next unique name, which will be assigned to the specified element if it is inserted to this composite
            </summary>
            <param name="element">element for which to obtain unique name</param>
            <returns>unique name</returns>
        </member>
        <member name="P:Nevron.Diagram.NCompositeGeometry.AutoGenerateUniqueNames">
            <summary>
            Gets/sets the whether the composite must automatically generate unique names for newly inserted nodes.
            Set this property to false if a large number of nodes is about to be inserted in the composite
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NCompositeGeometry.AddChild(Nevron.Dom.INNode)">
            <summary>
            Adds a child node
            </summary>
            <param name="node">node to add</param>
        </member>
        <member name="M:Nevron.Diagram.NCompositeGeometry.InsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Inserts a child node at the specified index
            </summary>
            <param name="index">index at which to insert the child node</param>
            <param name="node">node to insert</param>
        </member>
        <member name="M:Nevron.Diagram.NCompositeGeometry.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Queries whether the specified node can be inserted at the specified index
            </summary>
            <remarks>
            This impementation will only accept nodes of type NPathPrimitive
            </remarks>
            <param name="index">index at which the child node will be inserted</param>
            <param name="node">child node to insert</param>
            <returns>true if the node can be inserted at the specified index, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NCompositeGeometry.RemoveChild(Nevron.Dom.INNode)">
            <summary>
            Removes the specified child node from the container children
            </summary>
            <param name="node">child node to remove</param>
        </member>
        <member name="M:Nevron.Diagram.NCompositeGeometry.RemoveChildAt(System.Int32)">
            <summary>
            Removes the child node at the specified index
            </summary>
            <param name="index">index of child node to remove</param>
        </member>
        <member name="M:Nevron.Diagram.NCompositeGeometry.RemoveAllChildren">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NCompositeGeometry.CanRemoveChild(Nevron.Dom.INNode)">
            <summary>
            Queries whether the specified child node can be removed
            </summary>
            <param name="node">child node to remove</param>
            <returns>true if the node can be removed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NCompositeGeometry.GetPointInfo(System.Int32)">
            <summary>
            Obtains information about the point at the specified index
            </summary>
            <param name="index">point index</param>
            <returns>information for the point at the specified index</returns>
        </member>
        <member name="P:Nevron.Diagram.NCompositeGeometry.PointsCount">
            <summary>
            Obtains the points count 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NCompositeGeometry.Points">
            <summary>
            Gets/sets the node points
            </summary>
            <remarks>
            The set accessor of this implementation will throw a NotImplementedException exception 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NCompositeGeometry.GetPointAt(System.Int32)">
            <summary>
            Gets the point at the specified index
            </summary>
            <param name="index">point index</param>
            <returns>point at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.NCompositeGeometry.SetPointAt(System.Int32,Nevron.GraphicsCore.NPointF)">
            <summary>
            Sets the point at the specified index
            </summary>
            <param name="index">point index</param>
            <param name="point">point to set</param>
        </member>
        <member name="M:Nevron.Diagram.NCompositeGeometry.GetAggregatedModels">
            <summary>
            Overriden to return the children paths
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NModel">
            <summary>
            The NModel abstract class is a transformable element, which stores a boundable model 
            and serves as base class for more specific models
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="E:Nevron.Diagram.NModel.BoundsChanging">
            <summary>
            Bounds changing event
            </summary>
            <remarks>
            The model must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NModel.BoundsChanged">
            <summary>
            Bounds changed event
            </summary>
            <remarks>
            The model must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NModel.MouseEnter">
            <summary>
            Mouse enter event
            </summary>
            <remarks>
            The model must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NModel.MouseMove">
            <summary>
            Mouse move event
            </summary>
            <remarks>
            The model must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NModel.MouseHover">
            <summary>
            Mouse hover event
            </summary>
            <remarks>
            The model must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NModel.MouseDown">
            <summary>
            Mouse button down event
            </summary>
            <remarks>
            The model must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NModel.MouseUp">
            <summary>
            Mouse button up event
            </summary>
            <remarks>
            The model must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NModel.MouseWheel">
            <summary>
            Mouse wheel event
            </summary>
            <remarks>
            The model must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NModel.MouseLeave">
            <summary>
            Mouse leave event
            </summary>
            <remarks>
            The model must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NModel.Click">
            <summary>
            Click event
            </summary>
            <remarks>
            The model must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NModel.DoubleClick">
            <summary>
            Double click event
            </summary>
            <remarks>
            The model must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NModel.KeyDown">
            <summary>
            Key down event
            </summary>
            <remarks>
            The model must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NModel.KeyUp">
            <summary>
            Key up event
            </summary>
            <remarks>
            The model must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NModel.KeyPress">
            <summary>
            Key press event
            </summary>
            <remarks>
            The model must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NModel.DragEnter">
            <summary>
            Drag enter event
            </summary>
            <remarks>
            The model must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NModel.DragOver">
            <summary>
            Drag over event
            </summary>
            <remarks>
            The model must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NModel.DragDrop">
            <summary>
            Drag drop event
            </summary>
            <remarks>
            The model must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NModel.DragLeave">
            <summary>
            Drag leave event
            </summary>
            <remarks>
            The model must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NModel.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <remarks>
            Overriden to cashe a reference to the aggregate model hosting this model
            </remarks>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnStateChangingFromHistory(System.String)">
            <summary>
            Called when the history is about to modify the object state
            </summary>
            <remarks>
            Overriden to handle the DefineModel hints
            </remarks>
            <param name="hint">hint used when the state was recorded</param>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnStateChangedFromHistory(System.String)">
            <summary>
            Called when the history has modified the object state
            </summary>
            <remarks>
            Overriden to handle the DefineModel hints
            </remarks>
            <param name="hint">hint used when the state was recorded</param>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnHistoryAction(System.String)">
            <summary>
            Called to perform a history action
            </summary>
            <remarks>
            Do not call this method directly
            </remarks>
            <param name="action">action name, which was passed when the action was recorded</param>
        </member>
        <member name="P:Nevron.Diagram.NModel.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NModel.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <remarks>
            Overriden to convert the model bounds
            </remarks>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.NModel.Bounds">
            <summary>
            Gets/sets the bounds of the node (in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NModel.Center">
            <summary>
            Gets/sets the node center (in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NModel.Location">
            <summary>
            Gets/sets the node location (top left corner of the bounds, in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NModel.Width">
            <summary>
            Gets/sets the node width (in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NModel.Height">
            <summary>
            Gets/sets the node height (in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NModel.Visible">
            <summary>
            Controls the visibility of the model
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NModel.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the model in the specified context
            </summary>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.NModel.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the model can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the model can be painted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.HitTest(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the model by point with the specified context
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.HitTest(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the model by rectangle with the specified context
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnMouseEnter(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the mouse entered the model
            </summary>
            <remarks>
            This implementation will fire the NodeMouseEnter event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnMouseMove(Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Called when the mouse moves in the model
            </summary>
            <remarks>
            The implementation will first request cursor and tooltip using the composed model interactivity style.
            It will then fire the NodeMouseMove event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnMouseHover(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the mouse hovers in the model
            </summary>
            <remarks>
            The implementation will fire the NodeMouseHover event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnMouseDown(Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Called when a mouse button is down in the model
            </summary>
            <remarks>
            The implementation will fire the NodeMouseDown event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnMouseUp(Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Called when a mouse button is up in the model
            </summary>
            <remarks>
            The implementation will fire the NodeMouseUp event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnMouseWheel(Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Called when a mouse wheel was moved in the model
            </summary>
            <remarks>
            The implementation will fire the NodeMouseWheel event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnMouseLeave(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the mouse leaves the model
            </summary>
            <remarks>
            The implementation will fire the NodeMouseLeave event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnClick(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the user clicked on the model
            </summary>
            <remarks>
            The implementation will fire the NodeClick event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnDoubleClick(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the user double clicked on the model
            </summary>
            <remarks>
            The implementation will fire the NodeDoubleClick event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnKeyDown(Nevron.Diagram.NKeyEventArgs)">
            <summary>
            Handles the key down event
            </summary>
            <remarks>
            This method is called by views when this model is the focused model. 
            The implementation will fire the NodeKeyDown event for this model. 
            If it was not handled it will bubble the event to the previous INKeyboardEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnKeyPress(Nevron.Diagram.NKeyPressEventArgs)">
            <summary>
            Handles the key press event
            </summary>
            <remarks>
            This method is called by views when this model is the focused model. 
            The implementation will fire the NodeKeyPress event for this model. 
            If it was not handled it will bubble the event to the previous INKeyboardEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnKeyUp(Nevron.Diagram.NKeyEventArgs)">
            <summary>
            Handles the key up event
            </summary>
            <remarks>
            This method is called by views when this model is the focused model. 
            The implementation will fire the NodeKeyUp event for this model. 
            If it was not handled it will bubble the event to the previous INKeyboardEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NModel.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is an input key
            </summary>
            <remarks>
            This method is called by views when this model is the focused model. 
            The implementation will first invoke the QueryIsInputKey method of the document for this model. 
            If the key is not an input key for this model it will call the QueryIsInputKey method again passing as argument the document itself. 
            </remarks>
            <param name="keyData">key</param>
            <returns>true if the key is an input key, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.IsInputChar(System.Char)">
            <summary>
            Determines whether the specified character is an input charecter
            </summary>
            <remarks>
            This method is called by views when this model is the focused model. 
            The implementation will first invoke the QueryIsInputChar method of the document for this model. 
            If the key is not an input key for this model it will call the QueryIsInputChar method again passing as argument the document itself. 
            </remarks>
            <param name="charCode">character</param>
            <returns>true if the character is an input character, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnDragEnter(Nevron.Diagram.NDragEventArgs)">
            <summary>
            Called when a dragged object entered the model
            </summary>
            <remarks>
            The implementation will fire the NodeDragEnter event for this model.
            If it was not handled it will bubble the event to the previous INDragDropEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnDragDrop(Nevron.Diagram.NDragEventArgs)">
            <summary>
            Called when a dragged object is dropped in the model
            </summary>
            <remarks>
            The implementation will fire the NodeDragDrop event for this model.
            If it was not handled it will bubble the event to the previous INDragDropEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnDragLeave(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when a dragged object leaves the model
            </summary>
            <remarks>
            The implementation will fire the NodeDragLeave event for this model.
            If it was not handled it will bubble the event to the previous INDragDropEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnDragOver(Nevron.Diagram.NDragEventArgs)">
            <summary>
            Called when a dragged object is moved over the model
            </summary>
            <remarks>
            The implementation will fire the NodeDragOver event for this model.
            If it was not handled it will bubble the event to the previous INDragDropEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NModel.Reverse">
            <summary>
            Reverses the model
            </summary>
            <returns>true if reverse succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.ScaleModel(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
            <summary>
            Scales the model content around the specified pin (in model coordinates)
            </summary>
            <param name="scaleX">x scale</param>
            <param name="scaleY">y scale</param>
            <param name="pin">pin (in model coordinates)</param>
            <returns>true if scaling succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.GetLengthLocation(System.Single)">
            <summary>
            Obtains the location of a point along the model length, which corresponds to the specified percent (in scene coordinates)
            </summary>
            <param name="percent">percent for which to obtain location</param>
            <returns>point in scene coordinates</returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.GetLengthOrientation(System.Single)">
            <summary>
            Obtains the tangent angle (in radians) along the model length, which corresponds to the specified percent
            </summary>
            <param name="percent">percent for which to obtain orientation</param>
            <returns>orientation in radians</returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.GetNearestContourLocation(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Gets the nearest intersection point of the model contour with the vector defined by the specified start and end points
            </summary>
            <remarks>
            This implementation returns the result of the GetNearestRotatedBoundsLocation method, 
            since by default the model contour is its rotated bounds
            </remarks>
            <param name="vectorStart">start vector point (in scene coordinates)</param>
            <param name="vectorEnd">end vector point (in scene coordinates)</param>
            <returns>vector start point if there are not intersection points, otherwise nearest intersection point to vector end point</returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.GetNearestRotatedBoundsLocation(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Gets the nearest intersection point of the rotated bounds with the vector defined by the specified start and end points
            </summary>
            <param name="vectorStart">start vector point (in scene coordinates)</param>
            <param name="vectorEnd">end vector point (in scene coordinates)</param>
            <returns>vector start point if there are not intersection points, otherwise nearest intersection point to vector end point</returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.GetStartPointDirection(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Gets the estimated direction of the specified start point to reach the specified end point
            </summary>
            <remarks>
            This implementation simply returns the end point
            </remarks>
            <param name="startPoint">proposed start point</param> 
            <param name="endPoint">proposed end point</param>
            <returns>direction for the start point</returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.GetEndPointDirection(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Gets the estimated direction of the specified end point to reach the specified start point
            </summary>
            <remarks>
            This implementation simply returns the start point
            </remarks>
            <param name="startPoint">proposed start point</param> 
            <param name="endPoint">proposed end point</param>
            <returns>direction for the end point</returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.Reposition(Nevron.Diagram.CoordinateSystem,Nevron.GraphicsCore.NPointF)">
            <summary>
            Repositions (translates) the shape so that the pin point is moved to the specified position
            </summary>
            <param name="system">coordinate system in which to reposition</param>
            <param name="newPosition">new pin point position in the specified coordinate system</param>
        </member>
        <member name="M:Nevron.Diagram.NModel.IsAggregateModelCollapsed">
            <summary>
            Determines whether the aggregate model in which this model can reside is collapsed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.IsCollapsed">
            <summary>
            Determines whether the model is collapsed - either locally or because it resides in a collapsed ancestor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.SetBounds(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Sets the bounds of the model to the newly specified bounds by applying scale and
            translate transformations on the model bounds.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NModel.ModelBounds">
            <summary>
            Obtains the bounds of the model (in model coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NModel.ModelWidth">
            <summary>
            Gets/sets the model width (in model coordinates)
            </summary>
            <remarks>
            The set accessor of this implementation will scale the model in the X direction, 
            with the current pin position in model coordinates
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NModel.ModelHeight">
            <summary>
            Gets/sets the model height (in model coordinates)
            </summary>
            <remarks>
            The set accessor of this implementation will scale the model in the Y direction, 
            with the current pin position in model coordinates
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NModel.ModelStartPoint">
            <summary>
            Gets/sets the start point of the model (in model coordinates)
            </summary>
            <remarks>
            This implementation scales the model around the end point and rotates the model relative to its parent
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NModel.ModelEndPoint">
            <summary>
            Gets/sets the end point of the model (in model coordinates)
            </summary>
            <remarks>
            This implementation scales the model around the start point and rotates the model relative to its parent
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NModel.ModelPinPoint">
            <summary>
            Gets/sets the pin point in model coordinates
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NModel.StartPoint">
            <summary>
            Gets/sets the start point (in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NModel.EndPoint">
            <summary>
            Gets/sets the end point (in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NModel.PinPoint">
            <summary>
            Gets/sets the pin point in scene coordinate
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NModel.Length">
            <summary>
            Gets the logical length of the model (in scene coordinates)
            </summary>
            <remarks>
            This implementation returns the distance between the start and end points
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NModel.ResizeInAggregate">
            <summary>
            Gets/sets the model resize behavior when it resides in an aggregate model
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NModel.PinAlignment">
            <summary>
            Gets/sets the pin alignment relative to the model bounds
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NModel.CartesianScaleFactors">
            <summary>
            Gets/sets the cartesian scale factors for this model
            </summary>
            <remarks>
            When a model uses a cartesian scale inside its aggregate its width and height are computed with the following equasions:
            <para>
            model.Width = aggregate.Width * F1 + aggregate.Height * F2;
            model.Height = aggregate.Width * F3 + aggregate.Height * F4;
            </para>
            The value of this property is computed by the aggregate model, when first needed and is marked invalid when the bounds of the model change.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NModel.AggregateModel">
            <summary>
            Obtains a reference to the aggregate model hosting this model
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NModel.ShouldSerializeResizeInAggregate">
            <summary>
            Determines whether the ResizeInAggregate property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.ShouldSerializePinAlignment">
            <summary>
            Determines whether the PinAlignment property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.ShouldSerializeCartesianScaleFactors">
            <summary>
            Determines whether the CartesianScaleFactors property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.GetDefaultPropertyValue(Nevron.Diagram.DiagramElementProperties)">
            <summary>
            Obtains the default value for the specified property
            </summary>
            <param name="property">property</param>
            <returns>default value</returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnTransformChanging(Nevron.GraphicsCore.NMatrix2DF)">
            <summary>
            Called when the transformation of the node is about to change
            </summary>
            <remarks>
            This implementation will first check if the possible aggregate model permits the change. 
            It will then check whether the new scene bounds are acceptable and will return the result of the base implementation.
            </remarks>
            <returns>true if change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnTransformChanged">
            <summary>
            Called when the transformation of the node has changed
            </summary>
            <remarks>
            This implementation will first call the base implementation. It will then call the OnBoundsChanged method.
            Finally it will notify the possible aggregate model about the change
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NModel.InvalidateSceneCashe">
            <summary>
            Invalidates the scene cashe. Overriden to invalidate the cashed scene bounds
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnModelBoundsChanging(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Called when the model bounds of the model are about to change
            </summary>
            <remarks>
            This implementation will first check whether the possible aggregate model permits the change. 
            It will then call the OnBoundsChanging method.
            </remarks>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnModelBoundsChanged">
            <summary>
            Called when the bounds of the model have changed
            </summary>
            <remarks>
            This implementation will notify the possible aggregate model about the change. 
            It will then call the OnBoundsChanged method.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnBoundsChanging(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Called when the bounds of the model are about to change
            </summary>
            <remarks>
            This implementation will fire the NodeBoundsChanging event 
            </remarks>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.OnBoundsChanged">
            <summary>
            Called when the bounds of the model have changed
            </summary>
            <remarks>
            This implementation will fire the NodeBoundsChanged event
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NModel.ComputeBounds(Nevron.GraphicsCore.NMatrix2DF)">
            <summary>
            Computes the scene bounds of the model based on an expected new local transformation
            </summary>
            <param name="newTransform">new local transfromation</param>
            <returns>new scene bounds</returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.ComputeBounds(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Computes the scene bounds of the model based on an expected new model bounds
            </summary>
            <param name="newModelBounds">new model bounds</param>
            <returns>new scene bounds</returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.ComputeBounds">
            <summary>
            Computes the scene bounds of the model
            </summary>
            <remarks>
            This implementation measured the bounds of the model bounds corners when translated to scene coordinates
            </remarks>
            <returns>bounds in scene coordinates</returns>
        </member>
        <member name="M:Nevron.Diagram.NModel.RecordModelDefinition">
            <summary>
            Records the model definition
            </summary>
            <remarks>
            This implementation records the current state of the model bounds
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NModel.MustHitTest(Nevron.Diagram.NHitTestContext)">
            <summary>
            Determines whether the model must be hit tested. 
            A model does not need to be hit tested, if it is not visible or is collapsed.
            </summary>
            <param name="context">hit test context</param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.NModel.ModelBoundsXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NDiagramElement">
            <summary>
            The NDiagramElement abstract class serves as base class for all elements, which can reside in diagram documents
            </summary>
            <remarks>
            NDiagramElement enhances its base NDiagramNode with the following features:
            <list type="bullet">
            <item>
            	<term>Ability to reside in diagram document</term>
            	<description>
            	NDiagramElement implements the INDiagramElement interface, 
            	which is a required interface for all document elements, containers and composites.
            	</description>
            </item>
            <item>
            	<term>Attributes</term>
            	<description>
            	Since NDiagramElement implements the INDiagramElement interface, which on its turn derives from INElement, it adds support for attribites 
            	(implements the INAttributeContainer interface). 
            	</description>
            </item>
            <item>
            	<term>Context menu editing</term>
            	<description>
            	NDiagramElement implements the INContextMenuEditable interface. In this way all NDiagramElement derivates can be edited via context menus.
            	NDiagramElement adds support for the Properties verb.
            	</description>
            </item>
            <item>
            	<term>History support</term>
            	<description>
            	All property and method calls of NDiagramElement and its derivates are protected by history. 
            	That is why NDiagramElement tries to cashe a reference to an instance of the NElementHistoryService (if the current context can provide a reference to this service). 
            	It also provides a set of protected methods, which safely delegate to the NElementHistoryService. You can use them to make your derived classes history aware.
            	</description>
            </item>
            <item>
            	<term>Measurements</term>
            	<description>
            	NDiagramElement implements INMeasurements interface and thus subscribes for logical measurement unit conversions. 
            	Derived classes can override the ConvertMeasurementUnit method to convert all logical measurements they contain.
            	</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to update the references of all contained attributes
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:Nevron.Diagram.NDiagramElement.Attributes">
            <summary>
            Gets the list of child attributes of this container
            </summary>
            <remarks>
            This implementation returns an empty attributes list
            </remarks>
            <returns>attributes of the node</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.GetAttributeByName(System.String)">
            <summary>
            Gets the attribute from its name
            </summary>
            <param name="attributeName">full or local attribute name</param>
            <returns>reference to the attribute</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified local attribute
            </summary>
            <remarks>
            This implementation will give names to the Style and Permissions attributes
            </remarks>
            <param name="attribute">local attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
            <summary>
            Sets a child or descendant attribute by its name
            </summary>
            <param name="attributeName">attribute name</param>
            <param name="attribute">attribute to set</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.OnAttributePropertyChanging(System.String,System.String,System.Object)">
            <summary>
            Called by the attributes when an attribute property is changing
            </summary>
            <remarks>
            This implementation will fire a NodeAttributePropertyChanging event. 
            If this node is INPaintable and the Style attribute is changing it will invalidate the node.
            </remarks>
            <param name="attributeFullName">full attribute name</param>
            <param name="attributeProperty">attribute property</param>
            <param name="newValue">new property value</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.OnAttributePropertyChanged(System.String,System.String)">
            <summary>
            Called by attributes when an attribute property has changed
            </summary>
            <remarks>
            This implementation will fire a NodeAttributePropertyChanged event.
            If this node is INPaintable and the Style attribute has changed it will invalidate the node.
            </remarks>
            <param name="attributeFullName">full attribute name</param>
            <param name="attributeProperty">attribute property</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.OnAttributeChanged(System.String)">
            <summary>
            Called by attributes when an attribute has changed
            </summary>
            <remarks>
            This implementation will fire a NodeAttributeChanged event.
            If this node is INPaintable and the Style attribute has changed it will invalidate the node.
            </remarks>
            <param name="attributeFullName">full attribute name</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.OnStateChangingFromHistory(System.String)">
            <summary>
            Called when the history is about to modify the object state
            </summary>
            <remarks>
            Do not call this method directly
            </remarks>
            <param name="hint">hint used when the state was recorded</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.OnStateChangedFromHistory(System.String)">
            <summary>
            Called when the history has modified the object state
            </summary>
            <remarks>
            Do not call this method directly
            </remarks>
            <param name="hint">hint used when the state was recorded</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.OnHistoryAction(System.String)">
            <summary>
            Called to perform a history action
            </summary>
            <remarks>
            Do not call this method directly
            </remarks>
            <param name="action">action name, which was passed when the action was recorded</param>
        </member>
        <member name="P:Nevron.Diagram.NDiagramElement.UniqueId">
            <summary>
            Gets/sets the unique id of the element
            </summary>
            <remarks>
            The set implementation has been provided for Cloning with new Ids. Do not call it directly.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDiagramElement.Id">
            <summary>
            Gets/sets the id of the element
            </summary>
            <remarks>
            The set implementation has been provided, so that the document can assign a valid id. Do not call it directly
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDiagramElement.Tag">
            <summary>
            User defined data associated with the element
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDiagramElement.Name">
            <summary>
            User defined name of the element
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDiagramElement.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDiagramElement.Protection">
            <summary>
            Gets/sets the element protection
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDiagramElement.Permissions">
            <summary>
            Gets the allowed element abilities (e.g its permissions)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.CloneWithNewUniqueId(System.Collections.Hashtable)">
            <summary>
            Creates an identical copy of the element, which differs only by the element unique id
            </summary>
            <param name="mapUIds">map of uids, which must be populated with the made unique id changes</param>
            <returns>cloning, which differs by unique Id only</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.ReplaceForeignUniqueIds(System.Collections.Hashtable,System.Boolean)">
            <summary>
            Replaces any foreign unique ids (references to other nodes)
            </summary>
            <param name="mapUIds">map of uids which is used to find the new foreign uid value</param>
            <param name="makeNotFoundEmpty">indicates whether the not found foreign uids must be set to Guid.Empty</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.Nevron#Dom#INElement#RegisterElement(Nevron.Dom.NElementIndex)">
            <summary>
            Register the element in the element index
            </summary>
            <param name="YEdE"></param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.Nevron#Dom#INElement#UnregisterElement(Nevron.Dom.NElementIndex)">
            <summary>
            Unregister the element from the element index
            </summary>
            <param name="AfdE"></param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.NDiagramElement.Verbs">
            <summary>
            Obtains an array list of NCommand instances representing the verbs supported by the node
            </summary>
            <remarks>
            This implementation will return one command correspoint to the Properties verb. 
            The command event handler is the DoVerb method.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.ShouldSerializeTag">
            <summary>
            Determines whether the Tag property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.ShouldSerializeProtection">
            <summary>
            Determines whether the Protection property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.NDiagramElement.Document">
            <summary>
            Obtains a reference to the document in which this element resides
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDiagramElement.Drawing">
            <summary>
            Obtains a reference to the drawing document in which this element resides
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDiagramElement.Library">
            <summary>
            Obtains a reference to the library document in which this element resides
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDiagramElement.HistoryService">
            <summary>
            Obtains a reference to the NElementHistoryService, which this element uses to record history
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.ToString">
            <summary>
            Overriden to return the element name
            </summary>
            <returns>the name of the element</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.UpdateReferencesToServices(Nevron.Dom.INServiceProvider)">
            <summary>
            Updates the node references to services
            </summary>
            <param name="serviceProvider">service provider which to query for services (can be null)</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.GetPropertyValue(Nevron.Diagram.DiagramElementProperties)">
            <summary>
            Get the value of the specified property
            </summary>
            <param name="property">property</param>
            <returns>value</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.SetPropertyValue(Nevron.Diagram.DiagramElementProperties,System.Object)">
            <summary>
            Sets a new value to the specified property
            </summary>
            <param name="property">property</param>
            <param name="val">value to set</param> 
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.GetDefaultPropertyValue(Nevron.Diagram.DiagramElementProperties)">
            <summary>
            Obtains the default value for the specified property
            </summary>
            <param name="property">property</param>
            <returns>default value</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.DoVerb(System.Object,Nevron.UI.WinForm.Controls.CommandEventArgs)">
            <summary>
            Called by verb commands to execute the specified verb
            </summary>
            <param name="sender"></param>
            <param name="e">command event arguments for the verb command</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.StartTransaction(System.String)">
            <summary>
            Starts a new transaction
            </summary>
            <remarks>
            Safely calls the StartTransaction method of the history service (if connected to history service)
            </remarks>
            <param name="description">transaction description</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.Commit">
            <summary>
            Commits the current transaction
            </summary>
            <remarks>
            Safely calls the Commit method of the history service (if connected to history service)
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.Rollback">
            <summary>
            Rolls back the current transaction
            </summary>
            <remarks>
            Safely calls the Rollback method of the history service (if connected to history service)
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.RecordOperation(Nevron.Dom.NOperation)">
            <summary>
            Safely records a custom operation in the history service to which the element is connected
            </summary>
            <param name="operation">operation to record</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.RecordProperty(System.String)">
            <summary>
            Records the state of the specified property before it is changed
            </summary>
            <remarks>
            Safely calls the RecordPropertyChange method of the history service (if connected to history service)
            </remarks>
            <param name="propertyName">property name</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.StartProperty(System.String)">
            <summary>
            Records the state of the specified property before it is changed and pauses the history service. Pair it with the EndProperty method.
            </summary>
            <remarks>
            Safely calls the RecordPropertyChange method of the history service (if connected to history service) and pauses it.
            </remarks>
            <param name="propertyName">property name</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.EndProperty">
            <summary>
            Resumes the history service. Pair it with the StartProperty method.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.RecordState(System.String,System.String)">
            <summary>
            Records the entire state of the node
            </summary>
            <remarks>
            Safely calls the RecordElementStateChange method of the history service (if connected to a history service).
            When this operation is undone or redone from history, the history will call the 
            OnStateChangingFromHistory and OnStateChangedFromHistory methods with the specified hint.
            </remarks>
            <param name="description">history operation description</param>
            <param name="hint">state change hint</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.RecordState(System.String,System.String[],System.String)">
            <summary>
            Records the state of the specified node fields
            </summary>
            <remarks>
            Safely calls the RecordElementStateChange method of the history service (if connected to a history service).
            When this operation is undone or redone from history, the history will call the 
            OnStateChangingFromHistory and OnStateChangedFromHistory methods with the specified hint.
            </remarks>
            <param name="description">history operation description</param>
            <param name="fields">fields to record</param>
            /// <param name="hint">state change hint</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.RecordAction(System.String)">
            <summary>
            Records an action
            </summary>
            <remarks>
            When the operation is undone or redone history will call the OnHistoryAction method of the element
            </remarks>
            <param name="description">human readable operation description</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.PauseHistoryService">
            <summary>
            Safely pauses the history service
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElement.ResumeHistoryService">
            <summary>
            Safely resumes the history service
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NDiagramNode">
            <summary>
            The NDiagramNode abstract class serves as base class for all nodes, which reside in diagram scenes (i.e. documents and views)
            </summary>
            <remarks>
            Derived classes can benefit from the following NDiagramNode functionality:
            <list type="bullet">
            <item>
            	<term>INNode interface implementation</term>
            	<description>
            	NDiagramNode implements the INNode interface, which is a required interface for all INNode scene containers and composites.
            	</description>
            </item>
            <item>
            	<term>Z Order</term>
            	<description>
            	NDiagramNode impements the INZOrderable interface, so you can change the ZOrder of any NDiagramNode derivate.
            	</description>
            </item>
            <item>
            	<term>Events</term>
            	<description>
            	NDiagramNode tries to connect to an instance of the NDiagramEventSinkService. The event sink service to which the node 
            	is connected can be obtained from the EventSinkService property. It also provides derived 
            	classes with core implementation for firing NodePropertyChanging and NodePropertyChanged events.
            	</description>
            </item>
            <item>
            	<term>Smart paint</term>
            	<description>
            	NDiagramNode tries to connect to an instance of the NDiagramSmartPaintService. The smart paint service to which the node 
            	is connected can be obtained from the SmartPaintService property. 
            	</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.#ctor">
            <summary>
            Default node constructor
            </summary>
        </member>
        <member name="E:Nevron.Diagram.NDiagramNode.PropertyChanging">
            <summary>
            Property changing event
            </summary>
            <remarks>
            The node must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDiagramNode.PropertyChanged">
            <summary>
            Property changed event
            </summary>
            <remarks>
            The node must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDiagramNode.AttributePropertyChanging">
            <summary>
            Attribute property changing event
            </summary>
            <remarks>
            The node must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDiagramNode.AttributePropertyChanged">
            <summary>
            Attribute property changed event
            </summary>
            <remarks>
            The node must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDiagramNode.AttributeChanged">
            <summary>
            Attribute changed event
            </summary>
            <remarks>
            The node must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.Clone">
            <summary>
            Creates an identical copy of this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Updates the references stored by the object
            </summary>
            <remarks>
            The object can query the specified provider for references 
            </remarks>
            <param name="provider">provider from which to obtain references</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.CreateNonSerializedObjects">
            <summary>
            Creates any non serialized objects, which the holder posseses
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.GetReferenceProvider">
            <summary>
            Obtains the reference provider to which the object is currently attached
            </summary>
            <returns>reference provider</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.ProvideReference(System.Type)">
            <summary>
            Called to provide a reference to the object of the specified type
            </summary>
            <param name="referenceType">type of object for which to obtain a reference</param>
            <returns>reference to an object of the specified type, or null if such reference cannot be provided</returns>
        </member>
        <member name="P:Nevron.Diagram.NDiagramNode.RootNode">
            <summary>
            Obtains the root node in the scene tree hierachy
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDiagramNode.ParentNode">
            <summary>
            Obtains the node parent in the scene tree hierachy
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDiagramNode.ZOrder">
            <summary>
            Gets/sets the ZOrder of the node
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.BringForward">
            <summary>
            Brings the node one position forward in the Z order
            </summary>
            <returns>previous node Z order</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.BringToFront">
            <summary>
            Brings the node to front position in the Z order
            </summary>
            <returns>previous node Z order</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.SendBackward">
            <summary>
            Sends the node one position backward in the Z order
            </summary>
            <returns>previous node Z order</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.SendToBack">
            <summary>
            Sends the node to back position in the Z order
            </summary>
            <returns>previous node Z order</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.CanBringForward">
            <summary>
            Determines whether the node is not already at front position
            </summary>
            <returns>true if it is not at front position, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.CanSendBackward">
            <summary>
            Determines whether the node is not already at back position
            </summary>
            <returns>true if it is not at back position, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NDiagramNode.SmartPaintService">
            <summary>
            Obtains the smart paint service, to which the node is currently connected
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDiagramNode.EventSinkService">
            <summary>
            Obtains the event sink service, to which the node is currently connected
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.UpdateReferencesToServices(Nevron.Dom.INServiceProvider)">
            <summary>
            Updates the node references to services
            </summary>
            <param name="serviceProvider">service provider which to query for services (can be null)</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.OnPropertyChanging(System.String,System.Object)">
            <summary>
            General property changing handler, which fires the NodePropertyChanging event
            </summary>
            <param name="propertyName">name of the property which is chaning</param>
            <param name="newValue">new property value</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.OnPropertyChanged(System.String)">
            <summary>
            General property changed handler, which fires the NodePropertyChanged event
            </summary>
            <param name="propertyName">name of the property which has chaned</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.PauseEventSinkService">
            <summary>
            Safely pauses the event sink service to which this node is connected
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.ResumeEventSinkService">
            <summary>
            Safely resumes the event sink service to which this node is connected
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.PauseSmartPaintService">
            <summary>
            Safely pauses the smart paint service to which this node is connected
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.ResumeSmartPaintService">
            <summary>
            Safely resumes the smart paint service to which this node is connected
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.MeasureStringInWorld(System.String,Nevron.GraphicsCore.NTextStyle,Nevron.GraphicsCore.NSizeF@)">
            <summary>
            Measures the specified string in world units
            </summary>
            <param name="str">string to measure</param>
            <param name="style">text style of the string</param>
            <param name="size">result size in world measurement units</param>
            <returns>true if the measurement succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.MeasureStringInScene(System.String,Nevron.GraphicsCore.NTextStyle,Nevron.GraphicsCore.NSizeF@)">
            <summary>
            Measures the specified string in scene units
            </summary>
            <param name="str">string to measure</param>
            <param name="style">text style of the string</param>
            <param name="size">result size in scene measurement units</param>
            <returns>true if the measurement succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.MeasureStringInDevice(System.String,Nevron.GraphicsCore.NTextStyle,Nevron.GraphicsCore.NSizeF@)">
            <summary>
            Measures the specified string in device units
            </summary>
            <param name="str">string to measure</param>
            <param name="style">text style of the string</param>
            <param name="size">result size in device measurement units</param>
            <returns>true if the measurement succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.MeasureLengthInWorld(Nevron.GraphicsCore.NLength,System.Single@)">
            <summary>
            Measures the specified length in world units
            </summary>
            <param name="length">length to measure</param>
            <param name="worldLength">result lenght in world units</param>
            <returns>true if the measurement succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.MeasureLengthInDevice(Nevron.GraphicsCore.NLength,System.Single@)">
            <summary>
            Measures the specified length in device units (i.e. pixels)
            </summary>
            <param name="length">length to measure</param>
            <param name="deviceLength">result lenght in device units</param>
            <returns>true if the measurement succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.MeasureSizeInWorld(Nevron.GraphicsCore.NSizeL,Nevron.GraphicsCore.NSizeF@)">
            <summary>
            Measures the specified size in world units
            </summary>
            <param name="size">size to measure</param>
            <param name="worldSize">result size in world units</param>
            <returns>true if the measurement succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.MeasurePixelsSize(Nevron.GraphicsCore.NSizeF,Nevron.GraphicsCore.NSizeF@)">
            <summary>
            Measures the specified size in pixels in scene units
            </summary>
            <param name="sizeInPixels">size in pixels to measure</param>
            <param name="sizeInSceneMU">result size in scene units</param>
            <returns>true if the measurement succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.MeasurePixelsXInScene(System.Single,System.Single@)">
            <summary>
            Measures the specified pixels X size in scene units
            </summary>
            <param name="pixelsX">result X size in pixels</param>
            <param name="sceneX">result X size in scene units</param>
            <returns>true if the measurement succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNode.MeasurePixelsYInScene(System.Single,System.Single@)">
            <summary>
            Measures the specified pixels Y size in scene units
            </summary>
            <param name="pixelsY">Y size in pixels</param>
            <param name="sceneY">result Y size in scene units</param>
            <returns>true if the measurement succeeded, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.NInteractiveAppearance">
            <summary>
            Controls the appearance of DOM nodes when they are selected or highlighted
            </summary>
            <remarks>
            A reference to this class can be obtained from the InteractiveAppearance field of the NPaintContext class.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NInteractiveAppearance.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NInteractiveAppearance.Clone">
            <summary>
            Creates an identical copy of this instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.NInteractiveAppearance.SelectedAppearanceChangeMode">
            <summary>
            Controls the appearance change of the node when it is selected
            </summary>
            <remarks>
            By default set to StrokeStyle, which means that selected nodes only have a different stroke style
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NInteractiveAppearance.SelectedFillStyle">
            <summary>
            Controls the fill style of the node when it is selected
            </summary>
            <remarks>
            This fill style is used by the node only when it is selected and the 
            SelectedAppearanceChange property is set to FillStyle or Appearance
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NInteractiveAppearance.SelectedStrokeStyle">
            <summary>
            Controls the stroke style of the node when it is selected
            </summary>
            <remarks>
            This stroke style us used by the node only when it is selected and the 
            SelectedAppearanceChange property is set to StrokeStyle or Appearance
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NInteractiveAppearance.HighlightedAppearanceChangeMode">
            <summary>
            Controls the appearance change of the node when it is highlighted
            </summary>
            <remarks>
            By default set to Appearance, which means that highlighted nodes have different fill style and stroke style.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NInteractiveAppearance.HighlightedFillStyle">
            <summary>
            Controls the fill style of the node when it is highlighteded
            </summary>
            <remarks>
            This fill style is used by the node only when it is highlighteded and the 
            HighlightedAppearanceChange property is set to FillStyle or Appearance
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NInteractiveAppearance.HighlightedStrokeStyle">
            <summary>
            Controls the stroke style of the node when it is highlighteded
            </summary>
            <remarks>
            This stroke style is used by the node only when it is highlighteded and the 
            HighlightedAppearanceChange property is set to StrokeStyle or Appearance
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NInteractiveAppearance.ChangeSelectedText">
            <summary>
            Specifies whether the text fill style of text nodes should change when the text node is selected
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NInteractiveAppearance.SelectedTextFillStyle">
            <summary>
            Controls the fill style of texts when they are selected
            </summary>
            <remarks>
            This fill effect is used by text nodes only when it is selected and the 
            ChangeSelectedText is set to true
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NInteractiveAppearance.ChangeHighlightedText">
            <summary>
            Specifies whether the text fill style of text nodes should change when the text node is highlighted
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NInteractiveAppearance.HighlightedTextFillStyle">
            <summary>
            Controls the fill style of texts when they are highlighted
            </summary>
            <remarks>
            This fill effect is used by text nodes only when it is highlighted and the 
            ChangeHighlightedText is set to true
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NInteractiveAppearance.OverrideHighlightedAppearance(Nevron.GraphicsCore.NFillStyle@,Nevron.GraphicsCore.NStrokeStyle@)">
            <summary>
            Overrides the appearance of highlighted nodes
            </summary>
            <param name="fillStyle">fill style to override</param>
            <param name="strokeStyle">stroke style to override</param>
        </member>
        <member name="M:Nevron.Diagram.NInteractiveAppearance.OverrideSelectedAppearance(Nevron.GraphicsCore.NFillStyle@,Nevron.GraphicsCore.NStrokeStyle@)">
            <summary>
            Overrides the appearance of selected nodes
            </summary>
            <param name="fillStyle">fill style to override</param>
            <param name="strokeStyle">stroke style to override</param>
        </member>
        <member name="T:Nevron.Diagram.NLayer">
            <summary>
            The NLayer class serves as primary drawing document content container
            </summary>
            <remarks>
            NLayer enhances its base NStyleableElement with the following features:
            <list type="bullet">
            <item>
            	<term>Free composition</term>
            	<description>
            	NLayer implements the INDiagramElementComposite interface, 
                so you can freely insert and remove elements from a layer.
            	</description>
            </item>
            <item>
            	<term>Painting</term>
            	<description>
            	By implementing the INPaintable interface layers propagate the painting to their children.
            	Layers can also split the painting into Shadow and Appearance passes, so that the shadows of 
            	all nodes inside one layer are painted before their content.
            	</description>
            </item>
            <item>
            	<term>Hit tests</term>
            	<description>Implemented is the INHitTest interface to indicate that the NLayer 
            	descendants can be hittested.
            	</description>
            </item>	
            </list>
            Layers can be automatically shown/hidden based on the current zoom factor. 
            If the EnableShowInZoomRange property is set to true, the layer will only be shown if the current zoom factor is in the 
            range specified by the MinShowZoomFactor and MaxShowZoomFactor properties.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NLayer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLayer.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to update the references of all contained elements
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.NLayer.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <remarks>
            Overriden to propagate the call to the contained nodes
            </remarks>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.NLayer.Invalidate">
            <summary>
            Invalidates the layer
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayer.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLayer.GetEnumerator">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Diagram.NLayer.EnumInstantiatableTypes">
            <summary>
            Enumerates the known types, which can be instantiated and inserted to this composite at runtime
            </summary>
            <returns>types of the nodes which can be instanciated and inserted to this composite at runtime</returns>
        </member>
        <member name="M:Nevron.Diagram.NLayer.QueryNextName(Nevron.Diagram.INDiagramElement)">
            <summary>
            Queries for the next unique name, which will be assigned to the specified element if it is inserted to this composite
            </summary>
            <param name="element">element for which to obtain unique name</param>
            <returns>unique name</returns>
        </member>
        <member name="P:Nevron.Diagram.NLayer.AutoGenerateUniqueNames">
            <summary>
            Gets/sets the whether the composite must automatically generate unique names for newly inserted nodes.
            Set this property to false if a large number of nodes is about to be inserted in the composite
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLayer.GetChildByName(System.String)">
            <summary>
            Gets the first child element with the specified name
            </summary>
            <param name="name">child name</param>
            <returns>child diagram element</returns>
        </member>
        <member name="M:Nevron.Diagram.NLayer.GetChildByName(System.String,System.Int32)">
            <summary>
            Gets the first child element with the specified name
            </summary>
            <param name="name">child name</param>
            <param name="startIndex">index to start from</param>
            <returns>child diagram element</returns>
        </member>
        <member name="M:Nevron.Diagram.NLayer.GetChildFromId(System.Int32)">
            <summary>
            Obtains a child element by its id
            </summary>
            <param name="id">id of the node</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NLayer.GetChildFromUniqueId(System.Guid)">
            <summary>
            Obtains a child element by its unique id
            </summary>
            <param name="uid">unique id of the element</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NLayer.GetDescendantFromId(System.Int32,System.Int32)">
            <summary>
            Obtains a element node by its id
            </summary>
            <param name="id">id of the element</param>
            <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NLayer.GetDescendantFromUniqueId(System.Guid,System.Int32)">
            <summary>
            Obtains a child element by its unique id
            </summary>
            <param name="uid">unique id of the node</param>
            <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NLayer.IndexOfChild(Nevron.Dom.INNode)">
            <summary>
            Gets the index of the specified node in the container
            </summary>
            <param name="node">the node to locate</param>
            <returns>index of the node</returns>
        </member>
        <member name="M:Nevron.Diagram.NLayer.GetChildAt(System.Int32)">
            <summary>
            Gets the child node at the specified index
            </summary>
            <param name="index">index</param>
            <returns>node at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.NLayer.SetChildIndex(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Sets a new index of the specified child node
            </summary>
            <param name="node">node whose index to change</param>
            <param name="index">new index</param>
            <returns>previous node index</returns>
        </member>
        <member name="M:Nevron.Diagram.NLayer.IsChild(Nevron.Dom.INNode)">
            <summary>
            Determines whether the specified node is a child node for this container
            </summary>
            <param name="node">node to check</param>
            <returns>true if it is a child node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NLayer.ChildrenCount(Nevron.Filters.INFilter)">
            <summary>
            Returns the number of child nodes which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <returns>children count, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NLayer.Children(Nevron.Filters.INFilter)">
            <summary>
            Obtains the child nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NLayer.AccumulateChildren(Nevron.Filters.INFilter,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the children contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="list">list to which to append the child nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.NLayer.IsDescendant(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Queries whether the specified node is a descendant of this node
            </summary>
            <param name="node">node to look for</param>
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>true if the node is a descendant node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NLayer.DescendantsCount(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Returns the number of descendant nodes, which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>count of descendants, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NLayer.Descendants(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Obtains the descentant nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NLayer.AccumulateDescendants(Nevron.Filters.INFilter,System.Int32,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the descendants contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <param name="list">list to which to append the descendant nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.NLayer.GetEnumerator(Nevron.Filters.INFilter)">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Diagram.NLayer.AddChild(Nevron.Dom.INNode)">
            <summary>
            Adds a child node
            </summary>
            <param name="node">node to add</param>
        </member>
        <member name="M:Nevron.Diagram.NLayer.InsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Inserts a child node at the specified index
            </summary>
            <param name="index">index at which to insert the child node</param>
            <param name="node">node to insert</param>
        </member>
        <member name="M:Nevron.Diagram.NLayer.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Queries whether the specified node can be inserted at the specified index
            </summary>
            <param name="index">index at which the child node will be inserted</param>
            <param name="node">child node to insert</param>
            <returns>true if the node can be inserted at the specified index, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NLayer.RemoveChild(Nevron.Dom.INNode)">
            <summary>
            Removes the specified child node from the container children
            </summary>
            <param name="node">child node to remove</param>
        </member>
        <member name="M:Nevron.Diagram.NLayer.RemoveChildAt(System.Int32)">
            <summary>
            Removes the child node at the specified index
            </summary>
            <param name="index">index of child node to remove</param>
        </member>
        <member name="M:Nevron.Diagram.NLayer.RemoveAllChildren">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLayer.CanRemoveChild(Nevron.Dom.INNode)">
            <summary>
            Queries whether the specified child node can be removed
            </summary>
            <param name="node">child node to remove</param>
            <returns>true if the node can be removed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NLayer.Visible">
            <summary>
            Controls the visibility of the layer
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLayer.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the layer in the specified context.
            </summary>
            <remarks>
            This implementation will simply delegate the call to all INPaintable children.
            </remarks>
            <param name="context">Paint context to use.</param>
        </member>
        <member name="M:Nevron.Diagram.NLayer.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the layer can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the layer can be painted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NLayer.HitTest(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests by point all node descendants, which satisfy the specified filter
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>list of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.NLayer.HitTest(Nevron.GraphicsCore.NRectangleF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests by rectangle all node descendants, which satisfy the specified filter
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>array of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.NLayer.LastHit(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Returns the last hit descendant by point, which statisfies the specified filter
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>hit node, or null if there is not hit node</returns>
        </member>
        <member name="P:Nevron.Diagram.NLayer.IsActive">
            <summary>
            Determines whether the layer is active
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayer.EnableShowInZoomRange">
            <summary>
            Gets/sets whether the layer should only be shown if the current zoom factor is in the Min/Max Zoom factor range specified by the MinShowZoomFactor and MaxShowZoomFactor properties.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayer.MinShowZoomFactor">
            <summary>
            Gets/sets the minimal zoom factor after which the layer is shown. 
            If the EnableShowInZoomRange is set to true the layer is only shown,
            if the current zoom factor is larger than this setting. By default set to 0.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLayer.MaxShowZoomFactor">
            <summary>
            Gets/sets the maximum zoom factor below which the layer is shown. 
            If the EnableShowInZoomRange is set to true the layer is only shown,
            if the current zoom factor is smaller than this setting. By default set to Single.MaxValue.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLayer.CreateDefaultStyle">
            <summary>
            Called by the NStyleable element contructor to create the default style
            </summary>
            <remarks>
            Overriden to create a valid NStyle attribute 
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NLayer.Nodes">
            <summary>
            Used by XML serialization.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NMaster">
            <summary>
            The NMaster class represents an element inside a NLibraryDocument instance
            </summary>
            <remarks>
            The NMaster class is used to wrap reusable content 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NMaster.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NMaster.#ctor(Nevron.Diagram.INDiagramElement,Nevron.GraphicsCore.NMeasurementUnit,System.String,System.String)">
            <summary>
            Creates a new master, which hosts the specified element
            </summary>
            <param name="element">element of the master</param>
            <param name="measurementUnit">measurement unit of the masters</param>
            <param name="name">master name</param>
            <param name="prompt">master prompt</param>
        </member>
        <member name="M:Nevron.Diagram.NMaster.#ctor(Nevron.Diagram.INDiagramElement[],Nevron.GraphicsCore.NMeasurementUnit,System.String,System.String)">
            <summary>
            Creates a new master, which hosts the specified elements
            </summary>
            <param name="elements">elements of the master</param>
            <param name="measurementUnit">measurement unit of the masters</param>
            <param name="name">master name</param>
            <param name="prompt">master prompt</param>
        </member>
        <member name="M:Nevron.Diagram.NMaster.#ctor(Nevron.Diagram.INDiagramElement[],Nevron.Diagram.NConnectionCollection,Nevron.GraphicsCore.NMeasurementUnit,System.String,System.String)">
            <summary>
            Creates a new master, which hosts the specified elements
            </summary>
            <param name="elements">elements of the master</param>
            <param name="connections">connections between the elements of the master</param>
            <param name="measurementUnit">measurement unit of the masters</param>
            <param name="name">master name</param>
            <param name="prompt">master prompt</param>
        </member>
        <member name="M:Nevron.Diagram.NMaster.ReplaceForeignUniqueIds(System.Collections.Hashtable,System.Boolean)">
            <summary>
            Overriden to delegate the call to the contained connection container
            </summary>
            <param name="mapUIds"></param>
            <param name="makeNotFoundEmpty"></param>
        </member>
        <member name="P:Nevron.Diagram.NMaster.Abilities">
            <summary>
            Gets the element abilities 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NMaster.Attributes">
            <summary>
            Gets the list of child attributes of this container
            </summary>
            <remarks>
            Overriden to include the additional ConnectionContainer attribute
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NMaster.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <remarks>
            Overriden to give name to the additional ConnectionContainer attribute 
            </remarks>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Diagram.NMaster.Invalidate">
            <summary>
            Invalidates the node
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NMaster.ConnectionContainer">
            <summary>
            Gets/sets the connection container, which stores the connections between the document elements
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NMaster.MeasurementUnit">
            <summary>
            Gets/sets the measurement unit of the master
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NMaster.Prompt">
            <summary>
            Gets/sets the prompt string associated with the master
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NMaster.IconImage">
            <summary>
            Gets/sets the icon master image
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NMaster.ListImage">
            <summary>
            Gets/sets the list master image
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NMaster.ThumbnailImage">
            <summary>
            Gets/sets the list master image
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NMaster.CreateInstance(Nevron.Diagram.NDrawingDocument,Nevron.GraphicsCore.NPointF)">
            <summary>
            Creates an instance of this master in the active layer of the specified document 
            </summary>
            <param name="document">document in which to instance the master</param>
            <param name="center">center point of the instance in the drawing</param>
            <returns>an array of the elements, which were added to the document</returns>
        </member>
        <member name="M:Nevron.Diagram.NMaster.CreateInstance(Nevron.Diagram.NDrawingDocument,Nevron.Diagram.INDiagramElementComposite,Nevron.GraphicsCore.NPointF,System.Drawing.ContentAlignment)">
            <summary>
            Creates an instance of this master in the active layer of the specified document 
            </summary>
            <param name="document">document in which to instance the master</param>
            <param name="composite">composite in which to add the elements</param>
            <param name="pin">pin point for alignment of the instance in the drawing (in drawing coordinates)</param>
            <param name="alignment">alignment of the instance relative to the pin</param>
            <returns>an array of the elements, which were added to the document</returns>
        </member>
        <member name="M:Nevron.Diagram.NMaster.OnPropertyChanged(System.String)">
            <summary>
            Overriden to invalidate the master if the name property has changed
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="F:Nevron.Diagram.NMaster.DefaultListImageSize">
            <summary>
            Default size for auto generated list images, by default set to 16x16
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NMaster.DefaultIconImageSize">
            <summary>
            Default size for auto generated icon images, by default set to 32x32
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NMaster.DefaultThumbnailImageSize">
            <summary>
            Default size for auto generated thumbnail images, by default set to 64x64
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NMaster.MeasurementUnitXML">
            <summary>
            Used by XML serialization
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NMaster.IconImageXML">
            <summary>
            Implemented for XML seriealization compatiblity
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NMaster.ListImageXML">
            <summary>
            Implemented for XML seriealization compatiblity
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NMaster.ThumbnailImageXML">
            <summary>
            Implemented for XML seriealization compatiblity
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NPointElement">
            <summary>
            The NPointElement class represents a point, which is displayed directly to the device.
            </summary>
            <remarks>
            NPointElement is used to display a shape from the NPointShapeStencil. Since this shape is displayed directly to 
            the device only the point location is measured in scene coordinates. The point size is always measured in 
            device coordinates (e.g. pixels) and is not dependent on view scale or the drawing scale. 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPointElement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPointElement.#ctor(Nevron.GraphicsCore.NPointF)">
            <summary>
            Initializer constructor
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:Nevron.Diagram.NPointElement.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Initializer constructor
            </summary>
            <param name="location"></param>
            <param name="size"></param>
        </member>
        <member name="M:Nevron.Diagram.NPointElement.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF,Nevron.Diagram.PointShape,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="shape"></param>
            <param name="customShapeName"></param>
        </member>
        <member name="P:Nevron.Diagram.NPointElement.Abilities">
            <summary>
            Gets the element abilities.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPointElement.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <remarks>
            Overriden to convert the model point location
            </remarks>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.NPointElement.Invalidate">
            <summary>
            Invalidates the node
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPointElement.Visible">
            <summary>
            Controls the visibility of the point
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPointElement.Translate(System.Single,System.Single)">
            <summary>
            Translates the point with the specified offset
            </summary>
            <param name="dx">x offset</param>
            <param name="dy">y offset</param>
        </member>
        <member name="M:Nevron.Diagram.NPointElement.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the point in the specified context
            </summary>
            <remarks>
            This implementation calls the PaintPointAppearance method of the point shape stencil attached to the passed paint context
            </remarks>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.NPointElement.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the node can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the node can be painted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPointElement.HitTest(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the node by point with the specified context
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPointElement.HitTest(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the node by rectangle with the specified context
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NPointElement.Text">
            <summary>
            Gets/sets the optional text displayed by the point element
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPointElement.GetDeviceTextPaintInfo(System.String,Nevron.Diagram.NTextPaintInfo@)">
            <summary>
            Obtains text paint info in device coordinates
            </summary>
            <param name="text">text for which to obtain paint info</param> 
            <param name="info">result paint info</param>
            <returns>true if paint info was successfully obtained, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NPointElement.Bounds">
            <summary>
            Gets the bound box of this point element in scene coordinates.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPointElement.Location">
            <summary>
            Gets/sets the point location (in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPointElement.Size">
            <summary>
            Gets/sets the point size (in device coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPointElement.Shape">
            <summary>
            Gets/sets the point shape
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPointElement.CustomShapeName">
            <summary>
            Gets/sets the custom shape name (only valid if the Shape property is set to Custom)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPointElement.TextAlignment">
            <summary>
            Gets/sets the alignment of the text relative to the point element shape
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPointElement.TextOffset">
            <summary>
            Gets/sets the offset of the text from its original location (in pixels)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPointElement.GetBoundsForContext(Nevron.Diagram.NPaintContext)">
            <summary>
            Gets the bounds of the point element on the specified device context.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NPointElement.CreateDefaultStyle">
            <summary>
            Called by the NStyleable element contructor to create the default style
            </summary>
            <remarks>
            Overriden to create a valid NStyle attribute 
            </remarks>
        </member>
        <member name="T:Nevron.Diagram.NStyleableElement">
            <summary>
            The NStyleableElement class serves as base class for all elements, 
            which can compose styles and can have a local style
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NStyleableElement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NStyleableElement.Attributes">
            <summary>
            Gets the list of child attributes of this container
            </summary>
            <remarks>
            Overriden to append the style attribute
            </remarks>
            <returns>attributes of the node</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleableElement.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified local attribute
            </summary>
            <remarks>
            Overriden return the NDR.AttributeStyle for the style attribute
            </remarks>
            <param name="attribute">local attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleableElement.OnAttributePropertyChanging(System.String,System.String,System.Object)">
            <summary>
            Called by the attributes when an attribute property is changing
            </summary>
            <remarks>
            This implementation will fire a NodeAttributePropertyChanging event. 
            If this node is INPaintable and the Style attribute is changing it will invalidate the node.
            </remarks>
            <param name="attributeFullName">full attribute name</param>
            <param name="attributeProperty">attribute property</param>
            <param name="newValue">new property value</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleableElement.OnAttributePropertyChanged(System.String,System.String)">
            <summary>
            Called by attributes when an attribute property has changed
            </summary>
            <remarks>
            This implementation will fire a NodeAttributePropertyChanged event.
            If this node is INPaintable and the Style attribute has changed it will invalidate the node.
            </remarks>
            <param name="attributeFullName">full attribute name</param>
            <param name="attributeProperty">attribute property</param>
        </member>
        <member name="M:Nevron.Diagram.NStyleableElement.OnAttributeChanged(System.String)">
            <summary>
            Called by attributes when an attribute has changed
            </summary>
            <remarks>
            This implementation will fire a NodeAttributeChanged event.
            If this node is INPaintable and the Style attribute has changed it will invalidate the node.
            </remarks>
            <param name="attributeFullName">full attribute name</param>
        </member>
        <member name="M:Nevron.Diagram.NStyleableElement.ComposeStrokeStyle">
            <summary>
            Composes the stroke style
            </summary>
            <returns>reference to the composed stroke style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleableElement.ComposeShadowStyle">
            <summary>
            Composes the shadow style
            </summary>
            <returns>reference to the composed shadow style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleableElement.ComposeFillStyle">
            <summary>
            Composes the fill style
            </summary>
            <returns>reference to the composed fill style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleableElement.ComposeTextStyle">
            <summary>
            Composes the text style
            </summary>
            <returns>reference to the composed text style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleableElement.ComposeBridgeStyle">
            <summary>
            Composes the bridge style
            </summary>
            <returns>reference to the composed bridge style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleableElement.ComposeStartArrowheadStyle">
            <summary>
            Composes the start arrowhead style
            </summary>
            <returns>reference to the composed start arrowhead style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleableElement.ComposeEndArrowheadStyle">
            <summary>
            Composes the end arrowhead style
            </summary>
            <returns>reference to the composed end arrowhead style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleableElement.ComposeInteractivityStyle">
            <summary>
            Composes the interactivity style
            </summary>
            <returns>reference to the interactivity style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleableElement.ComposeAnimationsStyle">
            <summary>
            Composes the animations style
            </summary>
            <returns>reference to the animations style</returns>
        </member>
        <member name="P:Nevron.Diagram.NStyleableElement.Style">
            <summary>
            Gets/sets the local style of the element (can be null)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NStyleableElement.Invalidate">
            <summary>
            Invalidates the projection of the object on the drawing surface
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NStyleableElement.StyleSheetName">
            <summary>
            Gets/sets the name of the stylesheet, from which this element can inherit styles
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NStyleableElement.StyleSheet">
            <summary>
            Obtains a reference to the stylesheet, which this element uses
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NStyleableElement.ParentStyleComposer">
            <summary> nn
            Obtains a reference to the first parent node, which is a style composer
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NStyleableElement.CreateDefaultStyle">
            <summary>
            Called by the NStyleable element contructor to create the default style
            </summary>
            <remarks>
            This implementation does nothiting. It is up to derived classes to determine whether to create an instance of the style 
            attribute.
            </remarks>
        </member>
        <member name="T:Nevron.Diagram.NStyleComposerElement">
            <summary>
            The NStyleComposerElement class serves as base class for all elements, 
            which can compose styles
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NStyleComposerElement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NStyleComposerElement.ComposeStyle">
            <summary>
            Composes a new style, which contains cloning of the composes styles
            </summary>
            <returns>new composed style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleComposerElement.ComposeStrokeStyle">
            <summary>
            Composes the stroke style
            </summary>
            <returns>reference to the composed stroke style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleComposerElement.ComposeShadowStyle">
            <summary>
            Composes the shadow style
            </summary>
            <returns>reference to the composed shadow style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleComposerElement.ComposeFillStyle">
            <summary>
            Composes the fill style
            </summary>
            <returns>reference to the composed fill style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleComposerElement.ComposeTextStyle">
            <summary>
            Composes the text style
            </summary>
            <returns>reference to the composed text style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleComposerElement.ComposeBridgeStyle">
            <summary>
            Composes the bridge style
            </summary>
            <returns>reference to the composed bridge style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleComposerElement.ComposeStartArrowheadStyle">
            <summary>
            Composes the start arrowhead style
            </summary>
            <returns>reference to the composed start arrowhead style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleComposerElement.ComposeEndArrowheadStyle">
            <summary>
            Composes the end arrowhead style
            </summary>
            <returns>reference to the composed end arrowhead style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleComposerElement.ComposeInteractivityStyle">
            <summary>
            Composes the interactivity style
            </summary>
            <returns>reference to the interactivity style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleComposerElement.ComposeAnimationsStyle">
            <summary>
            Composes the animations style
            </summary>
            <returns>reference to the animations style</returns>
        </member>
        <member name="T:Nevron.Diagram.NStyleSheet">
            <summary>
            The NStyleSheet class represents a named container for a single style
            </summary>
            <remarks>
            Stylesheets are always contained in an instance of the NStyleSheetCollection class. 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NStyleSheet.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NStyleSheet.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name">name of the stylesheet</param>
        </member>
        <member name="M:Nevron.Diagram.NStyleSheet.#ctor(System.String,Nevron.Diagram.NStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name">name of the stylesheet</param>
            <param name="style">style hosted by the stylesheet</param>
        </member>
        <member name="M:Nevron.Diagram.NStyleSheet.#ctor(System.String,Nevron.Diagram.NStyle,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name">name of the stylesheet</param>
            <param name="style">style hosted by the stylesheet</param>
            <param name="baseStyleSheetName">name of the stylesheet on which this stylesheet is based</param>
        </member>
        <member name="M:Nevron.Diagram.NStyleSheet.#ctor(System.String,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name">name of the stylesheet</param>
            <param name="baseStyleSheetName">name of the stylesheet on which this stylesheet is based</param>
        </member>
        <member name="P:Nevron.Diagram.NStyleSheet.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NStyleSheet.Attributes">
            <summary>
            Gets the list of child attributes of this container
            </summary>
            <returns>attributes of the node</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleSheet.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified local attribute
            </summary>
            <param name="attribute">local attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleSheet.OnAttributePropertyChanging(System.String,System.String,System.Object)">
            <summary>
            Called by the attributes when an attribute property is changing
            </summary>
            <param name="attributeFullName">full attribute name</param>
            <param name="attributeProperty">attribute property</param>
            <param name="newValue">new property value</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleSheet.OnAttributePropertyChanged(System.String,System.String)">
            <summary>
            Called by attributes when an attribute property has changed
            </summary>
            <param name="attributeFullName">full attribute name</param>
            <param name="attributeProperty">attribute property</param>
        </member>
        <member name="M:Nevron.Diagram.NStyleSheet.OnAttributeChanged(System.String)">
            <summary>
            Called by attributes when an attribute has changed
            </summary>
            <param name="attributeFullName">full attribute name</param>
        </member>
        <member name="M:Nevron.Diagram.NStyleSheet.ComposeStrokeStyle">
            <summary>
            Composes the stroke style
            </summary>
            <returns>reference to the composed stroke style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleSheet.ComposeShadowStyle">
            <summary>
            Composes the shadow style
            </summary>
            <returns>reference to the composed shadow style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleSheet.ComposeFillStyle">
            <summary>
            Composes the fill style
            </summary>
            <returns>reference to the composed fill style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleSheet.ComposeTextStyle">
            <summary>
            Composes the text style
            </summary>
            <returns>reference to the composed text style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleSheet.ComposeBridgeStyle">
            <summary>
            Composes the bridge style
            </summary>
            <returns>reference to the composed bridge style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleSheet.ComposeStartArrowheadStyle">
            <summary>
            Composes the start arrowhead style
            </summary>
            <returns>reference to the composed start arrowhead style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleSheet.ComposeEndArrowheadStyle">
            <summary>
            Composes the end arrowhead style
            </summary>
            <returns>reference to the composed end arrowhead style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleSheet.ComposeInteractivityStyle">
            <summary>
            Composes the interactivity style
            </summary>
            <returns>reference to the interactivity style</returns>
        </member>
        <member name="M:Nevron.Diagram.NStyleSheet.ComposeAnimationsStyle">
            <summary>
            Composes the animations style
            </summary>
            <returns>reference to the animations style</returns>
        </member>
        <member name="P:Nevron.Diagram.NStyleSheet.Style">
            <summary>
            Gets/sets the local style of the element (cannot be null)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NStyleSheet.Invalidate">
            <summary>
            Invalidates the drawing document to which the style sheet belongs, 
            since multiple elements can inherit styles from a single stylesheet.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NStyleSheet.BaseStyleSheetName">
            <summary>
            Gets/sets the name of the stylesheet on which this stylesheet is based
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NStyleSheet.BaseStyleSheet">
            <summary>
            Obtains a reference to the stylesheet, on which this stylesheet is based
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NTransformableElement">
            <summary>
            The NTransformableElement abstract class respresents a styleable element, 
            which contains a local transformation
            </summary>
            <remarks>
            NTransformableElement implements the INTransformable interface and serves as base class for all DOM elements, which require to be transformed. 
            <para>
            For speed optimizations all transformable derivates maintain cashed scene information (scene cashe). 
            Since the scene cashe can change, if the transformation of an ancestor has changed, 
            the NTransformableElement also implements the INAncestorTransformObserver interface and invalidates 
            the scene cashe, when an ancestor transform changes or the local element transform has changed.
            </para>
            Derived classes can also invalidate the scene cashe, whenever they feel that it is not up to date.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NTransformableElement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="E:Nevron.Diagram.NTransformableElement.TransformChanging">
            <summary>
            Transform changing event
            </summary>
            <remarks>
            The node must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NTransformableElement.TransformChanged">
            <summary>
            Transform changed event
            </summary>
            <remarks>
            The node must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NTransformableElement.CreateNonSerializedObjects">
            <summary>
            Creates any non serialized objects maintained by the object
            </summary>
            <remarks>
            Overriden to invalidate the scene cashe
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NTransformableElement.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <remarks>
            Overriden to convert the transform offset 
            </remarks>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.NTransformableElement.Translate(System.Single,System.Single)">
            <summary>
            Translates the node with the specified offset
            </summary>
            <param name="dx">x offset</param>
            <param name="dy">y offset</param>
        </member>
        <member name="P:Nevron.Diagram.NTransformableElement.Transform">
            <summary>
            Gets/sets transformation, which transforms the node to the parent coordinate system
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTransformableElement.SceneTransform">
            <summary>
            Gets the transformation, which transforms the node to the scene coordinate system
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTransformableElement.WorldTransform">
            <summary>
            Gets the transformation, which transforms the node to the world coordinate system
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTransformableElement.ParentSceneTransform">
            <summary>
            Gets the transformation, which transforms the parent transformable node to the scene coordinate system
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTransformableElement.OnAncestorTransformChanging(Nevron.Dom.INNode,Nevron.GraphicsCore.NMatrix2DF)">
            <summary>
            Called when the transformaiton of the specified ancestor is changing
            </summary>
            <remarks>
            This implementation just returns true
            </remarks>
            <param name="ancestor">ancestor whose transformation is changing</param>
            <param name="newTransform">new ancestor transformation</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NTransformableElement.OnAncestorTransformChanged(Nevron.Dom.INNode)">
            <summary>
            Called when the transformaiton of the specified ancestor has changed
            </summary>
            <remarks>
            This implementation will invalidate the scene cashe
            </remarks>
            <param name="ancestor">ancestor whose transformation has changed</param>
        </member>
        <member name="M:Nevron.Diagram.NTransformableElement.Translate(Nevron.Diagram.CoordinateSystem,System.Single,System.Single)">
            <summary>
            Translates the element in the specifed coordinate system
            </summary>
            <param name="system">coordinate system</param>
            <param name="dx">dx in the coordinate system</param>
            <param name="dy">dy in the coordinate system</param>
        </member>
        <member name="M:Nevron.Diagram.NTransformableElement.Scale(Nevron.Diagram.CoordinateSystem,System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
            <summary>
            Scales the element around the specified pin in the specifed coordinate system
            </summary>
            <remarks>
            The Model coordinate system is not acceptable for this method (fires an exception)
            The pin must be provided in the same coordinate system in which the rotation takes place
            </remarks>
            <param name="system"></param>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Diagram.NTransformableElement.Rotate(Nevron.Diagram.CoordinateSystem,System.Single,Nevron.GraphicsCore.NPointF)">
            <summary>
            Rotates the element around the specified pin in the specifed coordinate system
            </summary>
            <param name="system">coordinate system</param>
            <param name="angle">angle in degrees</param>
            <param name="pin">pin in the coordinate system</param>
        </member>
        <member name="M:Nevron.Diagram.NTransformableElement.FlipX(Nevron.Diagram.CoordinateSystem,Nevron.GraphicsCore.NPointF)">
            <summary>
            Flips the element horizontally around the specified pin in the specifed coordinate system
            </summary>
            <remarks>
            The Model coordinate system is not acceptable for this method (fires an exception)
            The pin must be provided in the same coordinate system in which the rotation takes place
            </remarks>
            <param name="system"></param>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Diagram.NTransformableElement.FlipY(Nevron.Diagram.CoordinateSystem,Nevron.GraphicsCore.NPointF)">
            <summary>
            Flips the element vertically around the specified pin in the specifed coordinate system
            </summary>
            <remarks>
            The Model coordinate system is not acceptable for this method (fires an exception)
            The pin must be provided in the same coordinate system in which the rotation takes place
            </remarks>
            <param name="system"></param>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Diagram.NTransformableElement.FastTranslate(System.Single,System.Single)">
            <summary>
            Fastly translates the element
            </summary>
            <remarks>
            This method will not attempt to record history for the transform operation and will not call the 
            OnTransformChanging method. The translation is performed in the scene coordinate system.
            </remarks>
            <param name="dx">x offset</param>
            <param name="dy">y offset</param>
        </member>
        <member name="M:Nevron.Diagram.NTransformableElement.FastTransform(Nevron.GraphicsCore.NMatrix2DF)">
            <summary>
            Fastly transforms the element
            </summary>
            <remarks>
            This method will not attempt to record history for the transform operation and will not call the 
            OnTransformChanging method
            </remarks>
            <param name="transform">new node transform</param>
        </member>
        <member name="M:Nevron.Diagram.NTransformableElement.OnTransformChanging(Nevron.GraphicsCore.NMatrix2DF)">
            <summary>
            Called when the transformation of the element is about to change
            </summary>
            <remarks>
            If this is a container element, the implementation will first check whether the change is accepted by all ancestor transform observers.
            It will then fire a NodeTransformChanging event if the element is connected to an event sink service.
            </remarks>
            <returns>true if change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NTransformableElement.OnTransformChanged">
            <summary>
            Called when the transformation of the element has changed
            </summary>
            <remarks>
            This implementation will first invalidate the scene cashe. 
            If this is a container element, the implementation will then notify all ancestor transform observers about the change.
            Finally the implementation will fire a NodeTransformChanged event if the element is connected to an event sink service.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NTransformableElement.InvalidateSceneCashe">
            <summary>
            Invalidates the scene cashe
            </summary>
            <remarks>
            This implementation will invalidate the cashed scene transform
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NTransformableElement.TransformXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NErmPrimitive">
            <summary>
            Represents a primitive model, which is used to present the structure of a data table.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NErmPrimitive.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NErmPrimitive.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x">model bounds x coordinate</param>
            <param name="y">model bounds Y coordinate</param>
            <param name="width">model bounds width</param>
            <param name="height">model bounds height</param>
        </member>
        <member name="M:Nevron.Diagram.NErmPrimitive.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Overriden to paint the text in the specified context
            </summary>
            <param name="context">paint context to use</param>
        </member>
        <member name="P:Nevron.Diagram.NErmPrimitive.Text">
            <summary>
            Gets/sets the node text
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NErmPrimitive.GetDefaultPropertyValue(Nevron.Diagram.DiagramElementProperties)">
            <summary>
            Obtains the default value for the specified property
            </summary>
            <param name="property">property</param>
            <returns>default value</returns>
        </member>
        <member name="P:Nevron.Diagram.NErmPrimitive.Columns">
            <summary>
            Gets the collection of columns.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NErmPrimitive.RecachePrimaryColumns">
            <summary>
            Divides the columns into primary and ordinary.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NErmPrimitive.SizeToContent">
            <summary>
            Resizes the primitive to the size of its contents.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NErmColumn">
            <summary>
            Describes an ERM column.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NErmColumn.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NErmColumn.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
            <param name="primaryKey"></param>
            <param name="required"></param>
        </member>
        <member name="P:Nevron.Diagram.NErmColumn.Name">
            <summary>
            User defined name of the element
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NErmColumn.PrimaryKey">
            <summary>
            Determines whether the column contains a primary key of the table.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NErmColumn.ForeignKey">
            <summary>
            Determines whether the column contains a foreign table key.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NErmColumn.Required">
            <summary>
            Determines whether this column is required to always have values.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NBoxPrimitive">
            <summary>
            The base of all box shapes.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBoxPrimitive.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBoxPrimitive.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x">model bounds x coordinate</param>
            <param name="y">model bounds Y coordinate</param>
            <param name="width">model bounds width</param>
            <param name="height">model bounds height</param>
        </member>
        <member name="P:Nevron.Diagram.NBoxPrimitive.Abilities">
            <summary>
            Gets the element abilities 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBoxPrimitive.Invalidate">
            <summary>
            Invalidates the node
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBoxPrimitive.HitTest(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the node by point with the specified context
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NBoxPrimitive.HitTest(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the node by rectangle with the specified context
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NBoxPrimitive.DirtyInflate">
            <summary>
            Obtains the dirty inflate of the node in world coordinates
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NBoxPrimitive.ModelRectangle">
            <summary>
            Controls the box model bounds
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NBoxPrimitive.Mode">
            <summary>
            Specifies the mode in which the text is displayed
            </summary>
            <remarks>
            By default set to Wrap
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NBoxPrimitive.ScaleModel(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
            <summary>
            Overriden to scale the model definition of the box
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Diagram.NBoxPrimitive.DefineModel(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Defines the model bounds of the text
            </summary>
            <param name="rect">model bounds rect</param>
            <returns>true if model definition succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.NBoxPrimitive.ComputeNewBounds(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Computes new scene bounds based on expected model bounds change
            </summary>
            <param name="modelBounds">new model bounds</param>
            <returns>new scene bounds</returns>
        </member>
        <member name="M:Nevron.Diagram.NBoxPrimitive.MeasureDirtyInflate(Nevron.GraphicsCore.NLengthConverter,Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NShadowStyle)">
            <summary>
            Measures the dirty inflate of the text if it is going to be displayed with the specified text style
            </summary>
            <param name="lengthConverter"></param>
            <param name="strokeStyle"></param>
            <param name="fillStyle"></param>
            <param name="shadowStyle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NBoxPrimitive.GetWorldTextPaintInfo(System.String,Nevron.GraphicsCore.NRectangleF,System.Boolean,Nevron.Diagram.NTextPaintInfo@)">
            <summary>
            Obtains text paint info in world coordinates
            </summary>
            <param name="text">text for which to obtain paint info</param> 
            <param name="textBounds">the bound box of the text</param>
            <param name="info">result paint info</param>
            <returns>true if paint info was successfully obtained, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.NTableCell">
            <summary>
            Represents a single cell from a table shape.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableCell.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableCell.Permissions">
            <summary>
            Gets the allowed element abilities (e.g its permissions)
            </summary>
            <remarks>
            Overriden to drop the InplaceEdit permission if the shape 
            InplaceEdit permission is also dropped.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.Invalidate">
            <summary>
            Invalidates the projection of the object on the drawing surface
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.HitTest(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the model by point with the specified context
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.HitTest(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the model by rectangle with the specified context
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.CreateInplaceEditControl">
            <summary>
            Creates an inplace edit control. This implementation creates an inplace edit text box.
            </summary>
            <returns>control which must implement the INInplaceEditControl interface</returns>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.GetWorldTextPaintInfo(System.String,Nevron.Diagram.NTextPaintInfo@)">
            <summary>
            Obtains text paint info in world coordinates
            </summary>
            <param name="text">text for which to obtain paint info</param> 
            <param name="info">result paint info</param>
            <returns>true if paint info was successfully obtained, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.OnMouseEnter(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the mouse entered the model
            </summary>
            <remarks>
            This implementation will fire the NodeMouseEnter event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.OnMouseMove(Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Called when the mouse moves in the model
            </summary>
            <remarks>
            The implementation will first request cursor and tooltip using the composed model interactivity style.
            It will then fire the NodeMouseMove event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.OnMouseHover(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the mouse hovers in the model
            </summary>
            <remarks>
            The implementation will fire the NodeMouseHover event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.OnMouseDown(Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Called when a mouse button is down in the model
            </summary>
            <remarks>
            The implementation will fire the NodeMouseDown event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.OnMouseUp(Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Called when a mouse button is up in the model
            </summary>
            <remarks>
            The implementation will fire the NodeMouseUp event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.OnMouseWheel(Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Called when a mouse wheel was moved in the model
            </summary>
            <remarks>
            The implementation will fire the NodeMouseWheel event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.OnMouseLeave(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the mouse leaves the model
            </summary>
            <remarks>
            The implementation will fire the NodeMouseLeave event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.OnClick(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the user clicked on the model
            </summary>
            <remarks>
            The implementation will fire the NodeClick event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.OnDoubleClick(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the user double clicked on the model
            </summary>
            <remarks>
            The implementation will fire the NodeDoubleClick event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.OnKeyDown(Nevron.Diagram.NKeyEventArgs)">
            <summary>
            Handles the key down event
            </summary>
            <remarks>
            This method is called by views when this model is the focused model. 
            The implementation will fire the NodeKeyDown event for this model. 
            If it was not handled it will bubble the event to the previous INKeyboardEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.OnKeyPress(Nevron.Diagram.NKeyPressEventArgs)">
            <summary>
            Handles the key press event
            </summary>
            <remarks>
            This method is called by views when this model is the focused model. 
            The implementation will fire the NodeKeyPress event for this model. 
            If it was not handled it will bubble the event to the previous INKeyboardEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.OnKeyUp(Nevron.Diagram.NKeyEventArgs)">
            <summary>
            Handles the key up event
            </summary>
            <remarks>
            This method is called by views when this model is the focused model. 
            The implementation will fire the NodeKeyUp event for this model. 
            If it was not handled it will bubble the event to the previous INKeyboardEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is an input key
            </summary>
            <remarks>
            This method is called by views when this model is the focused model. 
            The implementation will first invoke the QueryIsInputKey method of the document for this model. 
            If the key is not an input key for this model it will call the QueryIsInputKey method again passing as argument the document itself. 
            </remarks>
            <param name="keyData">key</param>
            <returns>true if the key is an input key, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.IsInputChar(System.Char)">
            <summary>
            Determines whether the specified character is an input charecter
            </summary>
            <remarks>
            This method is called by views when this model is the focused model. 
            The implementation will first invoke the QueryIsInputChar method of the document for this model. 
            If the key is not an input key for this model it will call the QueryIsInputChar method again passing as argument the document itself. 
            </remarks>
            <param name="charCode">character</param>
            <returns>true if the character is an input character, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.OnDragEnter(Nevron.Diagram.NDragEventArgs)">
            <summary>
            Called when a dragged object entered the model
            </summary>
            <remarks>
            The implementation will fire the NodeDragEnter event for this model.
            If it was not handled it will bubble the event to the previous INDragDropEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.OnDragDrop(Nevron.Diagram.NDragEventArgs)">
            <summary>
            Called when a dragged object is dropped in the model
            </summary>
            <remarks>
            The implementation will fire the NodeDragDrop event for this model.
            If it was not handled it will bubble the event to the previous INDragDropEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.OnDragLeave(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when a dragged object leaves the model
            </summary>
            <remarks>
            The implementation will fire the NodeDragLeave event for this model.
            If it was not handled it will bubble the event to the previous INDragDropEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.OnDragOver(Nevron.Diagram.NDragEventArgs)">
            <summary>
            Called when a dragged object is moved over the model
            </summary>
            <remarks>
            The implementation will fire the NodeDragOver event for this model.
            If it was not handled it will bubble the event to the previous INDragDropEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="P:Nevron.Diagram.NTableCell.RowSpan">
            <summary>
            The number of rows that this cell occupies.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableCell.ColumnSpan">
            <summary>
            The number of columns that this cell occupies.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableCell.Text">
            <summary>
            The text of the cell.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableCell.Bitmap">
            <summary>
            The image in the cell.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableCell.StretchBitmap">
            <summary>
            If set to true the image will be stretched to fill the cell, otherwise it will be centered in the cell. By default set to false.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableCell.Borders">
            <summary>
            Determines the borders this cell has.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableCell.Margins">
            <summary>
            Determines the margins of the cell.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableCell.Padding">
            <summary>
            Determines the padding of the cell content.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableCell.AllowDownwardOrientation">
            <summary>
            Specifies whether downward orientation of text is allowed. 
            If set to false the label will automatically flip the text orientation to keep its run vector pointing from left to right.
            </summary>
            <remarks>
            By default set to false.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NTableCell.Visible">
            <summary>
            Determines whether the cell is visible or not.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableCell.Bounds">
            <summary>
            The bounds of the cell.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableCell.CellBounds">
            <summary>
            Returns the bounds of cell taking into account its margins.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableCell.ContentBounds">
            <summary>
            Returns the bounds of the content of the cell.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.IsAggregateModelCollapsed">
            <summary>
            Determines whether the aggregate model in which this model can reside is collapsed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NTableCell.MustHitTest(Nevron.Diagram.NHitTestContext)">
            <summary>
            Determines whether the model must be hit tested. 
            A model does not need to be hit tested, if it is not visible or is collapsed.
            </summary>
            <param name="context">hit test context</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NTableColumn">
            <summary>
            Represents a column in a table shape.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTableColumn.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableColumn.SizeMode">
            <summary>
            Determines the way the column is sized.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableColumn.Width">
            <summary>
            Determines the width of the column. Valid only when SizeMode is set to Fixed.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NTablePrimitive">
            <summary>
            Represents a box primitive which is embedded in a table shape.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTablePrimitive.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTablePrimitive.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="x">model bounds x coordinate</param>
            <param name="y">model bounds Y coordinate</param>
            <param name="width">model bounds width</param>
            <param name="height">model bounds height</param>
        </member>
        <member name="M:Nevron.Diagram.NTablePrimitive.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Overriden to paint the text in the specified context
            </summary>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.NTablePrimitive.HitTest(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the model by point with the specified context
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NTablePrimitive.HitTest(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the model by rectangle with the specified context
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NTablePrimitive.GetDefaultPropertyValue(Nevron.Diagram.DiagramElementProperties)">
            <summary>
            Obtains the default value for the specified property
            </summary>
            <param name="property">property</param>
            <returns>default value</returns>
        </member>
        <member name="T:Nevron.Diagram.NPrimitiveModel">
            <summary>
            The NPrimitiveModel class serves as base for all primitive models
            </summary>
            <remarks>
            Primitive models are the primary building blocks of shapes
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPrimitiveModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPrimitiveModel.Is1DPrimitive">
            <summary>
            Determines whether this primitive is a 1D primitive (e.g. has local start and end points)
            </summary>
            <remarks>
            This implementation returns false
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPrimitiveModel.CreateShape">
            <summary>
            Creates a shape, which wraps a cloning of the primitive model
            </summary>
            <returns>shape instance on success, otherwise null</returns>
        </member>
        <member name="T:Nevron.Diagram.NTextPrimitive">
            <summary>
            The NTextPrimitive class represents a primitive model, which is used to display wrapped or stretched text
            </summary>
            <remarks>
            The NTextPrimitive extends the base NPrimitiveModel with the following features:
            <list type="bullet">
            <item>
            	<term>Text</term>
            	<description>Texts implement the INText interface, which is mandatory for all nodes which can display text</description>
            </item>
            <item>
            	<term>Painting</term>
            	<description>Texts can be painted. That is why they implement the INPaintable interface</description>
            </item>	
            <item>
            	<term>Hit tests</term>
            	<description>Texts can be the result of hit tests, hence they implement the INHitTestable interface.</description>
            </item>	
            <item>
            	<term>Inplace editing</term>
            	<description>Texts can be inplace edited, hence they implement the INInplaceEditable interface.</description>
            </item>	
            </list>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NTextPrimitive.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTextPrimitive.#ctor(System.String,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text">text</param>
            <param name="location">model bounds position</param>
            <param name="size">model bounds size</param>
        </member>
        <member name="M:Nevron.Diagram.NTextPrimitive.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text">text</param>
            <param name="x">model bounds x coordinate</param>
            <param name="y">model bounds Y coordinate</param>
            <param name="width">model bounds width</param>
            <param name="height">model bounds height</param>
        </member>
        <member name="M:Nevron.Diagram.NTextPrimitive.#ctor(System.String,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text">text</param>
            <param name="rect">model bounds rect</param>
        </member>
        <member name="M:Nevron.Diagram.NTextPrimitive.#ctor(System.String,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text">text</param>
            <param name="leftTop">model bounds left top coordinate</param>
            <param name="rightBottom">model bounds right bottom coordinate</param>
        </member>
        <member name="P:Nevron.Diagram.NTextPrimitive.Abilities">
            <summary>
            Gets the element abilities 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTextPrimitive.Permissions">
            <summary>
            Gets the allowed element abilities (e.g its permissions)
            </summary>
            <remarks>
            Overriden to drop the InplaceEdit permission if the InplaceEdit permission of aggregate 
            in which the primitive may reside is also dropped.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NTextPrimitive.Invalidate">
            <summary>
            Invalidates the node
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTextPrimitive.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Overriden to paint the text in the specified context
            </summary>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.NTextPrimitive.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the node can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the node can be painted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NTextPrimitive.HitTest(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the node by point with the specified context
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NTextPrimitive.HitTest(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the node by rectangle with the specified context
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NTextPrimitive.Text">
            <summary>
            Gets/sets the node text
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTextPrimitive.GetWorldTextPaintInfo(System.String,Nevron.Diagram.NTextPaintInfo@)">
            <summary>
            Obtains text paint info in world coordinates
            </summary>
            <param name="text">text for which to obtain paint info</param> 
            <param name="info">result paint info</param>
            <returns>true if paint info was successfully obtained, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NTextPrimitive.CreateInplaceEditControl">
            <summary>
            Creates an inplace edit control. This implementation creates an inplace edit text box.
            </summary>
            <returns>control which must implement the INInplaceEditControl interface</returns>
        </member>
        <member name="P:Nevron.Diagram.NTextPrimitive.DirtyInflate">
            <summary>
            Obtains the dirty inflate of the node in world coordinates
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTextPrimitive.ScaleModel(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
            <summary>
            Overriden to scale the model definition of the text
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Diagram.NTextPrimitive.CreateShape">
            <summary>
            Creates a shape, which wraps a cloning of the primitive model
            </summary>
            <returns>shape instance on success, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NTextPrimitive.DefineModel(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Defines the model bounds of the text
            </summary>
            <param name="location">model bounds location</param>
            <param name="size">model bounds size</param>
            <returns>true if model definition succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.NTextPrimitive.DefineModel(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Defines the model bounds of the text
            </summary>
            <param name="x">model bounds x coordinate</param>
            <param name="y">model bounds y coordinate</param>
            <param name="width">model bounds width</param>
            <param name="height">model bounds height</param>
            <returns>true if model definition succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.NTextPrimitive.DefineModel(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Defines the model bounds of the text
            </summary>
            <param name="rect">model bounds rect</param>
            <returns>true if model definition succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.NTextPrimitive.DefineModel(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Defines the model bounds of the text
            </summary>
            <param name="leftTop">model bounds left top corner</param>
            <param name="rightBottom">model bounds right bottom corner</param>
            <returns>true if model definition succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.NTextPrimitive.GetDesiredSize(Nevron.GraphicsCore.NSizeF@)">
            <summary>
            Tries to obtain the desired size of the text in scene coordinates
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NTextPrimitive.OnBoundsChanging(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Called when the bounds of the node are about to change
            </summary>
            <remarks>
            This implementation performs the following actions:
            <para>
            1. Return false if the new bounds have zero width or height.
            </para>
            <para>
            2. Calls the base implementation.
            </para>
            </remarks>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NTextPrimitive.InvalidateSceneCashe">
            <summary>
            Overriden to invalidate the cashed scene bounds
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTextPrimitive.ComputeNewBounds(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Computes new scene bounds based on expected model bounds change
            </summary>
            <param name="modelBounds">new model bounds</param>
            <returns>new scene bounds</returns>
        </member>
        <member name="M:Nevron.Diagram.NTextPrimitive.MeasureTextDirtyInflate(Nevron.GraphicsCore.NLengthConverter,Nevron.GraphicsCore.NTextStyle)">
            <summary>
            Measures the dirty inflate of the text if it is going to be displayed with the specified text style
            </summary>
            <param name="lengthConverter"></param>
            <param name="textStyle"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.NTextPrimitive.ModelRectangle">
            <summary>
            Controls the text model bounds
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTextPrimitive.Mode">
            <summary>
            Specifies the mode in which the text is displayed
            </summary>
            <remarks>
            By default set to Wrap
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NTextPrimitive.AllowDownwardOrientation">
            <summary>
            Specifies whether downward orientation of text is allowed. 
            If set to false the text will automatically flip its orientation to keep its run vector pointing from left to right.
            </summary>
            <remarks>
            By default set to false.
            </remarks>
        </member>
        <member name="T:Nevron.Diagram.NArrowPath">
            <summary>
            The NArrowPath class represents a simple line path connecting two points
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowPath.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowPath.#ctor(Nevron.Diagram.ArrowType)">
            <summary>
            Creates a new arrow with the specified type
            </summary>
            <param name="arrowType">arrow type</param>
        </member>
        <member name="M:Nevron.Diagram.NArrowPath.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Creates a new single arrow with the specified start and end points
            </summary>
            <param name="start">start point</param>
            <param name="end">end point</param>
        </member>
        <member name="M:Nevron.Diagram.NArrowPath.#ctor(Nevron.Diagram.ArrowType,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Creates a new arrow with the specified start and end points
            </summary>
            <param name="arrowType">arrow type</param>
            <param name="start">start point</param>
            <param name="end">end point</param>
        </member>
        <member name="M:Nevron.Diagram.NArrowPath.#ctor(Nevron.Diagram.ArrowType,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new arrow with the specified parameters
            </summary>
            <param name="arrowType">arrow type</param>
            <param name="start">start point</param>
            <param name="end">end point</param>
            <param name="arrowWidth">arrow width</param>
            <param name="headAngle">head angle</param>
            <param name="headRadius">head radius</param>
        </member>
        <member name="P:Nevron.Diagram.NArrowPath.PointsCount">
            <summary>
            Obtains the points count 
            </summary>
            <remarks>
            Overriden to always return 4.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NArrowPath.Points">
            <summary>
            Gets the arrow points
            </summary>
            <remarks>
            Overriden to return the scene projections of the arrow model points. 
            Does not provide a set implementation.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NArrowPath.GetPointAt(System.Int32)">
            <summary>
            Gets the point at the specified index
            </summary>
            <param name="index">point index (valid values are from 0 to 3)</param>
            <returns>point at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.NArrowPath.SetPointAt(System.Int32,Nevron.GraphicsCore.NPointF)">
            <summary>
            Sets the point at the specified index
            </summary>
            <param name="index">point index (valid values are 0 and 1)</param>
            <param name="point">point to set</param>
        </member>
        <member name="M:Nevron.Diagram.NArrowPath.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <remarks>
            Overriden to convert the line model points
            </remarks>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.NArrowPath.PathType">
            <summary>
            Obtains the path type
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NArrowPath.IsFlat">
            <summary>
            Determines whether the path primitive hosts a flat graphics path
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NArrowPath.Is1DPrimitive">
            <summary>
            Determines whether this primitive is a 1D primitive (e.g. has local start and end points)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NArrowPath.ModelStartPoint">
            <summary>
            Gets/sets the model start point (in model coordinates)
            </summary>
            <remarks>
            Overriden to directly modify the model start point of the arrow 
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NArrowPath.ModelEndPoint">
            <summary>
            Controls the model end point (in model coordinates)
            </summary>
            <remarks>
            Overriden to directly modify the model end point of the arrow 
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NArrowPath.ArrowType">
            <summary>
            Gets/sets the arrow type
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NArrowPath.ModelArrowWidth">
            <summary>
            Gets/sets the arrow width (in model coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NArrowPath.ModelHeadAngle">
            <summary>
            Gets/sets the arrow head angle (in degrees)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NArrowPath.ModelHeadRadius">
            <summary>
            Gets/sets the arrow head radius (in model coordinates)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowPath.ScaleModel(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
            <summary>
            Overriden to scale the model definition of the arrow
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Diagram.NArrowPath.CreateShape">
            <summary>
            Creates a shape, which wraps a cloning of the primitive model
            </summary>
            <returns>shape instance on success, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NArrowPath.DefineModel(Nevron.Diagram.ArrowType,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Defines the arrow model (in model coordinates)
            </summary>
            <param name="arrowType">arrow type</param>
            <param name="start">start point</param>
            <param name="end">end point</param>
            <returns>true if model definition succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.NArrowPath.DefineModel(Nevron.Diagram.ArrowType,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,System.Single,System.Single,System.Single)">
            <summary>
            Defines the arrow model (in model coordinates)
            </summary>
            <param name="arrowType">arrow type</param>
            <param name="start">start point</param>
            <param name="end">end point</param>
            <param name="arrowWidth">arrow width</param>
            <param name="headAngle">head angle</param>
            <param name="headRadius">head radius</param>
            <returns>true if model definition succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.NArrowPath.CreateModelPath(Nevron.Diagram.ArrowType,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new graphics path, which contains an arrow with the specified parameters
            </summary>
            <param name="arrowType"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="arrowWidth"></param>
            <param name="headAngle"></param>
            <param name="headRadius"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NArrowPath.CreateModelPath">
            <summary>
            Overriden to create an arrow path for the arrow model
            </summary>
            <returns>model graphics path</returns>
        </member>
        <member name="M:Nevron.Diagram.NArrowPath.RecordModelDefinition">
            <summary>
            Overriden to record the arrow model definition
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NArrowPath.ModelPointsXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NArrowPath.ArrowTypeXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NArrowPath.ModelArrowWidthXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NArrowPath.ModelHeadAngleXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NArrowPath.ModelHeadRadiusXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NBezierCurvePath">
            <summary>
            The NBezierCurve class represents a bezier curve defined by two base and two control points
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurvePath.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurvePath.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Constructs a new bezier curve with the specified start and end base points and first and second control points
            </summary>
            <param name="start">start point</param>
            <param name="firstControl">first control point</param>
            <param name="secondControl">second control point</param>
            <param name="end">end point</param>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurvePath.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Constructs a new bezier curve by start and end points only 
            </summary>
            <remarks>
            The first control point is with the start point Y coordinate and X coordinate of the middle point (between the start and end points).
            The second control point is with the end point Y coordinate and X coordinate of the middle point.
            </remarks>
            <param name="start">start point</param>
            <param name="end">end point</param>
        </member>
        <member name="P:Nevron.Diagram.NBezierCurvePath.PointsCount">
            <summary>
            Obtains the points count 
            </summary>
            <remarks>
            Overriden to always return 4.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NBezierCurvePath.Points">
            <summary>
            Gets/sets the bezier curve points
            </summary>
            <remarks>
            Overriden to provide a set implementation which modifies the model
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurvePath.GetPointAt(System.Int32)">
            <summary>
            Gets the point at the specified index
            </summary>
            <param name="index">point index (valid values are from 0 to 3)</param>
            <returns>point at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurvePath.SetPointAt(System.Int32,Nevron.GraphicsCore.NPointF)">
            <summary>
            Sets the point at the specified index
            </summary>
            <param name="index">point index (valid values are from 0 to 3)</param>
            <param name="point">point to set</param>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurvePath.GetPointInfo(System.Int32)">
            <summary>
            Obtains information about the point at the specified index
            </summary>
            <param name="index">point index</param>
            <returns>information for the point at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurvePath.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <remarks>
            Overriden to convert the bezier curve model points
            </remarks>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurvePath.ScaleModel(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
            <summary>
            Overriden to scale the model definition of the path points
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurvePath.Reverse">
            <summary>
            Reverses the model
            </summary>
            <remarks>
            This implementation reverses the bezier points
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurvePath.GetStartPointDirection(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Gets the estimated direction of the specified start point to reach the specified end point
            </summary>
            <remarks>
            Overriden to return the first control point
            </remarks>
            <param name="startPoint">proposed start point</param> 
            <param name="endPoint">proposed end point</param>
            <returns>direction for the start point</returns>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurvePath.GetEndPointDirection(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Gets the estimated direction of the specified end point to reach the specified start point
            </summary>
            <remarks>
            Overriden to return the second control point
            </remarks>
            <param name="startPoint">proposed start point</param> 
            <param name="endPoint">proposed end point</param>
            <returns>direction for the end point</returns>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurvePath.CreateShape">
            <summary>
            Creates a shape, which wraps a cloning of the primitive model
            </summary>
            <returns>shape instance on success, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurvePath.DefineModel(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Defines the bezier model (in model coordinates)
            </summary>
            <param name="start">start point</param>
            <param name="firstControl">first control point</param>
            <param name="secondControl">second control point</param>
            <param name="end">end point</param>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurvePath.DefineModel(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Defines the bezier model by start and end points (in model coordinates)
            </summary>
            <remarks>
            The first control point is with the start point Y coordinate and X coordinate of the middle point (between the start and end points).
            The second control point is with the end point Y coordinate and X coordinate of the middle point.
            </remarks>
            <param name="start">start point</param>
            <param name="end">end point</param>
        </member>
        <member name="P:Nevron.Diagram.NBezierCurvePath.PathType">
            <summary>
            Overriden to return OpenFigure
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NBezierCurvePath.IsFlat">
            <summary>
            Overriden to return false
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NBezierCurvePath.ModelStartPoint">
            <summary>
            Gets/sets the model start point (in model coordinates)
            </summary>
            <remarks>
            Overriden to directly modify the model start point of the line 
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NBezierCurvePath.ModelEndPoint">
            <summary>
            Controls the model end point (in model coordinates)
            </summary>
            <remarks>
            Overriden to directly modify the model end point of the line 
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NBezierCurvePath.ModelFirstControlPoint">
            <summary>
            Controls the model first control point of the berier curve
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NBezierCurvePath.ModelSecondControlPoint">
            <summary>
            Controls the model second control point of the berier curve
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurvePath.CreateModelPath(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Creates a new graphics path, which contains a bezier curve with the specified parameters
            </summary>
            <param name="start"></param>
            <param name="firstControl"></param>
            <param name="secondControl"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurvePath.CreateModelPath">
            <summary>
            Overriden to create a bezier curve for the model
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurvePath.RecordModelDefinition">
            <summary>
            Overriden to record the bezier curve model definition
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NBezierCurvePath.ModelPointsXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NCircularArcPath">
            <summary>
            The NCircularArcPath class represents an circular arc 
            </summary>
            <remarks>
            The elliptical arc is defined by three parameters: 
            start point, end point and control point.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcPath.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcPath.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Constructs an circular arc by start and end points
            </summary>
            <param name="start">start point</param>
            <param name="end">end point</param>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcPath.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Defines the circular arc with the specified parameters
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="control"></param>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcPath.GetPointInfo(System.Int32)">
            <summary>
            Obtains information about the point at the specified index
            </summary>
            <remarks>
            Overriden to provide tooltip as well as to change the type of point 1
            </remarks>
            <param name="index">point index</param>
            <returns>information for the point at the specified index</returns>
        </member>
        <member name="P:Nevron.Diagram.NCircularArcPath.PointsCount">
            <summary>
            Obtains the points count 
            </summary>
            <remarks>
            Overriden to always return 3
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcPath.GetPointAt(System.Int32)">
            <summary>
            Gets the point at the specified index
            </summary>
            <param name="index">point index (valid values are from 0 to 4)</param>
            <returns>point at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcPath.SetPointAt(System.Int32,Nevron.GraphicsCore.NPointF)">
            <summary>
            Sets the point at the specified index
            </summary>
            <param name="index">point index (valid values are from 0 to 4)</param>
            <param name="point">point to set</param>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcPath.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <remarks>
            Overriden to convert the circular arc model
            </remarks>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcPath.ScaleModel(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
            <summary>
            Overriden to scale the model definition of the circular arc
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcPath.Reverse">
            <summary>
            Reverses the model
            </summary>
            <remarks>
            This implementation reverses the model start and end points
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcPath.CreateShape">
            <summary>
            Creates a shape, which wraps a cloning of the primitive model
            </summary>
            <returns>shape instance on success, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcPath.DefineModel(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Defines the circular arc model by two points (in model coordinates)
            </summary>
            <param name="start">start point</param>
            <param name="end">end point</param>
            <returns>true if model definition succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcPath.DefineModel(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Defines the circular arc with the specified parameters
            </summary>
            <param name="start">start point</param>
            <param name="end">end point</param>
            <param name="control">control point, through which the arc passes</param>
            <returns>true if model definition succeeded, otherwise false</returns> 
        </member>
        <member name="P:Nevron.Diagram.NCircularArcPath.PathType">
            <summary>
            Obtains the path type
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NCircularArcPath.IsFlat">
            <summary>
            Determines whether the path primitive hosts a flat graphics path
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NCircularArcPath.ModelStartPoint">
            <summary>
            Gets/sets the arc start point (in model coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NCircularArcPath.ModelEndPoint">
            <summary>
            Gets/sets the arc end point (in model coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NCircularArcPath.ModelControlPoint">
            <summary>
            Gets/sets the model ellipse control point
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcPath.CreateModelPath(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Creates a model circular arc path with the specified parameters
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcPath.CreateModelPath">
            <summary>
            Overriden to create a new circular arc graphics path for the model
            </summary>
            <returns>model graphics path</returns>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcPath.RecordModelDefinition">
            <summary>
            Overriden to record the circular arc path model definition
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NCircularArcPath.ModelPointsXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NCustomPath">
            <summary>
            The NCustomPath class represents a custom open or closed figure path
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NCustomPath.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NCustomPath.#ctor(System.Drawing.Drawing2D.GraphicsPath,Nevron.Diagram.PathType)">
            <summary>
            Creates a new custom stroke path with the specified graphics path and type
            </summary>
            <param name="path">graphics path to use</param>
            <param name="pathType">type of the path</param>
        </member>
        <member name="M:Nevron.Diagram.NCustomPath.#ctor(Nevron.GraphicsCore.NPointF[],System.Byte[],Nevron.Diagram.PathType)">
            <summary>
            Creates a new custom stroke path with the specified path points and types
            </summary>
            <param name="points">points of the path</param>
            <param name="pointTypes">types of the path points</param>
            <param name="pathType">type of the path</param>
        </member>
        <member name="P:Nevron.Diagram.NCustomPath.PointsCount">
            <summary>
            Obtains the points count 
            </summary>
            <remarks>
            This implementation simply returns the count of model points
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NCustomPath.Points">
            <summary>
            Gets/sets the node points
            </summary>
            <remarks>
            Overriden to provide access to the model points
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NCustomPath.GetPointAt(System.Int32)">
            <summary>
            Gets the point at the specified index
            </summary>
            <remarks>
            Overriden to return the scene projection of the model point at the specified index
            </remarks>
            <param name="index">point index</param>
            <returns>point at the specified index (in scene coordinates)</returns>
        </member>
        <member name="M:Nevron.Diagram.NCustomPath.SetPointAt(System.Int32,Nevron.GraphicsCore.NPointF)">
            <summary>
            Sets the point at the specified index
            </summary>
            <remarks>
            Overriden to modify the model point and the specified index
            </remarks>
            <param name="index">point index</param>
            <param name="point">point to set</param>
        </member>
        <member name="M:Nevron.Diagram.NCustomPath.GetPointInfo(System.Int32)">
            <summary>
            Obtains information about the point at the specified index
            </summary>
            <remarks>
            Overriden to determine the type of the point (base or control)
            </remarks>
            <param name="index">point index</param>
            <returns>information for the point at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.NCustomPath.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <remarks>
            Overriden to convert the model path points
            </remarks>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.NCustomPath.ScaleModel(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
            <summary>
            Overriden to scale the model definition of the path points
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Diagram.NCustomPath.CreateShape">
            <summary>
            Creates a shape, which wraps a cloning of the primitive model
            </summary>
            <returns>shape instance on success, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NCustomPath.DefineModel(System.Drawing.Drawing2D.GraphicsPath,Nevron.Diagram.PathType)">
            <summary>
            Defines the model path (in model coordinates)
            </summary>
            <param name="path">path to use</param>
            <param name="pathType">path type</param> 
        </member>
        <member name="M:Nevron.Diagram.NCustomPath.DefineModel(Nevron.GraphicsCore.NPointF[],System.Byte[],Nevron.Diagram.PathType)">
            <summary>
            Defines the model path by path points (in model coordinates) and types 
            </summary>
            <param name="points">path points</param>
            <param name="pointsTypes">path points type</param>
            <param name="pathType">path type</param>
        </member>
        <member name="P:Nevron.Diagram.NCustomPath.PathType">
            <summary>
            Overriden to return the value passed in the constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NCustomPath.IsFlat">
            <summary>
            Overriden to return false
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NCustomPath.CreateModelPath(Nevron.GraphicsCore.NPointF[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="pointTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NCustomPath.CreateModelPath">
            <summary>
            Overriden to create a new generic stroke graphics path
            </summary>
            <returns>model graphics path</returns>
        </member>
        <member name="M:Nevron.Diagram.NCustomPath.RecordModelDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NCustomPath.ModelPointsXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NCustomPath.ModelPointsTypesXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NCustomPath.PathTypeXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NEllipsePath">
            <summary>
            The NEllipsePath class represents a filled ellipse path
            </summary>
            <remarks>
            The NEllipsePath class exposes 4 base points 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NEllipsePath.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NEllipsePath.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new ellipse with the specified parameters
            </summary>
            <param name="x">x coordinate of the upper left corner</param>
            <param name="y">y coordinate of the upper left corner</param>
            <param name="width">width</param>
            <param name="height">height</param>
        </member>
        <member name="M:Nevron.Diagram.NEllipsePath.#ctor(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Constructs a new ellipse with the specified parameters
            </summary>
            <param name="rect">bounding rect</param>
        </member>
        <member name="M:Nevron.Diagram.NEllipsePath.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Constructs a new ellipse with the specified parameters
            </summary>
            <param name="leftTop">left top corner</param>
            <param name="rightBottom">right bottom corner</param>
        </member>
        <member name="M:Nevron.Diagram.NEllipsePath.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Constructs a new ellipse with the specified parameters
            </summary>
            <param name="center">center</param>
            <param name="size">size</param>
        </member>
        <member name="M:Nevron.Diagram.NEllipsePath.#ctor(Nevron.GraphicsCore.NPointF,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new ellipse with the specified parameters
            </summary>
            <param name="center">center</param>
            <param name="xRadius">x radius</param>
            <param name="yRadius">y radius</param>
            <param name="angle">rotation of the model ellipse</param>
        </member>
        <member name="P:Nevron.Diagram.NEllipsePath.PointsCount">
            <summary>
            Obtains the points count 
            </summary>
            <remarks>
            Overriden to always return 4
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NEllipsePath.Points">
            <summary>
            Gets the ellipse points
            </summary>
            <remarks>
            Overriden to return the scene projections of the model ellipse bounds corners and its center. 
            Does not provide a set implementation.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NEllipsePath.GetPointAt(System.Int32)">
            <summary>
            Gets the point at the specified index
            </summary>
            <param name="index">point index (valid values are from 0 to 3)</param>
            <returns>point at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.NEllipsePath.SetPointAt(System.Int32,Nevron.GraphicsCore.NPointF)">
            <summary>
            Sets the point at the specified index
            </summary>
            <param name="index">point index (valid values are from 0 to 4)</param>
            <param name="point">point to set</param>
        </member>
        <member name="M:Nevron.Diagram.NEllipsePath.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <remarks>
            Overriden to convert the ellipse model
            </remarks>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.NEllipsePath.PathType">
            <summary>
            Obtains the path type
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NEllipsePath.IsFlat">
            <summary>
            Determines whether the path primitive hosts a flat graphics path
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NEllipsePath.ModelCenter">
            <summary>
            Gets/sets the center of the ellipse model 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NEllipsePath.ModelXRadius">
            <summary>
            Gets/sets the x radius of the ellipse model
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NEllipsePath.ModelYRadius">
            <summary>
            Gets/sets the y radius of the ellipse model
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NEllipsePath.ModelAngle">
            <summary>
            Gets/sets the rotation of the ellipse model (in degrees)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NEllipsePath.ScaleModel(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
            <summary>
            Overriden to scale the model definition of the ellipse
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Diagram.NEllipsePath.CreateShape">
            <summary>
            Creates a shape, which wraps a cloning of the primitive model
            </summary>
            <returns>shape instance on success, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NEllipsePath.DefineModel(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Defines the ellipse model (in model coordinates)
            </summary>
            <param name="x">x coordinate of the upper left corner</param>
            <param name="y">y coordinate of the upper left corner</param>
            <param name="width">width</param>
            <param name="height">height</param>
        </member>
        <member name="M:Nevron.Diagram.NEllipsePath.DefineModel(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Defines the ellipse model (in model coordinates)
            </summary>
            <param name="rect">bounding rect</param>
        </member>
        <member name="M:Nevron.Diagram.NEllipsePath.DefineModel(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Defines the ellipse model (in model coordinates)
            </summary>
            <param name="leftTop">left top corner</param>
            <param name="rightBottom">right bottom corner</param>
        </member>
        <member name="M:Nevron.Diagram.NEllipsePath.DefineModel(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Defines the ellipse model (in model coordinates)
            </summary>
            <param name="center">center</param>
            <param name="size">size</param>
        </member>
        <member name="M:Nevron.Diagram.NEllipsePath.DefineModel(Nevron.GraphicsCore.NPointF,System.Single,System.Single,System.Single)">
            <summary>
            Defines the ellipse model (in model coordinates)
            </summary>
            <param name="center">center</param>
            <param name="xRadius">x radius</param>
            <param name="yRadius">y radius</param>
            <param name="angle">rotation of the model ellipse (in degrees)</param>
        </member>
        <member name="M:Nevron.Diagram.NEllipsePath.CreateModelPath(Nevron.GraphicsCore.NPointF,System.Single,System.Single,System.Single)">
            <summary>
            Creates an ellipse path with the specified parameters
            </summary>
            <param name="center"></param>
            <param name="xRadius"></param>
            <param name="yRadius"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NEllipsePath.CreateModelPath">
            <summary>
            Overriden to create a new ellipse graphics path for the model
            </summary>
            <returns>model graphics path</returns>
        </member>
        <member name="M:Nevron.Diagram.NEllipsePath.RecordModelDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NEllipsePath.GetAngleForPoint(System.Int32)">
            <summary>
            Gets the angle, which corresponds to the specified point index
            </summary>
            <param name="pointIndex"></param>
            <returns>angle (in radians)</returns>
        </member>
        <member name="P:Nevron.Diagram.NEllipsePath.ModelCenterXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NEllipsePath.ModelXRadiusXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NEllipsePath.ModelYRadiusXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NEllipsePath.ModelAngleXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NEllipticalArcPath">
            <summary>
            The NEllipticalArcPath class represents an elliptical arc 
            </summary>
            <remarks>
            The elliptical arc is defined by five parameters: 
            start point, end point, control point, major ellipse axis angle relative to the model X axis 
            and ratio between the ellipse major and minor axes.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcPath.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcPath.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Constructs an elliptical arc by start and end points
            </summary>
            <param name="start">start point</param>
            <param name="end">end point</param>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcPath.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,System.Single,System.Single)">
            <summary>
            Defines the elliptical arc with the specified parameters
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="control"></param>
            <param name="angle"></param>
            <param name="axesRatio"></param>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcPath.GetPointInfo(System.Int32)">
            <summary>
            Obtains information about the point at the specified index
            </summary>
            <remarks>
            Overriden to provide tooltips as well as to change the type of points 1, 2 and 3
            </remarks>
            <param name="index">point index</param>
            <returns>information for the point at the specified index</returns>
        </member>
        <member name="P:Nevron.Diagram.NEllipticalArcPath.PointsCount">
            <summary>
            Obtains the points count 
            </summary>
            <remarks>
            Overriden to always return 5
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcPath.GetPointAt(System.Int32)">
            <summary>
            Gets the point at the specified index
            </summary>
            <param name="index">point index (valid values are from 0 to 4)</param>
            <returns>point at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcPath.SetPointAt(System.Int32,Nevron.GraphicsCore.NPointF)">
            <summary>
            Sets the point at the specified index
            </summary>
            <param name="index">point index (valid values are from 0 to 4)</param>
            <param name="point">point to set</param>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcPath.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <remarks>
            Overriden to convert the elliptical arc model
            </remarks>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcPath.ScaleModel(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
            <summary>
            Overriden to scale the model definition of the elliptical arc
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcPath.Reverse">
            <summary>
            Reverses the model
            </summary>
            <remarks>
            This implementation reverses the model start and end points
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcPath.CreateShape">
            <summary>
            Creates a shape, which wraps a cloning of the primitive model
            </summary>
            <returns>shape instance on success, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcPath.DefineModel(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Defines the elliptical arc model by two points (in model coordinates)
            </summary>
            <param name="start">start point</param>
            <param name="end">end point</param>
            <returns>true if model definition succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcPath.DefineModel(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,System.Single,System.Single)">
            <summary>
            Defines the elliptical arc with the specified parameters
            </summary>
            <param name="start">start point</param>
            <param name="end">end point</param>
            <param name="control">control point, through which the arc passes</param>
            <param name="angle">angle of the X-axis of the arc relative to the model (in degrees)</param>
            <param name="axesRatio">ratio between the X and Y axes of the arc</param>
            <returns>true if model definition succeeded, otherwise false</returns> 
        </member>
        <member name="P:Nevron.Diagram.NEllipticalArcPath.PathType">
            <summary>
            Obtains the path type
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NEllipticalArcPath.IsFlat">
            <summary>
            Determines whether the path primitive hosts a flat graphics path
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NEllipticalArcPath.ModelStartPoint">
            <summary>
            Gets/sets the arc start point (in model coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NEllipticalArcPath.ModelEndPoint">
            <summary>
            Gets/sets the arc end point (in model coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NEllipticalArcPath.ModelControlPoint">
            <summary>
            Gets/sets the model ellipse control point
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NEllipticalArcPath.ModelAngle">
            <summary>
            Controls the angle of the arc's major axis relative to the x-axis of the model
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NEllipticalArcPath.ModelAxesRatio">
            <summary>
            Controls the ratio of an arc's major axis to its minor axis
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcPath.CreateModelPath(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,System.Single,System.Single)">
            <summary>
            Creates a model elliptical arc path with the specified parameters
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="control"></param>
            <param name="angle"></param>
            <param name="ratio"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcPath.CreateModelPath">
            <summary>
            Overriden to create a new elliptical arc graphics path for the model
            </summary>
            <returns>model graphics path</returns>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcPath.RecordModelDefinition">
            <summary>
            Overriden to record the elliptical arc model definition
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NEllipticalArcPath.ModelPointsXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NEllipticalArcPath.ModelAngleXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NEllipticalArcPath.ModelAxesRatioXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NLinePath">
            <summary>
            The NLinePath class represents a path, which connects its start and end points with a simple line
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLinePath.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLinePath.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Creates a new line between the specified points
            </summary>
            <param name="start">start point</param>
            <param name="end">end point</param>
        </member>
        <member name="M:Nevron.Diagram.NLinePath.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new line with the specified coordinates
            </summary>
            <param name="startX">start point X</param>
            <param name="startY">start point Y</param>
            <param name="endX">end point X</param>
            <param name="endY">end point Y</param>
        </member>
        <member name="M:Nevron.Diagram.NLinePath.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to cashe a refernece to the bridge manager
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:Nevron.Diagram.NLinePath.PointsCount">
            <summary>
            Obtains the points count 
            </summary>
            <remarks>
            Overriden to always return 2.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NLinePath.Points">
            <summary>
            Gets/sets the line points
            </summary>
            <remarks>
            Overriden to return the scene projections of the ModelStartPoint and ModelEndPoint. 
            Also provides a set implementation.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NLinePath.GetPointAt(System.Int32)">
            <summary>
            Gets the point at the specified index
            </summary>
            <param name="index">point index (valid values are 0 and 1)</param>
            <returns>point at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.NLinePath.SetPointAt(System.Int32,Nevron.GraphicsCore.NPointF)">
            <summary>
            Sets the point at the specified index
            </summary>
            <param name="index">point index (valid values are 0 and 1)</param>
            <param name="point">point to set</param>
        </member>
        <member name="M:Nevron.Diagram.NLinePath.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <remarks>
            Overriden to convert the line model points
            </remarks>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.NLinePath.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the node in the specified context
            </summary>
            <remarks>
            Overriden to paint the line with bridges
            </remarks>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.NLinePath.InvalidateBridges">
            <summary>
            Recreates the bridges of the node
            </summary>
            <returns>true if any bridges were created, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NLinePath.GetBridgeableSegmentIterator">
            <summary>
            Obtains a bridgeable segment iterator for this bridgable node
            </summary>
            <returns>iterator</returns>
        </member>
        <member name="P:Nevron.Diagram.NLinePath.PathType">
            <summary>
            Obtains the path type
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLinePath.IsFlat">
            <summary>
            Determines whether the path primitive hosts a flat graphics path
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLinePath.ModelStartPoint">
            <summary>
            Gets/sets the model start point (in model coordinates)
            </summary>
            <remarks>
            Overriden to directly modify the model start point of the line 
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NLinePath.ModelEndPoint">
            <summary>
            Controls the model end point (in model coordinates)
            </summary>
            <remarks>
            Overriden to directly modify the model end point of the line 
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NLinePath.BridgeManager">
            <summary>
            Obtains a reference to the bridge manager
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLinePath.ScaleModel(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
            <summary>
            Overriden to scale the model definition of the line
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Diagram.NLinePath.Reverse">
            <summary>
            Reverses the model
            </summary>
            <remarks>
            This implementation reverses the model start and end points
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NLinePath.CreateShape">
            <summary>
            Creates a shape, which wraps a cloning of the primitive model
            </summary>
            <returns>shape instance on success, otherwise null</returns>
        </member>
        <member name="P:Nevron.Diagram.NLinePath.PathPoints">
            <summary>
            Obtains the path points representing this graphics path
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLinePath.DefineModel(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Defines the line model (in model coordinates)
            </summary>
            <param name="start">start point</param>
            <param name="end">end point</param>
            <returns>true if model definition succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.NLinePath.DefineModel(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Defines the line model (in model coordinates)
            </summary>
            <param name="startX">start point X</param>
            <param name="startY">start point Y</param>
            <param name="endX">end point X</param>
            <param name="endY">end point Y</param>
            <returns>true if model definition succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.NLinePath.CreateModelPath(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Creates a new graphics path, which contains a line with the specified points
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLinePath.InvalidateSceneCashe">
            <summary>
            Invalidates the scene cashe
            </summary>
            <remarks>
            Overriden to invalidate the cashed bridgeable path info
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NLinePath.CreateModelPath">
            <summary>
            Overriden to create a line path for the line model
            </summary>
            <returns>model graphics path</returns>
        </member>
        <member name="M:Nevron.Diagram.NLinePath.RecordModelDefinition">
            <summary>
            Overriden to record the arrow definition
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLinePath.ModelPointsXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NPathPrimitive">
            <summary>
            The NPathPrimitive class represents a primitive model, whose content is a GraphicsPath
            </summary>
            <remarks>
            The NPathPrimitive extends the base NModel with the following features:
            <list type="bullet">
            <item>
            	<term>Points</term>
            	<description>NPathPrimitive implements the INPoints interface, thus exposing a set of base and control points 
            	(in scene coordinates), which can be used to modify the path model.</description>
            </item>	
            <item>
            	<term>Painting</term>
            	<description>Paths can be painted. That is why they implement the INPaintable interface</description>
            </item>	
            <item>
            	<term>Hit tests</term>
            	<description>Paths can be the result of hit tests, hence they implement the INHitTestable interface.</description>
            </item>	
            </list>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.Dispose">
            <summary>
            Disposes the contained graphics path (if any)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.Invalidate">
            <summary>
            Invalidates the path
            </summary>
            <remarks>
            The implementation will call smart paint service InvalidateSceneRect method.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Overriden to paint the path in the specified context
            </summary>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.HitTest(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the path by point with the specified context
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the path was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.HitTest(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the path by rectangle with the specified context
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the path was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.GetPointInfo(System.Int32)">
            <summary>
            Obtains information about the point at the specified index
            </summary>
            <param name="index">point index</param>
            <returns>information for the point at the specified index</returns>
        </member>
        <member name="P:Nevron.Diagram.NPathPrimitive.PointsCount">
            <summary>
            Obtains the points count 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPathPrimitive.Points">
            <summary>
            Gets/sets the path points
            </summary>
            <remarks>
            The implementation of the set method will throw a NotImplementedException exception
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.GetPointAt(System.Int32)">
            <summary>
            Gets the point at the specified index
            </summary>
            <param name="index">point index</param>
            <returns>point at the specified index (in scene coordinates)</returns>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.SetPointAt(System.Int32,Nevron.GraphicsCore.NPointF)">
            <summary>
            Sets the point at the specified index
            </summary>
            <param name="index">point index</param>
            <param name="point">point to set</param>
        </member>
        <member name="P:Nevron.Diagram.NPathPrimitive.DirtyInflate">
            <summary>
            Obtains the dirty inflate of the node in world coordinates
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPathPrimitive.PathType">
            <summary>
            Obtains the path type
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPathPrimitive.IsFlat">
            <summary>
            Determines whether the path primitive hosts a flat graphics path
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPathPrimitive.Is1DPrimitive">
            <summary>
            Determines whether this primitive is a 1D primitive (e.g. has local start and end points)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPathPrimitive.Length">
            <summary>
            Gets the logical line length (in scene coordinates)
            </summary>
            <remarks>
            Overriden to return the length of a flattened path in case this is an open figure path
            </remarks> 
        </member>
        <member name="P:Nevron.Diagram.NPathPrimitive.Path">
            <summary>
            Obtains the graphics path representing this object in scene coordinates
            </summary>
            <remarks>
            This implementation will return a cashed scene path. You do not need to dispose it
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NPathPrimitive.PathPointsTypes">
            <summary>
            Obtains the path point types representing this graphics path
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPathPrimitive.PathPoints">
            <summary>
            Obtains the path points representing this graphics path
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.GetLengthLocation(System.Single)">
            <summary>
            Obtains the point along the logical line, which corresponds to the specified percent
            </summary>
            <remarks>
            Overriden to return a point on a flattened path in case this is an open figure path
            </remarks>
            <param name="percent">percent for which to obtain a point</param>
            <returns>point in scene coordinates</returns>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.GetLengthOrientation(System.Single)">
            <summary>
            Obtains the tangent angle (in radians) along the logical line, which corresponds to the specified percent
            </summary>
            <remarks>
            Overriden to return an orientation on a flattened path in case this is an open figure path
            </remarks>
            <param name="percent">percent for which to obtain a orienatation</param>
            <returns>orientation in radians</returns>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.GetNearestContourLocation(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Gets the nearest intersection point of the model contour with the vector defined by the specified start and end points
            </summary>
            <remarks>
            Overriden to return the nearest intersection point with the path
            </remarks>
            <param name="vectorStart">start vector point (in scene coordinates)</param>
            <param name="vectorEnd">end vector point (in scene coordinates)</param>
            <returns>vector start point if there are not intersection points, otherwise nearest intersection point to vector end point</returns>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.Flatten">
            <summary>
            Converts each curve of the graphics path representing this object into a sequence of connected line segments.
            </summary>
            <remarks>
            You need to dispose the returned graphics path
            </remarks>
            <returns>flat graphics path</returns> 
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.Flatten(System.Drawing.Drawing2D.Matrix,System.Single)">
            <summary>
            Converts each curve of the graphics path representing this object into a sequence of connected line segments
            </summary>
            <remarks>
            You need to dispose the returned graphics path
            </remarks>
            <param name="matrix">a Matrix object by which to transform this GraphicsPath before flattening</param> 
            <param name="flatness">Specifies the maximum permitted error between the curve and its flattened approximation. Reducing the flatness value will increase the number of line segments in the approximation.</param> 
            <returns>flat graphics path</returns>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.InvalidateSceneCashe">
            <summary>
            Invalidates the scene cashe
            </summary>
            <remarks>
            Overriden to invalidate the cashed scene path
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.PaintClosedFigure(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints a closed figure
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.PaintClosedFigureAppearance(Nevron.Diagram.NPaintContext,System.Drawing.Drawing2D.GraphicsPath,Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle)">
            <summary>
            Paints the appearance of a closed figure
            </summary>
            <param name="context"></param>
            <param name="path"></param>
            <param name="fillStyle"></param>
            <param name="strokeStyle"></param>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.PaintClosedFigureShadow(Nevron.Diagram.NPaintContext,System.Drawing.Drawing2D.GraphicsPath,Nevron.GraphicsCore.NShadowStyle,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Paints the shadow of a closed figure
            </summary>
            <param name="context"></param>
            <param name="path"></param>
            <param name="shadowStyle"></param>
            <param name="fillStyle"></param>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.PaintOpenFigure(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints an open figure
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.PaintOpenFigureAppearance(Nevron.Diagram.NPaintContext,System.Drawing.Drawing2D.GraphicsPath,Nevron.GraphicsCore.NStrokeStyle,Nevron.Diagram.NArrowheadStyle,Nevron.Diagram.NArrowheadStyle)">
            <summary>
            Paints the appearance of an open figure
            </summary>
            <param name="context"></param>
            <param name="path"></param>
            <param name="strokeStyle"></param>
            <param name="startAHStyle"></param>
            <param name="endAHStyle"></param>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.PaintOpenFigureShadow(Nevron.Diagram.NPaintContext,System.Drawing.Drawing2D.GraphicsPath,Nevron.GraphicsCore.NShadowStyle,Nevron.GraphicsCore.NStrokeStyle,Nevron.Diagram.NArrowheadStyle,Nevron.Diagram.NArrowheadStyle)">
            <summary>
            Paints the shadow of an open figure
            </summary>
            <param name="context"></param>
            <param name="path"></param>
            <param name="shadowStyle"></param>
            <param name="strokeStyle"></param>
            <param name="startAHStyle"></param>
            <param name="endAHStyle"></param>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.GetArrowheadsPaintInfo(Nevron.Diagram.NArrowheadsPaintInfo@)">
            <summary>
            Gets information about the location and orientation of the path arrowheads
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.UpdateBridgeablePaintInfo(Nevron.Diagram.NPaintContext,System.Single,Nevron.Diagram.INBridgeManager,Nevron.Diagram.Bridging.NBridgeablePaintInfo,Nevron.Diagram.NBridgeStyle@)">
            <summary>
            Updates the specified bridgable paint info
            </summary>
            <param name="context"></param>
            <param name="cornerRounding"></param>
            <param name="manager"></param>
            <param name="info"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.PaintBridgeableOpenFigure(Nevron.Diagram.NPaintContext,Nevron.Diagram.Bridging.NBridgeablePaintInfo,Nevron.Diagram.NBridgeStyle)">
            <summary>
            Paints an open figure with bridges
            </summary>
            <param name="context"></param>
            <param name="info"></param>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.CreateModelPath">
            <summary>
            Creates a path in model coordinates from the path definition
            </summary>
            <returns>GraphicsPath in model coordinates</returns>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.OnModelPathChanging(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Called when the model path of the primitive is about to change
            </summary>
            <param name="newModelPath">new model path</param>
            <returns>true if the path can be accepted, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.OnModelPathChanged(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Called when the model path of the primitive has changed
            </summary>
            <param name="newModelPath">new model path</param>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.MeasureClosedFigureDirtyInflate(Nevron.GraphicsCore.NLengthConverter,Nevron.GraphicsCore.NShadowStyle,Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Measures the dirty inflate of a closed figure, if it is going the be displayed with the specified styles
            </summary>
            <param name="lengthConverter"></param>
            <param name="shadowStyle"></param>
            <param name="strokeStyle"></param>
            <param name="fillStyle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NPathPrimitive.MeasureOpenFigureDirtyInflate(Nevron.GraphicsCore.NLengthConverter,Nevron.GraphicsCore.NShadowStyle,Nevron.GraphicsCore.NStrokeStyle,Nevron.Diagram.NArrowheadStyle,Nevron.Diagram.NArrowheadStyle,Nevron.GraphicsCore.NSizeL)">
            <summary>
            Measures the dirty inflate of an open figure, if it is going the be displayed with the specified styles
            </summary>
            <param name="lengthConverter"></param>
            <param name="shadowStyle"></param>
            <param name="strokeStyle"></param>
            <param name="startAHStyle"></param>
            <param name="endAHStyle"></param>
            <param name="bridgeStyle"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NRectanglePath">
            <summary>
            The NRectanglePath class represents a filled rectangle
            </summary>
            <remarks>
            The NRectanglePath class exposes 4 points, which represent the rectangle corners
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NRectanglePath.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NRectanglePath.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Constructs a new rectangle with the specified location and size
            </summary>
            <param name="location">location</param>
            <param name="size">size</param>
        </member>
        <member name="M:Nevron.Diagram.NRectanglePath.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new rectangle with the specified coordinates 
            </summary>
            <param name="x">x location of the rectangle</param>
            <param name="y">y location of the rectangle</param>
            <param name="width">rectangle width</param>
            <param name="height">rectangle height</param>
        </member>
        <member name="M:Nevron.Diagram.NRectanglePath.#ctor(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Constructs a new rectangle
            </summary>
            <param name="rect">rectangle</param>
        </member>
        <member name="M:Nevron.Diagram.NRectanglePath.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Constructs a new rectangle, by constructing a normalized rectangle from the specified corners
            </summary>
            <param name="leftTop">left top corner</param>
            <param name="rightBottom">right-bottom corner</param>
        </member>
        <member name="M:Nevron.Diagram.NRectanglePath.#ctor(Nevron.GraphicsCore.NPointF[])">
            <summary>
            Constructs a new rectangle by 4 corner points
            </summary>
            <param name="corners"></param>
        </member>
        <member name="M:Nevron.Diagram.NRectanglePath.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Constructs a new rectangle by 4 corner points
            </summary>
            <param name="corner1"></param>
            <param name="corner2"></param>
            <param name="corner3"></param>
            <param name="corner4"></param>
        </member>
        <member name="P:Nevron.Diagram.NRectanglePath.Points">
            <summary>
            Gets/sets the rectangle corner points
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NRectanglePath.PointsCount">
            <summary>
            Obtains the points count 
            </summary>
            <remarks>
            Overriden to always return 4
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NRectanglePath.GetPointAt(System.Int32)">
            <summary>
            Gets the point at the specified index
            </summary>
            <param name="index">point index (valid values are from 0 to 3)</param>
            <returns>point at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.NRectanglePath.SetPointAt(System.Int32,Nevron.GraphicsCore.NPointF)">
            <summary>
            Sets the point at the specified index
            </summary>
            <param name="index">point index (valid values are from 0 to 4)</param>
            <param name="point">point to set</param>
        </member>
        <member name="M:Nevron.Diagram.NRectanglePath.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <remarks>
            Overriden to convert the rectangle model points
            </remarks>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.NRectanglePath.PathType">
            <summary>
            Obtains the path type
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NRectanglePath.IsFlat">
            <summary>
            Determines whether the path primitive hosts a flat graphics path
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NRectanglePath.ModelCorner1">
            <summary>
            Gets/sets the first model corner point
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NRectanglePath.ModelCorner2">
            <summary>
            Gets/sets the second model corner point
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NRectanglePath.ModelCorner3">
            <summary>
            Gets/sets the third model corner point
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NRectanglePath.ModelCorner4">
            <summary>
            Gets/sets the fourth model corner point
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NRectanglePath.ScaleModel(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
            <summary>
            Overriden to scale the model definition of the rectangle
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Diagram.NRectanglePath.CreateShape">
            <summary>
            Creates a shape, which wraps a cloning of the primitive model
            </summary>
            <returns>shape instance on success, otherwise null</returns>
        </member>
        <member name="P:Nevron.Diagram.NRectanglePath.PathPoints">
            <summary>
            Obtains the path points representing this graphics path
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NRectanglePath.DefineModel(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Defines the rectangle model (in model coordinates)
            </summary>
            <param name="location">location</param>
            <param name="size">size</param>
            <returns>true if model definition succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.NRectanglePath.DefineModel(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Defines the rectangle model (in model coordinates)
            </summary>
            <param name="x">x coordinate</param>
            <param name="y">y coordinate</param>
            <param name="width">width</param>
            <param name="height">height</param>
            <returns>true if model definition succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.NRectanglePath.DefineModel(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Defines the rectangle model 
            </summary>
            <param name="rect">rectangle</param>
            <returns>true if model definition succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.NRectanglePath.DefineModel(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Defines the rectangle model (in model coordinates)
            </summary>
            <param name="leftTop">left top corner</param>
            <param name="rightBottom">right-bottom corner</param>
            <returns>true if model definition succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.NRectanglePath.DefineModel(Nevron.GraphicsCore.NPointF[])">
            <summary>
            Defines the rectangle model (in model coordinates)
            </summary>
            <param name="corners">corners</param>
            <returns>true if model definition succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.NRectanglePath.DefineModel(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Defines the rectangle model (in model coordinates)
            </summary>
            <param name="corner1"></param>
            <param name="corner2"></param>
            <param name="corner3"></param>
            <param name="corner4"></param>
            <returns>true if model definition succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.NRectanglePath.CreateModelPath(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Creates a new graphics path, which contains a polygon with the specified corners
            </summary>
            <param name="corner1"></param>
            <param name="corner2"></param>
            <param name="corner3"></param>
            <param name="corner4"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NRectanglePath.CreateModelPath">
            <summary>
            Overriden to return a graphics path which represents the rectangle in model coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NRectanglePath.RecordModelDefinition">
            <summary>
            Overriden to record the rectangle model definition
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NRectanglePath.ModelPointsXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NClosedCurvePath">
            <summary>
            The NClosedCurvePath class represents a curved polygon with controllable curve tension
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NClosedCurvePath.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NClosedCurvePath.#ctor(Nevron.GraphicsCore.NPointF[],System.Single)">
            <summary>
            Constructs a new closed curve with the specified points and tension
            </summary>
            <param name="points">points of the curve</param>
            <param name="tension">curve tension</param>
        </member>
        <member name="P:Nevron.Diagram.NClosedCurvePath.MinPointsCount">
            <summary>
            Overriden to return 3
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NClosedCurvePath.PathType">
            <summary>
            Overriden to return ClosedFigure
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NClosedCurvePath.IsFlat">
            <summary>
            Overriden to return false
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NClosedCurvePath.Tension">
            <summary>
            Gets/sets the curve tension
            </summary>
            <remarks>
            By default set to 1. Must be a value between 0 and 1.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NClosedCurvePath.CreateShape">
            <summary>
            Creates a shape, which wraps a cloning of the primitive model
            </summary>
            <returns>shape instance on success, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NClosedCurvePath.Reverse">
            <summary>
            Reverses the model
            </summary>
            <remarks>
            Overriden to reverse the curve points
            </remarks>
            <returns>true if reverse succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NClosedCurvePath.DefineModel(Nevron.GraphicsCore.NPointF[],System.Single)">
            <summary>
            Defines the curve with the specified points and tension
            </summary>
            <param name="points"></param>
            <param name="tension"></param>
            <returns>true if definition succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NClosedCurvePath.CreateModelPath(Nevron.GraphicsCore.NPointF[],System.Single)">
            <summary>
            Creates new graphics path, which contains a closed curve with the specfied points and tension
            </summary>
            <param name="points"></param>
            <param name="tension"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NClosedCurvePath.CreateModelPath(Nevron.GraphicsCore.NPointF[])">
            <summary>
            Overriden to return a GraphicsPath containing a curve defined with the specified points
            </summary>
            <param name="points">points of the curve</param>
            <returns>GraphicsPath containing a curve</returns>
        </member>
        <member name="M:Nevron.Diagram.NClosedCurvePath.RecordModelDefinition">
            <summary>
            Overriden to record the closed curve model definition
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NClosedCurvePath.TensionXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NCurvePath">
            <summary>
            The NCurve class represents a curved polyline, with controllable curve tension
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NCurvePath.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NCurvePath.#ctor(Nevron.GraphicsCore.NPointF[],System.Single)">
            <summary>
            Creates a new curve with the specified points and tension
            </summary>
            <param name="points">points of the curve</param>
            <param name="tension">curve tension</param>
        </member>
        <member name="P:Nevron.Diagram.NCurvePath.MinPointsCount">
            <summary>
            Overriden to return 2
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NCurvePath.PathType">
            <summary>
            Overriden to return OpenFigure
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NCurvePath.IsFlat">
            <summary>
            Overriden to return false
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NCurvePath.ModelStartPoint">
            <summary>
            Gets/sets the model start point (in model coordinates)
            </summary>
            <remarks>
            Overriden to directly modify the model start point of the curve
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NCurvePath.ModelEndPoint">
            <summary>
            Controls the model end point (in model coordinates)
            </summary>
            <remarks>
            Overriden to directly modify the model end point of the curve
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NCurvePath.Tension">
            <summary>
            Gets/sets the curve tension
            </summary>
            <remarks>
            By default set to 1. Must be a value between 0 and 1.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NCurvePath.CreateShape">
            <summary>
            Creates a shape, which wraps a cloning of the primitive model
            </summary>
            <returns>shape instance on success, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NCurvePath.DefineModel(Nevron.GraphicsCore.NPointF[],System.Single)">
            <summary>
            Defines the closed curve with the specified points and tension
            </summary>
            <param name="points"></param>
            <param name="tension"></param>
            <returns>true if definition succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NCurvePath.CreateModelPath(Nevron.GraphicsCore.NPointF[],System.Single)">
            <summary>
            Creates new graphics path, which contains a curve with the specfied points and tension
            </summary>
            <param name="points"></param>
            <param name="tension"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NCurvePath.CreateModelPath(Nevron.GraphicsCore.NPointF[])">
            <summary>
            Overriden to return a GraphicsPath containing a curve defined with the specified points
            </summary>
            <param name="points">points of the curve</param>
            <returns>GraphicsPath containing a curve</returns>
        </member>
        <member name="M:Nevron.Diagram.NCurvePath.RecordModelDefinition">
            <summary>
            Overriden to record the curve model definition
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NCurvePath.TensionXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NHVPolylinePath">
            <summary>
            The NHVPolylinePath class represents a polyline, which retains orthogonality in scene coordinates
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NHVPolylinePath.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NHVPolylinePath.#ctor(Nevron.GraphicsCore.NPointF[])">
            <summary>
            Creates a new bridgable HV polyline with the specified points
            </summary>
            <param name="points">points of the polyline</param>
        </member>
        <member name="M:Nevron.Diagram.NHVPolylinePath.MergePoints(System.Single)">
            <summary>
            Merges (removes) all points, whose oriented distance from the line formed 
            by its neighbours is smaller than the specified.
            </summary>
            <param name="distance">oriented distance below which the point is merged (in scene coordinates)</param>
        </member>
        <member name="P:Nevron.Diagram.NHVPolylinePath.MinPointsCount">
            <summary>
            Obtains the minimal allowed number of points
            </summary>
            <remarks>
            Overriden to return 3
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NHVPolylinePath.MoveSegment(System.Int32,Nevron.GraphicsCore.NPointF)">
            <summary>
            Moves the segment to the specified location
            </summary>
            <param name="segmentIndex">segment index</param>
            <param name="location">location to move to</param>
        </member>
        <member name="M:Nevron.Diagram.NHVPolylinePath.SplitSegment(System.Int32)">
            <summary>
            Splits the specified segment and returns information about the point, which can be subsequently translated
            </summary>
            <param name="segmentIndex">segment index</param>
            <returns>information about the point which can be translated</returns>
        </member>
        <member name="M:Nevron.Diagram.NHVPolylinePath.GetStartPointDirection(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Gets the estimated direction of the specified start point to reach the specified end point
            </summary>
            <remarks>
            Overriden to return the point with index 1 if the polyline has more than two points
            </remarks>
            <param name="startPoint">proposed start point</param> 
            <param name="endPoint">proposed end point</param>
            <returns>direction for the start point</returns>
        </member>
        <member name="M:Nevron.Diagram.NHVPolylinePath.GetEndPointDirection(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Gets the estimated direction of the specified end point to reach the specified start point
            </summary>
            <remarks>
            Overriden to return the point with index PointsCount - 2 if the polyline has more than two points
            </remarks>
            <param name="startPoint">proposed start point</param> 
            <param name="endPoint">proposed end point</param>
            <returns>direction for the end point</returns>
        </member>
        <member name="M:Nevron.Diagram.NHVPolylinePath.GetSegmentType(System.Int32)">
            <summary>
            Gets the segment type at the specified index
            </summary>
            <param name="segmentIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NHVPolylinePath.DefineModel(Nevron.GraphicsCore.NPointF[],Nevron.Diagram.HVSegmentType[])">
            <summary>
            Defines aN HV polyline model with the specified model points and segment types
            </summary>
            <param name="points"></param>
            <param name="segmentTypes"></param>
            <returns>true if model definition succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.NHVPolylinePath.RecordModelDefinition">
            <summary>
            Overriden to record the model defintion of an HV polyline
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NHVPolylinePath.OnModelPointsReplaced">
            <summary>
            Overriden to recreate the segment types
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NHVPolylinePath.OnModelPointReplaced(System.Int32)">
            <summary>
            Overriden to orthogonalize the neighbours of the replaced point
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Diagram.NHVPolylinePath.OnModelPointInserted(System.Int32)">
            <summary>
            Called when the model point at the specified index has been inserted
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Diagram.NHVPolylinePath.OnModelPointRemoved(System.Int32)">
            <summary>
            Called when the model point at the specified index has been removed
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Diagram.NHVPolylinePath.ComputeSegmentType(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Computes the segment type of a segment defined by two points
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NHVPolylinePath.OrthogonalizeNeighbours(Nevron.GraphicsCore.NPointF[],Nevron.Diagram.HVSegmentType[],System.Int32)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="segmentTypes"></param>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Diagram.NHVPolylinePath.Orthogonalize(Nevron.GraphicsCore.NPointF[],Nevron.Diagram.HVSegmentType[])">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="segmentTypes"></param>
        </member>
        <member name="M:Nevron.Diagram.NHVPolylinePath.RecreateSegmentTypes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NHVPolylinePath.SegmentTypesXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NPolygonPath">
            <summary>
            The NPolygonPath class represents a polygon
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPolygonPath.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPolygonPath.#ctor(Nevron.GraphicsCore.NPointF[])">
            <summary>
            Creates a new polygon with the specified points
            </summary>
            <param name="points">points of the polygon</param>
        </member>
        <member name="P:Nevron.Diagram.NPolygonPath.MinPointsCount">
            <summary>
            Overriden to return 3
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPolygonPath.PathType">
            <summary>
            Overriden to return ClosedFigure
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPolygonPath.IsFlat">
            <summary>
            Overriden to return true
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPolygonPath.CreateShape">
            <summary>
            Creates a shape, which wraps a cloning of the primitive model
            </summary>
            <returns>shape instance on success, otherwise null</returns>
        </member>
        <member name="P:Nevron.Diagram.NPolygonPath.PathPoints">
            <summary>
            Obtains the path points representing this graphics path
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPolygonPath.CreateModelPath(Nevron.GraphicsCore.NPointF[])">
            <summary>
            Overriden to return a GraphicsPath containing a polygon defined with the specified points
            </summary>
            <param name="points">points of the polygon</param>
            <returns>GraphicsPath containing a polygon</returns>
        </member>
        <member name="T:Nevron.Diagram.NPolylinePath">
            <summary>
            The NPolylinePath class represents a polyline
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPolylinePath.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPolylinePath.#ctor(Nevron.GraphicsCore.NPointF[])">
            <summary>
            Creates a polyline with the specified points
            </summary>
            <param name="points">points of the polyline</param>
        </member>
        <member name="M:Nevron.Diagram.NPolylinePath.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to cashe a refernece to the bridge manager
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:Nevron.Diagram.NPolylinePath.MinPointsCount">
            <summary>
            Overriden to return 2
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPolylinePath.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <remarks>
            Overriden to invalidate the cashed bridgable paint info
            </remarks>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.NPolylinePath.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the node in the specified context
            </summary>
            <remarks>
            Overriden to paint the line with bridges
            </remarks>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.NPolylinePath.InvalidateBridges">
            <summary>
            Recreates the bridges of the node
            </summary>
            <returns>true if any bridges were created, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPolylinePath.GetBridgeableSegmentIterator">
            <summary>
            Obtains a bridgeable segment iterator for this bridgable node
            </summary>
            <returns>iterator</returns>
        </member>
        <member name="P:Nevron.Diagram.NPolylinePath.PathType">
            <summary>
            Overriden to return OpenFigure
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPolylinePath.IsFlat">
            <summary>
            Overriden to return true
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPolylinePath.ModelStartPoint">
            <summary>
            Gets/sets the model start point (in model coordinates)
            </summary>
            <remarks>
            Overriden to directly modify the model start point of the polyline
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NPolylinePath.ModelEndPoint">
            <summary>
            Controls the model end point (in model coordinates)
            </summary>
            <remarks>
            Overriden to directly modify the model end point of the polyline
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NPolylinePath.BridgeManager">
            <summary>
            Obtains a reference to the bridge manager
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPolylinePath.CornerRounding">
            <summary>
            Gets/sets the corner rounding of the path (in scene coordinates)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPolylinePath.Reverse">
            <summary>
            Reverses the model
            </summary>
            <remarks>
            Overriden to reverse the polyline points
            </remarks>
            <returns>true if reverse succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPolylinePath.GetStartPointDirection(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Gets the estimated direction of the specified start point to reach the specified end point
            </summary>
            <remarks>
            Overriden to return the point with index 1 if the polyline has more than two points
            </remarks>
            <param name="startPoint">proposed start point</param> 
            <param name="endPoint">proposed end point</param>
            <returns>direction for the start point</returns>
        </member>
        <member name="M:Nevron.Diagram.NPolylinePath.GetEndPointDirection(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Gets the estimated direction of the specified end point to reach the specified start point
            </summary>
            <remarks>
            Overriden to return the point with index PointsCount - 2 if the polyline has more than two points
            </remarks>
            <param name="startPoint">proposed start point</param> 
            <param name="endPoint">proposed end point</param>
            <returns>direction for the end point</returns>
        </member>
        <member name="M:Nevron.Diagram.NPolylinePath.CreateShape">
            <summary>
            Creates a shape, which wraps a cloning of the primitive model
            </summary>
            <returns>shape instance on success, otherwise null</returns>
        </member>
        <member name="P:Nevron.Diagram.NPolylinePath.PathPoints">
            <summary>
            Obtains the path points representing this graphics path
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPolylinePath.InvalidateSceneCashe">
            <summary>
            Invalidates the scene cashe
            </summary>
            <remarks>
            Overriden to invalidate the cashed bridgeable path info
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPolylinePath.CreateModelPath(Nevron.GraphicsCore.NPointF[])">
            <summary>
            Overriden to return a GraphicsPath containing a polyline defined with the specified points
            </summary>
            <param name="points">points of the polyline</param>
            <returns>GraphicsPath containing a polyline</returns>
        </member>
        <member name="P:Nevron.Diagram.NPolylinePath.CornerRoundingXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NPolyPathPrimitive">
            <summary>
            The NPolyPathPrimitive class serves as base class for all path primitives, which have a variable number of points.
            </summary>
            <remarks>
            It implements the INPolyPoints interface to indicate that you can add, remove, insert and merge points of this path.
            It also implements the INSegments interface to expose the segments from which the polypath is constructed.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.#ctor(Nevron.GraphicsCore.NPointF[])">
            <summary>
            Creates a polypath with the specified points
            </summary>
            <param name="points">points of the polypath</param>
        </member>
        <member name="P:Nevron.Diagram.NPolyPathPrimitive.Points">
            <summary>
            Gets/sets the node points
            </summary>
            <remarks>
            Overriden to provide a set implementation
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NPolyPathPrimitive.PointsCount">
            <summary>
            Obtains the count of the path control points
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.GetPointAt(System.Int32)">
            <summary>
            Gets the point at the specified index (in scene coordinates)
            </summary>
            <param name="index">point index</param>
            <returns>point at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.SetPointAt(System.Int32,Nevron.GraphicsCore.NPointF)">
            <summary>
            Sets the point at the specified index (in scene coordinates)
            </summary>
            <param name="index">point index</param>
            <param name="point">point to set</param>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <remarks>
            Overriden to convert the model points
            </remarks>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.NPolyPathPrimitive.MinPointsCount">
            <summary>
            Obtains the minimal allowed number of points
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.AddPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Adds a new point to the polypath
            </summary>
            <param name="point">point to add</param>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.InsertPoint(System.Int32,Nevron.GraphicsCore.NPointF)">
            <summary>
            Inserts a new point to the polypath at the specified index
            </summary>
            <param name="index">index to insert at</param>
            <param name="point">point to insert</param>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.RemovePointAt(System.Int32)">
            <summary>
            Removes the point at the specified index
            </summary>
            <param name="index">index of point to remove</param>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.MergePoints(System.Single)">
            <summary>
            Merges (removes) all points, whose oriented distance from the line formed 
            by its neighbours is smaller than the specified.
            </summary>
            <param name="distance">oriented distance below which the point is merged (in scene coordinates)</param>
        </member>
        <member name="P:Nevron.Diagram.NPolyPathPrimitive.SegmentsCount">
            <summary>
            Obtains the count of segments
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.GetSegmentMidPointInfo(System.Int32)">
            <summary>
            Obtains information about the segment mid point
            </summary>
            <param name="segmentIndex">index of segment</param> 
            <returns>information about the segment mid point</returns>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.MoveSegment(System.Int32,Nevron.GraphicsCore.NPointF)">
            <summary>
            Moves the segment to the specified location
            </summary>
            <param name="segmentIndex">segment index</param>
            <param name="location">location to move to</param>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.SplitSegment(System.Int32)">
            <summary>
            Splits the specified segment and returns information about the point, which can be subsequently translated
            </summary>
            <param name="segmentIndex">segment index</param>
            <returns>information about the point which can be translated</returns>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.ToLineSegments">
            <summary>
            Get the line segments forming this node.
            </summary>
            <returns>An array of line segments.</returns>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.ScaleModel(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
            <summary>
            Overriden to scale the model definition of polypath
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.DefineModel(Nevron.GraphicsCore.NPointF[])">
            <summary>
            Defines the polypath with the specified points
            </summary>
            <param name="points">points (in model coordinates)</param>
            <returns>true if definition succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.CreateModelPath">
            <summary>
            Overriden to create a graphics path from the polypath model
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.CreateModelPath(Nevron.GraphicsCore.NPointF[])">
            <summary>
            Abstract method returning a GraphicsPath constructed by the specified points
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.RecordModelDefinition">
            <summary>
            Overriden to record the state of the polypath model
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.OnReplacingModelPoints(Nevron.GraphicsCore.NPointF[])">
            <summary>
            Called when the model points are going to be replaced with the specified set of points
            </summary>
            <param name="newPoints">new model points</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.OnReplacingModelPoint(System.Int32,Nevron.GraphicsCore.NPointF)">
            <summary>
            Called when the model point at the specified index is going to the replaced
            </summary>
            <param name="index"></param>
            <param name="point"></param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.OnInsertingModelPoint(System.Int32,Nevron.GraphicsCore.NPointF)">
            <summary>
            Called when the specified point is going to be inserted at the specified index
            </summary>
            <param name="index"></param>
            <param name="point"></param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.OnRemovingModelPoint(System.Int32)">
            <summary>
            Called when the point at the specified index is going to be removed
            </summary>
            <param name="index"></param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.OnModelPointsReplaced">
            <summary>
            Called when the model point have been replaced
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.OnModelPointReplaced(System.Int32)">
            <summary>
            Called when the model point at the specified index has been replaced
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.OnModelPointInserted(System.Int32)">
            <summary>
            Called when the model point at the specified index has been inserted
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathPrimitive.OnModelPointRemoved(System.Int32)">
            <summary>
            Called when the model point at the specified index has been removed
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Nevron.Diagram.NPolyPathPrimitive.ModelPointsXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NDecorator">
            <summary>
            The NDecorator class represents an attribute, which can be attached to any shape.
            Decorators are used to decorate a shape with a specific effect (like border, background, title etc.)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:Nevron.Diagram.NDecorator.Abilities">
            <summary>
            Gets the element abilities 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.Invalidate">
            <summary>
            Invalidates the decorator
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDecorator.DirtyInflate">
            <summary>
            Obtains the dirty inflate of the node in world coordinates
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.HitTest(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the decorator by point
            </summary>
            <param name="point"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.HitTest(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the decorator by rectangle
            </summary>
            <param name="rectangle"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.OnMouseEnter(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the mouse entered the model
            </summary>
            <remarks>
            This implementation will fire the NodeMouseEnter event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.OnMouseMove(Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Called when the mouse moves in the model
            </summary>
            <remarks>
            The implementation will first request cursor and tooltip using the composed model interactivity style.
            It will then fire the NodeMouseMove event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.OnMouseHover(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the mouse hovers in the model
            </summary>
            <remarks>
            The implementation will fire the NodeMouseHover event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.OnMouseDown(Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Called when a mouse button is down in the model
            </summary>
            <remarks>
            The implementation will fire the NodeMouseDown event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.OnMouseUp(Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Called when a mouse button is up in the model
            </summary>
            <remarks>
            The implementation will fire the NodeMouseUp event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.OnMouseWheel(Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Called when a mouse wheel was moved in the model
            </summary>
            <remarks>
            The implementation will fire the NodeMouseWheel event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.OnMouseLeave(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the mouse leaves the model
            </summary>
            <remarks>
            The implementation will fire the NodeMouseLeave event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.OnClick(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the user clicked on the model
            </summary>
            <remarks>
            The implementation will fire the NodeClick event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.OnDoubleClick(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the user double clicked on the model
            </summary>
            <remarks>
            The implementation will fire the NodeDoubleClick event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.OnKeyDown(Nevron.Diagram.NKeyEventArgs)">
            <summary>
            Handles the key down event
            </summary>
            <remarks>
            This method is called by views when this model is the focused model. 
            The implementation will fire the NodeKeyDown event for this model. 
            If it was not handled it will bubble the event to the previous INKeyboardEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.OnKeyPress(Nevron.Diagram.NKeyPressEventArgs)">
            <summary>
            Handles the key press event
            </summary>
            <remarks>
            This method is called by views when this model is the focused model. 
            The implementation will fire the NodeKeyPress event for this model. 
            If it was not handled it will bubble the event to the previous INKeyboardEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.OnKeyUp(Nevron.Diagram.NKeyEventArgs)">
            <summary>
            Handles the key up event
            </summary>
            <remarks>
            This method is called by views when this model is the focused model. 
            The implementation will fire the NodeKeyUp event for this model. 
            If it was not handled it will bubble the event to the previous INKeyboardEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is an input key
            </summary>
            <remarks>
            This method is called by views when this model is the focused model. 
            The implementation will first invoke the QueryIsInputKey method of the document for this model. 
            If the key is not an input key for this model it will call the QueryIsInputKey method again passing as argument the document itself. 
            </remarks>
            <param name="keyData">key</param>
            <returns>true if the key is an input key, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.IsInputChar(System.Char)">
            <summary>
            Determines whether the specified character is an input charecter
            </summary>
            <remarks>
            This method is called by views when this model is the focused model. 
            The implementation will first invoke the QueryIsInputChar method of the document for this model. 
            If the key is not an input key for this model it will call the QueryIsInputChar method again passing as argument the document itself. 
            </remarks>
            <param name="charCode">character</param>
            <returns>true if the character is an input character, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.OnDragEnter(Nevron.Diagram.NDragEventArgs)">
            <summary>
            Called when a dragged object entered the model
            </summary>
            <remarks>
            The implementation will fire the NodeDragEnter event for this model.
            If it was not handled it will bubble the event to the previous INDragDropEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.OnDragDrop(Nevron.Diagram.NDragEventArgs)">
            <summary>
            Called when a dragged object is dropped in the model
            </summary>
            <remarks>
            The implementation will fire the NodeDragDrop event for this model.
            If it was not handled it will bubble the event to the previous INDragDropEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.OnDragLeave(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when a dragged object leaves the model
            </summary>
            <remarks>
            The implementation will fire the NodeDragLeave event for this model.
            If it was not handled it will bubble the event to the previous INDragDropEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.OnDragOver(Nevron.Diagram.NDragEventArgs)">
            <summary>
            Called when a dragged object is moved over the model
            </summary>
            <remarks>
            The implementation will fire the NodeDragOver event for this model.
            If it was not handled it will bubble the event to the previous INDragDropEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.PaintForeground(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the decorator foreground
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.PaintBackground(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the decorator background
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the guideline can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the node can be painted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.MeasureDirtyInflate(Nevron.GraphicsCore.NLengthConverter)">
            <summary>
            Measures the dirty inflate of the decorator
            </summary>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDecorator.GetBounds">
            <summary>
            Gets the decorator bounds in scene coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.NDecorator.Shape">
            <summary>
            Obtains a reference to the shape hosting the decorator
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDecorator.ShapeHitTestable">
            <summary>
            Gets/sets whether the content rendered by the decorator,
            should be included in the shape hit test - e.g. whether the shape is considered hit when the decorator is hit
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NFrameDecoratorBackground">
            <summary>
            The NFrameDecoratorBackground class is a simple styleable element,
            which is used to compose the styling needed for a frame decorator background
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecoratorBackground.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NFrameDecoratorBackground.Visible">
            <summary>
            Controls the visibility of the background
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NFrameDecoratorBackground.Invalidate">
            <summary>
            Invalidates the projection of the object on the drawing surface
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NToggleDecoratorBackground">
            <summary>
            The NToggleDecoratorBackground class is a simple styleable element,
            which is used to compose the styling needed for a toggle decorator background
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecoratorBackground.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecoratorBackground.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.NToggleDecoratorBackground.Visible">
            <summary>
            Controls the visibility of the background
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NToggleDecoratorBackground.Shape">
            <summary>
            Controls the shape of the background
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NToggleDecoratorBackground.CornerRounding">
            <summary>
            Controls the rounding of the background corners, in case the Shape property is set to RoundedRectangle
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecoratorBackground.Invalidate">
            <summary>
            Invalidates the projection of the object on the drawing surface
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NShowHideSubtreeDecorator">
            <summary>
            The NShowHideSubtreeDecorator is used to display a show/hide check box,
            which toggles the visible state of the shape successor shapes and all the shapes, which connect them 
            (e.g. the shape subtree together with the linking connectors)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShowHideSubtreeDecorator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShowHideSubtreeDecorator.ShowChildrenOnly">
            <summary>
            Gets/sets whether the decorator must show only the destination shapes. If set to false the entire subtree is shown.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShowHideSubtreeDecorator.GetState">
            <summary>
            Overriden to return true if at least one destination shape is hidden
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NShowHideSubtreeDecorator.ToggleState">
            <summary>
            Overriden to show/hide the successor shapes of a shape, together with the connectors 
            that connect the shape with its successors
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NToggleDecorator">
            <summary>
            The NToggleDecorator is used to display a toggle button,
            which toggles a specific aspect of the shape (like expanded/collapsed or show/hide subtree).
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to update the references of all contained elements
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.OnMouseDown(Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Called when a mouse button is down in the model
            </summary>
            <remarks>
            The implementation will fire the NodeMouseDown event for this model.
            If it was not handled it will bubble the event to the previous INMouseEventHandler implementor in the scene hierachy.
            </remarks>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.HitTest(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the decorator by point
            </summary>
            <param name="point"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.HitTest(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the decorator by rectangle
            </summary>
            <param name="rectangle"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.GetEnumerator">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.GetChildByName(System.String)">
            <summary>
            Gets the first child element with the specified name
            </summary>
            <param name="name">child name</param>
            <returns>child diagram element</returns>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.GetChildByName(System.String,System.Int32)">
            <summary>
            Gets the first child element with the specified name
            </summary>
            <param name="name">child name</param>
            <param name="startIndex">index to start from</param>
            <returns>child diagram element</returns>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.GetChildFromId(System.Int32)">
            <summary>
            Obtains a child element by its id
            </summary>
            <param name="id">id of the node</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.GetChildFromUniqueId(System.Guid)">
            <summary>
            Obtains a child element by its unique id
            </summary>
            <param name="uid">unique id of the element</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.GetDescendantFromId(System.Int32,System.Int32)">
            <summary>
            Obtains a element node by its id
            </summary>
            <param name="id">id of the element</param>
            <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.GetDescendantFromUniqueId(System.Guid,System.Int32)">
            <summary>
            Obtains a child element by its unique id
            </summary>
            <param name="uid">unique id of the node</param>
            <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.IndexOfChild(Nevron.Dom.INNode)">
            <summary>
            Gets the index of the specified node in the container
            </summary>
            <param name="node">the node to locate</param>
            <returns>index of the node</returns>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.GetChildAt(System.Int32)">
            <summary>
            Gets the child node at the specified index
            </summary>
            <param name="index">index</param>
            <returns>node at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.SetChildIndex(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Sets a new index of the specified child node
            </summary>
            <param name="node">node whose index to change</param>
            <param name="index">new index</param>
            <returns>previous node index</returns>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.IsChild(Nevron.Dom.INNode)">
            <summary>
            Determines whether the specified node is a child node for this container
            </summary>
            <param name="node">node to check</param>
            <returns>true if it is a child node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.ChildrenCount(Nevron.Filters.INFilter)">
            <summary>
            Returns the number of child nodes which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <returns>children count, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.Children(Nevron.Filters.INFilter)">
            <summary>
            Obtains the child nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.AccumulateChildren(Nevron.Filters.INFilter,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the children contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="list">list to which to append the child nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.IsDescendant(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Queries whether the specified node is a descendant of this node
            </summary>
            <param name="node">node to look for</param>
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>true if the node is a descendant node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.DescendantsCount(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Returns the number of descendant nodes, which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>count of descendants, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.Descendants(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Obtains the descentant nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.AccumulateDescendants(Nevron.Filters.INFilter,System.Int32,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the descendants contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <param name="list">list to which to append the descendant nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.GetEnumerator(Nevron.Filters.INFilter)">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.PaintForeground(Nevron.Diagram.NPaintContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Nevron.Diagram.NToggleDecorator.Size">
            <summary>
            Gets/sets the size of the toggle check
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NToggleDecorator.Offset">
            <summary>
            Gets/sets the offset, by which the toggle check is displayed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NToggleDecorator.Alignment">
            <summary>
            Gets/sets the alignment of the toggle check relative to shape model bounds
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NToggleDecorator.HitTestBackground">
            <summary>
            Gets/sets whether the decorator is considered hit, if its background is hit
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NToggleDecorator.HitTestSymbol">
            <summary>
            Gets/sets whether the decorator is considered hit, if its symbol is hit
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NToggleDecorator.Symbol">
            <summary>
            Gets the toggle symbol
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NToggleDecorator.Background">
            <summary>
            Gets the toggle background
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.MeasureDirtyInflate(Nevron.GraphicsCore.NLengthConverter)">
            <summary>
            Measures the dirty inflate of the decorator
            </summary>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.GetBounds">
            <summary>
            Gets the decorator bounds in scene coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.GetState">
            <summary>
            Gets the state of the toggle decorator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NToggleDecorator.ToggleState">
            <summary>
            Toggles the state of the decorator
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NToggleDecorator.Nodes">
            <summary>
            Used by XML serialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NBoundsLabel">
            <summary>
            The NBoundsLabel class represents a label, which can be anchored to the margined scene bounds of a model
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBoundsLabel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBoundsLabel.#ctor(System.String,System.Guid,Nevron.Diagram.NMargins)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text">text</param>
            <param name="anchorUniqueId">unique unique id of the anchor node</param>
            <param name="margins">margins in percents</param>
        </member>
        <member name="M:Nevron.Diagram.NBoundsLabel.GetWorldTextPaintInfo(System.String,Nevron.Diagram.NTextPaintInfo@)">
            <summary>
            Obtains text paint info in world coordinates
            </summary>
            <param name="text">text for which to obtain paint info</param> 
            <param name="info">result paint info</param>
        </member>
        <member name="P:Nevron.Diagram.NBoundsLabel.Margins">
            <summary>
            Gets/sets the label margins (specified in percents)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NBoundsLabel.Mode">
            <summary>
            Specifies the mode in which the text is displayed
            </summary>
            <remarks>
            By default set to Wrap
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NBoundsLabel.ShouldSerializeMargins">
            <summary>
            Determines whether the Margins property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NLabel">
            <summary>
            The NLabel abstract class serves as base class for all types of labels, which can be attached to shapes 
            </summary>
            <remarks>
            Labels can be anchored to a specific aspect of the shape to which they belong or to an aggregated model, which the shape contains.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NLabel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLabel.#ctor(System.String,System.Guid)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text"></param>
            <param name="anchorUniqueId"></param>
        </member>
        <member name="M:Nevron.Diagram.NLabel.ReplaceForeignUniqueIds(System.Collections.Hashtable,System.Boolean)">
            <summary>
            Replaces any foreign Ids (references to other nodes)
            </summary>
            <remarks>
            Overriden to replace the AnchorUniqueId
            </remarks>
            <param name="mapUIds">map of ids which is used to find the new foreign id value</param>
            <param name="makeNotFoundEmpty">indicates whether the not found foreign ids must be set to Guid.Empty</param>
        </member>
        <member name="P:Nevron.Diagram.NLabel.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLabel.Permissions">
            <summary>
            Gets the allowed element abilities (e.g its permissions)
            </summary>
            <remarks>
            Overriden to drop the InplaceEdit permission if the shape 
            InplaceEdit permission is also dropped.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NLabel.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.NLabel.OnStateChangingFromHistory(System.String)">
            <summary>
            Called by history when the object state is about to be changed from history
            </summary>
            <param name="hint">hint used when the state was recorded</param>
        </member>
        <member name="M:Nevron.Diagram.NLabel.OnStateChangedFromHistory(System.String)">
            <summary>
            Called by history when the object state has changed from history
            </summary>
            <param name="hint">hint used when the state was recorded</param>
        </member>
        <member name="M:Nevron.Diagram.NLabel.Invalidate">
            <summary>
            Invalidates the node
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLabel.GetFilterForReferenceProperty(System.String)">
            <summary>
            Provides a filter for the specified id property
            </summary>
            <remarks>
            For the AnchorUniqueId property this implementation will return the NFilters.TypeNModel filter
            </remarks>
            <param name="property">property exposing id, for which to obtain filter</param>
            <returns>filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NLabel.GetRootForReferenceProperty(System.String)">
            <summary>
            Obtains the root, from which to search for the referenced node
            </summary>
            <remarks>
            For the AnchorUniqueId property this implementation returns the shape to which label belongs
            </remarks> 
            <param name="property">property exposing id</param>
            <returns>root for the search</returns>
        </member>
        <member name="P:Nevron.Diagram.NLabel.Visible">
            <summary>
            Controls the visibility of the label
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLabel.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the node in the specified context
            </summary>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.NLabel.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the node can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the node can be painted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NLabel.HitTest(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the node by point with the specified context
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NLabel.HitTest(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the node by rectangle with the specified context
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NLabel.Text">
            <summary>
            Gets/sets the node text
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLabel.GetWorldTextPaintInfo(System.String,Nevron.Diagram.NTextPaintInfo@)">
            <summary>
            Obtains text paint info in world coordinates
            </summary>
            <param name="text">text for which to obtain paint info</param> 
            <param name="info">result paint info</param>
            <returns>true if paint info was successfully obtained, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NLabel.CreateInplaceEditControl">
            <summary>
            Creates an inplace edit control. This implementation creates an inplace edit text box
            </summary>
            <returns>control which must implement the INInplaceEditControl interface</returns>
        </member>
        <member name="P:Nevron.Diagram.NLabel.DirtyInflate">
            <summary>
            Obtains the dirty inflate of the node in world coordinates
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLabel.AnchorUniqueId">
            <summary>
            Specifies the id of the model to which this label is anchored
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NLabel.Shape">
            <summary>
            Obtains a reference to the shape hosting the label
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLabel.GetAnchorModel(System.Guid)">
            <summary>
            Obtains the model to which the label is anchored
            </summary>
            <param name="anchorUId">uid of the model</param>
            <returns>reference to the anchor model</returns>
        </member>
        <member name="M:Nevron.Diagram.NLabel.GetDesiredSize(Nevron.GraphicsCore.NSizeF@)">
            <summary>
            Gets the desired size of the label in scene coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLabel.MeasureLabelDirtyInflate(Nevron.GraphicsCore.NLengthConverter,Nevron.GraphicsCore.NTextStyle)">
            <summary>
            Measures the dirty inflate of the label if it is going to be displayed with the specified text style
            </summary>
            <param name="lengthConverter"></param>
            <param name="textStyle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLabel.MustHitTest(Nevron.Diagram.NHitTestContext)">
            <summary>
            Determines whether the label must be hit tested. 
            Typically a label does not need to be hit tested, if it is not visible or the shape to which it belongs is collapsed.
            </summary>
            <param name="context">hit test context</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NLogicalLineLabel">
            <summary>
            The NLogicalLineLabel class represents a label, which can be anchored to percent
            position along the logical line of a model.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLogicalLineLabel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLogicalLineLabel.#ctor(System.String,System.Guid,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text">text</param>
            <param name="anchorUniqueId">unique unique id of the anchor node</param>
            <param name="percentPosition">position along the logical line (in percents)</param>
            <param name="useLineOrientation">whether to use the line orientation at the specified percent</param>
            <param name="allowDownwardOrientation">whether downward orientation is allowed</param>
        </member>
        <member name="M:Nevron.Diagram.NLogicalLineLabel.GetFilterForReferenceProperty(System.String)">
            <summary>
            Provides a filter for the specified id property
            </summary>
            <remarks>
            For the AnchorUniqueId property this implementation will return the NFilters.TypeNModel filter
            </remarks>
            <param name="property">property exposing id, for which to obtain filter</param>
            <returns>filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NLogicalLineLabel.GetWorldTextPaintInfo(System.String,Nevron.Diagram.NTextPaintInfo@)">
            <summary>
            Obtains text paint info in world coordinates
            </summary>
            <param name="text">text for which to obtain paint info</param> 
            <param name="info">result paint info</param>
            <returns>true if paint info was successfully obtained, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NLogicalLineLabel.PercentPosition">
            <summary>
            Gets/sets the percent position along the logical line at which the label must be anchored
            </summary>
            <remarks>
            By default set to 50 (the middle of the logical line)
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NLogicalLineLabel.UseLineOrientation">
            <summary>
            Specifies whether the label must use the orientation of the logical line at the specified percent
            </summary>
            <remarks>
            By default set to false
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NLogicalLineLabel.AllowDownwardOrientation">
            <summary>
            In case the UseLineOrientation property is set to true, indicates whether downward text orientation is allowed
            </summary>
            <remarks>
            By default set to false.
            </remarks>
        </member>
        <member name="T:Nevron.Diagram.NRotatedBoundsLabel">
            <summary>
            The NRotatedBoundsLabel class represents a bounds label, which can be anchored to the margined rotated bounds of the model bounds
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NRotatedBoundsLabel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NRotatedBoundsLabel.#ctor(System.String,System.Guid,Nevron.Diagram.NMargins)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text">text</param>
            <param name="anchorUniqueId">unique unique id of the anchor node</param>
            <param name="margins">margins in percents</param>
        </member>
        <member name="M:Nevron.Diagram.NRotatedBoundsLabel.GetWorldTextPaintInfo(System.String,Nevron.Diagram.NTextPaintInfo@)">
            <summary>
            Obtains text paint info in world coordinates
            </summary>
            <param name="text">text for which to obtain paint info</param> 
            <param name="info">result paint info</param>
        </member>
        <member name="P:Nevron.Diagram.NRotatedBoundsLabel.AllowDownwardOrientation">
            <summary>
            Specifies whether downward orientation of text is allowed. 
            If set to false the label will automatically flip the text orientation to keep its run vector pointing from left to right.
            </summary>
            <remarks>
            By default set to false.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NRotatedBoundsLabel.GetDesiredSize(Nevron.GraphicsCore.NSizeF@)">
            <summary>
            Overriden to measure the text string in scene units and apply the current margins to it
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NSegmentLabel">
            <summary>
            The NSegmentLabel class represents a label, 
            which can be anchored to the percent position along the segment of a model
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NSegmentLabel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NSegmentLabel.#ctor(System.String,System.Guid,Nevron.Diagram.SegmentIndexMode,System.Int32,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Initializer constuctor
            </summary>
            <param name="text">text</param>
            <param name="anchorUniqueId">unique unique id of the anchor node</param>
            <param name="segmentIndexMode">mode in which the segment is determined</param> 
            <param name="customSegmentIndex">custom segment index, if segmentIndexMode is Custom</param> 
            <param name="percentPosition">position along the segment line (in percents)</param>
            <param name="useSegmentOrientation">whether to use the segment orientation at the specified percent</param>
            <param name="allowDownwardOrientation">whether downward orientation is allowed</param>
        </member>
        <member name="M:Nevron.Diagram.NSegmentLabel.GetFilterForReferenceProperty(System.String)">
            <summary>
            Provides a filter for the specified id property
            </summary>
            <remarks>
            Overriden to return (typeof(NModel) and typeof(INSegments)) for the AnchorUniqueId property
            </remarks>
            <param name="property">property exposing id, for which to obtain filter</param>
            <returns>filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NSegmentLabel.GetWorldTextPaintInfo(System.String,Nevron.Diagram.NTextPaintInfo@)">
            <summary>
            Obtains text paint info in world coordinates
            </summary>
            <param name="text">text for which to obtain paint info</param> 
            <param name="info">result paint info</param>
            <returns>true if paint info was successfully obtained, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NSegmentLabel.PercentPosition">
            <summary>
            Gets/sets the percent position along the line segment at which the label must be anchored
            </summary>
            <remarks>
            By default set to 50 (the middle of the line segment line)
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NSegmentLabel.SegmentIndexMode">
            <summary>
            Gets/sets the mode in which the segment index is determined
            </summary>
            <remarks>
            By default set to Custom
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NSegmentLabel.CustomSegmentIndex">
            <summary>
            Gets/sets the segment index, when the SegmentIndexMode property is set to Custom
            </summary>
            <remarks>
            By default set to 0
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NSegmentLabel.UseSegmentOrientation">
            <summary>
            Specifies whether the label must use the orientation of the line segment
            </summary>
            <remarks>
            By default set to false
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NSegmentLabel.AllowDownwardOrientation">
            <summary>
            In case the UseSegmentOrientation property is set to true, indicates whether downward text orientation is allowed
            </summary>
            <remarks>
            By default set to false.
            </remarks>
        </member>
        <member name="T:Nevron.Diagram.NCompositeShape">
            <summary>
            The NCompositeShape class represents a shape, which aggregates one or more primitive models
            </summary>
            <remarks>
            The aggregated primitives can be obtained from the Primitives property
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NCompositeShape.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            Creates a 2D shape with composite geometry
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NCompositeShape.Primitives">
            <summary>
            Obtains a reference to the primitives of the shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NCompositeShape.GetAggregatedModels">
            <summary>
            Overriden to return the primitives
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NCompositeShape.GetDefaultShapeElements">
            <summary>
            Obtains the mask of the shape elements, which must be created by default
            </summary>
            <remarks>
            This implementation returns the ShapeElementsMask.Labels
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NCompositeShape.CreateDefaultLabels">
            <summary>
            Overriden to create a rotated bounds label, which is initially the default label
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NCompositeShape.UpdateElementReferences">
            <summary>
            Updates any cashed references of shape elements
            </summary>
            <remarks>
            Overriden to cashe a reference to the primitives collection
            </remarks>
        </member>
        <member name="T:Nevron.Diagram.NGroup">
            <summary>
            The NGroup class represents a composite shape, which can also aggregate one or more shapes
            </summary>
            <remarks>
            The aggregated shapes can be obtained from the Shapes property. 
            It is possible to select and delete all the shapes contained in a group. 
            When the group has no shapes it is considered empty. 
            You can prevent the group from becoming empty, by setting the CanBeEmpty property to false. 
            You can instruct the group to automatically destroy itself, if it becomes empty by setting the AutoDestroy property to true.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NGroup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NGroup.Abilities">
            <summary>
            Gets the element abilities 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NGroup.CanBeEmpty">
            <summary>
            Gets/sets whether the group can become empty
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NGroup.AutoDestroy">
            <summary>
            Gets/sets whether the group must be automatically destroyed when it becomes empty
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NGroup.Shapes">
            <summary>
            Gets the shapes contained in the group
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NGroup.ShouldSerializeCanBeEmpty">
            <summary>
            Determines whether the CanBeEmpty property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NGroup.ShouldSerializeAutoDestroy">
            <summary>
            Determines whether the AutoDestroy property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NGroup.Decompose">
            <summary>
            Decomposes the shape by creating a shape for each of the primitive models, which the shape aggregates
            </summary>
            <remarks>
            Overriden to delegate the call to the contained shapes
            </remarks>
            <returns>list of shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.NGroup.Compose(Nevron.Diagram.NCompositeShape)">
            <summary>
            Appends clonings of the primitives contained in this shape to the specified composed shape
            </summary>
            <remarks>
            Overriden to delegate the call to the contained shapes
            </remarks>
            <param name="compositeShape">composite shape to which to append the cloned primitives</param>
        </member>
        <member name="M:Nevron.Diagram.NGroup.OnAggregatedModelRemoved(Nevron.Diagram.NModel)">
            <summary>
            Called when an aggreagated model has been removed from the aggregate
            </summary>
            <remarks>
            Overriden to destroy the group if the last shape was removed
            </remarks>
            <param name="model"></param>
        </member>
        <member name="M:Nevron.Diagram.NGroup.CanConnectPoints(Nevron.Diagram.NConnectionPoint,Nevron.Diagram.NConnectionPoint)">
            <summary>
            Called by own connection points to acknowledge the connection with a foreign point
            </summary>
            <remarks>
            Overriden to return false, if the foreign point is a plug or an outward port 
            and the foreign point shape is a descendant of this group.
            </remarks>
            <param name="foreignPoint">foreign point</param>
            <param name="ownPoint">own point</param>
            <returns>true if the connection is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NGroup.GetDefaultPropertyValue(Nevron.Diagram.DiagramElementProperties)">
            <summary>
            Obtains the default value for the specified property
            </summary>
            <param name="property">property</param>
            <returns>default value</returns>
        </member>
        <member name="M:Nevron.Diagram.NGroup.GetAggregatedModels">
            <summary>
            Overriden to return the shapes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NGroup.UpdateElementReferences">
            <summary>
            Updates any cashed references of shape elements
            </summary>
            <remarks>
            Overriden to cashe a reference to the shapes collection
            </remarks>
        </member>
        <member name="T:Nevron.Diagram.NShape">
            <summary>
            The NShape class is an aggregate model, which represents an object from the real world, concept or abstraction
            </summary>
            <remarks>
            Shapes are the primary diagram building blocks. Shapes can be connected with each other and form complex relationships.
            There are two types of shapes:
            <list type="bullet">
            <item>
            	<term>1D Shapes</term>
            	<description>
            	These are shapes, which are treated as lines and are usually used to connect 2D shapes.
            	1D shapes have start and end plugs, which can be connected to the ports of other shapes.
            	The start and end plugs are anchored to the shape start and end points.
            	In the context of graphs, 1D Shapes are treated as graph edges (if the GraphPart property is set to true).
            	In the context of routing, 1D Shapes are not treated as obstacles. 
            	Only the bridgeable paths of bridgeable 1D shapes can display bridges.
            	</description>
            </item>	
            <item>
            	<term>2D Shapes</term>
            	<description>
            	These are shape which are treated as boxes. 2D shapes do not have plugs. 
            	In the context of graphs, 2D Shapes are treated as graph vertices (if the GraphPart property is set to true).
            	In the context of routing, 2D Shapes are treated as obstacles (the RouteObstacleType property is taken into account). 
            	Bridgeable paths inside 2D shapes do not display bridges.
            	</description>
            </item>	
            </list>	 
            Whether the shape is 1D or 2D is controlled by the ShapeType property. The shape type influences the default shape behavior.
            <para>
            Each type of shape can have the following optional elements:
            </para>
            <list type="bullet">
            <item>
            	<term>Labels</term>
            	<description>
            	Labels are texts, which can be anchored to different aspects of the shape or to the models it aggregates. 
            	The shape labels are accessible from the Labels property.
            	</description>
            </item>	
            <item>
            	<term>Control points</term>
            	<description>
            	Control points are used for the interactive modification of the shape geometry. 
            	The shape control points are accessible from the ControlPoints property.
            	</description>
            </item>	
            <item>
            	<term>Ports</term>
            	<description>
            	Ports are connection points to which multiple plugs can be connected. 
            	The shape ports are accessible from the Ports property.
            	</description>
            </item>
            <item>
            	<term>Decorators</term>
            	<description>
            	Decorators are elements which decorate the shape with different effects (like borders, expand collapse etc).
            	The decorators are accessible from the Decorators property.
            	</description>
            </item>
            </list>	 
            By design a shape will only create the elements it needs (e.g. some shapes may not have Labels, Control Points, Ports and/or Decorators).
            You can programmatically create and destroy the optional shape elements with the help of the CreateShapeElements and DestroyShapeElements methods.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NShape.#ctor(Nevron.Diagram.INDiagramElement)">
            <summary>
            Initializer constructor
            </summary>
            <param name="content">the shape primary content</param>
        </member>
        <member name="M:Nevron.Diagram.NShape.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to cashe references to the group hosting the shape, as well as to cashe references to the shape elements
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.NShape.OnStateChangedFromHistory(System.String)">
            <summary>
            Called by history when the object state has changed from history
            </summary>
            <param name="hint">hint used when the state was recorded</param>
        </member>
        <member name="P:Nevron.Diagram.NShape.Attributes">
            <summary>
            Gets the list of child attributes of this container
            </summary>
            <remarks>
            Overriden to append the layout data attribute
            </remarks>
            <returns>attributes of the node</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified local attribute
            </summary>
            <remarks>
            This implementation will give names to the Style and Permissions attributes
            </remarks>
            <param name="attribute">local attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <remarks>
            Overriden to convert the layout data attribute
            </remarks>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.NShape.OnAncestorTransformChanged(Nevron.Dom.INNode)">
            <summary>
            Called when the transformaiton of the specified ancestor has changed
            </summary>
            <remarks>
            Overriden to update the dependent shapes
            </remarks>
            <param name="ancestor">ancestor whose transformation has changed</param>
        </member>
        <member name="P:Nevron.Diagram.NShape.Abilities">
            <summary>
            Gets the element abilities 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.Permissions">
            <summary>
            Gets the allowed element abilities (e.g its permissions)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShape.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.NShape.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the node can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the node can be painted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.HitTest(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the node by point with the specified context
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.HitTest(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the node by rectangle with the specified context
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.OnAncestorCollapseChanging(Nevron.Dom.INNode,System.Boolean)">
            <summary>
            Called when the specified ancestor is changing its collapsed/expanded state
            </summary>
            <param name="ancestor">ancestor whose collapsed/expanded state is changing</param>
            <param name="collapsing">true if the ancestor is collapsing, false if it is expanding</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.OnAncestorCollapseChanged(Nevron.Dom.INNode)">
            <summary>
            Called when the specified ancestor collapsed/expanded state has changed
            </summary>
            <param name="ancestor">ancestor whose collapsed/expanded state has changed</param>
        </member>
        <member name="M:Nevron.Diagram.NShape.CreateInplaceEditControl">
            <summary>
            Creates an inplace edit control. This implementation simply delegates the call to the default label
            </summary>
            <returns>control which must implement the INInplaceEditControl interface</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.AccumulateTranslationSlaves(Nevron.Dom.NNodeList,System.Collections.Hashtable,System.Boolean)">
            <summary>
            Accumulates the nodes, which should be translated when this master is translated
            </summary>
            <param name="nodes">node list in which to accumulate the slaves</param>
            <param name="visited">hash table of already visisted masters</param> 
            <param name="directOnly">whether to accumulate only direct or to drill down</param>
        </member>
        <member name="M:Nevron.Diagram.NShape.Nevron#Diagram#INDiagramElementComposite#EnumInstantiatableTypes">
            <summary>
            Enumerates the known types, which can be instantiated and inserted to this composite at runtime
            </summary>
            <returns>types of the nodes which can be instanciated and inserted to this composite at runtime</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.Nevron#Diagram#INDiagramElementComposite#QueryNextName(Nevron.Diagram.INDiagramElement)">
            <summary>
            Queries for the next unique name, which will be assigned to the specified element if it is inserted to this composite
            </summary>
            <param name="vpdE">element for which to obtain unique name</param>
            <returns>unique name</returns>
        </member>
        <member name="P:Nevron.Diagram.NShape.AutoGenerateUniqueNames">
            <summary>
            Gets/sets the whether the composite must automatically generate unique names for newly inserted nodes.
            Set this property to false if a large number of nodes is about to be inserted in the composite
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShape.Nevron#Dom#INNodeComposite#AddChild(Nevron.Dom.INNode)">
            <summary>
            Adds a child node
            </summary>
            <param name="WpdE">node to add</param>
        </member>
        <member name="M:Nevron.Diagram.NShape.Nevron#Dom#INNodeComposite#InsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Inserts a child node at the specified index
            </summary>
            <param name="xpdE">index at which to insert the child node</param>
            <param name="YpdE">node to insert</param>
        </member>
        <member name="M:Nevron.Diagram.NShape.Nevron#Dom#INNodeComposite#CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Queries whether the specified node can be inserted at the specified index
            </summary>
            <param name="AQdE">index at which the child node will be inserted</param>
            <param name="bQdE">child node to insert</param>
            <returns>true if the node can be inserted at the specified index, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.Nevron#Dom#INNodeComposite#RemoveChild(Nevron.Dom.INNode)">
            <summary>
            Removes the specified child node from the container children
            </summary>
            <param name="CQdE">child node to remove</param>
        </member>
        <member name="M:Nevron.Diagram.NShape.Nevron#Dom#INNodeComposite#RemoveChildAt(System.Int32)">
            <summary>
            Removes the child node at the specified index
            </summary>
            <param name="dQdE">index of child node to remove</param>
        </member>
        <member name="M:Nevron.Diagram.NShape.Nevron#Dom#INNodeComposite#RemoveAllChildren">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShape.Nevron#Dom#INNodeComposite#CanRemoveChild(Nevron.Dom.INNode)">
            <summary>
            Queries whether the specified child node can be removed
            </summary>
            <param name="EQdE">child node to remove</param>
            <returns>true if the node can be removed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.CreateTrackers">
            <summary>
            Creates the trackers for this shape in all views
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShape.DestroyTrackers">
            <summary>
            Destroys the trackers for this shape in all views
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShape.UpdateTrackers">
            <summary>
            Updates the trackers for this shape in all views
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShape.RecreateTrackers">
            <summary>
            Recreates the trackers for this shape in all views
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShape.UpdateFromControlPoint(Nevron.Diagram.NControlPoint)">
            <summary>
            Updates the shape from the location of the specified control point
            </summary>
            <param name="controlPoint">control point</param>
        </member>
        <member name="M:Nevron.Diagram.NShape.UpdateControlPoints">
            <summary>
            Updates the control points from the shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShape.UpdateDependentShapes">
            <summary>
            Updates the shapes, which are dependent on this shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShape.UpdateShapeDependencies">
            <summary>
            Updates the shape dependencies and then updates the dependant shapes of this shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShape.CanConnectPoints(Nevron.Diagram.NConnectionPoint,Nevron.Diagram.NConnectionPoint)">
            <summary>
            Called by own connection points to acknowledge the connection with a foreign connection point
            </summary>
            <param name="foreignPoint">foreign connection point</param>
            <param name="ownPoint">own connection point</param>
            <returns>true if the connection is acceptable for the shape, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.DisconnectConnectedPoints">
            <summary>
            Tries to disconnect the start plugs, end plug and the currently connected outward port (if any). 
            When the shape is disconnected it will not have any dependencies.
            </summary>
            <returns>true if the points were successfully disconnected, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.GetShapesConnectedToInwardPorts">
            <summary>
            Gets a list of the shapes, which are connected to the inward ports of this shape.
            </summary>
            <returns>list of shapes connected to this shape ports</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.GetShapesConnectedToPlugs">
            <summary>
            Gets a list of the shapes to whose inward ports, the plugs of this shape are connected
            </summary>
            <returns>list of shapes connected to this shape plugs</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.GetIncomingShapes">
            <summary>
            Gets a list of the 1D shapes whose end plug is connected to an inward port of this shape
            </summary>
            <returns>list of incomming shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.GetOutgoingShapes">
            <summary>
            Gets a list of the 1D shapes whose start plug is connected to an inward port of this shape
            </summary>
            <returns>list of outgoing shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.GetReflexiveShapes">
            <summary>
            Gets a list of the 1D shapes whose start and end plugs are connected to inward port(s) of this shape 
            (e.g. 1D shapes, which start and end in this shape)
            </summary>
            <returns>list of reflexive shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.GetInwardShapes">
            <summary>
            Gets a list of the shape, which have an outward port connected to this shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.GetSourceShapes">
            <summary>
            Gets a list of the source shapes (e.g. the shapes which are connected to the start plug of incoming shapes)
            </summary>
            <returns>list of source shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.GetDestinationShapes">
            <summary>
            Gets a list of the destination shapes (e.g. the shapes which are connected to the end plug of outgoing shapes)
            </summary>
            <returns>list of destination shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.GetPredecessorShapes(System.Collections.Hashtable)">
            <summary>
            Gets a list of the predecessor shapes (e.g. SourceShapes + the predecessor shapes of the source shapes)
            </summary>
            <param name="visitedShapes">table with visited shapes</param> 
            <returns>list of predecessor shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.GetSuccessorShapes(System.Collections.Hashtable)">
            <summary>
            Gets a list of the successor shapes (e.g. DestinationShapes + the successor shapes of the destination shapes)
            </summary>
            <returns>list of successor shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.GetAccessibleShapes(System.Collections.Hashtable)">
            <summary>
            Gets a list of the accessible shapes (e.g. NeighbourShapes + the accessible shapes of the neighbour shapes)
            </summary>
            <returns>list of successor shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.GetConnectorsWithNeighbour(Nevron.Diagram.NShape)">
            <summary>
            Gets a list of the 1D shapes, which connect this shape with the specified neighbour
            </summary>
            <param name="neighbour">neighbour shape (source or destination shape)</param>
            <returns>list of the 1D shapes, which connect this shape with the specified shape</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.GetPlugDirectionForPort(Nevron.Diagram.NPort,Nevron.Diagram.NPlug)">
            <summary>
            Called by own plugs to provide a plug direction for the specified foreign port
            </summary>
            <remarks>
            This implementation will return the shape center
            </remarks>
            <param name="foreignPort">foreign port</param>
            <param name="ownPlug">own plug</param>
            <returns>direction of the plug for the specified port</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.GetCollapsedPortAnchorForPlug(Nevron.Diagram.NPort,Nevron.Diagram.NPlug)">
            <summary>
            Called by collapsed ports to obtain an anchor point for the specified plug.
            This method is called on the root collapsed shape, by ports which reside in collapsed shapes
            </summary>
            <param name="port">port, which is a member of this group or descendant shape</param>
            <param name="plug">the plug for which an anchor must be provided</param>
            <returns>plug anchor</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.GetCollapsedPortLocation(Nevron.Diagram.NPort)">
            <summary>
            Called by collapsed ports to obtain their location in case they are collapsed.
            Although the port is not visible when collapsed its location can be used in different glue 
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.OnPortLocationChanging(Nevron.Diagram.NPort,Nevron.GraphicsCore.NPointF)">
            <summary>
            
            </summary>
            <param name="port"></param>
            <param name="newLocation"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.OnPortLocationChanged(Nevron.Diagram.NPort)">
            <summary>
            
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:Nevron.Diagram.NShape.OnControlPointLocationChanging(Nevron.Diagram.NControlPoint,Nevron.GraphicsCore.NPointF)">
            <summary>
            Called by control points, when their location is changing
            </summary>
            <param name="controlPoint">control point, whose location is changing</param>
            <param name="newLocation">new location of the control point (in model coordinates for the shape)</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.OnControlPointLocationChanged(Nevron.Diagram.NControlPoint)">
            <summary>
            Called by control points, when their location has changing
            </summary>
            <param name="controlPoint">control point, whose location has changed</param>
        </member>
        <member name="M:Nevron.Diagram.NShape.Decompose">
            <summary>
            Decomposes the shape by creating a shape for each of the primitive models, which the shape aggregates
            </summary>
            <returns>list of shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.Compose(Nevron.Diagram.NCompositeShape)">
            <summary>
            Appends clonings of the primitives contained in this shape to the specified composed shape
            </summary>
            <param name="compositeShape">composite shape to which to append the cloned primitives</param>
        </member>
        <member name="M:Nevron.Diagram.NShape.CreateShapeElements(Nevron.Diagram.ShapeElementsMask)">
            <summary>
            Creates the specified optional shape elements
            </summary>
            <param name="shapeElements">mask of elements to create</param>
        </member>
        <member name="M:Nevron.Diagram.NShape.DestroyShapeElements(Nevron.Diagram.ShapeElementsMask)">
            <summary>
            Destroys the specifies optional shape elements
            </summary>
            <param name="shapeElements">mask of elements to create</param>
        </member>
        <member name="M:Nevron.Diagram.NShape.SnapPortsTransform(Nevron.Diagram.NPort,Nevron.Diagram.NPort)">
            <summary>
            Transforms the shape to snap the specified ports. 
            This operation alters the shape transformation to match the ports locations and directions. 
            </summary>
            <param name="ownPort"></param>
            <param name="foreignPort"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.SizeToText(Nevron.GraphicsCore.NMarginsF)">
            <summary>
            Tries to resize the shape to fit the primary text of the shape. 
            This implementation get the desired size of the label in scene units 
            and resizes the shape accordingly.
            </summary>
            <param name="padding">padding to apply to the estimated text size (in scene units)</param> 
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.GetRootCollapsedShape">
            <summary>
            Gets the root collapsed shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.Reverse">
            <summary>
            Reverses the shape
            </summary>
            <remarks>
            Overriden to swap the plug ports
            </remarks>
            <returns>true if reverse succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.IsCollapsed">
            <summary>
            Determines whether the shape is collapsed - either locally or because it resides in a collapsed aggregate model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.OnAggregatedModelChanging(Nevron.Diagram.NModel,Nevron.Diagram.ModelChangeHint,System.Object)">
            <summary>
            Called by aggregated models, when they are about to change
            </summary>
            <param name="model">model, which is changing</param>
            <param name="hint">hint for the change</param>
            <param name="data">data associated with the change</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.OnAggregatedModelChanged(Nevron.Diagram.NModel,Nevron.Diagram.ModelChangeHint)">
            <summary>
            Called by aggregated models, when they have changed
            </summary>
            <param name="model">model, which has changed</param>
            <param name="hint">hint for the change</param>
        </member>
        <member name="P:Nevron.Diagram.NShape.Text">
            <summary>
            Gets/sets the primary text of the shape
            </summary>
            <remarks>
            This implementation gets/sets the text of the default label
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NShape.AllowDownwardOrientation">
            <summary>
            Gets/sets the whether primary text of the shape allows downward orientation.
            </summary>
            <remarks>
            This implementation gets/sets the AllowDownwardOrientation property of the default label.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NShape.ShapeType">
            <summary>
            Gets/sets the shape type. The shape type can influence the default shape behavior
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.InteractionStyle">
            <summary>
            Gets/sets the interaction style of the shape. The interaction style determines what aspects of the shape 
            can be edited when it is selected.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.GraphPart">
            <summary>
            Gets/sets whether this shape should be treated as a graph part or not. 
            When this property is set to true, 2D shapes are treated as graph vertices, 
            while 1D shapes are treated as graph edges.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.TranslationSlaves">
            <summary>
            Specifies the shapes, which must be translated when the shape is translated
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.Collapsed">
            <summary>
            Gets/sets whether the shape content is collapsed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.CollapsedSize">
            <summary>
            Gets/sets the size of the shape when it is collapsed (in model coordinates). 
            The value of this property is automatically updated when the shape is resized in collapsed state.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.ExpandedSize">
            <summary>
            Gets/sets the size of the shape when it is expanded (in model coordinates). 
            The value of this property is automatically updated when the shape is resized in expanded state.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.ExpandCollapsePinAlignment">
            <summary>
            Gets/sets the expand/collapse pin alignment. 
            It controls the alignment of the pin point in model coordinates around which the shape expands-collapses.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.RouteObstacleType">
            <summary>
            Specifies how routeable shapes should avoid this shape. Only taken into account if the ShapeType property is set to Shape2D.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.LayoutData">
            <summary>
            Gets/sets the shape properties related to layouts
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.Ports">
            <summary>
            Obtains a reference to the collection of ports
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.ControlPoints">
            <summary>
            Obtains a reference to the collection of control points
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.Labels">
            <summary>
            Obtains a reference to the collection of labels
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.Decorators">
            <summary>
            Obtains a reference to the collection of decorators
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.IsReflexive">
            <summary>
            Queries whether this shape is reflexive (e.g. its FromShape is equal to its EndShape)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.IsConstrained">
            <summary>
            Queries whether the shape is constrained
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.ConstrainBounds">
            <summary>
            Obtains the bounds in which the shape is constrained
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.Group">
            <summary>
            Obtains a reference to the group hosting the shape
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.FromShape">
            <summary>
            Gets/sets the shape to which the start plug is connected.
            Only applicable for 1D shapes.
            </summary>
            <remarks>
            Setting this property will connect the start plug of this shape 
            to the default inward port of the specified shape.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NShape.ToShape">
            <summary>
            Gets/sets the shape to which the end plug is connected.
            Only applicable for 1D shapes.
            </summary>
            <remarks>
            Setting this property will connect the end plug of this shape 
            to the default inward port of the specified shape.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NShape.InwardShape">
            <summary>
            Gets/sets the shape to which the default outward port of this shape is connected
            </summary>
            <remarks>
            Setting this property will connect the default outward port of this shape 
            with the default inward port of the specified shape.
            If the shape does not have a default outward port, 
            or the specified shape has no default inward port this method has no effect.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NShape.StartPlug">
            <summary>
            Obtains a reference to the start plug. 
            A valid plug reference is returned only if this is a 1D shape
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.EndPlug">
            <summary>
            Obtains a reference to the end plug. 
            A valid plug reference is returned only if this is a 1D shape
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.ConnectedOutwardPort">
            <summary>
            Gets the currently connected outward port, if any
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.Plugs">
            <summary>
            Obtains a reference to the plugs container
            </summary>
            <remarks>
            A valid plugs container reference is returned only if this is a 1D shape
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NShape.LockTrackersUpdate">
            <summary>
            Locks/unlocks the updates of the trackers
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.LockControlPointsUpdate">
            <summary>
            Locks/unlocks the updates of the control points from the shape
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.LockDependentShapesUpdate">
            <summary>
            Locks/unlocks the updates of the dependent shapes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.LockUpdatesFromControlPoints">
            <summary>
            Locks/unlocks the updates from the shape control points
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.LockUpdateShapeDependencies">
            <summary>
            Locks/unlocks the updates from the connected shapes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.LockUpdatesFromControls">
            <summary>
            Locks/unlocks the updates of the shape controls
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShape.LockUpdateExpandedCollapsedSizes">
            <summary>
            Locks/unlocks the updates of the shape expanded/collapsed sizes.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShape.ShouldSerializeShapeType">
            <summary>
            Determines whether the ShapeType property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.ShouldSerializeInteractionStyle">
            <summary>
            Determines whether the InteractionStyle property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.ShouldSerializeRouteObstacleType">
            <summary>
            Determines whether the RouteObstacleType property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.ShouldSerializeGraphPart">
            <summary>
            Determines whether the GraphPart property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.ShouldSerializeTranslationSlaves">
            <summary>
            Determines whether the GraphPartType property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.OnPropertyChanging(System.String,System.Object)">
            <summary>
            General property changing handler, which fires the NodePropertyChanging event
            </summary>
            <param name="propertyName">name of the property which is chaning</param>
            <param name="newValue">new property value</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.OnPropertyChanged(System.String)">
            <summary>
            Overriden to update the shape trackers if the Protection or PinAlignment property has changed 
            or recreate the shape trackers if the ShapeType or InteractionStyle property has changed
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Nevron.Diagram.NShape.GetDefaultPropertyValue(Nevron.Diagram.DiagramElementProperties)">
            <summary>
            Obtains the default value for the specified property
            </summary>
            <param name="property">property</param>
            <returns>default value</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.CreateDefaultStyle">
            <summary>
            Called by the NStyleableElement contructor to create the default style
            </summary>
            <remarks>
            Overriden to create a valid NStyle attribute 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NShape.OnTransformChanged">
            <summary>
            Called when the transformation of the node has changed
            </summary>
            <remarks>
            Overriden to start and entity update and update the shape trackers
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NShape.OnModelBoundsChanged">
            <summary>
            Called when the bounds of the model have changed
            </summary>
            <remarks>
            Overriden to update the connected elements and trackers
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NShape.OnBoundsChanging(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Called when the bounds of the model are about to change
            </summary>
            <remarks>
            Overriden to check the shape constrains
            </remarks>
            <param name="newBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.OnBoundsChanged">
            <summary>
            Called when the bounds of the model have changed
            </summary>
            <remarks>
            Overriden to invalidate the cartesian scale factors and update the first ancestor shape observer
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NShape.OnAggregateScalingStarted(System.Single,System.Single,Nevron.GraphicsCore.NPointF)">
            <summary>
            Called when the aggregate models starts to scale the models it aggregates
            </summary>
            <param name="scaleX">scale X</param>
            <param name="scaleY">scale Y</param>
            <param name="pin">pin in model coordinates</param>
            <returns>scale 2D info</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.OnAggregateScalingEnded(System.Boolean,Nevron.Diagram.NAggregateModel.EEdE)">
            <summary>
            Called when the aggregate model has scaled the models it aggregates
            </summary>
            <param name="successful">true if sucessfully scaled, otherwise false</param>
            <param name="info">info associated with the scaling</param>
        </member>
        <member name="M:Nevron.Diagram.NShape.MustAutoUpdateModelBounds(System.Boolean)">
            <summary>
            Determines whether the model bounds must be automatically updated.
            </summary>
            <param name="aggregatedModelChanged">whether the update is caused by an aggregated model change</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.OnCollapsedChanging(System.Boolean)">
            <summary>
            Called when the collapsed state of the shape is about to change
            </summary>
            <returns>true if change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.OnCollapsedChanged">
            <summary>
            Called when the collapsed state of the shape has change
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShape.ComputeModelBounds(System.Boolean)">
            <summary>
            Computes the model bounds of the shape based on an expected change in its collapsed state
            </summary>
            <param name="collapsing"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.SwapPlugPorts">
            <summary>
            Swaps the ports to which the From and To plugs are connected (if connected).
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShape.CreateDefaultInwardPorts">
            <summary>
            Called by the constructor to create the ports
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShape.CreateDefaultControlPoints">
            <summary>
            Called by the constructor to create the control points
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShape.CreateDefaultLabels">
            <summary>
            Called by the constructor to create the ports
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShape.GetDefaultShapeElements">
            <summary>
            Obtains the mask of the shape elements, which must be created by default
            </summary>
            <remarks>
            This implementation returns the ShapeElementsMask.None
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NShape.CreatePlugs">
            <summary>
            Creates the plugs container (e.g. the shape start and end plugs)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShape.DestroyPlugs">
            <summary>
            Destroys the plugs container (e.g. the shape start and end plugs)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShape.StartUpdateFromControls">
            <summary>
            Starts an update of aggregated shape content from the shape controls
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShape.UpdateFromControls">
            <summary>
            Updates the aggregated shape content from the shape controls
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShape.EndUpdateFromControls">
            <summary>
            Ends an update of aggregated shape content from the shape controls
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShape.UpdateElementReferences">
            <summary>
            Updates any cashed references of shape elements
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NErmShape">
            <summary>
            Represents a shape for displaying database table's structure.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NErmShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NErmShape.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Nevron.Diagram.NErmShape.#ctor(Nevron.Diagram.NPrimitiveModel)">
            <summary>
            Initializer constructor
            </summary>
            <param name="primitive"></param>
        </member>
        <member name="M:Nevron.Diagram.NErmShape.CreateInplaceEditControl">
            <summary>
            Creates an inplace edit control. Overriden to delegate the call to the contained text primitive instead of the default label
            </summary>
            <returns>control which must implement the INInplaceEditControl interface</returns>
        </member>
        <member name="P:Nevron.Diagram.NErmShape.Columns">
            <summary>
            Gets the columns shown in the shape.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NErmShape.Text">
            <summary>
            Gets/sets the primary text of the shape
            </summary>
            <remarks>
            Overriden to get/set the text of the aggregated text primitive
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NErmShape.GetDefaultShapeElements">
            <summary>
            Obtains the mask of the shape elements, which must be created by default
            </summary>
            <remarks>
            Overriden to return the ShapeElementsMask.Labels
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NErmShape.CreateDefaultLabels">
            <summary>
            Overriden to create a rotated bounds label, which is initially the default label
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NErmShape.UpdateElementReferences">
            <summary>
            Updates any cashed references of shape elements
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NErmShape.SizeToContent">
            <summary>
            Resizes the shape to the size of its contents.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NErmShape.CreateFromTable(System.Data.DataTable)">
            <summary>
            Creates the shape to reflect the specified data table.
            </summary>
            <param name="table"></param>
        </member>
        <member name="T:Nevron.Diagram.NPrimitiveShape">
            <summary>
            The NPrimitiveShape class represents a shape, which aggregates a single primitive model
            </summary>
            <remarks>
            The aggregated primitive can be obtained from the Primitive property
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPrimitiveShape.#ctor(Nevron.Diagram.NPrimitiveModel)">
            <summary>
            Constructs a new primitive shape, which aggregates the specified primitive model
            </summary>
            <param name="primitive">aggregated primitive model</param>
        </member>
        <member name="M:Nevron.Diagram.NPrimitiveShape.Reverse">
            <summary>
            Reverses the shape
            </summary>
            <remarks>
            Overriden to delegate the implementation to the primitive model
            </remarks>
            <returns>true if reverse succeeded, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NPrimitiveShape.ModelStartPoint">
            <summary>
            Gets/sets the model start point (in model coordinates)
            </summary>
            <remarks>
            Overriden to get/set the model start point of the primitive if the CanModifyPrimitiveStartEndPoints method returned true
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NPrimitiveShape.ModelEndPoint">
            <summary>
            Controls the model end point (in model coordinates)
            </summary>
            <remarks>
            Overriden to get/set the model end point of the primitive if CanModifyPrimitiveStartEndPoints method returned true
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NPrimitiveShape.Length">
            <summary>
            Gets the logical line length (in scene coordinates)
            </summary>
            <remarks>
            Overriden to return the primitive length
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPrimitiveShape.GetLengthLocation(System.Single)">
            <summary>
            Obtains the point along the logical line, which corresponds to the specified percent
            </summary>
            <remarks>
            Overriden to call the primitive GetLengthLocation method
            </remarks>
            <param name="percent">percent for which to obtain a point</param>
            <returns>point in scene coordinates</returns>
        </member>
        <member name="M:Nevron.Diagram.NPrimitiveShape.GetLengthOrientation(System.Single)">
            <summary>
            Obtains the tangent angle (in radians) along the logical line, which corresponds to the specified percent
            </summary>
            <remarks>
            Overriden to call the primitive GetLengthOrientation method
            </remarks>
            <param name="percent">percent for which to obtain a orienatation</param>
            <returns>orientation in radians</returns>
        </member>
        <member name="M:Nevron.Diagram.NPrimitiveShape.GetNearestContourLocation(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Gets the nearest intersection point of the model contour with the vector defined by the specified start and end points
            </summary>
            <remarks>
            Overriden to call the primitive GetNearestContourLocation method
            </remarks>
            <param name="vectorStart">start vector point (in scene coordinates)</param>
            <param name="vectorEnd">end vector point (in scene coordinates)</param>
            <returns>vector start point if there are not intersection points, otherwise nearest intersection point to vector end point</returns>
        </member>
        <member name="M:Nevron.Diagram.NPrimitiveShape.GetStartPointDirection(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Gets the estimated direction of the specified start point to reach the specified end point
            </summary>
            <param name="startPoint">proposed start point</param> 
            <param name="endPoint">proposed end point</param>
            <returns>direction for the start point</returns>
        </member>
        <member name="M:Nevron.Diagram.NPrimitiveShape.GetEndPointDirection(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Gets the estimated direction of the specified end point to reach the specified start point
            </summary>
            <param name="startPoint">proposed start point</param> 
            <param name="endPoint">proposed end point</param>
            <returns>direction for the end point</returns>
        </member>
        <member name="P:Nevron.Diagram.NPrimitiveShape.Primitive">
            <summary>
            Obtains a reference to the primitive of the shape
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPrimitiveShape.PreserveForm">
            <summary>
            Specifies whether the form of the primitive must be preserved 
            when the start and end points of the shape are modified. This property is only taken 
            into account if the shape aggregates a 1D primitive. 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPrimitiveShape.ShouldSerializePreserveForm">
            <summary>
            Determines whether the PreserveForm property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NPrimitiveShape.GetDefaultPropertyValue(Nevron.Diagram.DiagramElementProperties)">
            <summary>
            Obtains the default value for the specified property
            </summary>
            <param name="property">property</param>
            <returns>default value</returns>
        </member>
        <member name="M:Nevron.Diagram.NPrimitiveShape.GetAggregatedModels">
            <summary>
            Overriden to return the aggregated primitive
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NPrimitiveShape.UpdateElementReferences">
            <summary>
            Updates any cashed references of shape elements
            </summary>
            <remarks>
            Overriden to cashe a reference to the primitive model
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPrimitiveShape.CanModifyPrimitiveStartEndPoints">
            <summary>
            Specifies whether the shape can use the aggregate primitive model start and end points
            </summary>
            <remarks>
            This method returns true if the aggregated primitive is a 1D primitive (e.g. has local implemenation for start and end points) 
            and the PreserveForm property is false.
            </remarks>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NTableShape">
            <summary>
            Represents a shape for dispalying tabular data.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTableShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTableShape.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Nevron.Diagram.NTableShape.#ctor(Nevron.Diagram.NPrimitiveModel)">
            <summary>
            Initializer constructor
            </summary>
            <param name="primitive"></param>
        </member>
        <member name="M:Nevron.Diagram.NTableShape.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:Nevron.Diagram.NTableShape.Columns">
            <summary>
            The columns of the table shape.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableShape.ShowGrid">
            <summary>
            Determines whether the grid is visible or not.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableShape.PortDistributionMode">
            <summary>
            Determines the port distribution mode.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableShape.CellMargins">
            <summary>
            Determines the margins of the cells.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableShape.CellPadding">
            <summary>
            Determines the padding of the cells content.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableShape.RowCount">
            <summary>
            Gets the number of rows in the table.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableShape.ColumnCount">
            <summary>
            Gets the number of columns in the table.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NTableShape.Item(System.Int32,System.Int32)">
            <summary>
            Gets the cell at the specified position in the table.
            </summary>
            <param name="columnIndex">The column index.</param>
            <param name="rowIndex">The row index.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NTableShape.InitTable(System.Int32,System.Int32)">
            <summary>
            Inits the table shape with the specified number of rows and columns.
            </summary>
            <param name="columnCount">The number of columns.</param>
            <param name="rowCount">The number of rows.</param>
        </member>
        <member name="M:Nevron.Diagram.NTableShape.SizeToContent">
            <summary>
            Sizes the table shape to fit its content and recreates the shape ports.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTableShape.BeginUpdate">
            <summary>
            Begins the table update and stops its bounds autoupdate.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTableShape.EndUpdate">
            <summary>
            Ends the table update and resumes its bounds autoupdate.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTableShape.AddRow">
            <summary>
            Adds a new row at the bottom of the table
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTableShape.InsertRowAt(System.Int32)">
            <summary>
            Inserts a new row at the specified row index
            </summary>
            <param name="rowIndex"></param>
        </member>
        <member name="M:Nevron.Diagram.NTableShape.RemoveRowAt(System.Int32)">
            <summary>
            Removes the row at the specified row index
            </summary>
            <param name="rowIndex"></param>
        </member>
        <member name="M:Nevron.Diagram.NTableShape.UpdateElementReferences">
            <summary>
            Updates any cashed references of shape elements
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NTextShape">
            <summary>
            The NTextShape class represents a primitive shape, which aggregates a single NTextPrimitive primitive
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTextShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NTextShape.#ctor(Nevron.Diagram.NTextPrimitive)">
            <summary>
            Initializer constructor
            </summary>
            <param name="primitive"></param>
        </member>
        <member name="M:Nevron.Diagram.NTextShape.#ctor(System.String,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text">text</param>
            <param name="location">model bounds position</param>
            <param name="size">model bounds size</param>
        </member>
        <member name="M:Nevron.Diagram.NTextShape.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text">text</param>
            <param name="x">model bounds x coordinate</param>
            <param name="y">model bounds Y coordinate</param>
            <param name="width">model bounds width</param>
            <param name="height">model bounds height</param>
        </member>
        <member name="M:Nevron.Diagram.NTextShape.#ctor(System.String,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text">text</param>
            <param name="rect">model bounds rect</param>
        </member>
        <member name="M:Nevron.Diagram.NTextShape.#ctor(System.String,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text">text</param>
            <param name="leftTop">model bounds left top coordinate</param>
            <param name="rightBottom">model bounds right bottom coordinate</param>
        </member>
        <member name="M:Nevron.Diagram.NTextShape.CreateInplaceEditControl">
            <summary>
            Creates an inplace edit control. Overriden to delegate the call to the contained text primitive instead of the default label
            </summary>
            <returns>control which must implement the INInplaceEditControl interface</returns>
        </member>
        <member name="P:Nevron.Diagram.NTextShape.Mode">
            <summary>
            Get/sets the mode in which the text is displayed
            </summary>
            <remarks>
            By default set to Wrap
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NTextShape.AllowDownwardOrientation">
            <summary>
            Specifies whether downward orientation of text is allowed. 
            If set to false the text will automatically flip its orientation to keep its run vector pointing from left to right.
            </summary>
            <remarks>
            By default set to false.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NTextShape.Text">
            <summary>
            Gets/sets the primary text of the shape
            </summary>
            <remarks>
            Overriden to get/set the text of the aggregated text primitive
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NTextShape.SizeToText(Nevron.GraphicsCore.NMarginsF)">
            <summary>
            Tries to resize the shape to fit the primary text of the shape. 
            This implementation get the desired size of the text primitive in scene units 
            and resizes the shape accordingly.
            </summary>
            <param name="padding">padding to apply to the estimated text size (in scene units)</param> 
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NUmlProperty">
            <summary>
            Represents an UML property.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NUmlProperty.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NUmlProperty.#ctor(Nevron.Diagram.MemberVisibility,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="visibility"></param>
            <param name="type"></param>
            <param name="name"></param>
            <param name="is_abstract"></param>
            <param name="is_static"></param>
        </member>
        <member name="P:Nevron.Diagram.NUmlProperty.Abstract">
            <summary>
            Determines if the member is abstract.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NUmlProperty.Static">
            <summary>
            Determines if the member is static.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NUmlProperty.Visibility">
            <summary>
            Gets/sets the visibility of the member.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NUmlField">
            <summary>
            Represents an UML field.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NUmlField.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NUmlField.#ctor(System.String,System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="type">The type of the member.</param>
            <param name="name">The name of the member.</param>
        </member>
        <member name="P:Nevron.Diagram.NUmlField.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NUmlField.Name">
            <summary>
            Gets/sets the name of the member.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NUmlField.Type">
            <summary>
            Gets/sets the type of the member.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NUmlMethod">
            <summary>
            Represents an UML method.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NUmlMethod.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NUmlMethod.#ctor(Nevron.Diagram.MemberVisibility,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="visibility"></param>
            <param name="type"></param>
            <param name="name"></param>
            <param name="is_abstract"></param>
            <param name="is_static"></param>
        </member>
        <member name="M:Nevron.Diagram.NUmlMethod.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to update the references of all contained elements
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:Nevron.Diagram.NUmlMethod.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NUmlMethod.Arguments">
            <summary>
            The arguments of this method.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NUmlShape">
            <summary>
            Represents an UML shape with a collection of properties and methods.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NUmlShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NUmlShape.#ctor(System.Boolean)">
            <summary>
            Creates an UML shape specifying whether to use global style sheets or local styles for it.
            </summary>
            <param name="useStyleSheets">Specifies whether to use style sheets for styleing the shape.
            If set to false, local style will be used. If set to tru make sure that you have called the
            <see cref="M:Nevron.Diagram.NUmlShape.AddUmlStyleSheets(Nevron.Diagram.NDrawingDocument)"/> static method of the UML shape for the drawing document
            it's going to be placed in.</param>
        </member>
        <member name="M:Nevron.Diagram.NUmlShape.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an UML shape.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Nevron.Diagram.NUmlShape.#ctor(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates an UML shape specifying whether to use global style sheets or local styles for it.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="useStyleSheets">Specifies whether to use style sheets for styleing the shape.
            If set to false, local style will be used. If set to tru make sure that you have called the
            <see cref="M:Nevron.Diagram.NUmlShape.AddUmlStyleSheets(Nevron.Diagram.NDrawingDocument)"/> static method of the UML shape for the drawing document
            it's going to be placed in.</param>
        </member>
        <member name="M:Nevron.Diagram.NUmlShape.#ctor(Nevron.Diagram.NPrimitiveModel)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="primitive"></param>
        </member>
        <member name="P:Nevron.Diagram.NUmlShape.Properties">
            <summary>
            The attributes of the UML shape.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NUmlShape.Methods">
            <summary>
            The operations of the UML shape.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NUmlShape.Abstract">
            <summary>
            Gets/sets if the class is abstract.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NUmlShape.MemberFormatStyle">
            <summary>
            Gets/sets the format of the text for the members.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NUmlShape.MemberFormatString">
            <summary>
            Determines the member format string. Only applicable when MemberFormatStyle is set to 'Custom'.
            </summary>
            <remarks>
            Use the constants {VISIBILITY}, {TYPE}, {NAME} and {ARGUMENTS} to create your custom defined
            format. For example if you want to display a method in C# style use the following format string:
            &lt;font color='blue'&gt;{VISIBILITY}{TYPE}&lt;/font&gt; {NAME}{ARGUMENTS}
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NUmlShape.Name">
            <summary>
            Gets/sets the name of the UML shape.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NUmlShape.UpdateElementReferences">
            <summary>
            Updates any cached references of shape elements.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NUmlShape.GetMethods(System.Type)">
            <summary>
            Gets all public methods for the given type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NUmlShape.GetProperties(System.Type)">
            <summary>
            Gets all public properties for the given type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NUmlShape.GetText(Nevron.Diagram.NUmlField)">
            <summary>
            Returns the text representation of a field value.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NUmlShape.InitFromType(System.Type)">
            <summary>
            Inits the shape from the specified type using reflection. Prior to calling this method you
            must add the shape to a drawing document.
            </summary>
            <param name="type">The type to initialize the shape from.</param>
        </member>
        <member name="M:Nevron.Diagram.NUmlShape.UpdateContent">
            <summary>
            Updates the content of the shape and autosizes it to fit its content.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NUmlShape.UpdateContent(Nevron.Diagram.NUmlField)">
            <summary>
            Updates the content of the specified shape field and resizes the shape to fit its content.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NUmlShape.OnAbstractChanged(System.Boolean)">
            <summary>
            Called when the value of the Abstract property has changed.
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="M:Nevron.Diagram.NUmlShape.OnMemberFormatStyleChanged(Nevron.Diagram.MemberFormatStyle)">
            <summary>
            Called when the value of the MemberFormatStyle property has changed.
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="M:Nevron.Diagram.NUmlShape.OnMemberFormatStringChanged(System.String)">
            <summary>
            Called when the value of the MemberFormatString property has changed.
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="M:Nevron.Diagram.NUmlShape.AddUmlStyleSheets(Nevron.Diagram.NDrawingDocument)">
            <summary>
            Creates and adds the UML shape specific style sheets to the given drawing document.
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NArrowShape">
            <summary>
            The NArrowShape class represents a path shape, which aggregates a single NArrowPath primitive
            </summary>
            <remarks>
            The type of the arrow is controlled by the ArrowType property
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NArrowShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowShape.#ctor(Nevron.Diagram.NArrowPath)">
            <summary>
            Initializer constructor
            </summary>
            <param name="primitive"></param>
        </member>
        <member name="M:Nevron.Diagram.NArrowShape.#ctor(Nevron.Diagram.ArrowType)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowShape.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Creates a new single arrow with the specified start and end points
            </summary>
            <param name="start">start point</param>
            <param name="end">end point</param>
        </member>
        <member name="M:Nevron.Diagram.NArrowShape.#ctor(Nevron.Diagram.ArrowType,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Creates a new arrow with the specified start and end points
            </summary>
            <param name="arrowType">arrow type</param>
            <param name="start">start point</param>
            <param name="end">end point</param>
        </member>
        <member name="M:Nevron.Diagram.NArrowShape.#ctor(Nevron.Diagram.ArrowType,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new arrow with the specified parameters
            </summary>
            <param name="arrowType">arrow type</param>
            <param name="start">start point</param>
            <param name="end">end point</param>
            <param name="arrowWidth">arrow width</param>
            <param name="headAngle">head angle</param>
            <param name="headRadius">head radius</param>
        </member>
        <member name="P:Nevron.Diagram.NArrowShape.Verbs">
            <summary>
            Obtains an array list of NCommand instances representing the verbs supported by the node
            </summary>
            <remarks>
            Overriden to add the Single Arrow and Double Arrow verbs
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NArrowShape.ArrowType">
            <summary>
            Gets/sets the arrow type
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowShape.UpdateFromControlPoint(Nevron.Diagram.NControlPoint)">
            <summary>
            Overriden to update the arrow controls from the control point 
            </summary>
            <param name="controlPoint">control point</param>
        </member>
        <member name="M:Nevron.Diagram.NArrowShape.UpdateControlPoints">
            <summary>
            Overriden to update the location of the control points from the arrow controls
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowShape.GetDefaultPropertyValue(Nevron.Diagram.DiagramElementProperties)">
            <summary>
            Obtains the default value for the specified property
            </summary>
            <param name="property">property</param>
            <returns>default value</returns>
        </member>
        <member name="M:Nevron.Diagram.NArrowShape.DoVerb(System.Object,Nevron.UI.WinForm.Controls.CommandEventArgs)">
            <summary>
            Called by verb commands to execute the specified verb
            </summary>
            <remarks>
            Overriden to handle the Single Arrow and Double Arrow verbs
            </remarks>
            <param name="sender"></param>
            <param name="e">command event arguments for the verb command</param>
        </member>
        <member name="M:Nevron.Diagram.NArrowShape.CreateDefaultControlPoints">
            <summary>
            Overriden to create the arrow width and head radius and angle control points
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowShape.CreateDefaultLabels">
            <summary>
            Overriden to create a logical line label, which is initially the default label
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowShape.GetDefaultShapeElements">
            <summary>
            Obtains the mask of the shape elements, which must be created by default
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NBezierCurveShape">
            <summary>
            The NBezierCurveShape class represents a path shape, which aggregates a single NBezierCurvePath primitive
            </summary>
            <remarks>
            Bezier curve shapes can be bend to reflex
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurveShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurveShape.#ctor(Nevron.Diagram.NBezierCurvePath)">
            <summary>
            Initializer constructor
            </summary>
            <param name="primitive"></param>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurveShape.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Constructs a new bezier curve with the specified start and end base points and first and second control points
            </summary>
            <param name="start">start point</param>
            <param name="firstControl">first control point</param>
            <param name="secondControl">second control point</param>
            <param name="end">end point</param>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurveShape.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Constructs a new bezier curve by start and end points only 
            </summary>
            <remarks>
            The first control point is with the start point Y coordinate and X coordinate of the middle point (between the start and end points).
            The second control point is with the end point Y coordinate and X coordinate of the middle point.
            </remarks>
            <param name="start">start point</param>
            <param name="end">end point</param>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurveShape.Reflex">
            <summary>
            Modifies the shape to aesthetically loop around the reflexed shape
            </summary>
            <returns>true if the reflex succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurveShape.CanReflex">
            <summary>
            Determines whether the shape can reflex
            </summary>
            <returns>true it it can, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurveShape.UpdateFromControlPoint(Nevron.Diagram.NControlPoint)">
            <summary>
            Overriden to update the bezier curve path from the control point 
            </summary>
            <param name="controlPoint">control point</param>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurveShape.UpdateControlPoints">
            <summary>
            Overriden to update the location of the control points from the bezier curve path control points
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NBezierCurveShape.FirstControlPoint">
            <summary>
            Gets/sets the bezier curve first control point (in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NBezierCurveShape.SecondControlPoint">
            <summary>
            Gets/sets the bezier curve second control point (in scene coordinates)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurveShape.GetReflexRequirements">
            <summary>
            Gets the requirements for shape reflection
            </summary>
            <returns></returns>		
        </member>
        <member name="M:Nevron.Diagram.NBezierCurveShape.GetReflexiveBezierPoints(Nevron.Diagram.NReflexRequirements)">
            <summary>
            Gets the reflexive bezier points
            </summary>
            <param name="requirements"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurveShape.GetDefaultPropertyValue(Nevron.Diagram.DiagramElementProperties)">
            <summary>
            Obtains the default value for the specified property
            </summary>
            <param name="property">property</param>
            <returns>default value</returns>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurveShape.CreateDefaultControlPoints">
            <summary>
            Overriden to create two control points - for the first and second bezier path control points
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurveShape.CreateDefaultLabels">
            <summary>
            Overriden to create a logical line label, which is initially the default label
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBezierCurveShape.GetDefaultShapeElements">
            <summary>
            Obtains the mask of the shape elements, which must be created by default
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NCircularArcShape">
            <summary>
            The NCircularArcShape class represents a primitive shape, 
            which aggregates a single NEllipticalArc primitive
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcShape.#ctor(Nevron.Diagram.NCircularArcPath)">
            <summary>
            Initializer constructor
            </summary>
            <param name="primitive"></param>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcShape.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Constructs an circular arc by start and end points
            </summary>
            <param name="start">start point</param>
            <param name="end">end point</param>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcShape.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Defines the circular arc with the specified parameters
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="control"></param>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcShape.UpdateFromControlPoint(Nevron.Diagram.NControlPoint)">
            <summary>
            Overriden to update the arc curve path from the control point 
            </summary>
            <param name="controlPoint">control point</param>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcShape.UpdateControlPoints">
            <summary>
            Overriden to update the location of the control points from the arc curve path control points
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcShape.GetDefaultPropertyValue(Nevron.Diagram.DiagramElementProperties)">
            <summary>
            Obtains the default value for the specified property
            </summary>
            <param name="property">property</param>
            <returns>default value</returns>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcShape.CreateDefaultControlPoints">
            <summary>
            Overriden to create a control points for the control point of the circular arc
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcShape.CreateDefaultLabels">
            <summary>
            Overriden to create a logical line label, which is initially the default label
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NCircularArcShape.GetDefaultShapeElements">
            <summary>
            Obtains the mask of the shape elements, which must be created by default
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NEllipseShape">
            <summary>
            The NEllipseShape class represents a primitive shape, which aggregates a single NEllipsePath primitive
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NEllipseShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NEllipseShape.#ctor(Nevron.Diagram.NEllipsePath)">
            <summary>
            Initializer constructor
            </summary>
            <param name="primitive"></param>
        </member>
        <member name="M:Nevron.Diagram.NEllipseShape.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new ellipse with the specified parameters
            </summary>
            <param name="x">x coordinate of the upper left corner</param>
            <param name="y">y coordinate of the upper left corner</param>
            <param name="width">width</param>
            <param name="height">height</param>
        </member>
        <member name="M:Nevron.Diagram.NEllipseShape.#ctor(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Constructs a new ellipse with the specified parameters
            </summary>
            <param name="rect">bounding rect</param>
        </member>
        <member name="M:Nevron.Diagram.NEllipseShape.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Constructs a new ellipse with the specified parameters
            </summary>
            <param name="leftTop">left top corner</param>
            <param name="rightBottom">right bottom corner</param>
        </member>
        <member name="M:Nevron.Diagram.NEllipseShape.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Constructs a new ellipse with the specified parameters
            </summary>
            <param name="center">center</param>
            <param name="size">size</param>
        </member>
        <member name="M:Nevron.Diagram.NEllipseShape.#ctor(Nevron.GraphicsCore.NPointF,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new ellipse with the specified parameters
            </summary>
            <param name="center">center</param>
            <param name="xRadius">x radius</param>
            <param name="yRadius">y radius</param>
            <param name="angle">rotation of the model ellipse</param>
        </member>
        <member name="M:Nevron.Diagram.NEllipseShape.CreateDefaultLabels">
            <summary>
            Overriden to create a rotated bounds label, which is initially the default label
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NEllipticalArcShape">
            <summary>
            The NEllipticalArcShape class represents a primitive shape, 
            which aggregates a single NEllipticalArc primitive
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcShape.#ctor(Nevron.Diagram.NEllipticalArcPath)">
            <summary>
            Initializer constructor
            </summary>
            <param name="primitive"></param>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcShape.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Constructs an elliptical arc by start and end points
            </summary>
            <param name="start">start point</param>
            <param name="end">end point</param>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcShape.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,System.Single,System.Single)">
            <summary>
            Defines the elliptical arc with the specified parameters
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="control"></param>
            <param name="angle"></param>
            <param name="axesRatio"></param>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcShape.UpdateFromControlPoint(Nevron.Diagram.NControlPoint)">
            <summary>
            Overriden to update the arc curve path from the control point 
            </summary>
            <param name="controlPoint">control point</param>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcShape.UpdateControlPoints">
            <summary>
            Overriden to update the location of the control points from the arc curve path control points
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcShape.GetDefaultPropertyValue(Nevron.Diagram.DiagramElementProperties)">
            <summary>
            Obtains the default value for the specified property
            </summary>
            <param name="property">property</param>
            <returns>default value</returns>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcShape.CreateDefaultControlPoints">
            <summary>
            Overriden to create a control points for the control point of the elliptical arc
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcShape.CreateDefaultLabels">
            <summary>
            Overriden to create a logical line label, which is initially the default label
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NEllipticalArcShape.GetDefaultShapeElements">
            <summary>
            Obtains the mask of the shape elements, which must be created by default
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NErmConnector">
            <summary>
            A special connector type, used to connect Erm shapes.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NErmConnector.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NErmConnector.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            
            </summary>
            <param name="converter"></param>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:Nevron.Diagram.NErmConnector.GetStartPointDirection(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Gets the estimated direction of the specified start point to reach the specified end point
            </summary>
            <param name="startPoint">proposed start point</param> 
            <param name="endPoint">proposed end point</param>
            <returns>direction for the start point</returns>
        </member>
        <member name="M:Nevron.Diagram.NErmConnector.GetEndPointDirection(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Gets the estimated direction of the specified start point to reach the specified end point
            </summary>
            <param name="startPoint">proposed start point</param> 
            <param name="endPoint">proposed end point</param>
            <returns>direction for the start point</returns>
        </member>
        <member name="P:Nevron.Diagram.NErmConnector.Verbs">
            <summary>
            Obtains an array list of NCommand instances representing the verbs supported by the node
            </summary>
            <remarks>
            Overriden to add the Erm verb
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NErmConnector.StartLeadLength">
            <summary>
            Controls the length of the start lead.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NErmConnector.EndLeadLength">
            <summary>
            Controls the length of the end lead.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NErmConnector.StartLeadText">
            <summary>
            Determines the text of the start lead.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NErmConnector.EndLeadText">
            <summary>
            Determines the text of the end lead.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NErmConnector.UpdateFromControlPoint(Nevron.Diagram.NControlPoint)">
            <summary>
            Overriden to update the bezier curve path from the control point 
            </summary>
            <param name="controlPoint">control point</param>
        </member>
        <member name="M:Nevron.Diagram.NErmConnector.UpdateControlPoints">
            <summary>
            Overriden to update the location of the control points from the bezier curve path control points
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NErmConnector.UpdateFromControls">
            <summary>
            Updates the aggregated shape content from the shape controls
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NErmConnector.CreateDefaultControlPoints">
            <summary>
            Overriden to create one control point, which is used to control the parameters of the step 3 connector
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NErmConnector.GetDefaultShapeElements">
            <summary>
            Obtains the mask of the shape elements, which must be created by default
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NErmConnector.GetDefaultPropertyValue(Nevron.Diagram.DiagramElementProperties)">
            <summary>
            Obtains the default value for the specified property
            </summary>
            <param name="property">property</param>
            <returns>default value</returns>
        </member>
        <member name="M:Nevron.Diagram.NErmConnector.CreateDefaultLabels">
            <summary>
            Called by the constructor to create the labels
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NLineShape">
            <summary>
            The NLineShape class represents a path shape, which aggregates a single NLinePath primitive
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLineShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLineShape.#ctor(Nevron.Diagram.NLinePath)">
            <summary>
            Initializer constructor
            </summary>
            <param name="primitive"></param>
        </member>
        <member name="M:Nevron.Diagram.NLineShape.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Constructs a new line between the specified points
            </summary>
            <param name="start">start point</param>
            <param name="end">end point</param>
        </member>
        <member name="M:Nevron.Diagram.NLineShape.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new line with the specified coordinates
            </summary>
            <param name="startX">start point X</param>
            <param name="startY">start point Y</param>
            <param name="endX">end point X</param>
            <param name="endY">end point Y</param>
        </member>
        <member name="P:Nevron.Diagram.NLineShape.BridgeTargets">
            <summary>
            Specified the bridge targets of the shape. Only taken into account if the ShapeType property is set to Shape1D.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLineShape.ShouldSerializeBridgeTargets">
            <summary>
            Determines whether the BridgeTargets property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLineShape.OnPropertyChanged(System.String)">
            <summary>
            Overriden to invalidate the bridges of the contained primitive if the BridgeTargets property has changed
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Nevron.Diagram.NLineShape.GetDefaultPropertyValue(Nevron.Diagram.DiagramElementProperties)">
            <summary>
            Obtains the default value for the specified property
            </summary>
            <param name="property">property</param>
            <returns>default value</returns>
        </member>
        <member name="M:Nevron.Diagram.NLineShape.CreateDefaultLabels">
            <summary>
            Overriden to create a logical line label, which is initially the default label
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NPathShape">
            <summary>
            The NPathShape class represents a primitive shape, which aggregates a single NPathPrimitive
            </summary>
            <remarks>
            Since all path primitives implement the INPoints interface, the NPathShape also implements 
            this interface and by default delegates the implementation to the aggregated path primitive
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPathShape.#ctor(Nevron.Diagram.NPathPrimitive)">
            <summary>
            Constructs a new path shape, which aggregates the specified path primitive
            </summary>
            <param name="primitive">path primitive</param>
        </member>
        <member name="M:Nevron.Diagram.NPathShape.GetPointInfo(System.Int32)">
            <summary>
            Obtains information about the point at the specified index
            </summary>
            <remarks>
            This implementation delegates to the aggregated primitive
            </remarks>
            <param name="index">point index</param>
            <returns>information for the point at the specified index</returns>
        </member>
        <member name="P:Nevron.Diagram.NPathShape.PointsCount">
            <summary>
            Obtains the points count 
            </summary>
            <remarks>
            This implementation delegates to the aggregated primitive
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NPathShape.Points">
            <summary>
            Gets/sets the node points (in scene coordinates)
            </summary>
            <remarks>
            This implementation delegates to the aggregated primitive
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPathShape.GetPointAt(System.Int32)">
            <summary>
            Gets the point at the specified index (in scene coordinates)
            </summary>
            <remarks>
            This implementation delegates to the aggregated primitive
            </remarks>
            <param name="index">point index</param>
            <returns>point at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.NPathShape.SetPointAt(System.Int32,Nevron.GraphicsCore.NPointF)">
            <summary>
            Sets the point at the specified index (in scene coordinates)
            </summary>
            <remarks>
            This implementation delegates to the aggregated primitive
            </remarks>
            <param name="index">point index</param>
            <param name="point">point to set</param>
        </member>
        <member name="M:Nevron.Diagram.NPathShape.GetDefaultShapeElements">
            <summary>
            Obtains the mask of the shape elements, which must be created by default
            </summary>
            <remarks>
            Overriden to return the ShapeElementsMask.Labels
            </remarks>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NRectangleShape">
            <summary>
            The NRectangleShape class represents a path shape, which aggregates a single NRectanglePath primitive
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NRectangleShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NRectangleShape.#ctor(Nevron.Diagram.NRectanglePath)">
            <summary>
            Initializer constructor
            </summary>
            <param name="primitive"></param>
        </member>
        <member name="M:Nevron.Diagram.NRectangleShape.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Constructs a new rectangle with the specified location and size
            </summary>
            <param name="location">location</param>
            <param name="size">size</param>
        </member>
        <member name="M:Nevron.Diagram.NRectangleShape.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new rectangle with the specified coordinates 
            </summary>
            <param name="x">x location of the rectangle</param>
            <param name="y">y location of the rectangle</param>
            <param name="width">rectangle width</param>
            <param name="height">rectangle height</param>
        </member>
        <member name="M:Nevron.Diagram.NRectangleShape.#ctor(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Constructs a new rectangle
            </summary>
            <param name="rect">rectangle</param>
        </member>
        <member name="M:Nevron.Diagram.NRectangleShape.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Constructs a new rectangle, by constructing a normalized rectangle from the specified corners
            </summary>
            <param name="leftTop">left top corner</param>
            <param name="rightBottom">right-bottom corner</param>
        </member>
        <member name="M:Nevron.Diagram.NRectangleShape.#ctor(Nevron.GraphicsCore.NPointF[])">
            <summary>
            Constructs a new rectangle by 4 corner points
            </summary>
            <param name="corners"></param>
        </member>
        <member name="M:Nevron.Diagram.NRectangleShape.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Constructs a new rectangle by 4 corner points
            </summary>
            <param name="corner1"></param>
            <param name="corner2"></param>
            <param name="corner3"></param>
            <param name="corner4"></param>
        </member>
        <member name="M:Nevron.Diagram.NRectangleShape.CreateDefaultLabels">
            <summary>
            Overriden to create a rotated bounds label, which is initially the default label
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NStep2Connector">
            <summary>
            The NStep2Connector class represents an step connector, which connects its start and end points in two steps
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NStep2Connector.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NStep2Connector.#ctor(System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="firstVertical">whether the first step is vertical</param> 
        </member>
        <member name="M:Nevron.Diagram.NStep2Connector.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Initializer constructor
            </summary>
            <param name="start">start point</param>
            <param name="end">end point</param>
        </member>
        <member name="M:Nevron.Diagram.NStep2Connector.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="start">start point</param>
            <param name="end">end point</param>
            <param name="firstVertical">whether the first step is vertical</param> 
        </member>
        <member name="M:Nevron.Diagram.NStep2Connector.Reverse">
            <summary>
            Reverses the shape
            </summary>
            <remarks>
            Overriden to toggle the value of the FirstVertical property
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NStep2Connector.UpdateFromControls">
            <summary>
            Updates the aggregated shape content from the shape controls
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NStep3Connector">
            <summary>
            The NStep3Connector class represents a step connector, which connects its start and end points in three steps
            </summary>
            <remarks>
            The position of the middle segment can be controlled in two modes:
            <list type="bullet">
            <item>
            	<term>Percent</term>
            	<description>the middle segment is aligned to the percent location relative to the start and end points. 
            	For example 50% is the middle between the start and end points.
            	The percent is controlled by the MiddleControlPointPercent property.</description>
            </item>
            <item>
            	<term>Offset</term>
            	<description>the middle segment is aligned to aligned to the far or near side of the start and end points with the specified offset. 
            	For example offset 10 positions the middle segment at 10 on the far side of the start and end points.
            	Offset -10 positions the middle segment at -10 on the near side of the start and end points.
            	The offset is controlled by the MiddleControlPointOffset property.</description>
            </item>
            </list>
            The mode is determined by the value of the UseMiddleControlPointPercent property.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NStep3Connector.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NStep3Connector.#ctor(System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="firstVertical">whether the first step is vertical</param> 
        </member>
        <member name="M:Nevron.Diagram.NStep3Connector.#ctor(System.Boolean,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="firstVertical">whether the first step is vertical</param> 
            <param name="middleControlPointPercent"></param>
            <param name="middleControlPointOffset"></param>
            <param name="useMiddleControlPointPercent"></param>
        </member>
        <member name="M:Nevron.Diagram.NStep3Connector.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Initializer constructor
            </summary>
            <param name="start">start point</param>
            <param name="end">end point</param>
        </member>
        <member name="M:Nevron.Diagram.NStep3Connector.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="start">start point</param>
            <param name="end">end point</param>
            <param name="firstVertical">whether the first step is vertical</param> 
        </member>
        <member name="M:Nevron.Diagram.NStep3Connector.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF,System.Boolean,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="firstVertical"></param>
            <param name="middleControlPointPercent"></param>
            <param name="middleControlPointOffset"></param>
            <param name="useMiddleControlPointPercent"></param>
        </member>
        <member name="M:Nevron.Diagram.NStep3Connector.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            
            </summary>
            <param name="converter"></param>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:Nevron.Diagram.NStep3Connector.GetStartPointDirection(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Gets the estimated direction of the specified start point to reach the specified end point
            </summary>
            <param name="startPoint">proposed start point</param> 
            <param name="endPoint">proposed end point</param>
            <returns>direction for the start point</returns>
        </member>
        <member name="M:Nevron.Diagram.NStep3Connector.GetEndPointDirection(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Gets the estimated direction of the specified start point to reach the specified end point
            </summary>
            <param name="startPoint">proposed start point</param> 
            <param name="endPoint">proposed end point</param>
            <returns>direction for the start point</returns>
        </member>
        <member name="P:Nevron.Diagram.NStep3Connector.UseMiddleControlPointPercent">
            <summary>
            Specifies whether the middle control point position should be calculated by percentage or offset
            </summary>
            <remarks>
            By default set to true
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NStep3Connector.MiddleControlPointPercent">
            <summary>
            Controls the percent based positon of the middle control point, when the UseMiddleControlPointPercent property is set to true
            </summary>
            <remarks>
            By default set to 50.0f
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NStep3Connector.MiddleControlPointOffset">
            <summary>
            Controls the offset based positon of the middle control point, when the UseMiddleControlPointPercent property is set to false
            </summary>
            <remarks>
            By default set to 0
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NStep3Connector.UpdateFromControlPoint(Nevron.Diagram.NControlPoint)">
            <summary>
            Overriden to update the bezier curve path from the control point 
            </summary>
            <param name="controlPoint">control point</param>
        </member>
        <member name="M:Nevron.Diagram.NStep3Connector.UpdateControlPoints">
            <summary>
            Overriden to update the location of the control points from the bezier curve path control points
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NStep3Connector.UpdateFromControls">
            <summary>
            Updates the aggregated shape content from the shape controls
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NStep3Connector.CreateDefaultControlPoints">
            <summary>
            Overriden to create one control point, which is used to control the parameters of the step 3 connector
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NStep3Connector.GetDefaultShapeElements">
            <summary>
            Obtains the mask of the shape elements, which must be created by default
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NStepConnector">
            <summary>
            The NStepConnector class represents a path shape, which connects it start and end points in a fixed number of horizontal or vertical steps
            </summary>
            <remarks>
            Common for all step connectors is that you can control the orientation of the fist step via the FirstVertical property.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NStepConnector.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NStepConnector.#ctor(System.Boolean)">
            <summary>
            Initializer contructor
            </summary>
            <param name="firstVertical">whether the first step is vertical</param> 
        </member>
        <member name="P:Nevron.Diagram.NStepConnector.FirstVertical">
            <summary>
            Controls the direction of the first step
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NStepConnector.BridgeTargets">
            <summary>
            Specified the bridge targets of the shape. Only taken into account if the ShapeType property is set to Shape1D.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NStepConnector.CornerRounding">
            <summary>
            Gets/sets the corner rounding of the shape.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NStepConnector.ShouldSerializeBridgeTargets">
            <summary>
            Determines whether the BridgeTargets property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NStepConnector.OnPropertyChanged(System.String)">
            <summary>
            Overriden to invalidate the bridges of the contained primitive if the BridgeTargets property has changed
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Nevron.Diagram.NStepConnector.GetDefaultPropertyValue(Nevron.Diagram.DiagramElementProperties)">
            <summary>
            Obtains the default value for the specified property
            </summary>
            <param name="property">property</param>
            <returns>default value</returns>
        </member>
        <member name="M:Nevron.Diagram.NStepConnector.CreateDefaultLabels">
            <summary>
            Overriden to create a logical line label, which is initially the default label
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NClosedCurveShape">
            <summary>
            The NClosedCurveShape class represents a poly path shape, which aggregates a single NClosedCurvePath
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NClosedCurveShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NClosedCurveShape.#ctor(Nevron.Diagram.NClosedCurvePath)">
            <summary>
            Initializer constructor
            </summary>
            <param name="primitive"></param>
        </member>
        <member name="M:Nevron.Diagram.NClosedCurveShape.#ctor(Nevron.GraphicsCore.NPointF[],System.Single)">
            <summary>
            Constructs a new closed curve with the specified points and tension
            </summary>
            <param name="points">points of the curve</param>
            <param name="tension">curve tension</param>
        </member>
        <member name="P:Nevron.Diagram.NClosedCurveShape.Tension">
            <summary>
            Gets/sets the curve tension
            </summary>
            <remarks>
            By default set to 1. Must be a value between 0 and 1.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NClosedCurveShape.CreateDefaultLabels">
            <summary>
            Overriden to create a rotated bounds label, which is initially the default label
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NCurveShape">
            <summary>
            The NCurveShape class represents a poly path shape, which aggregates a single NCurvePath
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NCurveShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NCurveShape.#ctor(Nevron.Diagram.NCurvePath)">
            <summary>
            Initializer constructor
            </summary>
            <param name="primitive"></param>
        </member>
        <member name="M:Nevron.Diagram.NCurveShape.#ctor(Nevron.GraphicsCore.NPointF[],System.Single)">
            <summary>
            Constructs a new curve with the specified points and tension
            </summary>
            <param name="points">points of the curve</param>
            <param name="tension">curve tension</param>
        </member>
        <member name="M:Nevron.Diagram.NCurveShape.Reflex">
            <summary>
            Modifies the shape to aesthetically loop around the reflexed shape
            </summary>
            <returns>true if the reflex succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NCurveShape.CanReflex">
            <summary>
            Determines whether the shape can reflex
            </summary>
            <returns>true it it can, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NCurveShape.Tension">
            <summary>
            Gets/sets the curve tension
            </summary>
            <remarks>
            By default set to 1. Must be a value between 0 and 1.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NCurveShape.GetDefaultPropertyValue(Nevron.Diagram.DiagramElementProperties)">
            <summary>
            Obtains the default value for the specified property
            </summary>
            <param name="property">property</param>
            <returns>default value</returns>
        </member>
        <member name="M:Nevron.Diagram.NCurveShape.GetReflexRequirements">
            <summary>
            Gets the requirements for shape reflection
            </summary>
            <returns></returns>		
        </member>
        <member name="M:Nevron.Diagram.NCurveShape.GetReflexiveCurvePoints(Nevron.Diagram.NReflexRequirements)">
            <summary>
            Gets the reflexive polyline points
            </summary>
            <param name="requirements"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NCurveShape.CreateDefaultLabels">
            <summary>
            Overriden to create a logical line label, which is initially the default label
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NMutablePolyPathShape">
            <summary>
            The NMutablePolyPathShape class represents a poly path shape, which can change (mutate) the aggregated poly path
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NMutablePolyPathShape.#ctor(Nevron.Diagram.NPolyPathPrimitive)">
            <summary>
            Constructs a new mutable poly path shape, which aggregates the specified poly path primitive
            </summary>
            <param name="primitive">poly path primitive</param>
        </member>
        <member name="M:Nevron.Diagram.NMutablePolyPathShape.OnHistoryAction(System.String)">
            <summary>
            Called by history when the object state has changed from history
            </summary>
            <remarks>
            Do not call this method directly
            </remarks>
            <param name="action">action name, which was passed when the action was recorded</param>
        </member>
        <member name="M:Nevron.Diagram.NMutablePolyPathShape.ReplacePrimitive(Nevron.Diagram.NPolyPathPrimitive)">
            <summary>
            Replaces the primitive aggregated by the shape
            </summary>
            <param name="newPrimitive">new poly path primitive</param>
        </member>
        <member name="P:Nevron.Diagram.NMutablePolyPathShape.CornerRounding">
            <summary>
            Gets/sets the corner rounding of the shape.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NPolygonShape">
            <summary>
            The NPolygonShape class represents a poly path shape, which aggregates a single NPolygonPath
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPolygonShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPolygonShape.#ctor(Nevron.Diagram.NPolygonPath)">
            <summary>
            Initializer constructor
            </summary>
            <param name="primitive"></param>
        </member>
        <member name="M:Nevron.Diagram.NPolygonShape.#ctor(Nevron.GraphicsCore.NPointF[])">
            <summary>
            Constructs a new polygon with the specified points
            </summary>
            <param name="points">points of the polygon</param>
        </member>
        <member name="M:Nevron.Diagram.NPolygonShape.CreateDefaultLabels">
            <summary>
            Overriden to create a rotated bounds label, which is initially the default label
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NPolylineShape">
            <summary>
            The NPolylineShape class represents a poly path shape, which aggregates a single NPolylinePath
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPolylineShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPolylineShape.#ctor(Nevron.Diagram.NPolylinePath)">
            <summary>
            Initializer constructor
            </summary>
            <param name="primitive"></param>
        </member>
        <member name="M:Nevron.Diagram.NPolylineShape.#ctor(Nevron.GraphicsCore.NPointF[])">
            <summary>
            Constructs a new polyline with the specified points
            </summary>
            <param name="points">points of the polyline</param>
        </member>
        <member name="M:Nevron.Diagram.NPolylineShape.Reflex">
            <summary>
            Modifies the shape to aesthetically loop around the reflexed shape
            </summary>
            <returns>true if the reflex succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPolylineShape.CanReflex">
            <summary>
            Determines whether the shape can reflex
            </summary>
            <returns>true it it can, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NPolylineShape.BridgeTargets">
            <summary>
            Specified the bridge targets of the shape. Only taken into account if the ShapeType property is set to Shape1D.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPolylineShape.CornerRounding">
            <summary>
            Gets/sets the corner rounding of the shape.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPolylineShape.ShouldSerializeBridgeTargets">
            <summary>
            Determines whether the BridgeTargets property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NPolylineShape.GetReflexRequirements">
            <summary>
            Gets the requirements for shape reflection
            </summary>
            <returns></returns>		
        </member>
        <member name="M:Nevron.Diagram.NPolylineShape.GetReflexivePolylinePoints(Nevron.Diagram.NReflexRequirements)">
            <summary>
            Gets the reflexive polyline points
            </summary>
            <param name="requirements"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NPolylineShape.OnPropertyChanged(System.String)">
            <summary>
            Overriden to invalidate the bridges of the contained primitive if the BridgeTargets property has changed
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Nevron.Diagram.NPolylineShape.GetDefaultPropertyValue(Nevron.Diagram.DiagramElementProperties)">
            <summary>
            Obtains the default value for the specified property
            </summary>
            <param name="property">property</param>
            <returns>default value</returns>
        </member>
        <member name="M:Nevron.Diagram.NPolylineShape.CreateDefaultLabels">
            <summary>
            Overriden to create a logical line label, which is initially the default label
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NPolyPathShape">
            <summary>
            The NPolyPathShape class represents a path shape, which aggregates a single NPolyPathPrimitive primitive
            </summary>
            <remarks>
            Since all polypath primitives implement the INPolyPoints and INSegments interfaces, the NPolyPathShape also implements 
            these interface and delegates the implementation to the aggregated poly path primitive
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathShape.#ctor(Nevron.Diagram.NPolyPathPrimitive)">
            <summary>
            Constructs a new poly path shape, which aggregates the specified poly path primitive
            </summary>
            <param name="primitive">poly path primitive</param>
        </member>
        <member name="P:Nevron.Diagram.NPolyPathShape.MinPointsCount">
            <summary>
            Obtains the minimal allowed number of points
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathShape.AddPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Adds a new point to the shape (in scene coordinates)
            </summary>
            <param name="point">point to add</param>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathShape.InsertPoint(System.Int32,Nevron.GraphicsCore.NPointF)">
            <summary>
            Inserts a new point to the shape at the specified index (in scene coordinates)
            </summary>
            <param name="index">index to insert at</param>
            <param name="point">point to insert</param>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathShape.RemovePointAt(System.Int32)">
            <summary>
            Removes the point at the specified index
            </summary>
            <param name="index">index of point to remove</param>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathShape.MergePoints(System.Single)">
            <summary>
            Merges (removes) all points, whose oriented distance from the line formed 
            by its neighbours is smaller than the specified.
            </summary>
            <param name="distance">oriented distance below which the point is merged (in scene coordinates)</param>
        </member>
        <member name="P:Nevron.Diagram.NPolyPathShape.SegmentsCount">
            <summary>
            Obtains the count of segments
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathShape.GetSegmentMidPointInfo(System.Int32)">
            <summary>
            Obtains information about the segment mid point
            </summary>
            <param name="segmentIndex">index of segment</param> 
            <returns>information about the segment mid point</returns>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathShape.MoveSegment(System.Int32,Nevron.GraphicsCore.NPointF)">
            <summary>
            Moves the segment to the specified location
            </summary>
            <param name="segmentIndex">segment index</param>
            <param name="location">location to move to</param>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathShape.SplitSegment(System.Int32)">
            <summary>
            Splits the specified segment and returns information about the point, which can be subsequently translated
            </summary>
            <param name="segmentIndex">segment index</param>
            <returns>information about the point which can be translated</returns>
        </member>
        <member name="M:Nevron.Diagram.NPolyPathShape.ToLineSegments">
            <summary>
            Get the line segments forming this node.
            </summary>
            <returns>An array of line segments.</returns>
        </member>
        <member name="T:Nevron.Diagram.NRoutableConnector">
            <summary>
            The NRoutableConnector class represents a mutable polypath shape, which can automatically avoid obstacles in its path
            </summary>
            <remarks>
            The NRoutableConnector extends its base NMutablePolyPathShape with the following features:
            <list type="bullet">
            <item>
            	<term>ConnectorType property</term>
            	<description>This property is used to control the type of primitive used by the connector. 
            	The routing and reflexive abilities of the connector depend on the value of this property.
            	</description>
            </item>	
            <item>
            	<term>Routing ability</term>
            	<description>The routable connector implements the INRoutableShape interface and 
            	thus declares its ability to be routed (e.g. reshaped to avoids obstacles).
            	</description>
            </item>	
            <item>
            	<term>Reflex ability</term>
            	<description>The routable connector edge implements the INReflexiveShape interface and 
            	thus declares its ability to be reflexed (e.g. reshaped to bend around the reflexed shape).
            	</description>
            </item>	
            </list>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NRoutableConnector.#ctor">
            <summary>
            Default constructor (creates a routable HV polyline)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NRoutableConnector.#ctor(Nevron.Diagram.RoutableConnectorType)">
            <summary>
            Initializer constructor
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Nevron.Diagram.NRoutableConnector.#ctor(Nevron.Diagram.RoutableConnectorType,Nevron.Diagram.RerouteAutomatically)">
            <summary>
            Initializer constructor
            </summary>
            <param name="type"></param>
            <param name="rerouteAutomatically"></param>
        </member>
        <member name="M:Nevron.Diagram.NRoutableConnector.#ctor(Nevron.GraphicsCore.NPointF[])">
            <summary>
            Initalizer contstructor (creates a routable HV polyline)
            </summary>
            <param name="points">points of the connector</param>
        </member>
        <member name="M:Nevron.Diagram.NRoutableConnector.#ctor(Nevron.Diagram.RoutableConnectorType,Nevron.GraphicsCore.NPointF[])">
            <summary>
            Initalizer contstructor
            </summary>
            <param name="type">routable connector type</param>
            <param name="points">points of the connector</param>
        </member>
        <member name="M:Nevron.Diagram.NRoutableConnector.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to cashe a reference to the routing manager
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.NRoutableConnector.OnHistoryAction(System.String)">
            <summary>
            Called by history when the object state has changed from history
            </summary>
            <remarks>
            Do not call this method directly
            </remarks>
            <param name="action">action name, which was passed when the action was recorded</param>
        </member>
        <member name="P:Nevron.Diagram.NRoutableConnector.Verbs">
            <summary>
            Obtains an array list of NCommand instances representing the verbs supported by the node
            </summary>
            <remarks>
            Overriden to add the Dynamic HV, Dynamic Polyline and Dynamic Curve verbs
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NRoutableConnector.GetPointInfo(System.Int32)">
            <summary>
            Obtains information about the point at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NRoutableConnector.CanReroute">
            <summary>
            Determines whether the route can currently be rerouted
            </summary>
            <remarks>
            This implementation returns true if the graph edge is not reflexive and the 
            edge is connected to a routing service
            </remarks>
            <returns>true if it can reroute, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NRoutableConnector.Reroute">
            <summary>
            Finds a new route, which strives not to cross any obstacles
            </summary>
            <remarks>
            If the edge is reflexive this method will call the respective RerouteReflexiveXXX protected method. 
            Otherwise it will call the respective RerouteXXX protected method.
            </remarks>
            <returns>true if the operation succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NRoutableConnector.ComposeRouteRequirements">
            <summary>
            Composes the requirements of this route for obstacle rerouting
            </summary>
            <returns>route requirements or null if the route cannot be rerouted</returns>
        </member>
        <member name="P:Nevron.Diagram.NRoutableConnector.RerouteAutomatically">
            <summary>
            Specifies the mode in which this route is automatically rerouted. 
            Only taken into account if the ShapeType property is set to Shape1D.
            </summary>
            <remarks>
            By default set Never
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NRoutableConnector.Reflex">
            <summary>
            Modifies the shape to aesthetically loop around the reflexed shape
            </summary>
            <returns>true if the reflex succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NRoutableConnector.CanReflex">
            <summary>
            Determines whether the shape can reflex
            </summary>
            <returns>true it it can, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NRoutableConnector.ConnectorType">
            <summary>
            Gets/sets the routable connector type. 
            The type controls the primitive used by the connector and the type of routing it must use (e.g. Grid or Mesh).
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NRoutableConnector.RoutingManager">
            <summary>
            Obtains a reference to the routing manager to which this edge is connected
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NRoutableConnector.BridgeTargets">
            <summary>
            Specified the bridge targets of the shape. Only taken into account if the ShapeType property is set to Shape1D.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NRoutableConnector.ShouldSerializeBridgeTargets">
            <summary>
            Determines whether the BridgeTargets property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NRoutableConnector.CreatePrimitiveForType(Nevron.Diagram.RoutableConnectorType)">
            <summary>
            Creates a new path for the specified routable edge type type
            </summary>
            <param name="type">type of the path</param>
            <returns>path for the specified type</returns>
        </member>
        <member name="M:Nevron.Diagram.NRoutableConnector.GetReflexRequirements">
            <summary>
            Gets the requirements for shape reflection
            </summary>
            <returns></returns>		
        </member>
        <member name="M:Nevron.Diagram.NRoutableConnector.GetReflexivePolylinePoints(Nevron.Diagram.NReflexRequirements)">
            <summary>
            Gets the reflexive polyline points
            </summary>
            <param name="requirements"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NRoutableConnector.GetReflexiveHVPolylinePoints(Nevron.Diagram.NReflexRequirements)">
            <summary>
            Gets the reflexive hv polyline points
            </summary>
            <param name="requirements"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NRoutableConnector.OnPropertyChanged(System.String)">
            <summary>
            Overriden to invalidate the bridges of the contained primitive if the BridgeTargets property has changed
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Nevron.Diagram.NRoutableConnector.GetDefaultPropertyValue(Nevron.Diagram.DiagramElementProperties)">
            <summary>
            Obtains the default value for the specified property
            </summary>
            <param name="property">property</param>
            <returns>default value</returns>
        </member>
        <member name="M:Nevron.Diagram.NRoutableConnector.DoVerb(System.Object,Nevron.UI.WinForm.Controls.CommandEventArgs)">
            <summary>
            Called by verb commands to execute the specified verb
            </summary>
            <remarks>
            Overriden to handle the Single Arrow and Double Arrow verbs
            </remarks>
            <param name="sender"></param>
            <param name="e">command event arguments for the verb command</param>
        </member>
        <member name="M:Nevron.Diagram.NRoutableConnector.CreateDefaultLabels">
            <summary>
            Overriden to create a logical line label, which is initially the default label
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NWinFormControlHostShape">
            <summary>
            Represents a shape, which hosts a WinForm control
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NWinFormControlHostShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NWinFormControlHostShape.#ctor(Nevron.Diagram.NWinFormControlHostPrimitive)">
            <summary>
            Initializer constructor
            </summary>
            <param name="primitive"></param>
        </member>
        <member name="M:Nevron.Diagram.NWinFormControlHostShape.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializer constructor
            </summary>
            <param name="control">the control to host</param>
        </member>
        <member name="M:Nevron.Diagram.NWinFormControlHostShape.CreateInplaceEditControl">
            <summary>
            Creates an inplace edit control. Overriden to delegate the call to the contained text primitive instead of the default label
            </summary>
            <returns>control which must implement the INInplaceEditControl interface</returns>
        </member>
        <member name="P:Nevron.Diagram.NWinFormControlHostShape.Control">
            <summary>
            Gets/sets the hosted control
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NWinFormControlHostShape.DeactiveOnLostFocus">
            <summary>
            Specifies whether the inplace edit control created for the hosted control must be deactivated when the control looses focus. By default set to true.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NWinFormControlHostShape.GetDefaultPropertyValue(Nevron.Diagram.DiagramElementProperties)">
            <summary>
            Obtains the default value for the specified property
            </summary>
            <param name="property">property</param>
            <returns>default value</returns>
        </member>
        <member name="T:Nevron.Diagram.NConnectionPoint">
            <summary>
            The NConnectionPoint abstract class represents a point, which can be a member of a connection. 
            It serves as base class for ports and plugs.
            </summary>
            <remarks>
            Each connection point has the potential to be connected to only one Inward Port. 
            The Inward Port to which the connection point is currently connected is obtained from 
            the InwardPort property.
            <para>
            When a connection point is connected it creates a dependency, between its shape and the inward port shape.
            When the inward port shape is changed the dependent shapes are automatically updates. 
            The type of dependency update depends on the type of connected point. For example: start and end plugs 
            will update the shape start and end points, outward ports will translate (rotate) the shape to match 
            the inward port location and direction.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NConnectionPoint.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NConnectionPoint.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to cashe a reference to a INConnectionContainer instance
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:Nevron.Diagram.NConnectionPoint.ConnectionContainer">
            <summary>
            Obtains a reference to the connection container to which this connection point is connected
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NConnectionPoint.InwardPort">
            <summary>
            Obtains the inward port to which this connection point is currently connected to.
            Only applicable if this is a plug or an outward port.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NConnectionPoint.CanConnect(Nevron.Diagram.NPort)">
            <summary>
            Determines whether this connection point can be connected to the specified inward port
            </summary>
            <param name="inwardPort">inward port</param>
            <returns>true if point is not connected and can be connected</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionPoint.Connect(Nevron.Diagram.NPort)">
            <summary>
            Connects this plug to the specified port 
            </summary>
            <remarks>
            If the point is connected to another inward port it will be first disconnect from it.
            Derived connection points may impose additional pre-connect disconnect actions.
            </remarks>
            <param name="inwardPort">inward port to connect to</param>
            <returns>true if successufully connected, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionPoint.CanDisconnect">
            <summary>
            Determines whether this connection point can be disconnected 
            from the inward port to which it is currently connected.
            Only applicable for plugs and outward ports.
            </summary>
            <returns>true if point is connected and can be disconnected</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionPoint.Disconnect">
            <summary>
            Disconnects the connection point from the inward port to which it is connected.
            Only applicable for plugs and outward ports.
            </summary>
            <returns>true if the point was connected, and was successfully disconnected</returns>
        </member>
        <member name="M:Nevron.Diagram.NConnectionPoint.DisconnectAmbiguosConnections(Nevron.Diagram.NPort)">
            <summary>
            Called when this point is about to be connected to the specified inward port 
            and it needs to disconnect any ambiguos connections that the point or the shape may have
            </summary>
            <remarks>
            This implementation disconnects the point
            </remarks>
            <param name="inwardPort"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NEndPlug">
            <summary>
            The NEndPlug class represents a plug, which is anchored to the end point of a shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NEndPlug.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NEndPlug.GetPointInfo">
            <summary>
            Overriden to return information about the end plug
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NEndPlug.GetLocation">
            <summary>
            Overiden to return the shape end point with applied offset
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NEndPlug.SetLocation(Nevron.GraphicsCore.NPointF)">
            <summary>
            Overiden to alter the shape end point taking into account to offset
            </summary>
            <param name="location"></param>
        </member>
        <member name="T:Nevron.Diagram.NPlug">
            <summary>
            The NPlug class represents a connection point, which can be connected to an inward port,
            it serves as base class for start and end plugs.
            </summary>
            <remarks>
            Plugs can only be connected to inward ports. Whenever you connect a plug, 
            the currently connected outward port is automatically disconnected.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPlug.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPlug.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPlug.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.NPlug.Offset">
            <summary>
            Gets/sets the offset, by which the plug location is displaced.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPlug.ConnectToShape(Nevron.Diagram.NShape)">
            <summary>
            Connects the plug to the specified shape
            </summary>
            <remarks>
            This method will connect the plug to the default port of the specified shape 
            </remarks>
            <param name="shape">shape to which to connect the plug</param>
            <returns>true if successufully connected, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPlug.GetDirectionForPort(Nevron.Diagram.NPort)">
            <summary>
            Provides the direction of the plug for the specified port
            </summary>
            <remarks>
            This implementation will simply call the plug container GetPlugDirectionForPort method
            </remarks>
            <param name="port">port for which to provide direction</param>
            <returns>direction point</returns>
        </member>
        <member name="M:Nevron.Diagram.NPlug.DisconnectAmbiguosConnections(Nevron.Diagram.NPort)">
            <summary>
            Called when this point is about to be connected to the specified inward port 
            and it needs to disconnect any ambiguos connections that the point or the shape may have
            </summary>
            <remarks>
            Overriden to disconnect all connected outward ports
            </remarks>
            <param name="inwardPort"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NPlug.ShouldSerializeOffset">
            <summary>
            Determines whether the Offset property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NStartPlug">
            <summary>
            The NStartPlug class represents a plug, which is anchored to the start point of a shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NStartPlug.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NStartPlug.GetPointInfo">
            <summary>
            Overriden to return information about the start plug
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NStartPlug.GetLocation">
            <summary>
            Overiden to return the shape start point with applied offset
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NStartPlug.SetLocation(Nevron.GraphicsCore.NPointF)">
            <summary>
            Overiden to alter the shape start point taking into account to offset
            </summary>
            <param name="location"></param>
        </member>
        <member name="T:Nevron.Diagram.NBoundsPort">
            <summary>
            The NBoundsPort class represents a port, which can be anchored to the scene bounds of a model
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBoundsPort.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBoundsPort.#ctor(Nevron.Diagram.NContentAlignment)">
            <summary>
            Creates a new bounds port, anchored to the scene bounds of the shape
            </summary>
            <param name="alignment">alignment relative to the shape scene bounds</param>
        </member>
        <member name="M:Nevron.Diagram.NBoundsPort.#ctor(System.Guid,Nevron.Diagram.NContentAlignment)">
            <summary>
            Creates a new bounds port, anchored to the bounds of the model with the specified id
            </summary>
            <param name="anchorUniqueId">unique unique id of the anchor model</param>
            <param name="alignment">alignment relative to the model scene bounds</param>
        </member>
        <member name="M:Nevron.Diagram.NBoundsPort.#ctor(System.Guid,System.Drawing.ContentAlignment)">
            <summary>
            Creates a new bounds port, anchored to the bounds of the model with the specified id
            </summary>
            <param name="anchorUniqueId">unique unique id of the anchor model</param>
            <param name="alignment">alignment relative to the model scene bounds</param>
        </member>
        <member name="P:Nevron.Diagram.NBoundsPort.Alignment">
            <summary>
            Gets/sets the alignment of the bounds port relative to the anchor model scene bounds
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NBoundsPort.DirectionMode">
            <summary>
            Gets/sets the mode in which the point port direction is determined.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NBoundsPort.GetDirection(System.Single@)">
            <summary>
            Gets the port direction
            </summary>
            <param name="direction">result direction (in radians). Valid only if the method returned true</param> 
            <returns>true if the port direction is determined, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NBoundsPort.GetLocation">
            <summary>
            Overiden to obtain an aligned point relative to the anchor model scene bounds 
            and apply the current offset to it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NBoundsPort.SetLocation(Nevron.GraphicsCore.NPointF)">
            <summary>
            Overriden to alter the bounds port alignment.
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:Nevron.Diagram.NBoundsPort.ShouldSerializeAlignment">
            <summary>
            Determines whether the Alignment property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NBoundsPort.ShouldSerializeDirectionMode">
            <summary>
            Determines whether the DirectionMode property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NDynamicPort">
            <summary>
            The NDynamicPort class represents a rotated bounds port, 
            which can glue the plugs connected to it in several modes.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDynamicPort.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDynamicPort.#ctor(Nevron.Diagram.NContentAlignment,Nevron.Diagram.DynamicPortGlueMode)">
            <summary>
            Creates a new dynamic port with the specified parameters
            </summary>
            <param name="alignment">alignment relative to the shape rotated bounds</param>
            <param name="glueMode">mode in which to glue connected plugs</param>
        </member>
        <member name="M:Nevron.Diagram.NDynamicPort.#ctor(System.Guid,Nevron.Diagram.NContentAlignment,Nevron.Diagram.DynamicPortGlueMode)">
            <summary>
            Creates a new dynamic port with the specified parameters
            </summary>
            <param name="anchorUniqueId">unique unique id of the anchor model</param>
            <param name="alignment">alignment relative to the model rotated bounds</param>
            <param name="glueMode">mode in which to glue connected plugs</param>
        </member>
        <member name="M:Nevron.Diagram.NDynamicPort.#ctor(System.Guid,System.Drawing.ContentAlignment,Nevron.Diagram.DynamicPortGlueMode)">
            <summary>
            Creates a new dynamic port with the specified parameters
            </summary>
            <param name="anchorUniqueId">unique unique id of the anchor model</param>
            <param name="alignment">alignment relative to the model rotated bounds</param>
            <param name="glueMode">mode in which to glue connected plugs</param>
        </member>
        <member name="M:Nevron.Diagram.NDynamicPort.GetAnchorForPlug(Nevron.Diagram.NPlug)">
            <summary>
            Obtains the anchor point for the specified plug
            </summary>
            <param name="plug">plug for which to obtain anchor</param>
            <returns>anchor point</returns>
        </member>
        <member name="P:Nevron.Diagram.NDynamicPort.GlueMode">
            <summary>
            Gets/sets the mode in which the dynamic port glues the plugs connected to it
            </summary>
            <remarks>
            By default set to GlueToContour
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDynamicPort.GetGlueToContourAnchorForPlug(Nevron.Diagram.NPlug)">
            <summary>
            Gets the plug anchor in GlueToContour mode
            </summary>
            <param name="plug"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDynamicPort.GetGlueToRotatedBoundsAnchorForPlug(Nevron.Diagram.NPlug)">
            <summary>
            Gets the plug anchor in GlueToRotatedBounds mode
            </summary>
            <param name="plug"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDynamicPort.GetGlueToLocationAnchorForPlug(Nevron.Diagram.NPlug)">
            <summary>
            Gets the plug anchor in GlueToLocation mode
            </summary>
            <param name="plug"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDynamicPort.GetGlueToNearestPortAnchorForPlug(Nevron.Diagram.NPlug,System.Boolean)">
            <summary>
            Gets the plug anchor in GlueToNearestPort and GlueToNearestNonDynamicPort modes
            </summary>
            <param name="plug"></param>
            <param name="excludeDynamicPorts"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDynamicPort.GetGlueToLeftOrRightSideAnchorForPlug(Nevron.Diagram.NPlug)">
            <summary>
            Gets the plug anchor in GlueToLeftOrRightSide mode
            </summary>
            <param name="plug"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDynamicPort.ShouldSerializeDirectionMode">
            <summary>
            Determines whether the DirectionMode property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NLogicalLinePort">
            <summary>
            The NLogicalLinePort class represents a port, which can be anchored to the percent location along a model length
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLogicalLinePort.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLogicalLinePort.#ctor(System.Single)">
            <summary>
            Creates a new logical line port, anchored to the percent position along the shape length
            </summary>
            <param name="percent">percent position</param>
        </member>
        <member name="M:Nevron.Diagram.NLogicalLinePort.#ctor(System.Guid,System.Single)">
            <summary>
            Creates a new logical line port, anchored to the percent position along the length of the model with the specified unique id
            </summary>
            <param name="anchorUniqueId">unique unique id of the anchor model</param>
            <param name="percent">percent position</param>
        </member>
        <member name="P:Nevron.Diagram.NLogicalLinePort.Percent">
            <summary>
            Controls the percent position of the port along the length of the model to which it is achored
            </summary>
            <remarks>
            By default set to 50 (the center of the logical line)
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NLogicalLinePort.DirectionMode">
            <summary>
            Gets/sets the mode in which the logical line port direction is determined. By default set to AutoLine
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NLogicalLinePort.GetDirection(System.Single@)">
            <summary>
            Gets the port direction
            </summary>
            <param name="direction">result direction (in radians). Valid only if the method returned true</param> 
            <returns>true if the port direction is determined, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NLogicalLinePort.GetLocation">
            <summary>
            Gets the percent location along the anchor model length and apply the current offset to it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NLogicalLinePort.SetLocation(Nevron.GraphicsCore.NPointF)">
            <summary>
            Alters the percent location for the specified new location
            </summary>
            <param name="location"></param>
        </member>
        <member name="T:Nevron.Diagram.NPointPort">
            <summary>
            The NPointPort class represents a port, which can be anchored to a point of a model.
            The anchor model must implement the INPoints interface.
            </summary>
            <remarks>
            The position of the point port is controlled by the PointIndexMode, CustomPointIndex and Offset properties.
            The direction of the point port is controlled by the DirectionMode and CustomDirectionAngle properties.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPointPort.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPointPort.#ctor(Nevron.Diagram.PointIndexMode,System.Int32)">
            <summary>
            Creates a new point port anchored to the shape
            </summary>
            <param name="mode">mode in which to determine the point index</param>
            <param name="customIndex">custom point index (in case mode is Custom)</param>
        </member>
        <member name="M:Nevron.Diagram.NPointPort.#ctor(System.Guid,Nevron.Diagram.PointIndexMode,System.Int32)">
            <summary>
            Creates a new point port anchored to the model with the specified unique id
            </summary>
            <param name="anchorUniqueId">unique unique id of the anchor node</param>
            <param name="mode">mode in which to determine the point index</param>
            <param name="customIndex">custom point index (in case mode is Custom)</param>
        </member>
        <member name="M:Nevron.Diagram.NPointPort.GetFilterForReferenceProperty(System.String)">
            <summary>
            Provides a filter for the specified id property
            </summary>
            Overriden to return (typeof(NModel) and typeof(INPoints)) for the AnchorUniqueId property
            <remarks>
            </remarks>
            <param name="property">property exposing id, for which to obtain filter</param>
            <returns>filter</returns>
        </member>
        <member name="P:Nevron.Diagram.NPointPort.PointIndexMode">
            <summary>
            Gets/sets the mode in which the point index is determined
            </summary>
            <remarks>
            By default set to Custom
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NPointPort.CustomPointIndex">
            <summary>
            Gets/sets the point index, when the PointIndexMode property is set to Custom
            </summary>
            <remarks>
            By default set to 0
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NPointPort.DirectionMode">
            <summary>
            Gets/sets the mode in which the point port direction is determined. By default set to None
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPointPort.GetDirection(System.Single@)">
            <summary>
            Gets the port direction
            </summary>
            <param name="direction">result direction (in radians). Valid only if the method returned true</param> 
            <returns>true if the port direction is determined, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPointPort.GetPointIndex(Nevron.Diagram.PointIndexMode,System.Int32,System.Int32)">
            <summary>
            Gets the index of the point, bases on the specified parameters
            </summary>
            <param name="mode"></param>
            <param name="customIndex"></param>
            <param name="pointsCount"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NPointPort.GetLocation">
            <summary>
            Gets the point of the anchor model point at the specified index and apply the current offset to it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NPointPort.SetLocation(Nevron.GraphicsCore.NPointF)">
            <summary>
            Alters the port offset relatively to the anchor model point.
            </summary>
            <param name="location"></param>
        </member>
        <member name="T:Nevron.Diagram.NPort">
            <summary>
            The NPort class represents a connection point, which can be anchored to a specific parameter 
            of the shape to which they belong or to an aggregated model, which the shape contains.
            </summary>
            <remarks>
            The Type property of the port defines much of the port behavior. It can take the following values:
            <list type="bullet">
            <item>
            	<term>Inward (the default)</term>
            	<description>
            	Inward ports cannot be connected. However multiple plugs and outward ports 
            	of other shapes can be connected to an inward port.
            	</description>
            </item>	
            <item>
            	<term>Outward</term>
            	<description>
            	Outward ports can be connected to inward ports. Plugs cannot be connected to outward ports.
            	Only one outward port of a shape can be connected at time. 
            	This means that whenever an outward port is connected, both plugs and the currently 
            	connected outward port (if any) are automatically disconnected.
            	</description>
            </item>	
            <item>
            	<term>Inward and Outward</term>
            	<description>
            	Behaves as an inward and outward port.
            	</description>
            </item>	
            </list>	 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPort.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPort.#ctor(System.Guid)">
            <summary>
            Creates a new anchored port, anchored to the model with the specified id
            </summary>
            <param name="anchorUniqueId">unique id of the anchor node</param>
        </member>
        <member name="P:Nevron.Diagram.NPort.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPort.ReplaceForeignUniqueIds(System.Collections.Hashtable,System.Boolean)">
            <summary>
            Replaces any foreign Ids (references to other nodes)
            </summary>
            <remarks>
            Overriden to replace the AnchorUniqueId
            </remarks>
            <param name="mapUIds">map of ids which is used to find the new foreign id value</param>
            <param name="makeNotFoundEmpty">indicates whether the not found foreign ids must be set to Guid.Empty</param>
        </member>
        <member name="M:Nevron.Diagram.NPort.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <remarks>
            Overriden to convert the offset
            </remarks>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.NPort.HitTest(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the node by point with the specified context
            </summary>
            <remarks>
            Overriden to take into account the global visibility settings for connection points
            </remarks>
            <param name="point">point in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPort.HitTest(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the node by rectangle with the specified context
            </summary>
            <remarks>
            Overriden to take into account the show settings for connection points
            </remarks>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPort.GetFilterForReferenceProperty(System.String)">
            <summary>
            Provides a filter for the specified id property
            </summary>
            <remarks>
            This implementation returns the NFilters.TypeNModel for the AnchorUniqueId property
            </remarks>
            <param name="property">property exposing id, for which to obtain filter</param>
            <returns>filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NPort.GetRootForReferenceProperty(System.String)">
            <summary>
            Gets the root, from which to search for the referenced node
            </summary>
            <remarks>
            For the AnchorUniqueId property this implementation returns the shape to which port belongs
            </remarks>
            <param name="property">property exposing id</param>
            <returns>root for the search</returns>
        </member>
        <member name="M:Nevron.Diagram.NPort.Invalidate">
            <summary>
            Invalidates the projection of the object on the drawing surface
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPort.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the node in the specified context
            </summary>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.NPort.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the node can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the node can be painted, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NPort.Type">
            <summary>
            Gets/sets the port type, which controls how the port is connected with other connections points
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPort.IsInward">
            <summary>
            Gets whether this is an inward port (e.g Type is Inward or InwardAndOutward)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPort.IsOutward">
            <summary>
            Gets whether this is an outward port (e.g Type is Outward or InwardAndOutward)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPort.AnchorUniqueId">
            <summary>
            Specifies the id of the model to which this port is anchored
            </summary>
            <remarks>
            If the port is not anchored to any concrete model it is by default anchored to the shape containing it.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NPort.Offset">
            <summary>
            Controls the offset of the port from its anchor (in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPort.CustomDirectionAngle">
            <summary>
            Gets/sets the custom direction angle (in degrees) 
            Only applicable if direction angle mode is set to Custom
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPort.Plugs">
            <summary>
            Gets a list of the plugs currently connected to this port.
            Only applicable if this is an Inward port.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPort.OutwardPorts">
            <summary>
            Gets a list of the outward ports currently connected to this port.
            Only applicable if this is an Inward port.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NPort.ConnectedPoints">
            <summary>
            Gets a list of the points (plugs + outward ports) currently connected to this port.
            Only applicable if this is an Inward port.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPort.GetPointInfo">
            <summary>
            Gets information about the port
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPort.CanConnect(Nevron.Diagram.NPort)">
            <summary>
            Determines whether this connection point can be connected to the specified inward port
            </summary>
            <remarks>
            Overriden to return false if this is not an outward port
            </remarks>
            <param name="inwardPort">inward port</param>
            <returns>true if point is not connected and can be connected</returns>
        </member>
        <member name="M:Nevron.Diagram.NPort.CanDisconnect">
            <summary>
            Determines whether this connection point can be disconnected 
            from the inward port to which it is currently connected
            </summary>
            <remarks>
            Overriden to return false if this is not an outward port
            </remarks>
            <returns>true if point is connected and can be disconnected</returns>
        </member>
        <member name="M:Nevron.Diagram.NPort.GetAnchorForPlug(Nevron.Diagram.NPlug)">
            <summary>
            Gets the anchor point for the specified plug
            </summary>
            <remarks>
            This implementation returns the port location
            </remarks>
            <param name="plug">plug for which to obtain anchor</param>
            <returns>point to which to anchor the plug</returns>
        </member>
        <member name="M:Nevron.Diagram.NPort.GetDirection(System.Single@)">
            <summary>
            Gets the port direction
            </summary>
            <param name="direction">result direction (in radians). Valid only if the method returned true</param> 
            <returns>true if the port direction is determined, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPort.GetAnchorModel(System.Guid)">
            <summary>
            Gets the model to which the port is anchored
            </summary>
            <param name="anchorUId">uid of the model</param>
            <returns>reference to the anchor model</returns>
        </member>
        <member name="M:Nevron.Diagram.NPort.DisconnectPlugs">
            <summary>
            Disconnects all plugs currently connected to this port.
            Only applicable if this is an inward port.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPort.DisconnectOutwardPorts">
            <summary>
            Disconnects all outward ports currently connected to this port. 
            Only applicable if this is an inward port.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPort.DisconnectConnectedPoints">
            <summary>
            Disconnects all points currently connected to this port.
            Only applicable if this is an inward port.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPort.ShouldSerializeOffset">
            <summary>
            Determines whether the Offset property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NPort.ShouldSerializeType">
            <summary>
            Determines whether the Type property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NPort.DisconnectAmbiguosConnections(Nevron.Diagram.NPort)">
            <summary>
            Called when this point is about to be connected to the specified inward port 
            and it needs to disconnect any ambiguos connections that the point or the shape may have
            </summary>
            <remarks>
            Overriden to disconnect the start and end plugs and all other connected outward ports
            </remarks>
            <param name="inwardPort"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NPort.OnLocationChanged">
            <summary>
            Called when the location of the port has changed
            </summary>
            <remarks>
            The method will first update the dependent shapes. 
            It will then update the shape trakers.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPort.OnDirectionChanged">
            <summary>
            Called when the direction of the port has changed
            </summary>
            <remarks>
            The method will update the dependent shapes.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPort.MustHitTest(Nevron.Diagram.NHitTestContext)">
            <summary>
            Determines whether the port must be hit tested. 
            Typically a label does not need to be hit tested, if it is not visible or the shape to which it belongs is collapsed.
            </summary>
            <param name="context">hit test context</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NRotatedBoundsPort">
            <summary>
            The NRotatedBoundsPort class represents a port, which can be anchored to the rotated bounds of a model
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NRotatedBoundsPort.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NRotatedBoundsPort.#ctor(Nevron.Diagram.NContentAlignment)">
            <summary>
            Creates a new rotated bounds port, anchored to the rotated bounds of the shape
            </summary>
            <param name="alignment">alignment relative to the shape rotated bounds</param>
        </member>
        <member name="M:Nevron.Diagram.NRotatedBoundsPort.#ctor(System.Guid,Nevron.Diagram.NContentAlignment)">
            <summary>
            Creates a new rotated bounds port, anchored to the rotated bounds of the model with the specified id
            </summary>
            <param name="anchorUniqueId">unique unique id of the anchor model</param>
            <param name="alignment">alignment relative to the model rotated bounds</param>
        </member>
        <member name="M:Nevron.Diagram.NRotatedBoundsPort.#ctor(System.Guid,System.Drawing.ContentAlignment)">
            <summary>
            Creates a new rotated bounds port, anchored to the rotated bounds of the model with the specified id
            </summary>
            <param name="anchorUniqueId">unique unique id of the anchor model</param>
            <param name="alignment">alignment relative to the model rotated bounds</param>
        </member>
        <member name="P:Nevron.Diagram.NRotatedBoundsPort.Alignment">
            <summary>
            Gets/sets the alignment of the rotated bounds port relative to the anchor model rotated bounds
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NRotatedBoundsPort.DirectionMode">
            <summary>
            Gets/sets the mode in which the point port direction is determined.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NRotatedBoundsPort.GetDirection(System.Single@)">
            <summary>
            Gets the port direction
            </summary>
            <param name="direction">result direction (in radians). Valid only if the method returned true</param> 
            <returns>true if the port direction is determined, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NRotatedBoundsPort.GetLocation">
            <summary>
            Overiden to obtain an aligned point relative to the anchor model rotated bounds 
            and apply the current offset to it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NRotatedBoundsPort.SetLocation(Nevron.GraphicsCore.NPointF)">
            <summary>
            Overriden to alter the rotated bounds port alignment.
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:Nevron.Diagram.NRotatedBoundsPort.ShouldSerializeAlignment">
            <summary>
            Determines whether the Alignment property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NRotatedBoundsPort.ShouldSerializeDirectionMode">
            <summary>
            Determines whether the DirectionMode property should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NControlPoint">
            <summary>
            The NControlPoint class represents a shape control point
            </summary>
            <remarks>
            Control points store a their location in shape model coordinates. 
            In this way when a shape is transformed the control points of the shape adopt the shape transformation.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NControlPoint.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NControlPoint.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="tooltip">tooltip</param>
        </member>
        <member name="P:Nevron.Diagram.NControlPoint.Abilities">
            <summary>
            Gets the element abilities
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NControlPoint.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <remarks>
            Overriden to convert the model point location
            </remarks>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.NControlPoint.ModelLocation">
            <summary>
            Gets/sets the shape point location in model coordinates of the shape to which it belongs
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NControlPoint.Tooltip">
            <summary>
            Gets/sets the contol point tooltip
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NControlPoint.GetPointInfo">
            <summary>
            Overriden to return information about the control point
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NControlPoint.GetLocation">
            <summary>
            Gets the control point location in scene coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NControlPoint.SetLocation(Nevron.GraphicsCore.NPointF)">
            <summary>
            Sets the control point location in scene coordinates
            </summary>
            <param name="location"></param>
        </member>
        <member name="P:Nevron.Diagram.NControlPoint.ModelLocationXML">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NShapePoint">
            <summary>
            The NShapePoint abstract class serves as base class for all types of shape points
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShapePoint.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShapePoint.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to cashe a reference to the shape to which the point belongs
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.NShapePoint.Translate(System.Single,System.Single)">
            <summary>
            Translates the node with the specified offset
            </summary>
            <param name="dx">x offset</param>
            <param name="dy">y offset</param>
        </member>
        <member name="P:Nevron.Diagram.NShapePoint.Location">
            <summary>
            Gets/sets the shape point location (in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NShapePoint.Shape">
            <summary>
            Obtains a reference to the shape to which this point belongs
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NShapePoint.GetPointInfo">
            <summary>
            Obtains information about the shape point
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NArrowheadShape">
            <summary>
            Represents a simple GraphicsPath based arrowhead shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShape.#ctor(System.Drawing.Drawing2D.GraphicsPath,Nevron.GraphicsCore.NRectangleF,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="path">arrowhead shape</param>
            <param name="bounds">arrowhead bounds</param>
            <param name="closed">whether the path is closed or not</param>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShape.#ctor(Nevron.Diagram.ArrowheadShape,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Initializes a predefined arrowhead shape
            </summary>
            <param name="shape"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShape.Dispose">
            <summary>
            Disposes the contained graphics path
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShape.PaintAppearance(Nevron.Diagram.NPaintContext,Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NSizeL@,Nevron.GraphicsCore.NPointF@,System.Single)">
            <summary>
            Paints the stencil shape appearance
            </summary>
            <param name="context"></param>
            <param name="fillStyle"></param>
            <param name="strokeStyle"></param>
            <param name="size"></param>
            <param name="location"></param>
            <param name="orientation"></param>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShape.PaintShadow(Nevron.Diagram.NPaintContext,Nevron.GraphicsCore.NShadowStyle,Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NSizeL@,Nevron.GraphicsCore.NPointF@,System.Single)">
            <summary>
            Paints the stencil shape shadow
            </summary>
            <param name="context"></param>
            <param name="shadowStyle"></param>
            <param name="strokeStyle"></param>
            <param name="fillStyle"></param>
            <param name="size"></param>
            <param name="location"></param>
            <param name="orientation"></param>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShape.InitArrow(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Inits an arrow shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShape.InitCircle(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Inits a circle shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShape.InitFork(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Inits a fork shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShape.InitClosedFork(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Inits a closed fork shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShape.InitDoubleArrow(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Inits a double arrow shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShape.InitLosangle(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Inits a losangle shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShape.InitMany(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Inits a many shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShape.InitManyOptional(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Inits a many optional shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShape.InitOne(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Inits a one shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShape.InitOneOptional(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Inits a one optional shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShape.InitOneOrMany(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Inits a one or many shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShape.InitOpenedArrow(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Inits an opended arrow shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShape.InitQuillArrow(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Inits an opended arrow shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShape.InitSunkenArrow(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Inits a sunken arrow shape
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NArrowheadShape.Path">
            <summary>
            Graphics path of the shape
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NArrowheadShape.Bounds">
            <summary>
            Bounds of the shape
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NArrowheadShape.Closed">
            <summary>
            Whether the path must be painted as closed figure or not
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NArrowheadShapeStencil">
            <summary>
            The NArrowheadShapeStencil class is a stencil, which holds the shapes of the arrowheads.
            </summary>
            <remarks>
            A reference to the NArrowheadShapeStencil can be obtained from the ArrowheadShapeStencil property of each NDrawingDocument instance.
            During painting a reference to this class can be obtained from the ArrowheadShapeStencil field of the NPaintContext class.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShapeStencil.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            Initializes the stencil with predefined arrowhead shapes, by calling the InitWithPredefinedArrowheadShapes method.
            </remarks> 
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShapeStencil.CreateNonSerializedObjects">
            <summary>
            Overriden to create the predefined arrowhead shapes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShapeStencil.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Overriden to check whether the inserted node also implements the INBoundable and INStyle interfaces
            </summary>
            <param name="index">index at which the node must be inserted</param>
            <param name="node">node which must be inserted</param>
            <returns>true if the node can be inserted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShapeStencil.PaintArrowheadAppearance(Nevron.Diagram.NPaintContext,Nevron.Diagram.NArrowheadStyle,Nevron.GraphicsCore.NPointF,System.Single)">
            <summary>
            Paints an arrowhead appearance in the specified context
            </summary>
            <param name="context">paint context</param>
            <param name="style">arrowhead style to use</param>
            <param name="location">location (in world coordinates)</param>
            <param name="orientation">orienation of the arrowhead</param>
            <returns>true if the arrowhead was successfully painted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShapeStencil.PaintArrowheadShadow(Nevron.Diagram.NPaintContext,Nevron.Diagram.NArrowheadStyle,Nevron.GraphicsCore.NShadowStyle,Nevron.GraphicsCore.NPointF,System.Single)">
            <summary>
            Paints an arrowhead shadow in the specified context
            </summary>
            <param name="context">paint context</param>
            <param name="style">arrowhead style to use</param>
            <param name="shadowStyle">arrowhead shadow to use</param>
            <param name="location">location (in world coordinates)</param>
            <param name="orientation">orienation of the arrowhead</param>
            <returns>true if the arrowhead was successfully painted, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.NArrowheadShapeStencil.PredefinedArrowheadShapes">
            <summary>
            Gets the predefined arrowhead shapes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NArrowheadShapeStencil.CreatePredefinedArrowheadShapes">
            <summary>
            Creates the predefined arrowhead shapes
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NPointShape">
            <summary>
            Represents a simple GraphicsPath based point shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPointShape.#ctor(System.Drawing.Drawing2D.GraphicsPath,Nevron.GraphicsCore.NRectangleF,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="path">arrowhead shape</param>
            <param name="bounds">arrowhead bounds</param>
            <param name="closed">whether the path is closed or not</param>
        </member>
        <member name="M:Nevron.Diagram.NPointShape.#ctor(Nevron.Diagram.PointShape,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Initializes a predefined point shape
            </summary>
            <param name="shape"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:Nevron.Diagram.NPointShape.Dispose">
            <summary>
            Disposes the contained graphics path
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPointShape.PaintAppearance(Nevron.Diagram.NPaintContext,Nevron.GraphicsCore.NSizeF@,Nevron.GraphicsCore.NPointF@)">
            <summary>
            Paints a point appearance in the specified context
            </summary>
            <param name="context"></param>
            <param name="size"></param>
            <param name="location"></param>
        </member>
        <member name="M:Nevron.Diagram.NPointShape.InitRectangle(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Inits a rectangle shape
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NPointShape.InitEllipse(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Inits an ellipse shape
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NPointShape.InitEllipseTarget(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Inits an ellipse target shape
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NPointShape.InitRectangleTarget(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Inits a rectangle target shape
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Diagram.NPointShape.Path">
            <summary>
            Graphics path of the shape
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPointShape.Bounds">
            <summary>
            Bounds of the shape
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NPointShape.Closed">
            <summary>
            Whether the path must be painted as closed figure or not
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NPointShapeStencil">
            <summary>
            The NPointShapeStencil class is a stencil, which holds the shapes of the points.
            </summary>
            <remarks>
            A reference to the NPointShapeStencil can be obtained from the PointShapeStencil property of each NDrawingDocument instance.
            During painting a reference to this class can be obtained from the PointShapeStencil field of the NPaintContext class.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NPointShapeStencil.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            Initializes the stencil with predefined point shapes, by calling the InitWithPredefinedPointShapes method.
            </remarks> 
        </member>
        <member name="M:Nevron.Diagram.NPointShapeStencil.CreateNonSerializedObjects">
            <summary>
            Overriden to create the predefined arrowhead shapes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPointShapeStencil.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Overriden to check whether the inserted node also implements the INBoundable and INStyle interfaces
            </summary>
            <param name="index">index at which the node must be inserted</param>
            <param name="node">node which must be inserted</param>
            <returns>true if the node can be inserted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NPointShapeStencil.PaintPointAppearance(Nevron.Diagram.NPaintContext,Nevron.Diagram.PointShape,System.String,Nevron.GraphicsCore.NPointF@,Nevron.GraphicsCore.NSizeF@)">
            <summary>
            Paints a point appearance in the specified context
            </summary>
            <param name="context">paint context</param>
            <param name="pointShape">point shape</param>
            <param name="customShapeName">custom shape name</param>
            <param name="location">location</param>
            <param name="size">size</param>
        </member>
        <member name="P:Nevron.Diagram.NPointShapeStencil.PredefinedPointShapes">
            <summary>
            Gets the predefined point shapes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NPointShapeStencil.CreatePredefinedPointShapes">
            <summary>
            Creates the predefined point shapes
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NStencil">
            <summary>
            The NStencil class is a collection, which is used to hold reusable INStencilTransformable implementors
            </summary>
            <remarks>
            You can only insert nodes which implement the INStencilTransformable to a stencil, since the framework uses 
            this method to fastly reposition the stencil items during painting.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NStencil.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NStencil.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Overriden to accept only nodes of type NModel 
            </summary>
            <param name="index">index at which the node must be inserted</param>
            <param name="node">node which must be inserted</param>
            <returns>true if the node can be inserted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NStencil.GetServiceOfType(System.Type)">
            <summary>
            Gets a reference to a service of the specified type
            </summary>
            <remarks>
            This implementation will return null for service of type NDiagramSmartPaintService. 
            For all other types of services it will call the document implementation of the INServiceProvider interface. 
            In this way models hosted in stencils cannot be invalidated.
            </remarks>
            <param name="serviceType">service type</param>
            <returns>service instance or null if a service of this type cannot be located</returns>
        </member>
        <member name="P:Nevron.Diagram.Editors.NAutocadExporterUC.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Editors.NRiaExporterUC.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Editors.NPdfExporterUC.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Editors.NMapImporterUC.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Editors.NContentAlignmentTypeEditor">
            <summary>
            Type editor the NContentAlignment type.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NContentAlignmentTypeEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NContentAlignmentTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NContentAlignmentTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="inObj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NContentAlignmentTypeEditor.Edit(Nevron.Diagram.NContentAlignment,Nevron.Diagram.NContentAlignment@)">
            <summary>
            Shows a modal content alignment editor
            </summary>
            <param name="alignment">alignment with which to initialize the editor</param>
            <param name="result">result alignment</param>
            <returns>true if the user pressed the OK button, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.Editors.NDiagramElementContainerTypeEditor">
            <summary>
            Type editor for nodes, which implement the INDiagramElementContainer interface
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NDiagramElementContainerTypeEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NDiagramElementContainerTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NDiagramElementContainerTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="inObj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NDiagramElementContainerTypeEditor.Edit(Nevron.Diagram.INDiagramElementContainer)">
            <summary>
            Shows a modal container node editor
            </summary>
            <remarks>
            If the specified container is attached to a document, the method will start a composite change transaction.
            If the user clicked the OK button, the transaction will be commited, otherwise it will be rolled back. 
            </remarks>
            <param name="container">container to edit</param>
            <returns>true if the user pressed the OK button, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.Editors.NDiagramElementTypeEditor">
            <summary>
            Type editor for leaf elements (ones that do not implement the INDiagramElementContainer interface)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NDiagramElementTypeEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NDiagramElementTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NDiagramElementTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="inObj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NDiagramElementTypeEditor.Edit(Nevron.Diagram.INDiagramElement)">
            <summary>
            Shows a modal element editor
            </summary>
            <remarks>
            If the specified element is attached to a document, the method will start a composite property change transaction.
            If the user clicked the OK button, the transaction will be commited, otherwise it will be rolled back. 
            </remarks>
            <param name="element">element to edit</param>
            <returns>true if the user pressed the OK button, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.Editors.NGlobalVisibilityTypeEditor">
            <summary>
            Type editor for the NGlobalVisibility type
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NGlobalVisibilityTypeEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NGlobalVisibilityTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NGlobalVisibilityTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="inObj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NGlobalVisibilityTypeEditor.Edit(Nevron.Diagram.NGlobalVisibility,Nevron.Diagram.NGlobalVisibility@)">
            <summary>
            Shows a modal global visibility editor
            </summary>
            <param name="visibility">global visibility with which to initialize the editor. Can be null</param>
            <param name="result">result global visibility</param>
            <returns>true if the user pressed the OK button, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.Editors.NGraphicsSettingsTypeEditor">
            <summary>
            Type editor for the NGraphicsSettings type
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NGraphicsSettingsTypeEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NGraphicsSettingsTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NGraphicsSettingsTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="inObj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NGraphicsSettingsTypeEditor.Edit(Nevron.Diagram.NGraphicsSettings,Nevron.Diagram.NGraphicsSettings@)">
            <summary>
            Shows a modal graphics settings editor
            </summary>
            <param name="settings">settings with which to initialize the editor</param>
            <param name="result">result settings</param>
            <returns>true if the user pressed the OK button, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.Editors.NInteractionStyleTypeEditor">
            <summary>
            Type editor for the NInteractionStyle type
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NInteractionStyleTypeEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NInteractionStyleTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NInteractionStyleTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="inObj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NInteractionStyleTypeEditor.Edit(Nevron.Diagram.NInteractionStyle,Nevron.Diagram.NInteractionStyle@)">
            <summary>
            Shows a modal interaction style editor
            </summary>
            <param name="interactionStyle">interaction style with which to initialize the editor</param>
            <param name="result">result interaction style</param>
            <returns>true if the user pressed the OK button, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.Editors.NMarginsTypeEditor">
            <summary>
            Type editor for the NMargins type
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NMarginsTypeEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NMarginsTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NMarginsTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="inObj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NMarginsTypeEditor.Edit(Nevron.Diagram.NMargins,Nevron.Diagram.NMargins@)">
            <summary>
            Shows a modal margins editor
            </summary>
            <param name="margins">margins with which to initialize the editor</param>
            <param name="result">result margins</param>
            <returns>true if the user pressed the OK button, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.Editors.NOptionalShapeElementsTypeEditor">
            <summary>
            Type editor for optional shape elements
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NOptionalShapeElementsTypeEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Editors.NOptionalShapeElementsTypeEditor.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NOptionalShapeElementsTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Editors.NProtectionTypeEditor">
            <summary>
            Type editor for the NAbilities type, when it is used to define the element protection
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NProtectionTypeEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NProtectionTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NProtectionTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="inObj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NProtectionTypeEditor.Edit(Nevron.Diagram.NAbilities,Nevron.Diagram.NAbilities,Nevron.Diagram.NAbilities@)">
            <summary>
            Shows a modal protection editor
            </summary>
            <param name="protection">protection with which to initialize the editor</param>
            <param name="abilities">abilities of the element</param>
            <param name="result">result protection</param>
            <returns>true if the user pressed the OK button, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.Editors.NSnapStrengthTypeEditor">
            <summary>
            Type editor for the NSnapStrength type
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NSnapStrengthTypeEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Editors.NSnapStrengthTypeEditor.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NSnapStrengthTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NSnapStrengthTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="inObj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NSnapStrengthTypeEditor.Edit(Nevron.Diagram.NSnapStrength,Nevron.Diagram.NSnapStrength@)">
            <summary>
            Shows a modal snap strength editor
            </summary>
            <param name="strength">snap strength with which to initialize the editor</param>
            <param name="result">result snap strength</param>
            <returns>true if the user pressed the OK button, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.Editors.NSnapTargetsTypeEditor">
            <summary>
            Type editor for the NSnapTargets type
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NSnapTargetsTypeEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NSnapTargetsTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NSnapTargetsTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="inObj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NSnapTargetsTypeEditor.Edit(Nevron.Diagram.NSnapTargets,Nevron.Diagram.NSnapTargets@)">
            <summary>
            Shows a modal snap targets editor
            </summary>
            <param name="targets">targets with which to initialize the editor</param>
            <param name="result">result targets</param>
            <returns>true if the user pressed the OK button, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.Editors.NStyleTypeEditor">
            <summary>
            Type editor for style attributes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NStyleTypeEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NStyleTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NStyleTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="inObj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NStyleTypeEditor.Edit(Nevron.Diagram.INDiagramElementContainer)">
            <summary>
            Shows a modal container node editor
            </summary>
            <remarks>
            If the specified container is attached to a document, the method will start a composite change transaction.
            If the user clicked the OK button, the transaction will be commited, otherwise it will be rolled back. 
            </remarks>
            <param name="container">container to edit</param>
            <returns>true if the user pressed the OK button, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.Editors.NTranslationSlavesTypeEditor">
            <summary>
            Type editor for the NTranslationSlaves type, when it is used to define the shapes, which must be translated with the shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NTranslationSlavesTypeEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NTranslationSlavesTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NTranslationSlavesTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="inObj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NTranslationSlavesTypeEditor.Edit(Nevron.Diagram.NTranslationSlaves,Nevron.Diagram.NTranslationSlaves@)">
            <summary>
            Shows a modal translation slaves editor
            </summary>
            <param name="slaves">slaves of the shape</param>
            <param name="result">result slaves</param>
            <returns>true if the user pressed the OK button, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.Editors.NArrowheadStyleTypeEditor">
            <summary>
            Type editor for the NArrowheadStyle type
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NArrowheadStyleTypeEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NArrowheadStyleTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NArrowheadStyleTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="inObj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NArrowheadStyleTypeEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines whether the editor supports painting (preview).
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NArrowheadStyleTypeEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Overriden to paint a preview of the composed bridge style shape
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.Editors.NArrowheadStyleTypeEditor.Edit(Nevron.Diagram.NArrowheadStyle,Nevron.Diagram.NArrowheadStyle@,System.Boolean,System.Boolean)">
            <summary>
            Shows a modal arrowhead style editor
            </summary>
            <param name="style">style with which to initialize the editor</param>
            <param name="result">result style</param>
            <param name="startArrowhead">whether the style belongs to a start arrowhead</param>
            <param name="automatic">whether the init style was automatically obtained</param>
            <returns>true if the user pressed the OK button, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.Editors.NBridgeStyleTypeEditor">
            <summary>
            Type editor for the NBridgeStyle type
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NBridgeStyleTypeEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NBridgeStyleTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NBridgeStyleTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="inObj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NBridgeStyleTypeEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines whether the editor supports painting (preview).
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NBridgeStyleTypeEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Overriden to paint a preview of the composed bridge style shape
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.Editors.NBridgeStyleTypeEditor.Edit(Nevron.Diagram.NBridgeStyle,Nevron.Diagram.NBridgeStyle@,System.Boolean)">
            <summary>
            Shows a modal bridge style editor
            </summary>
            <param name="style">style with which to initialize the editor. Can be null</param>
            <param name="result">result style</param>
            <param name="automatic">whether the init style was automatically obtained</param>
            <returns>true if the user pressed the OK button, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.Editors.NFillStyleComposeTypeEditor">
            <summary>
            Provides facilities for visual editing of composed NFillStyle objects.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NFillStyleComposeTypeEditor.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NFillStyleComposeTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Overriden to compose NFillStyle from context.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="inObj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NFillStyleComposeTypeEditor.PaintValueInternal(Nevron.GraphicsCore.NAppearanceStyle,System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Overriden to compose the fill style.
            </summary>
            <param name="appearanceStyle"></param>
            <param name="e"></param>
        </member>
        <member name="T:Nevron.Diagram.Editors.NShadowStyleComposeTypeEditor">
            <summary>
            Provides facilities for visual editing of composed NShadowStyle objects.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NShadowStyleComposeTypeEditor.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NShadowStyleComposeTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Overriden to compose NShadowStyle from context.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="inObj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NShadowStyleComposeTypeEditor.PaintValueInternal(Nevron.GraphicsCore.NAppearanceStyle,System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Overriden to compose the shadow style. 
            </summary>
            <param name="appearanceStyle"></param>
            <param name="e"></param>
        </member>
        <member name="T:Nevron.Diagram.Editors.NStrokeStyleComposeTypeEditor">
            <summary>
            Provides facilities for visual editing of composed NStrokeStyle objects.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NStrokeStyleComposeTypeEditor.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NStrokeStyleComposeTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Overriden to compose NStrokeStyle from context.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="inObj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NStrokeStyleComposeTypeEditor.PaintValueInternal(Nevron.GraphicsCore.NAppearanceStyle,System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Overriden to compose the stroke style. 
            </summary>
            <param name="appearanceStyle"></param>
            <param name="e"></param>
        </member>
        <member name="T:Nevron.Diagram.Editors.NTextStyleComposeTypeEditor">
            <summary>
            Provides facilities for visual editing of composed NTextStyle objects.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NTextStyleComposeTypeEditor.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Editors.NTextStyleComposeTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Overriden to compose NTextStyle from the context
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="inObj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Editors.NTextStyleComposeTypeEditor.PaintValueInternal(Nevron.GraphicsCore.NAppearanceStyle,System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Overriden to compose the text style. 
            </summary>
            <param name="appearanceStyle"></param>
            <param name="e"></param>
        </member>
        <member name="T:Nevron.Diagram.ArrowheadShape">
            <summary>
            Enumerates the currently available arrowhead shapes 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ArrowheadShape.None">
            <summary>
            The arrow head is not displayed
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ArrowheadShape.Custom">
            <summary>
            The arrow head is displayed with a user defined shape
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ArrowheadShape.Arrow">
            <summary>
            An arrow.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ArrowheadShape.Circle">
            <summary>
            A circle.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ArrowheadShape.ClosedFork">
            <summary>
            A closed folk.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ArrowheadShape.DoubleArrow">
            <summary>
            A double arrow.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ArrowheadShape.Fork">
            <summary>
            A fork.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ArrowheadShape.Losangle">
            <summary>
            A losangle.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ArrowheadShape.Many">
            <summary>
            (Used in UML diagrams)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ArrowheadShape.ManyOptional">
            <summary>
            (Used in UML diagrams)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ArrowheadShape.One">
            <summary>
            (Used in UML diagrams)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ArrowheadShape.OneOptional">
            <summary>
            (Used in UML diagrams)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ArrowheadShape.OneOrMany">
            <summary>
            (Used in UML diagrams)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ArrowheadShape.OpenedArrow">
            <summary>
            (Used in UML diagrams)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ArrowheadShape.QuillArrow">
            <summary>
            A quill arrow.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ArrowheadShape.SunkenArrow">
            <summary>
            A sunken arrow.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.PointShape">
            <summary>
            Enumerates the currently available point shapes 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointShape.None">
            <summary>
            The point is not displayed
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointShape.Custom">
            <summary>
            The point is displayed with a user defined shape
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointShape.Rectangle">
            <summary>
            Rectangle
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointShape.Ellipse">
            <summary>
            Ellipse
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointShape.RectangleTarget">
            <summary>
            Rectangle target
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointShape.EllipseTarget">
            <summary>
            Ellipse target
            </summary>
        </member>
        <member name="T:Nevron.Diagram.BridgeShape">
            <summary>
            Enumerates the currently available bridge shapes (displayed at lines intersections)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.BridgeShape.None">
            <summary>
            The bridge is not displayed
            </summary>
        </member>
        <member name="F:Nevron.Diagram.BridgeShape.Arc">
            <summary>
            Arc
            </summary>
        </member>
        <member name="F:Nevron.Diagram.BridgeShape.Gap">
            <summary>
            Gap
            </summary>		
        </member>
        <member name="F:Nevron.Diagram.BridgeShape.Square">
            <summary>
            Square
            </summary>
        </member>
        <member name="F:Nevron.Diagram.BridgeShape.Sides2">
            <summary>
            2 sided bridge
            </summary>
        </member>
        <member name="F:Nevron.Diagram.BridgeShape.Sides3">
            <summary>
            3 sided bridge
            </summary>
        </member>
        <member name="F:Nevron.Diagram.BridgeShape.Sides4">
            <summary>
            4 sided bridge
            </summary>
        </member>
        <member name="F:Nevron.Diagram.BridgeShape.Sides5">
            <summary>
            5 sided bridge
            </summary>
        </member>
        <member name="F:Nevron.Diagram.BridgeShape.Sides6">
            <summary>
            6 sided bridge
            </summary>
        </member>
        <member name="F:Nevron.Diagram.BridgeShape.Sides7">
            <summary>
            7 sided bridge
            </summary>
        </member>
        <member name="T:Nevron.Diagram.BridgeTargets">
            <summary>
            Defines the possible bridge targets
            </summary>
        </member>
        <member name="F:Nevron.Diagram.BridgeTargets.None">
            <summary>
            The bridgeable has no bridge targets 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.BridgeTargets.SelfAndOther">
            <summary>
            Bridges are displayed on self intersections and intersections with other nodes 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.BridgeTargets.Self">
            <summary>
            Bridges are only displayed on self intersections
            </summary>
        </member>
        <member name="F:Nevron.Diagram.BridgeTargets.Other">
            <summary>
            Bridges are only displayed on intersections with other nodes
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ArrowType">
            <summary>
            Defines the possible arrow types
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ArrowType.SingleArrow">
            <summary>
            Single arrow
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ArrowType.DoubleArrow">
            <summary>
            Double arrow
            </summary>
        </member>
        <member name="T:Nevron.Diagram.RoutableConnectorType">
            <summary>
            Defines the possible routable edge types
            </summary>
        </member>
        <member name="F:Nevron.Diagram.RoutableConnectorType.DynamicHV">
            <summary>
            Dynamic right-angle (horizontally vertical) edge
            </summary>
        </member>
        <member name="F:Nevron.Diagram.RoutableConnectorType.DynamicPolyline">
            <summary>
            Dynamic polyline
            </summary>
        </member>
        <member name="F:Nevron.Diagram.RoutableConnectorType.DynamicCurve">
            <summary>
            Dynamic polyline
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ConnectorType">
            <summary>
            Enumerates the currently available types of graph edges
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ConnectorType.Line">
            <summary>
            Line graph edge
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ConnectorType.Bezier">
            <summary>
            Bezier graph edge
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ConnectorType.SingleArrow">
            <summary>
            Single arrow graph edge
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ConnectorType.DoubleArrow">
            <summary>
            Double arrow graph edge
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ConnectorType.SideToTopBottom">
            <summary>
            Side to top/bottom graph edge
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ConnectorType.TopBottomToSide">
            <summary>
            Top/bottom to side graph edge
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ConnectorType.SideToSide">
            <summary>
            Side to side graph edge
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ConnectorType.TopToBottom">
            <summary>
            Top to bottom graph edge
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ConnectorType.DynamicHV">
            <summary>
            Dynamic HV 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ConnectorType.DynamicPolyline">
            <summary>
            Dynamic polyline
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ConnectorType.DynamicCurve">
            <summary>
            Dynamic curve
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ConnectorType.ErmConnector">
            <summary>
            Erm connector
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ViewLayout">
            <summary>
            Defines the possible view layouts
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ViewLayout.Normal">
            <summary>
            Document is displayed with the view specified scale
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ViewLayout.Fit">
            <summary>
            Document is fit inside the view window (preserves aspect ratio)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ViewLayout.Stretch">
            <summary>
            Document is stretched to the view window (breaks aspect ratio)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ViewLayout.StretchToWidth">
            <summary>
            Document is stretched to the view window width (preserves aspect ratio)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ViewLayout.StretchToHeight">
            <summary>
            Document is stretched to the view window height (preserves aspect ratio)
            </summary>
        </member>
        <member name="T:Nevron.Diagram.CanvasLayout">
            <summary>
            Defines the possible canvas layouts
            </summary>
        </member>
        <member name="F:Nevron.Diagram.CanvasLayout.Normal">
            <summary>
            Document is displayed with the canvas specified scale
            </summary>
        </member>
        <member name="F:Nevron.Diagram.CanvasLayout.Fit">
            <summary>
            Document is fit inside the canvas window (preserves the aspect ratio)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.CanvasLayout.Stretch">
            <summary>
            Document is stretched to the canvas window (breaks the aspect ratio)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.CanvasLayout.StretchToWidth">
            <summary>
            Document is stretched to the canvas window width (preserves the aspect ratio)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.CanvasLayout.StretchToHeight">
            <summary>
            Document is stretched to the canvas window height (preserves the aspect ratio)
            </summary>
        </member>
        <member name="T:Nevron.Diagram.PointIndexMode">
            <summary>
            Enumerates the predefined point indexes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointIndexMode.First">
            <summary>
            First point
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointIndexMode.Last">
            <summary>
            Last point
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointIndexMode.Middle">
            <summary>
            Middle point
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointIndexMode.Second">
            <summary>
            The second point
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointIndexMode.LastButOne">
            <summary>
            The point before the last one
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointIndexMode.Custom">
            <summary>
            Custom index
            </summary>
        </member>
        <member name="T:Nevron.Diagram.SegmentIndexMode">
            <summary>
            Enumerates the predefined segment indexes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.SegmentIndexMode.First">
            <summary>
            First segment
            </summary>
        </member>
        <member name="F:Nevron.Diagram.SegmentIndexMode.Last">
            <summary>
            Last segment
            </summary>
        </member>
        <member name="F:Nevron.Diagram.SegmentIndexMode.Middle">
            <summary>
            Middle segment
            </summary>
        </member>
        <member name="F:Nevron.Diagram.SegmentIndexMode.Custom">
            <summary>
            Custom segment index
            </summary>
        </member>
        <member name="T:Nevron.Diagram.AutoBoundsMode">
            <summary>
            Enumerates the possible ways, in which documents can automatically determine their bounds
            </summary>/
        </member>
        <member name="F:Nevron.Diagram.AutoBoundsMode.CustomNonConstrained">
            <summary>
            Bounds are provided by the user and document content is not contrained inside these bounds
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AutoBoundsMode.CustomConstrained">
            <summary>
            Bounds are provided by the user and document content is contrained inside these bounds
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AutoBoundsMode.AutoSizeToContent">
            <summary>
            Bounds are automatically sized to the bounds of the document content
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AutoBoundsMode.AutoInflateToContent">
            <summary>
            Bounds are automatically inflated to accomodate the document content
            </summary>
        </member>
        <member name="T:Nevron.Diagram.AppearanceChangeMode">
            <summary>
            Defines the appearance change when the object is displayed as selected or highlighted
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AppearanceChangeMode.None">
            <summary>
            The appearance is not changed
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AppearanceChangeMode.StrokeStyle">
            <summary>
            Only the stroke style is changed
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AppearanceChangeMode.FillStyle">
            <summary>
            Only the fill style is changed
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AppearanceChangeMode.Appearance">
            <summary>
            Both the stroke and fill styles are changed
            </summary>
        </member>
        <member name="T:Nevron.Diagram.PaintPassMask">
            <summary>
            Defines the appearance components, which must be painted by node during a content paint pass
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PaintPassMask.Appearance">
            <summary>
            Appearance
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PaintPassMask.Shadow">
            <summary>
            Shadow
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PaintPassMask.AppearanceAndShadow">
            <summary>
            Appearance and shadow
            </summary>
        </member>
        <member name="T:Nevron.Diagram.PaintPass">
            <summary>
            Defines the possible paint passes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PaintPass.Background">
            <summary>
            Background
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PaintPass.Foreground">
            <summary>
            Foreground
            </summary>
        </member>
        <member name="T:Nevron.Diagram.PaintReason">
            <summary>
            Defines the possible reasons for painting
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PaintReason.View">
            <summary>
            View 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PaintReason.Print">
            <summary>
            Print
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PaintReason.ImageExport">
            <summary>
            Image export
            </summary>
        </member>
        <member name="T:Nevron.Diagram.PointType">
            <summary>
            Defines the possible point types
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointType.GeometryBasePoint">
            <summary>
            Geometry base point
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointType.GeometryControlPoint">
            <summary>
            Geometry control point
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointType.GeometryMidPoint">
            <summary>
            Geometry segment middle point
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointType.ShapeStartPlug">
            <summary>
            Shape start plug
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointType.ShapeEndPlug">
            <summary>
            Shape end plug
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointType.ShapePort">
            <summary>
            Shape port
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointType.ShapeControlPoint">
            <summary>
            Shape control point
            </summary>
        </member>
        <member name="T:Nevron.Diagram.CoordinateSystem">
            <summary>
            Enumerates the coordinate systems in which transform operations can be performed
            </summary>
        </member>
        <member name="F:Nevron.Diagram.CoordinateSystem.Parent">
            <summary>
            Parent - the coordinate system of the parent (relative coordinate system)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.CoordinateSystem.Scene">
            <summary>
            Scene - the coordinate system of the scene (absolute coordinate system)
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ResizeInAggregate">
            <summary>
            Defines the possible ways in which a model can be resized when the aggregate in which it resides is resized
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeInAggregate.UseAggregateSettings">
            <summary>
            Uses the settings of the aggregate to which the model resides. 
            In this mode the model will use the NAggregateModel ResizeAggregatedModels setting.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeInAggregate.DoNothing">
            <summary>
            The aggregate does not change the position and size of the model
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeInAggregate.Scale1D">
            <summary>
            The aggregate scales the start and end points of the model
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeInAggregate.RepositionOnly">
            <summary>
            The aggregate only repositions the model so that its pin preserves 
            it relative location to the aggregate model bounds
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeInAggregate.RepositionYOnly">
            <summary>
            The aggregate only repositions the model so that its pin Y coordinate preserves 
            it relative location to the aggregate model bounds
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeInAggregate.RepositionXOnly">
            <summary>
            The aggregate only repositions the model so that its pin X coordinate preserves 
            it relative location to the aggregate model bounds
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeInAggregate.AffineScaleY">
            <summary>
            The aggregate applies affine Y scaling to the model. 
            If the model is rotated this can break its orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeInAggregate.AffineScaleYRepositionX">
            <summary>
            The aggregate applies affine Y scaling to the model 
            and preserves the model pin X coordinate relative to the aggregate model bounds.
            If the model is rotated this can break its orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeInAggregate.AffineScaleX">
            <summary>
            The aggregate applies affine X scaling to the model. 
            If the model is rotated this can break its orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeInAggregate.AffineScaleXRepositionY">
            <summary>
            The aggregate applies affine X scaling to the model 
            and preserves the model pin Y coordinate relative to the aggregate model bounds.
            If the model is rotated this can break its orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeInAggregate.AffineScale">
            <summary>
            The aggregate applies affine X and Y scaling to the model. 
            If the model is rotated this can break its orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeInAggregate.CartesianScaleY">
            <summary>
            The aggregate applies cartesian Y scaling to the model. 
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeInAggregate.CartesianScaleYRepositionY">
            <summary>
            The aggregate applies cartesian Y scaling to the model 
            and preserves the model pin Y coordinate relative to the aggregate model bounds.
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeInAggregate.CartesianScaleYRepositionX">
            <summary>
            The aggregate applies cartesian Y scaling to the model 
            and preserves the model pin X coordinate relative to the aggregate model bounds.
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeInAggregate.CartesianScaleYAndReposition">
            <summary>
            The aggregate applies cartesian Y scaling to the model 
            and preserves the model pin position relative to the aggregate model bounds.
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeInAggregate.CartesianScaleX">
            <summary>
            The aggregate applies cartesian X scaling to the model. 
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeInAggregate.CartesianScaleXRepositionY">
            <summary>
            The aggregate applies cartesian X scaling to the model 
            and preserves the model pin Y coordinate relative to the aggregate model bounds.
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeInAggregate.CartesianScaleXRepositionX">
            <summary>
            The aggregate applies cartesian X scaling to the model 
            and preserves the model pin X coordinate relative to the aggregate model bounds.
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeInAggregate.CartesianScaleXAndReposition">
            <summary>
            The aggregate applies cartesian X scaling to the model 
            and preserves the model pin position relative to the aggregate model bounds.
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeInAggregate.CartesianScale">
            <summary>
            The aggregate applies cartesian X and Y scaling to the model. 
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeInAggregate.CartesianScaleRepositionY">
            <summary>
            The aggregate applies cartesian X and Y scaling to the model 
            and preserves the model pin Y coordinate relative to the aggregate model bounds.
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeInAggregate.CartesianScaleRepositionX">
            <summary>
            The aggregate applies cartesian X and Y scaling to the model 
            and preserves the model pin X coordinate relative to the aggregate model bounds.
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeInAggregate.CartesianScaleAndReposition">
            <summary>
            The aggregate applies cartesian X and Y scaling to the model 
            and preserves the model pin position relative to the aggregate model bounds.
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ResizeAggregatedModels">
            <summary>
            Defines the possible ways in which an aggregate model can by default resize the models it contains
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeAggregatedModels.DoNothing">
            <summary>
            The aggregate does not change the position and size of the model
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeAggregatedModels.Scale1D">
            <summary>
            The aggregate scales the start and end points of the model
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeAggregatedModels.RepositionOnly">
            <summary>
            The aggregate only repositions the model so that its pin preserves 
            it relative location to the aggregate model bounds
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeAggregatedModels.RepositionYOnly">
            <summary>
            The aggregate only repositions the model so that its pin Y coordinate preserves 
            it relative location to the aggregate model bounds
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeAggregatedModels.RepositionXOnly">
            <summary>
            The aggregate only repositions the model so that its pin X coordinate preserves 
            it relative location to the aggregate model bounds
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeAggregatedModels.AffineScaleY">
            <summary>
            The aggregate applies affine Y scaling to the model. 
            If the model is rotated this can break its orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeAggregatedModels.AffineScaleYRepositionX">
            <summary>
            The aggregate applies affine Y scaling to the model 
            and preserves the model pin X coordinate relative to the aggregate model bounds.
            If the model is rotated this can break its orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeAggregatedModels.AffineScaleX">
            <summary>
            The aggregate applies affine X scaling to the model. 
            If the model is rotated this can break its orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeAggregatedModels.AffineScaleXRepositionY">
            <summary>
            The aggregate applies affine X scaling to the model 
            and preserves the model pin Y coordinate relative to the aggregate model bounds.
            If the model is rotated this can break its orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeAggregatedModels.AffineScale">
            <summary>
            The aggregate applies affine X and Y scaling to the model. 
            If the model is rotated this can break its orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeAggregatedModels.CartesianScaleY">
            <summary>
            The aggregate applies cartesian Y scaling to the model. 
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeAggregatedModels.CartesianScaleYRepositionY">
            <summary>
            The aggregate applies cartesian Y scaling to the model 
            and preserves the model pin Y coordinate relative to the aggregate model bounds.
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeAggregatedModels.CartesianScaleYRepositionX">
            <summary>
            The aggregate applies cartesian Y scaling to the model 
            and preserves the model pin X coordinate relative to the aggregate model bounds.
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeAggregatedModels.CartesianScaleYAndReposition">
            <summary>
            The aggregate applies cartesian Y scaling to the model 
            and preserves the model pin position relative to the aggregate model bounds.
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeAggregatedModels.CartesianScaleX">
            <summary>
            The aggregate applies cartesian X scaling to the model. 
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeAggregatedModels.CartesianScaleXRepositionY">
            <summary>
            The aggregate applies cartesian X scaling to the model 
            and preserves the model pin Y coordinate relative to the aggregate model bounds.
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeAggregatedModels.CartesianScaleXRepositionX">
            <summary>
            The aggregate applies cartesian X scaling to the model 
            and preserves the model pin X coordinate relative to the aggregate model bounds.
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeAggregatedModels.CartesianScaleXAndReposition">
            <summary>
            The aggregate applies cartesian X scaling to the model 
            and preserves the model pin position relative to the aggregate model bounds.
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeAggregatedModels.CartesianScale">
            <summary>
            The aggregate applies cartesian X and Y scaling to the model. 
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeAggregatedModels.CartesianScaleRepositionY">
            <summary>
            The aggregate applies cartesian X and Y scaling to the model 
            and preserves the model pin Y coordinate relative to the aggregate model bounds.
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeAggregatedModels.CartesianScaleRepositionX">
            <summary>
            The aggregate applies cartesian X and Y scaling to the model 
            and preserves the model pin X coordinate relative to the aggregate model bounds.
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ResizeAggregatedModels.CartesianScaleAndReposition">
            <summary>
            The aggregate applies cartesian X and Y scaling to the model 
            and preserves the model pin position relative to the aggregate model bounds.
            This setting will preserve the model orthogonality.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.PastePositionMode">
            <summary>
            Defines the way in which pasted content is positioned inside drawing documents
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PastePositionMode.OffsetInSameDocument">
            <summary>
            Pasted content is offset only when pasting in the same drawing, 
            if the data came from another document it is centred
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PastePositionMode.CenterInDocument">
            <summary>
            Pasted content is always positioned in the center of the drawing 
            </summary>
        </member>
        <member name="T:Nevron.Diagram.AbilitiesMask">
            <summary>
            Abilities mask
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.Select">
            <summary>
            Can select
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.TrackersEdit">
            <summary>
            Can trackers edit - applicable only to shapes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.ContextMenuEdit">
            <summary>
            Can context menu edit - applicable to context menu editable elements
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.InplaceEdit">
            <summary>
            Can inplace edit - applicable to inplace editable elements
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.ChangeStyle">
            <summary>
            Can change style - applicable to styleable elements
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.MoveX">
            <summary>
            Can move X - applicable to translatable elements
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.MoveY">
            <summary>
            Can move Y - applicable to translatable elements
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.ResizeX">
            <summary>
            Can resize X - applicable to models
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.ResizeY">
            <summary>
            Can resize Y - applicable to models
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.ChangeAspectRatio">
            <summary>
            Can change aspect ratio - applicable to models
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.Rotate">
            <summary>
            Can rotate - applicable to models
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.Delete">
            <summary>
            Can delete - applicable to all elements, which reside in composites
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.Group">
            <summary>
            Can group - applicable only to shapes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.Ungroup">
            <summary>
            Can ungroup - applicable only to groups
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.Compose">
            <summary>
            Can compose - applicable only to shapes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.Decompose">
            <summary>
            Can decompose - applicable only to shapes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.ChangeStartPoint">
            <summary>
            Can change start point - applicable only to shapes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.ChangeEndPoint">
            <summary>
            Can change end point - applicable only to shapes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.ReorderElements">
            <summary>
            Can reorder elements - applicable to composite elements
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.InsertElements">
            <summary>
            Can insert elements - applicable to composite elements
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.RemoveElements">
            <summary>
            Can remove elements - applicable to composite elements
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.Copy">
            <summary>
            Can copy - applicable to all elements
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.Print">
            <summary>
            Can print - applicable to all elements paintable elements
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.Export">
            <summary>
            Can export - applicable to all elements paintable elements
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AbilitiesMask.All">
            <summary>
            All
            </summary>
        </member>
        <member name="T:Nevron.Diagram.InteractionStyleMask">
            <summary>
            The interaction style mask
            </summary>
        </member>
        <member name="F:Nevron.Diagram.InteractionStyleMask.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Nevron.Diagram.InteractionStyleMask.Bounds">
            <summary>
            Bounds
            </summary>
        </member>
        <member name="F:Nevron.Diagram.InteractionStyleMask.RotatedBounds">
            <summary>
            Rotated bounds
            </summary>
        </member>
        <member name="F:Nevron.Diagram.InteractionStyleMask.Rotation">
            <summary>
            Rotation
            </summary>
        </member>
        <member name="F:Nevron.Diagram.InteractionStyleMask.PinPoint">
            <summary>
            Pin position
            </summary>
        </member>
        <member name="F:Nevron.Diagram.InteractionStyleMask.GeometryPoints">
            <summary>
            Geometry base and control points
            </summary>
        </member>
        <member name="F:Nevron.Diagram.InteractionStyleMask.GeometryMidPoints">
            <summary>
            Geometry Mid points
            </summary>
        </member>
        <member name="F:Nevron.Diagram.InteractionStyleMask.ShapePlugs">
            <summary>
            Shape Plugs (e.g. start and end plugs)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.InteractionStyleMask.ShapeControlPoints">
            <summary>
            Shape Control Points
            </summary>
        </member>
        <member name="F:Nevron.Diagram.InteractionStyleMask.All">
            <summary>
            All 
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ModelPoint">
            <summary>
            Selects either the start or end point of a model
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ModelPoint.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ModelPoint.End">
            <summary>
            End
            </summary>
        </member>
        <member name="T:Nevron.Diagram.RouteType">
            <summary>
            Defines the currently supported types of routes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.RouteType.Polyline">
            <summary>
            Polyline route
            </summary>
        </member>
        <member name="F:Nevron.Diagram.RouteType.HVPolyline">
            <summary>
            HV polyline route
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ReflexiveRouteType">
            <summary>
            Defines the currently supported types of reflexive routes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ReflexiveRouteType.Bezier">
            <summary>
            Bezier reflexive route
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ReflexiveRouteType.Polyline">
            <summary>
            Polyline reflexive route
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ReflexiveRouteType.HVPolyline">
            <summary>
            HV polyline reflexive route
            </summary>
        </member>
        <member name="T:Nevron.Diagram.PointHitTestType">
            <summary>
            Defines the possible types of point hit test
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointHitTestType.Bounds">
            <summary>
            Tests whether the point is in the object bounds
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointHitTestType.Region">
            <summary>
            Tests whether the point is in the object region
            </summary>
        </member>
        <member name="T:Nevron.Diagram.RectangleHitTestType">
            <summary>
            Defines the possible typed of rectangular hit test
            </summary>
        </member>
        <member name="F:Nevron.Diagram.RectangleHitTestType.RegionIntersect">
            <summary>
            Tests whether the rectangle has any common area with the object region
            </summary>
        </member>
        <member name="F:Nevron.Diagram.RectangleHitTestType.BoundsIntersect">
            <summary>
            Tests whether the rectangle has any common area with the object bounds
            </summary>
        </member>
        <member name="F:Nevron.Diagram.RectangleHitTestType.BoundsContainment">
            <summary>
            Tests whether the rectangle contains the object bounds
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ShadowsZOrder">
            <summary>
            Defines the possible z order of shadows
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ShadowsZOrder.BehindDocument">
            <summary>
            Shadows are displayed behind the all document elements
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ShadowsZOrder.BehindLayer">
            <summary>
            Shadows are displayed behind all elements in one layer
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ShadowsZOrder.BehindAggregate">
            <summary>
            Shadows are displayed behind all elements in one aggregate
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ShadowsZOrder.BehindElement">
            <summary>
            Shadows are displayed behind the element to which they belong
            </summary>
        </member>
        <member name="T:Nevron.Diagram.PaintTextMode">
            <summary>
            Enumerates the possible ways in which texts can be displayed
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PaintTextMode.Wrap">
            <summary>
            Wrapped
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PaintTextMode.Stretch">
            <summary>
            Stretched
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PaintTextMode.Flow">
            <summary>
            Flowing
            </summary>
        </member>
        <member name="T:Nevron.Diagram.BoxTextMode">
            <summary>
            Enumerates the possible ways in which box texts can be displayed
            </summary>
        </member>
        <member name="F:Nevron.Diagram.BoxTextMode.Wrap">
            <summary>
            Wrapped
            </summary>
        </member>
        <member name="F:Nevron.Diagram.BoxTextMode.Stretch">
            <summary>
            Stretched
            </summary>
        </member>
        <member name="T:Nevron.Diagram.DrawingScaleMode">
            <summary>
            Enumerates the drawing scale modes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DrawingScaleMode.NoScale">
            <summary>
            The drawing is not scaled, which means that the world measurement unit is the same as the scene measurement unit
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DrawingScaleMode.CustomScale">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Diagram.RouteObstacleType">
            <summary>
            Enumerates the possible obstacle types
            </summary>
        </member>
        <member name="F:Nevron.Diagram.RouteObstacleType.RouteAround">
            <summary>
            Routes must avoid this obstacle
            </summary>
        </member>
        <member name="F:Nevron.Diagram.RouteObstacleType.RouteThrough">
            <summary>
            Routes can cross this obstacle as they see fit
            </summary>
        </member>
        <member name="F:Nevron.Diagram.RouteObstacleType.RouteThroughOnlyHorizontally">
            <summary>
            Only horizontal route segments can cross the obstacle
            </summary>
        </member>
        <member name="F:Nevron.Diagram.RouteObstacleType.RouteThroughOnlyVertically">
            <summary>
            Only vertical route segments can cross the obstacle
            </summary>
        </member>
        <member name="T:Nevron.Diagram.RoutingGridType">
            <summary>
            Enumerates the possible routing grid types
            </summary>
        </member>
        <member name="F:Nevron.Diagram.RoutingGridType.Sides">
            <summary>
            Routing grid lines are created for the obstacle sides
            </summary>
        </member>
        <member name="F:Nevron.Diagram.RoutingGridType.SidesAndCenters">
            <summary>
            Routing grid lines are created for the obstacle sides and centers
            </summary>
        </member>
        <member name="T:Nevron.Diagram.RoutingMeshType">
            <summary>
            Enumerates the possible routing mesh types
            </summary>
        </member>
        <member name="F:Nevron.Diagram.RoutingMeshType.Corners">
            <summary>
            Routing mesh vertices are created for the obstacle corners
            </summary>
        </member>
        <member name="F:Nevron.Diagram.RoutingMeshType.CornersAndMiddles">
            <summary>
            Routing mesh vertices are created for the obstacle corners and the middle points between the corners
            </summary>
        </member>
        <member name="T:Nevron.Diagram.RerouteAutomatically">
            <summary>
            Enumerates the modes in which a route can be automatically rerouted
            </summary>
        </member>
        <member name="F:Nevron.Diagram.RerouteAutomatically.Never">
            <summary>
            The route is never automatically rerouted - it is up to the user to manage its points or call the Reroute method
            </summary>
        </member>
        <member name="F:Nevron.Diagram.RerouteAutomatically.Always">
            <summary>
            The route is automatically rerouted whenever any of the obstacles have changed (e.g. there is a chance for the route to be rerouted more efficiently)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.RerouteAutomatically.WhenNeeded">
            <summary>
            The route is rerouted whenever an obstacle is placed on it or the shapes to which it is connected are moved or have changed
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ViewBridgeType">
            <summary>
            Enumerates the currently supported types of view bridges
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ViewBridgeType.Interactivity">
            <summary>
            Interactivity bridge
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ViewBridgeType.Trackers">
            <summary>
            Trackers bridge
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ViewBridgeType.SmartPaint">
            <summary>
            Smart paint bridge
            </summary>
        </member>
        <member name="T:Nevron.Diagram.SnapTargetsMask">
            <summary>
            Snap targets mask
            </summary>
        </member>
        <member name="F:Nevron.Diagram.SnapTargetsMask.None">
            <summary>
            Snap to nothing
            </summary>
        </member>
        <member name="F:Nevron.Diagram.SnapTargetsMask.Rulers">
            <summary>
            Snap to rulers
            </summary>
        </member>
        <member name="F:Nevron.Diagram.SnapTargetsMask.Grid">
            <summary>
            Snap to grid
            </summary>
        </member>
        <member name="F:Nevron.Diagram.SnapTargetsMask.Guidelines">
            <summary>
            Snap to guidelines
            </summary>
        </member>
        <member name="F:Nevron.Diagram.SnapTargetsMask.GeometryPoints">
            <summary>
            Snap to geometry points
            </summary>
        </member>
        <member name="F:Nevron.Diagram.SnapTargetsMask.Ports">
            <summary>
            Snap to ports
            </summary>
        </member>
        <member name="F:Nevron.Diagram.SnapTargetsMask.All">
            <summary>
            Snap to everything
            </summary>
        </member>
        <member name="T:Nevron.Diagram.PathType">
            <summary>
            Enumerates the possible path types
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PathType.OpenFigure">
            <summary>
            Open figure path
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PathType.ClosedFigure">
            <summary>
            Closed figure path
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ShapeType">
            <summary>
            Enumerates the possible shape types
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ShapeType.Shape1D">
            <summary>
            One dimensional shape (e.g. line)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ShapeType.Shape2D">
            <summary>
            Two dimensional shape (e.g. box)
            </summary>
        </member>
        <member name="T:Nevron.Diagram.DynamicPortGlueMode">
            <summary>
            Enumerates the modes in which a dynamic port can glue the plugs connected to it
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DynamicPortGlueMode.GlueToContour">
            <summary>
            The dynamic port will glue the connected plugs to the anchor model contour
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DynamicPortGlueMode.GlueToRotatedBounds">
            <summary>
            The dynamic port will glue the connected plugs to the anchor model rotated bounds
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DynamicPortGlueMode.GlueToLocation">
            <summary>
            The dynamic port will glue the connected plugs to its location
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DynamicPortGlueMode.GlueToNearestPort">
            <summary>
            The dynamic port will glue the connected plugs to the nearest port location
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DynamicPortGlueMode.GlueToNearestNonDynamicPort">
            <summary>
            The dynamic port will glue the connected plugs to the nearest non dynamic port location
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DynamicPortGlueMode.GlueToLeftOrRightSide">
            <summary>
            The dynamic port will glue the connected plugs to the left or right anchor model side
            </summary>
        </member>
        <member name="T:Nevron.Diagram.HVSegmentType">
            <summary>
            Enumerates the possbile HV segments type
            </summary>
        </member>
        <member name="F:Nevron.Diagram.HVSegmentType.Horizontal">
            <summary>
            Horizontal segment
            </summary>
        </member>
        <member name="F:Nevron.Diagram.HVSegmentType.Vertical">
            <summary>
            Vertical segment
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ModelChangeHint">
            <summary>
            Hints of model changes send to the aggregate models
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ModelChangeHint.ModelBounds">
            <summary>
            The model bounds of the model are changing
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ModelChangeHint.LocalTransform">
            <summary>
            The model local transform is changing
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ModelChangeHint.Collapsed">
            <summary>
            The model collapsed state is changing
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ModelChangeHint.None">
            <summary>
            Unknown model change
            </summary>
        </member>
        <member name="T:Nevron.Diagram.AggregatedModelScaleType">
            <summary>
            Enumerates the possible ways in which an shape can be scaled inside a group
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AggregatedModelScaleType.NoScale">
            <summary>
            The model is not scaled
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AggregatedModelScaleType.AffineScale">
            <summary>
            Affine scale is applied to the model
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AggregatedModelScaleType.CartesianScale">
            <summary>
            Cartesian scale is applied to the model
            </summary>
        </member>
        <member name="F:Nevron.Diagram.AggregatedModelScaleType.Scale1D">
            <summary>
            Only the model start and end points are scaled
            </summary>
        </member>
        <member name="T:Nevron.Diagram.GraphPartType">
            <summary>
            Enumerates the possible graph part types
            </summary>
        </member>
        <member name="F:Nevron.Diagram.GraphPartType.None">
            <summary>
            Not a part of graph
            </summary>
        </member>
        <member name="F:Nevron.Diagram.GraphPartType.Vertex">
            <summary>
            Graph vertex
            </summary>
        </member>
        <member name="F:Nevron.Diagram.GraphPartType.Edge">
            <summary>
            Graph edge
            </summary>
        </member>
        <member name="T:Nevron.Diagram.EdgeOrder">
            <summary>
            Enumerates the edge sort order which is used to sort 
            the edges of a shape graph adapter.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.EdgeOrder.Id">
            <summary>
            Edges are ordered by increasing Ids
            </summary>
        </member>
        <member name="F:Nevron.Diagram.EdgeOrder.None">
            <summary>
            Edges are not ordered - the default order is used
            </summary>
        </member>
        <member name="F:Nevron.Diagram.EdgeOrder.Custom">
            <summary>
            Edges are sorted with a custom comparer
            </summary>
        </member>
        <member name="T:Nevron.Diagram.TranslationSlavesMask">
            <summary>
            Enumerates the possible shape translation slaves
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TranslationSlavesMask.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TranslationSlavesMask.ReflexiveShapes">
            <summary>
            Translate with shapes which reflex it (e.g. 1D shapes whose both plugs are connected to the shape)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TranslationSlavesMask.IncomingShapes">
            <summary>
            Translate with the incoming shapes (e.g. 1D shapes whose end plug is connected to the shape)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TranslationSlavesMask.OutgoingShapes">
            <summary>
            Translate with the outgoing shapes (e.g. 1D shapes whose start plug is connected to the shape)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TranslationSlavesMask.FromShape">
            <summary>
            Translate with the FROM shape (e.g. the shape to which the start plug is connected). Applicable for 1D shapes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TranslationSlavesMask.ToShape">
            <summary>
            Translate with the TO shape (e.g. the shape to which the end plug is connected)). Applicable for 1D shapes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TranslationSlavesMask.ConnectedShapes">
            <summary>
            Translate with all possible connected shapes (e.g. IncomingShapes + OutgoingShapes + FromShape + ToShape)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TranslationSlavesMask.DestinationShapes">
            <summary>
            Translate with destination shapes (e.g. the shapes which are connected to the end plug of outgoing shapes)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TranslationSlavesMask.SourceShapes">
            <summary>
            Translate with source shapes (e.g. the shapes which are connected to the start plug of incoming shapes)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TranslationSlavesMask.NeighbourShapes">
            <summary>
            Translate with neighbour shapes (e.g. DestinationShapes + SourceShapes)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TranslationSlavesMask.SuccessorShapes">
            <summary>
            Translate with successor shapes (e.g. DestinationShapes + the successor shapes of the destination shapes)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TranslationSlavesMask.PredecessorShapes">
            <summary>
            Translate with predecessor shapes (e.g. SourceShapes + the predecessor shapes of the source shapes)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TranslationSlavesMask.AccessibleShapes">
            <summary>
            Translate with all accessible shapes (e.g. NeighbourShapes + the accessible shapes of the neighbour shapes)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TranslationSlavesMask.All">
            <summary>
            All
            </summary>
        </member>
        <member name="T:Nevron.Diagram.GraphType">
            <summary>
            Enumerates the possible graph part types
            </summary>
        </member>
        <member name="F:Nevron.Diagram.GraphType.Directed">
            <summary>
            Directed (digraph) - edge direction is taken into account
            </summary>
        </member>
        <member name="F:Nevron.Diagram.GraphType.Undirected">
            <summary>
            Undirected - edge direction is not taken into account
            </summary>
        </member>
        <member name="T:Nevron.Diagram.AggregateModelLocks">
            <summary>
            Enumerates the aggregate models locks, which are stored in a seqencial property container
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ShapeElementsMask">
            <summary>
            Enumerates the optional shape elements
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ShapeElementsMask.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ShapeElementsMask.Labels">
            <summary>
            Labels
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ShapeElementsMask.Ports">
            <summary>
            Ports
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ShapeElementsMask.ControlPoints">
            <summary>
            Control points
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ShapeElementsMask.Decorators">
            <summary>
            Decorators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ShapeElementsMask.All">
            <summary>
            All
            </summary>
        </member>
        <member name="T:Nevron.Diagram.TransactionResultStatus">
            <summary>
            Enumerates the possible statuses of batch result
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TransactionResultStatus.Succeeded">
            <summary>
            The batch succeeded
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TransactionResultStatus.SucceededWithError">
            <summary>
            The batch succeeded, but was not able to apply all operations
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TransactionResultStatus.FailedNotExecuted">
            <summary>
            The batch failed, bacause it was advised that the operations its performs will fail  
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TransactionResultStatus.FailedRolledback">
            <summary>
            The batch failed, during the operations executions and an attempt was made to rollback the associated transaction
            </summary>
        </member>
        <member name="T:Nevron.Diagram.SvgEmbeddedImageFormat">
            <summary>
            Enumerates the raster image formats in which the image exporter can export drawing images
            </summary>
        </member>
        <member name="F:Nevron.Diagram.SvgEmbeddedImageFormat.Bmp">
            <summary>
            Bitmap format
            </summary>
        </member>
        <member name="F:Nevron.Diagram.SvgEmbeddedImageFormat.Png">
            <summary>
            Portable Network Graphics format
            </summary>
        </member>
        <member name="F:Nevron.Diagram.SvgEmbeddedImageFormat.Gif">
            <summary>
            Graphics Interface format
            </summary>
        </member>
        <member name="F:Nevron.Diagram.SvgEmbeddedImageFormat.Tiff">
            <summary>
            Tag Image File format
            </summary>
        </member>
        <member name="F:Nevron.Diagram.SvgEmbeddedImageFormat.Jpeg">
            <summary>
            Joint Photographic Experts Group image format
            </summary>
        </member>
        <member name="T:Nevron.Diagram.PortType">
            <summary>
            Enumerates the possible port types
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PortType.Inward">
            <summary>
            Inward ports can be connected to plugs and outward ports
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PortType.Outward">
            <summary>
            Outward ports can be connected only with inward ports
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PortType.InwardAndOutward">
            <summary>
            Inward and Outward ports behave as inward and outward ports, 
            </summary>
        </member>
        <member name="T:Nevron.Diagram.PointPortDirectionMode">
            <summary>
            Enumerates the modes in which a point port can determine its direction angle
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointPortDirectionMode.AutoCenter">
            <summary>
            Automatically determines an angle, which is formed by the line connecting the port location with the anchor model center.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointPortDirectionMode.AutoCenterInverted">
            <summary>
            Automatically determines an angle, which is formed by the line connecting the port location with the anchor model center.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointPortDirectionMode.AutoPrev">
            <summary>
            Same as auto center, but angle is inverted to 180 degrees
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointPortDirectionMode.AutoPrevInverted">
            <summary>
            Same as auto prev, but angle is inverted to 180 degrees
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointPortDirectionMode.AutoNext">
            <summary>
            Automatically determines an angle, which is formed by the line connecting the port anchor point and the next point
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointPortDirectionMode.AutoNextInverted">
            <summary>
            Same as auto next, but angle is inverted to 180 degrees
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointPortDirectionMode.Custom">
            <summary>
            Use the CustomDirectionAngle angle property, which defines the angle.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.PointPortDirectionMode.None">
            <summary>
            No angle is provided and the connected shapes do not rotate
            </summary>
        </member>
        <member name="T:Nevron.Diagram.BoundsPortDirectionMode">
            <summary>
            Enumerates the modes in which a bounds port can determine its direction angle
            </summary>
        </member>
        <member name="F:Nevron.Diagram.BoundsPortDirectionMode.AutoCenter">
            <summary>
            Automatically determines an angle, which is formed by the line connecting the port location with the model center.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.BoundsPortDirectionMode.AutoCenterInverted">
            <summary>
            Same as AutoCenter but angle is inverted to 180 degrees.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.BoundsPortDirectionMode.AutoSide">
            <summary>
            Automatically determines the bounds side, and returns a normal vector angle to this side (e.g. 0, 90, 180, 270 degrees).
            </summary>
        </member>
        <member name="F:Nevron.Diagram.BoundsPortDirectionMode.AutoSideInverted">
            <summary>
            Same as AutoSide but angle is inverted to 180 degrees.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.BoundsPortDirectionMode.Custom">
            <summary>
            Use the CustomDirectionAngle angle property, which defines the angle.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.BoundsPortDirectionMode.None">
            <summary>
            No angle is provided and the connected shapes do not rotate
            </summary>
        </member>
        <member name="T:Nevron.Diagram.LogicalLinePortDirectionMode">
            <summary>
            Enumerates the modes in which a logical line port can determine its direction angle
            </summary>
        </member>
        <member name="F:Nevron.Diagram.LogicalLinePortDirectionMode.AutoLine">
            <summary>
            The angle formed by the normal line at the logical line port location (e.g. follow the curve orientation).
            </summary>
        </member>
        <member name="F:Nevron.Diagram.LogicalLinePortDirectionMode.AutoLineInverted">
            <summary>
            Same as AutoLine, but anlge is inverted to 180 degrees.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.LogicalLinePortDirectionMode.Custom">
            <summary>
            Use the CustomDirectionAngle angle property, which defines the angle.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.LogicalLinePortDirectionMode.None">
            <summary>
            Use the CustomDirectionAngle angle property, which defines the angle.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.DiagramElementProperties">
            <summary>
            Enumerates the diagram element properties, which are stored in a seqencial property container
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DiagramElementProperties.Protection">
            <summary>
            Protection property (exposed by NDiagramElement)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DiagramElementProperties.Tag">
            <summary>
            Tag property (exposed by NDiagramElement)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DiagramElementProperties.PinAlignment">
            <summary>
            PinAlignment property (exposed by NModel)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DiagramElementProperties.ResizeInAggregate">
            <summary>
            ResizeInAggregate property (exposed by NModel)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DiagramElementProperties.CartesianScaleFactors">
            <summary>
            CartesianScaleFactors property (exposed by NModel)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DiagramElementProperties.ResizeAggregatedModels">
            <summary>
            ResizeAggregatedModels property (exposed by NAggregateModel)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DiagramElementProperties.AutoUpdateModelBounds">
            <summary>
            AutoUpdateModelBounds property (exposed by NAggregateModel)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DiagramElementProperties.ShapeType">
            <summary>
            ShapeType property (exposed by NShape)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DiagramElementProperties.InteractionStyle">
            <summary>
            InteractionStyle property (exposed by NShape)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DiagramElementProperties.RouteObstacleType">
            <summary>
            RouteObstacleType property (exposed by NShape)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DiagramElementProperties.GraphPart">
            <summary>
            GraphPart property (exposed by NShape)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DiagramElementProperties.TranslationSlaves">
            <summary>
            TranslationSlaves property (exposed by NShape)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DiagramElementProperties.PreserveForm">
            <summary>
            PreserveForm property (exposed by NPrimitiveShape)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DiagramElementProperties.BridgeTargets">
            <summary>
            BridgeTargets property (exposed by shapes, which implement the INBridgeableShape interface)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DiagramElementProperties.AutoDestroy">
            <summary>
            AutoDestroy property (exposed by NGroup)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DiagramElementProperties.CanBeEmpty">
            <summary>
            CanBeEmpty property (exposed by NGroup)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.DiagramElementProperties.Padding">
            <summary>
            Padding property (exposed by NAggregateModel)
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ToggleDecoratorBackgroundShape">
            <summary>
            Enumerates the possible toggle button background shapes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ToggleDecoratorBackgroundShape.Rectangle">
            <summary>
            The toggle button has a rectangular background
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ToggleDecoratorBackgroundShape.Ellipse">
            <summary>
            The toggle button has an ellipse background
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ToggleDecoratorBackgroundShape.RoundedRectangle">
            <summary>
            The toggle button has a rounded rectangle background
            </summary>
        </member>
        <member name="T:Nevron.Diagram.ToggleDecoratorSymbolShape">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ToggleDecoratorSymbolShape.PlusMinus">
            <summary>
            Displays a plus or minus symbol
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ToggleDecoratorSymbolShape.UpDownArrow">
            <summary>
            Displays an up or down arrow
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ToggleDecoratorSymbolShape.UpDownTriangle">
            <summary>
            Displays an up or down triangle
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ToggleDecoratorSymbolShape.UpDownDoubleArrow">
            <summary>
            Displays double up or down arrows
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ToggleDecoratorSymbolShape.UpDownDoubleTriangle">
            <summary>
            Displays double up or down triangles
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ToggleDecoratorSymbolShape.RightDownArrow">
            <summary>
            Displays a right or down arrow
            </summary>
        </member>
        <member name="F:Nevron.Diagram.ToggleDecoratorSymbolShape.RightDownTriangle">
            <summary>
            Displays a right or down triangle
            </summary>
        </member>
        <member name="T:Nevron.Diagram.TableColumnSizeMode">
            <summary>
            Enumerates the table column size modes.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TableColumnSizeMode.Auto">
            <summary>
            The column is autosized to fit its contents.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TableColumnSizeMode.Fixed">
            <summary>
            The column has a fixed size.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.TableCellBorder">
            <summary>
            Enumerates the cell border styles.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TableCellBorder.None">
            <summary>
            The cell does not have a border.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TableCellBorder.Left">
            <summary>
            The cell has a left border.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TableCellBorder.Right">
            <summary>
            The cell has a right border.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TableCellBorder.Top">
            <summary>
            The cell has a top border.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TableCellBorder.Bottom">
            <summary>
            The cell has a bottom border.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TableCellBorder.All">
            <summary>
            The cell has all 4 borders.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.TablePortDistributionMode">
            <summary>
            Enumerates the table port distribution modes.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TablePortDistributionMode.ShapeBased">
            <summary>
            A port is placed on each side of the shape.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TablePortDistributionMode.GridBased">
            <summary>
            A port is placed on both ends of each row and column.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.TablePortDistributionMode.CellBased">
            <summary>
            A port is placed on each cell border which lies on the shape border.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.MemberVisibility">
            <summary>
            Enumerates the member visibility types.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.MemberVisibility.Public">
            <summary>
            Public visibility.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.MemberVisibility.Protected">
            <summary>
            Protected visibility.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.MemberVisibility.Private">
            <summary>
            Private visibility.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.MemberVisibility.Package">
            <summary>
            Package visibility.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.MemberFormatStyle">
            <summary>
            Enumerates the available member format styles.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.MemberFormatStyle.NameOnly">
            <summary>
            Only the names of the properties and methods are shown.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.MemberFormatStyle.CSharp">
            <summary>
            C# style formatting.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.MemberFormatStyle.CSharp_Short">
            <summary>
            C# style formatting without the visibility modifier.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.MemberFormatStyle.Pascal">
            <summary>
            Pascal style formatting.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.MemberFormatStyle.Pascal_Short">
            <summary>
            Pascal style formatting without the visibility modifier.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.MemberFormatStyle.Custom">
            <summary>
            Custom style formatting.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NNodeBoundsCancelEventArgs">
            <summary>
            Used as argument in NodeBoundsCancelEventHandler delegates
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NNodeBoundsCancelEventArgs.#ctor(Nevron.Dom.INNode,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Initializer constructor
            </summary>
            <param name="node"></param>
            <param name="newBounds"></param>
        </member>
        <member name="F:Nevron.Diagram.NNodeBoundsCancelEventArgs.NewBounds">
            <summary>
            New node bounds
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NNodeTransformCancelEventArgs">
            <summary>
            Used as argument in NodeTransformCancelEventHandler delegates
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NNodeTransformCancelEventArgs.#ctor(Nevron.Dom.INNode,Nevron.GraphicsCore.NMatrix2DF)">
            <summary>
            Initializer constructor
            </summary>
            <param name="node"></param>
            <param name="newTransform"></param>
        </member>
        <member name="F:Nevron.Diagram.NNodeTransformCancelEventArgs.NewTransform">
            <summary>
            New node transformation
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NConnectionEventArgs">
            <summary>
            Used as argument in ConnectionEventHandler delegates
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NConnectionEventArgs.#ctor(Nevron.Diagram.NDocument,System.Guid,System.Guid)">
            <summary>
            Initializer constructor
            </summary>
            <param name="document"></param>
            <param name="uid1"></param>
            <param name="uid2"></param>
        </member>
        <member name="F:Nevron.Diagram.NConnectionEventArgs.UniqueId1">
            <summary>
            Unique Id of the first element
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NConnectionEventArgs.UniqueId2">
            <summary>
            Unique Id of the second element
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NConnectionCancelEventArgs">
            <summary>
            Used as argument in ConnectionCancelEventHandler delegates
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NConnectionCancelEventArgs.#ctor(Nevron.Diagram.NDocument,System.Guid,System.Guid)">
            <summary>
            Initializer constructor
            </summary>
            <param name="document"></param>
            <param name="uid1"></param>
            <param name="uid2"></param>
        </member>
        <member name="F:Nevron.Diagram.NConnectionCancelEventArgs.UniqueId1">
            <summary>
            Unique Id of the first element
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NConnectionCancelEventArgs.UniqueId2">
            <summary>
            Unique Id of the second element
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NCanConnectPlugEventArgs">
            <summary>
            Used as argument in ConnectionCancelEventHandler delegates
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NCanConnectPlugEventArgs.#ctor(Nevron.Diagram.NShape,Nevron.Diagram.NPort)">
            <summary>
            Initializer constructor
            </summary>
            <param name="connector"></param>
            <param name="port"></param>
        </member>
        <member name="F:Nevron.Diagram.NCanConnectPlugEventArgs.Connector">
            <summary>
            Connector to which the plug belongs
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NCanConnectPlugEventArgs.Port">
            <summary>
            Port to which the connector is connecting
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NMouseEventArgs">
            <summary>
            Used as argument in INMouseEventHandler interface
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NMouseEventArgs.#ctor(Nevron.Dom.INNode,Nevron.GraphicsCore.NPointF,Nevron.Diagram.INView,System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="hitNode"></param>
            <param name="scenePoint"></param>
            <param name="view"></param>
            <param name="button"></param>
            <param name="clicks"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="delta"></param>
        </member>
        <member name="F:Nevron.Diagram.NMouseEventArgs.HitNode">
            <summary>
            Node which was hit and originially received the event from the view
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NMouseEventArgs.ScenePoint">
            <summary>
            Mouse point in scene coordinates
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NMouseEventArgs.View">
            <summary>
            View from which the event originated
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NMouseEventArgs.Processed">
            <summary>
            Whether the event was processed. If not processed other mouse event processors can process it.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NNodeMouseEventArgs">
            <summary>
            Used as argument in NodeMouseEventHandler delegates
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NNodeMouseEventArgs.#ctor(Nevron.Dom.INNode,Nevron.Dom.INNode,Nevron.GraphicsCore.NPointF,Nevron.Diagram.INView,System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="node"></param>
            <param name="hitNode"></param>
            <param name="scenePoint"></param>
            <param name="view"></param>
            <param name="button"></param>
            <param name="clicks"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="delta"></param>
        </member>
        <member name="F:Nevron.Diagram.NNodeMouseEventArgs.Node">
            <summary>
            Node which fired the event. If same with HitNode then the event was not bubbled
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NNodeMouseEventArgs.Handled">
            <summary>
            Whether the event is handled or not. If not handled the event will be bubbled
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NKeyEventArgs">
            <summary>
            Used as argument in INKeyboardEventHandler interface
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NKeyEventArgs.#ctor(Nevron.Diagram.INView,System.Windows.Forms.Keys)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="keyData"></param>
        </member>
        <member name="F:Nevron.Diagram.NKeyEventArgs.View">
            <summary>
            View from which the event originated
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NKeyEventArgs.Processed">
            <summary>
            Whether the event was processed. If not processed other keyboard event processors can process it
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NNodeKeyEventArgs">
            <summary>
            Used as argument in NodeKeyEventHandler delegates
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NNodeKeyEventArgs.Node">
            <summary>
            Node for which the event was generated
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NKeyPressEventArgs">
            <summary>
            Used as argument in INKeyboardEventHandler delegates
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NKeyPressEventArgs.#ctor(Nevron.Diagram.INView,System.Char)">
            <summary>
            Initializer constructor
            </summary>
            <param name="view">view from which the event originated</param> 
            <param name="keyChar">key chart</param>
        </member>
        <member name="F:Nevron.Diagram.NKeyPressEventArgs.View">
            <summary>
            View from which the event originated
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NKeyPressEventArgs.Processed">
            <summary>
            Whether the event was processed. If not processed other keyboard event processors can process it
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NNodeKeyPressEventArgs">
            <summary>
            Used as argument in NodeKeyPressEventHandler delegates
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NNodeKeyPressEventArgs.Node">
            <summary>
            Node for which the event was generated
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NDragEventArgs">
            <summary>
            Used as argument in INDragDropEventHandler interface
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDragEventArgs.#ctor(Nevron.Dom.INNode,Nevron.GraphicsCore.NPointF,Nevron.Diagram.INView,System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)">
            <summary>
            Initializer constructor
            </summary>
            <param name="hitNode">node which was originally hit</param> 
            <param name="scenePoint">mouse position in scene coordinates</param>
            <param name="view">view from which the event originated</param>
            <param name="data">data</param>
            <param name="keyState">key state</param>
            <param name="x">x</param>
            <param name="y">y</param>
            <param name="allowedEffect">allowed effect</param>
            <param name="effect">effect</param>
        </member>
        <member name="F:Nevron.Diagram.NDragEventArgs.HitNode">
            <summary>
            Node which was originally hit in the view
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDragEventArgs.ScenePoint">
            <summary>
            Location of the mouse in scene coordinates
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDragEventArgs.View">
            <summary>
            View from which the event originated
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDragEventArgs.Processed">
            <summary>
            Whether the event was processed. If not processed other drag drop event processors can process it
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NNodeDragEventArgs">
            <summary>
            Used as argument in NodeDragEventHandler delegates
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NNodeDragEventArgs.#ctor(Nevron.Dom.INNode,Nevron.Dom.INNode,Nevron.GraphicsCore.NPointF,Nevron.Diagram.INView,System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)">
            <summary>
            Initializer constructor
            </summary>
            <param name="node">node for which the event was fired</param>
            <param name="hitNode">node which was originally hit</param> 
            <param name="scenePoint">mouse position in scene coordinates</param>
            <param name="view">view from which the event originated</param>
            <param name="data">data</param>
            <param name="keyState">key state</param>
            <param name="x">x</param>
            <param name="y">y</param>
            <param name="allowedEffect">allowed effect</param>
            <param name="effect">effect</param>
        </member>
        <member name="F:Nevron.Diagram.NNodeDragEventArgs.Node">
            <summary>
            Node for which the event was generated
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NNodeDragEventArgs.Handled">
            <summary>
            Whether the event is handled or not. If not handled the event will be bubbled
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NViewEventArgs">
            <summary>
            Used as argument in view events
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NViewEventArgs.#ctor(Nevron.Dom.INNode,Nevron.Diagram.INView)">
            <summary>
            Initializer constructor
            </summary>
            <param name="hitNode"></param>
            <param name="view"></param>
        </member>
        <member name="F:Nevron.Diagram.NViewEventArgs.HitNode">
            <summary>
            Node which was hit and originially received the event from the view
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NViewEventArgs.View">
            <summary>
            View in which the event originated
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NViewEventArgs.Processed">
            <summary>
            Whether the event was processed. If not processed other processors can process it
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NNodeViewEventArgs">
            <summary>
            Used as argument in NodeViewEventHandler delegates
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NNodeViewEventArgs.#ctor(Nevron.Dom.INNode,Nevron.Dom.INNode,Nevron.Diagram.INView)">
            <summary>
            Initializer constructor
            </summary>
            <param name="node">node from which the event was fired</param>
            <param name="hitNode">node which was originally hit</param> 
            <param name="view">view from which the event originated</param> 
        </member>
        <member name="F:Nevron.Diagram.NNodeViewEventArgs.Node">
            <summary>
            Node which fired the event. If same with HitNode then the event was not bubbled
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NNodeViewEventArgs.Handled">
            <summary>
            Whether the event is handled or not. If not handled the event will be bubbled
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NDocumentEventArgs">
            <summary>
            Used as argument in DocumentEventHandler delegates
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocumentEventArgs.#ctor(Nevron.Diagram.NDocument)">
            <summary>
            Initializer constructor
            </summary>
            <param name="document"></param>
        </member>
        <member name="F:Nevron.Diagram.NDocumentEventArgs.Document">
            <summary>
            Document
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NDocumentCancelEventArgs">
            <summary>
            Used as argument in DocumentCancelEventHandler delegates
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocumentCancelEventArgs.#ctor(Nevron.Diagram.NDocument)">
            <summary>
            Initializer constructor
            </summary>
            <param name="document"></param>
        </member>
        <member name="F:Nevron.Diagram.NDocumentCancelEventArgs.Document">
            <summary>
            Document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NAutocadExporter.#ctor(Nevron.Diagram.NDrawingDocument)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="document"></param>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NAutocadExporter.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NAutocadExporter.ImageFormat">
            <summary>
            Gets the image format settings of the DXF file.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NAutocadExporter.RenderToDxf">
            <summary>
            Renders the document to DXF.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NAutocadExporter.SaveToFile(System.String)">
            <summary>
            Saves the drawing document to a SWF file.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NAutocadExporter.ShowDialog">
            <summary>
            Shows the flash exporter dialog.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Extensions.NCanvas">
            <summary>
            The NCanvas class represents a virtual drawing surface, 
            which can be used to render a drawing document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NCanvas.#ctor(Nevron.Diagram.NDrawingDocument)">
            <summary>
            Creates a new canvas associated with the specified drawing document
            </summary>
            <param name="document">document associated in the canvas. Cannot be null</param>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NCanvas.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NCanvas.RenderToGraphics(System.Drawing.Graphics)">
            <summary>
            Renders the chart in the specified graphics
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.Document">
            <summary>
            Gets/sets the drawing document associated with the canvas
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.GraphicsSettings">
            <summary>
            Gets/sets the graphics settings of the canvas
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.GlobalVisibility">
            <summary>
            Gets/sets the global visibility settings which this canvas must use
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.Layout">
            <summary>
            Gets/sets the canvas layout
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.Size">
            <summary>
            Gets/sets the size of the canvas (in pixels)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.Resolution">
            <summary>
            Gets/sets the canvas resolution
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.ScaleX">
            <summary>
            Gets/sets the world to view X scale 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.ScaleY">
            <summary>
            Gets/sets the world to view Y scale 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.SceneScaleToDeviceX">
            <summary>
            Gets the X scaling of document scene units to pixels
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.SceneScaleToDeviceY">
            <summary>
            Gets the Y scaling of document scene units to pixels
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.PageScale">
            <summary>
            Gets the scaling of world units to pixels
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.Viewport">
            <summary>
            Gets the document viewport
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.ViewportOrigin">
            <summary>
            Gets/sets the document viewport origin
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.ViewportSize">
            <summary>
            Gets the document viewport size
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.Window">
            <summary>
            Gets the document window
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.WindowOrigin">
            <summary>
            Gets the document window origin
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.WindowSize">
            <summary>
            Gets the document window size
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.WindowMargins">
            <summary>
            Gets/sets the window margins. The window margins deflate the window relative to the canvas size.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.DocumentPadding">
            <summary>
            Gets/sets the padding applied to the document bounds (in document measurement unit)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.SceneToWorld">
            <summary>
            Gets the Scene to World transformation
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.SceneToDevice">
            <summary>
            Gets the Scene to Device transformation
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.WorldToView">
            <summary>
            Gets the World to View transformation
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.WorldToDevice">
            <summary>
            Gets the World to Device transformation
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NCanvas.BackColor">
            <summary>
            Gets/sets the background color of the canvas (used to clear the canvas drawing surface)
            </summary>
            <remarks>
            By default set to white.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NCanvas.Paint(Nevron.GraphicsCore.IN2DDevice,Nevron.Diagram.PaintReason)">
            <summary>
            Paints the document to the specified device
            </summary>
            <param name="device"></param>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NCanvas.StretchToWidth">
            <summary>
            Proportionally scales the document so that its height is equal to the window height (preserves the document aspect ratio)
            </summary>
            <returns>true if the operation completed successfully, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NCanvas.StretchToHeight">
            <summary>
            Proportionally scales the document so that its height is equal to the window height (preserves the document aspect ratio)
            </summary>
            <returns>true if the operation completed successfully, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NCanvas.Stretch">
            <summary>
            Stretches the document to fill the entire window (breaks the document aspect ratio)
            </summary>
            <returns>true if the operation completed successfully, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NCanvas.Fit">
            <summary>
            Fits the document inside the window (preserves the document aspect ratio)
            </summary>
            <returns>true if the operation completed successfully, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NCanvas.SizeToDocument">
            <summary>
            Resizes the canvas to fit the unscaled document bounds
            </summary>
            <remarks>
            This operation will set the ScaleX and ScaleY properties to 1, and will change the CanvasSize property
            </remarks>
            <returns>true if the operation completed successfully, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NCanvas.SizeToViewport(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Resizes the canvas to fit the specified document viewport
            </summary>
            <remarks>
            This operation will set the ScaleX and ScaleY properties to 1, and will change the CanvasSize property
            </remarks>
            <param name="viewport">document viewport to size to</param>
            <returns>true if the operation completed successfully, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NCanvas.DoLayout(Nevron.Diagram.CanvasLayout)">
            <summary>
            Performs the specified canvas layout
            </summary>
            <param name="layout">layout to perform</param>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NCanvas.DoLayout">
            <summary>
            Performs the default canvas layout
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NCanvas.UpdateTransformations">
            <summary>
            Called when the canvas transformations need to be updated
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NCanvas.ComputeSceneBounds">
            <summary>
            Computes the total scene bounds, by appling a padding to the document bounds (in scene coordinates)
            </summary>
            <returns>scene bounds</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NCanvas.ComputeViewportSize(Nevron.GraphicsCore.NSizeF)">
            <summary>
            Computes the vieport size corresponding to the specified window size
            </summary>
            <param name="windowSize">window size</param>
            <returns>viewport size</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NCanvas.CreatePaintContext(Nevron.GraphicsCore.IN2DDevice)">
            <summary>
            Creates a new paint context attached to the specified device
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Extensions.NClassImporter">
            <summary>
            The class importer class imports the structure of a class and all of its sub classes
            in a diagram document.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NClassImporter.#ctor(Nevron.Diagram.NDrawingDocument)">
            <summary>
            Constructs a class hierarchy importer object associated with the specified document.
            </summary>
            <param name="document">Document assosiated with the class hierarchy importer (cannot be null).</param>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NClassImporter.ImportInActiveLayer">
            <summary>
            Determines whether to import the schema in the active layer or in a new layer named
            after the data set. By default set to false.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NClassImporter.ImportMembers">
            <summary>
            Determines whether to import class members (properties and methods) or not.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NClassImporter.MemberFormatStyle">
            <summary>
            Gets/sets the format of the text for the members.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NClassImporter.MemberFormatString">
            <summary>
            Determines the member format string. Only applicable when MemberFormatStyle is set to 'Custom'.
            </summary>
            <remarks>
            Use the constants {VISIBILITY}, {TYPE}, {NAME} and {ARGUMENTS} to create your custom defined
            format. For example if you want to display a method in C# style use the following format string:
            &lt;font color='blue'&gt;{VISIBILITY}{TYPE}&lt;/font&gt; {NAME}{ARGUMENTS}
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NClassImporter.Layout">
            <summary>
            Gets/Sets the layout that should position the generated shapes.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NClassImporter.Import(System.Type)">
            <summary>
            Creates a class hieararchy diagram for the given type and all of its sub classes
            in its assembly.
            </summary>
            <param name="type">The type on the top of the class diagram.</param>
            <returns>Returns the newly created layer.</returns>
        </member>
        <member name="T:Nevron.Diagram.Extensions.NDrawingExporter">
            <summary>
            The NDrawingExporter class serves as base class for all extension classes, 
            which help you export a drawing document to raster or vector graphics formats.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NDrawingExporter.#ctor(Nevron.Diagram.NDrawingDocument)">
            <summary>
            Initializer constructor
            </summary>
            <param name="document"></param>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NDrawingExporter.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NDrawingExporter.Document">
            <summary>
            Obtains a reference to the document with which the exporter is associated
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NDrawingExporter.Resolution">
            <summary>
            Gets/sets the resolution of the generated canvas
            </summary>
            <remarks>
            By default initialized with the document resolution
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NDrawingExporter.BackColor">
            <summary>
            Gets/sets the back color of the canvas
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NDrawingExporter.GraphicsSettings">
            <summary>
            Gets/sets the graphics settings used for the export generation
            </summary>
            <remarks>
            By default initialized with the document graphics settings
            </remarks>
        </member>
        <member name="T:Nevron.Diagram.Extensions.NFlashExporter">
            <summary>
            The NFlashExporter class is used to export drawing documents to SWF (Adobe Flash) vector format.
            </summary>
            <remarks>
            This class can be instanced upon demand. The constructor must receive a 
            reference to the drawing document, whose content is about to be exported to SWF:
            <code>
            NFlashExporter flashExporter = new NFlashExporter(drawingDocument);
            </code>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NFlashExporter.#ctor(Nevron.Diagram.NDrawingDocument)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="document"></param>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NFlashExporter.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NFlashExporter.ImageFormat">
            <summary>
            Gets the image format settings of the SWF file.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NFlashExporter.RenderToSwf">
            <summary>
            Renders the document to SWF.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NFlashExporter.SaveToFile(System.String)">
            <summary>
            Saves the drawing document to a SWF file.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NFlashExporter.ShowDialog">
            <summary>
            Shows the flash exporter dialog.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Extensions.NImageExporter">
            <summary>
            The NImageExporter class is used to export an entire drawing document, or only portions of it to image.
            </summary>
            <remarks>
            This class can be instanced upon demand. The constructor must receive a 
            reference to the drawing document, whose content is about to be exported to image:
            <code>
            NImageExporter imageExporter = new NImageExporter(drawingDocument);
            </code>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NImageExporter.#ctor(Nevron.Diagram.NDrawingDocument)">
            <summary>
            Constructs an image export object associated with the specified document
            </summary>
            <param name="document">document assosiated with the image exporter (cannot be null)</param>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NImageExporter.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NImageExporter.GrayScale">
            <summary>
            Specifies whether the generated image must be rendered in gray scales
            </summary>
            <remarks>
            By default set to false.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NImageExporter.PixelFormat">
            <summary>
            Controls the pixel format of the image
            </summary>
            <remarks>
            The pixel format determines the format in which the image is generated. 
            By default set to Format24bppRgb. If you want to generate an image with an alpha channel 
            you need to set this property to Format32bppArgb.
            </remarks>
            <example>
            Configure the image exporter to generate a transparent image (if of course some of the fill effects have been set as transparent).
            <code>
            imageExporter.PixelFormat = PixelFormat.Format32bppArgb;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NImageExporter.ExportBounds">
            <summary>
            Gets/sets the bounds of the exported content (in scene coordinates)
            </summary>
            <remarks>
            By default set to the document bounds
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NImageExporter.ExportBoundsPadding">
            <summary>
            Specifies the default padding, which you can apply to the export bounds from the visual interface of the exporter
            </summary>
            <remarks>
            By default set to the document.Settings.ExportBoundsPadding
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NImageExporter.KnownBoundsTable">
            <summary>
            Represents a named bounds table used by the visual export editor
            </summary>
            <remarks>
            By default the table has only one dictionary entry - ("Document" = Document Bounds)
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NImageExporter.RenderToBitmap">
            <summary>
            Renders the defined image content into a bitmap.
            </summary>
            <returns>bitmap with rendered image content</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NImageExporter.CopyToClipboard">
            <summary>
            Copies the defined image content as a bitmap into the clipboard
            </summary>
            <example>
            The following example places a bitmap in the clipboard.
            <code>
            imageExporter.CopyToClipboard();
            </code>
            </example>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NImageExporter.CopyToClipboardAsEMF">
            <summary>
            Copies the defined image content as an EMF (Extended Metafile) into the clipboard
            </summary>
            <example>
            The following code places an EMF (Extended Metafile) in the clipboard.
            <code>
            imageExporter.CopyToClipboardAsEMF();
            </code>
            </example>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NImageExporter.CopyToClipboardAsEMF(System.Drawing.Imaging.EmfType)">
            <summary>
            Copies the defined image content as an EMF (Extended Metafile) into the clipboard
            </summary>
            <example>
            The following code places an EMF (Extended Metafile) in the clipboard.
            <code>
            imageExporter.CopyToClipboardAsEMF();
            </code>
            </example>
            <param name="emfType"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NImageExporter.SaveToImageFile(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Saves the defined image content as an image file.
            </summary>
            <param name="fileName">file name in which to store the image</param>
            <param name="format">format of the image file, which must be used</param>
            <returns>true if the operation succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NImageExporter.ShowDialog">
            <summary>
            Shows the image exporter dialog
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Extensions.NPdfExporter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPdfExporter.#ctor(Nevron.Diagram.NDrawingDocument)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="document"></param>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPdfExporter.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPdfExporter.CompressContents">
            <summary>
            Determines whether to compress the contents of the PDF file.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPdfExporter.Layout">
            <summary>
            Gets/sets the print layout, that determines the way in which the document is zoomed 
            and the way in which the pages count is determined.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPdfExporter.ZoomPercent">
            <summary>
            Gets/sets the zoom percent to which to adjust the printing. 
            Applicable only when PrintLayout is set to ZoomTo.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPdfExporter.PageColumns">
            <summary>
            Gets/sets the number of page columns in which to adjust the printing.
            Applicable when PrintLayout is set to FitToPages or FitToPagesWidth.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPdfExporter.PageRows">
            <summary>
            Gets/sets the number of page rows in which to adjust the printing.
            Applicable when PrintLayout is set to FitToPages or FitToPagesHeight.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPdfExporter.PageSize">
            <summary>
            Gets/sets the size of the Pdf page (in points).
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPdfExporter.RenderToPdf">
            <summary>
            Renders the drawing to a Pdf image
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPdfExporter.SaveToFile(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPdfExporter.ShowDialog">
            <summary>
            Shows the pdf exporter dialog.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPdfExporter.CreateCanvas(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Called by the OnPrintPage method to create a canvas, which can be used to print the current page on the printer graphics
            </summary>
            <param name="canvasBounds">bounds of the canvas (page bounds)</param>
            <param name="windowBounds">bounds of the window (margins bounds)</param>
            <returns>canvas used for the rendering of the current page</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPdfExporter.ComputePagingCore(Nevron.Diagram.Extensions.NCanvas,System.Int32@,System.Int32@)">
            <summary>
            Core implementation of the print document paging layout, that zooms the document according 
            to the print manager print layout mode and returns the count of rows and columns.
            </summary>
            <param name="canvas"></param>
            <param name="rowCount"></param>
            <param name="colCount"></param>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPdfExporter.ExportedDocument">
            <summary>
            Obtains a reference to the document which must be printed
            </summary>
            <remarks>
            If the originally passed document has an absolute measurement unit then this property returns
            the value of the Document property. Otherwise it creates a copy of the original document, 
            which is then converted to millimeters
            </remarks>
        </member>
        <member name="T:Nevron.Diagram.Extensions.NPersistencyManager">
            <summary>
            The NPersistencyManager class facilitates the persistency management of different document types.
            </summary>
            <remarks>
            The persistency manager serializes/deserializes a persistent document, which is divided in sections. 
            Each section represents a named object, serialized in the persistent document. 
            This class can be instanced when needed:
            <code>
            NPersistencyManager persistencyManager = new NPersistencyManager();
            </code>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistencyManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPersistencyManager.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistencyManager.SaveToFile(System.String,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
            <summary>
            Saves the current persistent document to file in the specified format
            </summary>
            <param name="filePath">file path</param>
            <param name="format">persistency format</param>
            <param name="filter">serialization filter</param>
            <returns>true if the operation succedded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistencyManager.SaveToStream(System.IO.Stream,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
            <summary>
            Saves the current persistent document to stream in the specified format
            </summary>
            <param name="stream">stream</param>
            <param name="format">persistency format</param>
            <param name="filter">serialization filter</param>
            <returns>true if the operation succedded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistencyManager.SaveDocumentToFile(Nevron.Diagram.NDocument)">
            <summary>
            Saves the specified document to file
            </summary>
            <remarks>
            This method will show a save file dialog
            </remarks>
            <param name="document">document to save</param>
            <returns>true if the operation succedded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistencyManager.SaveDocumentToFile(Nevron.Diagram.NDocument,System.String)">
            <summary>
            Saves the specified document to specified file
            </summary>
            <param name="document">document to save</param>
            <param name="fileName">file to save to (the extension determines the format)</param>
            <returns>true if the operation succedded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistencyManager.SaveLibraryToFile(Nevron.Diagram.NLibraryDocument)">
            <summary>
            Saves the specified library document to file
            </summary>
            <remarks>
            This method will show a save file dialog, configured for the supported library formats
            </remarks>
            <param name="library">library to save</param>
            <returns>true if the operation succedded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistencyManager.SaveLibraryToFile(Nevron.Diagram.NLibraryDocument,System.String)">
            <summary>
            Saves the specified library document to the specified file
            </summary>
            <param name="library">library to save</param>
            <param name="fileName">file to save to (the extension determines the format)</param>
            <returns>true if the operation succedded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistencyManager.SaveDrawingToFile(Nevron.Diagram.NDrawingDocument)">
            <summary>
            Saves the specified drawing to file
            </summary>
            <remarks>
            This method will show a save file dialog, configured for the supported drawing formats
            </remarks>
            <param name="drawing">drawing to save</param>
            <returns>true if the operation succedded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistencyManager.SaveDrawingToFile(Nevron.Diagram.NDrawingDocument,System.String)">
            <summary>
            Saves the specified drawing document to the specified file
            </summary>
            <param name="drawing">drawing to save</param>
            <param name="fileName">file to save to (the extension determines the format)</param>
            <returns>true if the operation succedded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistencyManager.LoadFromFile(System.String,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
            <summary>
            Loads the persistent document from file in the specified format
            </summary>
            <param name="filePath">file path</param>
            <param name="format">persistency format</param>
            <param name="filter">serialization filter</param>
            <returns>true if the operation succedded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistencyManager.LoadFromStream(System.IO.Stream,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
            <summary>
            Loads the persistent document from stream in the specified format
            </summary>
            <param name="stream">stream</param>
            <param name="format">persistency format</param>
            <param name="filter">serialization filter</param> 
            <returns>true if the operation succedded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistencyManager.LoadDocumentFromFile">
            <summary>
            Loads a document from file
            </summary>
            <remarks>
            This method will show a open file dialog, configured with the currently known document formats
            </remarks>
            <returns>the loaded document if succeeded, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistencyManager.LoadDocumentFromFile(System.String)">
            <summary>
            Loads a document from the specified file
            </summary>
            <param name="fileName">file to load from (the extension determines the document type)</param>
            <returns>the loaded document if succeeded, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistencyManager.LoadDrawingFromFile">
            <summary>
            Loads a drawing from a file
            </summary>
            <remarks>
            This method will show a open file dialog, configured with the currently known drawing formats
            </remarks>
            <returns>the loaded drawing if succeeded, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistencyManager.LoadDrawingFromFile(System.String)">
            <summary>
            Loads a drawing from the specified file
            </summary>
            <param name="fileName">file to load from (the extension determines the format)</param> 
            <returns>the loaded drawing if succeeded, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistencyManager.LoadLibraryFromFile">
            <summary>
            Loads a library from a file
            </summary>
            <remarks>
            This method will show a open file dialog, configured with the currently known library formats
            </remarks>
            <returns>the loaded library if succeeded, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistencyManager.LoadLibraryFromFile(System.String)">
            <summary>
            Loads a library from the specified file
            </summary>
            <param name="fileName">file to load from (the extension determines the format)</param> 
            <returns>the loaded library if succeeded, otherwise null</returns>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPersistencyManager.PersistentDocument">
            <summary>
            Obtains the persistent document holding the persistent sections
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPersistencyManager.Serializer">
            <summary>
            Obtains the persistency manager serializer
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Extensions.NPersistentDocument">
            <summary>
            Represents a persistent document, divided in named sections
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistentDocument.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistentDocument.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPersistentDocument.Sections">
            <summary>
            Obtains a reference to the sections collection
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPersistentDocument.Name">
            <summary>
            Gets/sets the document name
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistentDocument.OnSerializing">
            <summary>
            Called by the persistency manager before serialization
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistentDocument.OnDeserialized">
            <summary>
            Called by the persistency manager after deserialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Extensions.NPersistentSection">
            <summary>
            Represents a persistent section inside a persistent document
            </summary>
            <remarks>
            The section is in fact a named serialized object
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistentSection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistentSection.#ctor(System.String,System.Object)">
            <summary>
            Initalizer constructor
            </summary>
            <param name="name"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistentSection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Custom serilization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistentSection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable implementation
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPersistentSection.Object">
            <summary>
            Gets/sets the object associated with this section
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPersistentSection.Name">
            <summary>
            Gets/sets the section name
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistentSection.OnSerializing">
            <summary>
            Called by the persistent document before serialization
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistentSection.OnDeserialized">
            <summary>
            Called by the persistent document after deserialization
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Extensions.NPersistentSectionCollection">
            <summary>
            Represents a strongly typed collection of NPersistenSection instances
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistentSectionCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPersistentSectionCollection.Item(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistentSectionCollection.Add(Nevron.Diagram.Extensions.NPersistentSection)">
            <summary>
            
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistentSectionCollection.IndexOf(Nevron.Diagram.Extensions.NPersistentSection)">
            <summary>
            
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistentSectionCollection.Insert(System.Int32,Nevron.Diagram.Extensions.NPersistentSection)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="section"></param>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistentSectionCollection.Remove(Nevron.Diagram.Extensions.NPersistentSection)">
            <summary>
            
            </summary>
            <param name="section"></param>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistentSectionCollection.Contains(Nevron.Diagram.Extensions.NPersistentSection)">
            <summary>
            
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistentSectionCollection.GetByName(System.String)">
            <summary>
            Gets the section with the specified name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistentSectionCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistentSectionCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistentSectionCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="oldobj"></param>
            <param name="newobj"></param>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPersistentSectionCollection.OnValidate(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:Nevron.Diagram.Extensions.NPrintDocument">
            <summary>
            The NPrintDocument class is a subclass of a PrintDocument, 
            which supports paging and is attached to a print manager
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPrintDocument.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPrintDocument.#ctor(Nevron.Diagram.Extensions.NPrintManager)">
            <summary>
            Creates a new instance of the print document attached to the specified print manager
            </summary>
            <param name="printManager">print manager associated with the print document (mandatory)</param>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPrintDocument.PrintManager">
            <summary>
            Obtains the reference to the print manager to which the document is attached
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPrintDocument.IsPrinted">
            <summary>
            Determines wheather the document is currently being printed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPrintDocument.PrintedPageIndex">
            <summary>
            Obtains the index of the currently printed page
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPrintDocument.ComputePaging(System.Int32@,System.Int32@)">
            <summary>
            Computes the paging of the document 
            </summary>
            <remarks>
            If the NPrintManager PrintOnSinglePage property is set to true, the returned (rowCount, colCount) is always (1, 1).
            Otherwise the method will compute a paging grid, which bounds the entire document
            </remarks>
            <param name="rowCount">resulting rows count</param>
            <param name="colCount">resulting cols count</param>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPrintDocument.OnBeginPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Overriden to initialize the IsPrinted and PrintedPageIndex properties
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPrintDocument.OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Overriden to print the current page
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPrintDocument.OnEndPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Overriden to reset the IsPrinted and PrintedPageIndex properties
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPrintDocument.CreatePrintCanvas(System.Drawing.Graphics,Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Called by the OnPrintPage method to create a canvas, which can be used to print the current page on the printer graphics
            </summary>
            <param name="grx">graphics</param>
            <param name="canvasBounds">bounds of the canvas (page bounds)</param>
            <param name="windowBounds">bounds of the window (margins bounds)</param>
            <returns>canvas used for the rendering of the current page</returns>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPrintDocument.PrintedDocument">
            <summary>
            Obtains a reference to the document which must be printed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPrintDocument.ComputePagingCore(Nevron.Diagram.Extensions.NCanvas,System.Int32@,System.Int32@)">
            <summary>
            Core implementation of the print document paging layout, that zooms the document according 
            to the print manager print layout mode and returns the count of rows and columns.
            </summary>
            <param name="canvas"></param>
            <param name="rowCount"></param>
            <param name="colCount"></param>
        </member>
        <member name="T:Nevron.Diagram.Extensions.NPrintManager">
            <summary>
            The NPrintManager class can be used to provide drawing documents with printing abilities
            </summary>
            <remarks>
            This class can be instanced upon demand. The constructor must receive a 
            reference to the drawing, which must be printed:
            <code>
            NPrintManager printManager = new NPrintManager(drawing);
            </code>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPrintManager.#ctor(Nevron.Diagram.NDrawingDocument)">
            <summary>
            Creates a new instance of the print manager attached to the specified document
            </summary>
            <param name="document">document to print (cannot be null)</param>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPrintManager.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPrintManager.Document">
            <summary>
            Obtains a reference to the drawing, to which the manager is attached
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPrintManager.PageSettings">
            <summary>
            Gets/sets the page settings
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPrintManager.PrinterSettings">
            <summary>
            Gets/sets the printers settings
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPrintManager.GraphicsSettings">
            <summary>
            Gets/sets the graphics settings used for printing
            </summary>
            <remarks>
            By default initialized with the drawing graphics settings
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPrintManager.Layout">
            <summary>
            Gets/sets the print layout, that determines the way in which the document is zoomed 
            and the way in which the pages count is determined.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPrintManager.ZoomPercent">
            <summary>
            Gets/sets the zoom percent to which to adjust the printing. 
            Applicable only when PrintLayout is set to ZoomTo.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPrintManager.PageColumns">
            <summary>
            Gets/sets the number of page columns in which to adjust the printing.
            Applicable when PrintLayout is set to FitToPages or FitToPagesWidth.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPrintManager.PageRows">
            <summary>
            Gets/sets the number of page rows in which to adjust the printing.
            Applicable when PrintLayout is set to FitToPages or FitToPagesHeight.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NPrintManager.PrintedDocument">
            <summary>
            Obtains a reference to the document which must be printed
            </summary>
            <remarks>
            If the originally passed document has an absolute measurement unit then this property returns
            the value of the Document property. Otherwise it creates a copy of the original document, 
            which is then converted to millimeters
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPrintManager.Print(System.Boolean)">
            <summary>
            Prints the drawing using the settings of the NPrintManager. Optionally shows the print dialog first.
            </summary>
            <example>
            The following code prints the drawing without showing the print dialog.
            <code>
            printManager.Print(false);
            </code>
            </example>
            <param name="showPrintDialog">whether to show the print dialog or not</param>
            <returns>true if the drawing was successfully printed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPrintManager.Print">
            <summary>
            Prints the drawing using the settings of the NPrintManager. Invokes the print dialog first.
            </summary>
            <example>
            The following code prints the drawing.
            <code>
            printManager.Print();
            </code>
            </example>
            <returns>true if the drawing was successfully printed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPrintManager.ShowPrintPreview">
            <summary>
            Shows the print preview dialog 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPrintManager.ShowPageSetup">
            <summary>
            Shows the page setup dialog
            </summary>
            <returns>true if the page setup was shown and the user pressed the OK button, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NPrintManager.CreatePrintDocument">
            <summary>
            Creates a new print drawing with the current print manager settings
            </summary>
            <returns>new NPrintDocument instance if the operation succeeded, otherwise null</returns>
        </member>
        <member name="T:Nevron.Diagram.Extensions.NXamlExporter">
            <summary>
            The NXamlExporter class is used to export a drawing document to 
            Microsoft Silverlight XAML code.
            </summary>
            <remarks>
            This class can be instanced upon demand. The constructor must receive a 
            reference to the drawing document, which content is about to be exported to XAML:
            <code>
            NXamlExporter xamlExporter = new NXamlExporter(drawingDocument);
            </code>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NXamlExporter.#ctor(Nevron.Diagram.NDrawingDocument)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="document"></param>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NXamlExporter.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NXamlExporter.ImageFormat">
            <summary>
            Gets the image format settings of the XAML file.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NXamlExporter.RenderToXaml">
            <summary>
            Renders the drawing to XAML.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NXamlExporter.SaveToFile(System.String)">
            <summary>
            Saves the drawing to a XAML file.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NXamlExporter.ShowDialog">
            <summary>
            Shows the Xaml exporter dialog.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Extensions.NSvgExporter">
            <summary>
            The NSvgExporter class is used to export a drawing document to SVG.
            </summary>
            <remarks>
            This class can be instanced upon demand. The constructor must receive a 
            reference to the drawing document, whose content is about to be exported to SVG:
            <code>
            NSvgExporter svgExporter = new NSvgExporter(drawingDocument);
            </code>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NSvgExporter.#ctor(Nevron.Diagram.NDrawingDocument)">
            <summary>
            Constructs an image export object associated with the specified document
            </summary>
            <param name="document">document assosiated with the image exporter (cannot be null)</param>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NSvgExporter.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NSvgExporter.Compress">
            <summary>
            Gets/sets whether the generated SVG file must be compressed or not
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NSvgExporter.EmbedImages">
            <summary>
            Gets/sets whether the images must be embedded in the SVG file 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NSvgExporter.EmbeddedImageFormat">
            <summary>
            Gets/sets the image format of the embedded images, in case the EmbedImages property is set to true
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NSvgExporter.AddSvgHeader">
            <summary>
            Gets/sets whether the SVG header must be generated or not
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NSvgExporter.EnableInteractivity">
            <summary>
            Gets/sets whether interactivity features defined by interactivity attributes must be exported to SVG or not.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NSvgExporter.RenderToSvg">
            <summary>
            Renders the defined image content into a SVG string.
            </summary>
            <returns>svg string</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NSvgExporter.SaveToFile(System.String)">
            <summary>
            Saves the defined image content as an image file.
            </summary>
            <param name="fileName">file name in which to store the image</param>
            <returns>true if the operation succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NSvgExporter.CopyToClipboard">
            <summary>
            Copies the defined SVG content as a string into the clipboard
            </summary>
            <example>
            The following example places an SVG string in the clipboard.
            <code>
            svgExporter.CopyToClipboard();
            </code>
            </example>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NSvgExporter.ShowDialog">
            <summary>
            Shows the image exporter dialog
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Extensions.NDatabaseImporter">
            <summary>
            The database importer class imports the structure of a relational database in a
            diagram document.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NDatabaseImporter.#ctor(Nevron.Diagram.NDrawingDocument)">
            <summary>
            Constructs a database schema importer object associated with the specified document.
            </summary>
            <param name="document">Document assosiated with the database schema importer (cannot be null).</param>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NDatabaseImporter.ImportInActiveLayer">
            <summary>
            Determines whether to import the schema in the active layer or in a new layer named
            after the data set. By default set to false.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NDatabaseImporter.LinksBelowTables">
            <summary>
            If set to true the links will be drawn below the tables, otherwise they will be drawn
            above them. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Extensions.NDatabaseImporter.ConnectorType">
            <summary>
            Determines the type of the connector to use for the data relations. By default set to ErmConnector.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NDatabaseImporter.Import(System.String)">
            <summary>
            Imports the specified XSD schema in the document.
            </summary>
            <param name="fileName">The full name of the file that contains the XSD schema.</param>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NDatabaseImporter.ImportOleDb(System.String)">
            <summary>
            Creates a XSD schema from the specified OLEDB database and imports it in the document.
            </summary>
            <param name="connectionString">The connection string to use for connecting to the database.</param>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NDatabaseImporter.ImportSql(System.String)">
            <summary>
            Creates a XSD schema from the specified SQL database and imports it in the document.
            </summary>
            <param name="connectionString">The connection string to use for connecting to the database.</param>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NDatabaseImporter.Import(System.Data.DataSet)">
            <summary>
            Imports the schema of the specified data set in the document.
            </summary>
            <param name="dataSet">The data set which schema to import.</param>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NDatabaseImporter.Import(System.Data.DataSet,Nevron.Diagram.NLayer)">
            <summary>
            Imports the schema of the specified data set in the document.
            </summary>
            <param name="dataSet">The data set which schema to import.</param>
            <param name="layer">The layer in which to import the shapes.</param>
        </member>
        <member name="T:Nevron.Diagram.Extensions.NDbfReader">
            <summary>
            Reads an entire standard DBF file into a DataTable.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NDbfReader.ReadDbf(System.String)">
            <summary>
            Reads an entire standard DBF file into a DataTable.
            </summary>
            <param name="dbfFileName">The name of the DBF file.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NDbfReader.ReadDbf(System.String,System.Text.Encoding)">
            <summary>
            Reads an entire standard DBF file into a DataTable.
            </summary>
            <param name="dbfFileName">The name of the DBF file.</param>
            <param name="encoding">Character encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NDbfReader.ReadDbf(System.String,System.Boolean,System.Boolean,System.Text.Encoding)">
            <summary>
            Reads an entire standard DBF file into a DataTable.
            </summary>
            <param name="dbfFileName">The name of the DBF file.</param>
            <param name="readColumnsOnly">If true only the columns will be read and the data table will be empty (i.e.
            it will contain 0 rows.</param>
            <param name="trimStrings">Determines wheter to trim the strings.</param>
            <param name="encoding">Character encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Extensions.NDbfReader.ReadDbf(System.IO.Stream,System.Boolean,System.Boolean,System.Text.Encoding)">
            <summary>
            Reads an entire standard DBF file into a DataTable.
            </summary>
            <param name="dbfStream">The DBF data stream.</param>
            <param name="readColumnsOnly">If true only the columns will be read and the data table will be empty (i.e.
            it will contain 0 rows.</param>
            <param name="trimStrings">Determines wheter to trim the strings.</param>
            <param name="encoding">Character encoding.</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Filters.NAbilitiesFilter">
            <summary>
            The NAbilitiesFilter class filters elements by their abilities
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Filters.NAbilitiesFilter.#ctor(Nevron.Diagram.AbilitiesMask)">
            <summary>
            Creates a new abilities filter with the specified abilities mask
            </summary>
            <param name="mask">abilities mask to filter by</param>
        </member>
        <member name="M:Nevron.Diagram.Filters.NAbilitiesFilter.Filter(System.Object)">
            <summary>
            Overriden to return true if the object is of type INDiagramElement and its abilities contain all of the specified abilities
            </summary>
            <param name="obj">object to filter</param>
            <returns>true if the object is of type INDiagramElement and its abilities contain all of the specified abilities, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.Filters.NFilters">
            <summary>
            Namespace class for static predefined filters
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Filters.NFilters.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINBridgeManager">
            <summary>
            Type filter for INBridgeManager implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINBridgeablePath">
            <summary>
            Type filter for INBridgeablePath implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINBridgeableShape">
            <summary>
            Type filter for INBridgeableShape implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINBoundable">
            <summary>
            Type filter for INBoundable implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINTransformable">
            <summary>
            Type filter for INTransformable implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINTranslatable">
            <summary>
            Type filter for INTranslatable implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINShapeObserver">
            <summary>
            Type filter for INShapeObserver implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINLayerObserver">
            <summary>
            Type filter for INLayerObserver implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINAncestorTransformObserver">
            <summary>
            Type filter for INAncestorTransformObserver implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINAncestorCollapseObserver">
            <summary>
            Type filter for INAncestorCollapseObserver implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINXCoordinateSnapper">
            <summary>
            Type filter for INXCoordinateSnapper implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINYCoordinateSnapper">
            <summary>
            Type filter for INYCoordinateSnapper implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINStyleable">
            <summary>
            Type filter for INStyleable implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINDiagramElementComposite">
            <summary>
            Type filter for INDiagramElementComposite implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINDiagramElement">
            <summary>
            Type filter for INDiagramElement implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINRoutableShape">
            <summary>
            Type filter for INRoutableShape implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINReflexiveShape">
            <summary>
            Type filter for INReflexiveShape implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINPoints">
            <summary>
            Type filter for INPoints implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINPolyPoints">
            <summary>
            Type filter for INPolyPoints implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINSegments">
            <summary>
            Type filter for INSegments implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINInplaceEditable">
            <summary>
            Type filter for INInplaceEditable implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINMouseEventHandler">
            <summary>
            Type filter for INMouseEventHandler implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINDragDropEventHandler">
            <summary>
            Type filter for INDragDropEventHandler implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINKeyboardEventHandler">
            <summary>
            Type filter for INKeyboardEventHandler implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINContextMenuEditable">
            <summary>
            Type filter for INContextMenuEditable implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINZOrderable">
            <summary>
            Type filter for INZOrderable implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeINVisible">
            <summary>
            Type filter for INVisible implementators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNModel">
            <summary>
            Type filter for objects of type NModel
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNPrimitiveModel">
            <summary>
            Type filter for objects of type NPrimitiveModel
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNAggregateModel">
            <summary>
            Type filter for objects of type NAggregateModel
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNGroup">
            <summary>
            Type filter for objects of type NGroup
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNGuideline">
            <summary>
            Type filter for objects of type NGuideline
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNLayer">
            <summary>
            Type filter for objects of type NLayer
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNDocument">
            <summary>
            Type filter for objects of type NDocument
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNLabel">
            <summary>
            Type filter for objects of type NLabel
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNMaster">
            <summary>
            Type filter for objects of type NMaster
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNShape">
            <summary>
            Type filter for objects of type NShape
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNCompositeShape">
            <summary>
            Type filter for objects of type NCompositeShape
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNLayerCollection">
            <summary>
            Type filter for objects of type NLayerCollection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNGuidelineCollection">
            <summary>
            Type filter for objects of type NGuidelineCollection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNPortCollection">
            <summary>
            Type filter for objects of type NPortCollection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNControlPointCollection">
            <summary>
            Type filter for objects of type NControlPointCollection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNLabelCollection">
            <summary>
            Type filter for objects of type NLabelCollection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNDecoratorCollection">
            <summary>
            Type filter for objects of type NDecoratorCollection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNShapeCollection">
            <summary>
            Type filter for objects of type NShapeCollection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNErmColumnCollection">
            <summary>
            Type filter for objects of type NErmColumnCollection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNTableColumnCollection">
            <summary>
            Type filter for objects of type NTableColumnCollection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNTableCellCollection">
            <summary>
            Type filter for objects of type NTableCellCollection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNUmlFieldCollection">
            <summary>
            Type filter for objects of type NUmlFieldCollection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNPrimitiveModelCollection">
            <summary>
            Type filter for objects of type NPrimitiveModelCollection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNPlugContainer">
            <summary>
            Type filter for objects of type NPlugsContainer
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNStartPlug">
            <summary>
            Type filter for objects of type NStartPlug
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNEndPlug">
            <summary>
            Type filter for objects of type NEndPlug
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNStyleSheetCollection">
            <summary>
            Type filter for objects of type NStyleSheetCollection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNArrowheadShapeStencil">
            <summary>
            Type filter for objects of type NArrowheadShapeStencil
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNPointShapeStencil">
            <summary>
            Type filter for objects of type NPointShapeStencil
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNPathPrimitive">
            <summary>
            Type filter for objects of type NPathPrimitive
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNPort">
            <summary>
            Type filter for objects of type NPort
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNPlug">
            <summary>
            Type filter for objects of type NPlug
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNPointElement">
            <summary>
            Type filter for objects of type NPointElement.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNMapLabel">
            <summary>
            Type filter for objects of type NMapLabel.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNMapPolygonLabel">
            <summary>
            Type filter for objects of type NMapPolygonLabel.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNMapPointLabel">
            <summary>
            Type filter for objects of type NMapPointLabel.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.TypeNMapArcsShape">
            <summary>
            Type filter for objects of type NMapArcsShape.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.InwardPort">
            <summary>
            Filters inward ports
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.OutwardPort">
            <summary>
            Filters outward ports
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionSelect">
            <summary>
            Permissions filter for Select permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionTrackersEdit">
            <summary>
            Permissions filter for TrackersEdit permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionContextMenuEdit">
            <summary>
            Permissions filter for ContextMenuEdit permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionInplaceEdit">
            <summary>
            Permissions filter for InplaceEdit permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionChangeStyle">
            <summary>
            Permissions filter for ChangeStyle permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionMoveX">
            <summary>
            Permissions filter for MoveX permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionMoveY">
            <summary>
            Permissions filter for MoveY permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionResizeX">
            <summary>
            Permissions filter for ResizeX permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionResizeY">
            <summary>
            Permissions filter for ResizeY permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionChangeAspectRatio">
            <summary>
            Permissions filter for ChangeAspectRatio permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionRotate">
            <summary>
            Permissions filter for Rotate permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionDelete">
            <summary>
            Permissions filter for Delete permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionGroup">
            <summary>
            Permissions filter for Group permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionUngroup">
            <summary>
            Permissions filter for Ungroup permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionCompose">
            <summary>
            Permissions filter for Compose permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionDecompose">
            <summary>
            Permissions filter for Decompose permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionChangeStartPoint">
            <summary>
            Permissions filter for ChangeStartPoint permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionChangeEndPoint">
            <summary>
            Permissions filter for ChangeEndPoint permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionReorderElements">
            <summary>
            Permissions filter for ReorderElements permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionInsertElements">
            <summary>
            Permissions filter for InsertElements permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionRemoveElements">
            <summary>
            Permissions filter for RemoveElements permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionCopy">
            <summary>
            Permissions filter for Copy permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionPrint">
            <summary>
            Permissions filter for Print permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.PermissionExport">
            <summary>
            Permissions filter for Export permission
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.ValidBounds">
            <summary>
            Filter for nodes which implement INBoundable and their bounds do not have zero width or height
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.Shape2D">
            <summary>
            Filter for 2D shapes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.Shape1D">
            <summary>
            Filter for 1D shapes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.RoutableShape">
            <summary>
            Filter for 1D shapes, which implement the INRoutableShape interface
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.GraphEdge">
            <summary>
            Filter for 1D shapes, whose GraphPart property is set to true
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.GraphVertex">
            <summary>
            Filter for 2D shapes, whose GraphPart property is set to true
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Filters.NFilters.Visible">
            <summary>
            Filters visible nodes
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Filters.NForeignPortFilter">
            <summary>
            The NForeignPortFilter class filters ports, which do not belong to the specified shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Filters.NForeignPortFilter.#ctor(Nevron.Diagram.NShape)">
            <summary>
            Initializer constructor
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Diagram.Filters.NForeignPortFilter.Filter(System.Object)">
            <summary>
            Overriden to return true if the object is NPort and its shape is different from the specified
            </summary>
            <param name="obj">object to filter</param>
            <returns>true if the object is NPort and its shape is different from the specified</returns>
        </member>
        <member name="T:Nevron.Diagram.Filters.NGraphPartTypeFilter">
            <summary>
            The NGraphPartTypeFilter class filters shapes by their graph part type
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Filters.NGraphPartTypeFilter.#ctor(Nevron.Diagram.GraphPartType)">
            <summary>
            Initializer constructor
            </summary>
            <param name="graphPartType"></param>
        </member>
        <member name="M:Nevron.Diagram.Filters.NGraphPartTypeFilter.Filter(System.Object)">
            <summary>
            Overriden to return true if the object is a NShape instance and its type is the specified type
            </summary>
            <param name="obj">object to filter</param>
            <returns>true if the object is a NShape instance and its type is the specified type</returns>
        </member>
        <member name="T:Nevron.Diagram.Filters.NParentInstanceFilter">
            <summary>
            Filters nodes by the parent they reference
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Filters.NParentInstanceFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Filters.NParentInstanceFilter.#ctor(Nevron.Dom.INNode)">
            <summary>
            Creates a new parent filter for the specified parent
            </summary>
            <param name="parent">parent to filter by</param>
        </member>
        <member name="M:Nevron.Diagram.Filters.NParentInstanceFilter.Filter(System.Object)">
            <summary>
            Overriden to return true if the object is of type INNode and its parent is the requested parent
            </summary>
            <param name="obj">object to filter</param>
            <returns>true if the object is a node under the specified parent, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.Filters.NParentTypeFilter">
            <summary>
            Filters nodes by the type of their parent
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Filters.NParentTypeFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Filters.NParentTypeFilter.#ctor(System.Type)">
            <summary>
            Creates a new parent type filter for the specified parent type
            </summary>
            <param name="parentType">type of parent to filter by</param>
        </member>
        <member name="M:Nevron.Diagram.Filters.NParentTypeFilter.Filter(System.Object)">
            <summary>
            Overriden to return true if the object is of type INNode and its parent is from the specified type
            </summary>
            <param name="obj">object to filter</param>
            <returns>true if the object is a node under a parent from the specified type, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.Filters.NPermissionsFilter">
            <summary>
            Filters elements by their allowed abilities
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Filters.NPermissionsFilter.#ctor(Nevron.Diagram.AbilitiesMask)">
            <summary>
            Initializer constructor
            </summary>
            <param name="permissions"></param>
        </member>
        <member name="M:Nevron.Diagram.Filters.NPermissionsFilter.#ctor(Nevron.Diagram.NAbilities)">
            <summary>
            Initializer constructor
            </summary>
            <param name="permissions"></param>
        </member>
        <member name="M:Nevron.Diagram.Filters.NPermissionsFilter.Filter(System.Object)">
            <summary>
            Overriden to return true if the object is of type INDiagramElement and its allowed abilities contain the specified abilities
            </summary>
            <param name="obj">object to filter</param>
            <returns>true if the object is of type INDiagramElement and its allowed abilities contain the specified abilities, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.Filters.NPointFilter">
            <summary>
            Filters nodes with a point hit test
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Filters.NPointFilter.#ctor">
            <summary>
            Default contructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Filters.NPointFilter.#ctor(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Creates a new point filter for the specified point and with the specified hit test paramaters
            </summary>
            <param name="point">point to filter by</param>
            <param name="context">hit test context</param>
        </member>
        <member name="M:Nevron.Diagram.Filters.NPointFilter.Filter(System.Object)">
            <summary>
            Overriden to return true if the object is of type INHitTestable and its HitTest by point method returned true
            </summary>
            <param name="obj">object to filter</param>
            <returns>true if the object is of type INHitTestable and its HitTest by point method returned true, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.Filters.NPortTypeFilter">
            <summary>
            Filters ports of the specified type
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Filters.NPortTypeFilter.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="inward">whether to filter inward ports</param>
            <param name="outward">whether to filter outward ports</param>
        </member>
        <member name="M:Nevron.Diagram.Filters.NPortTypeFilter.Filter(System.Object)">
            <summary>
            Overriden to return true if the object is a NPort instance 
            and its Type matches the filter criteria
            </summary>
            <param name="obj">object to filter</param>
            <returns>true if the object is a NPort instance and its Type matches</returns>
        </member>
        <member name="T:Nevron.Diagram.Filters.NNRectangleFilter">
            <summary>
            Filters nodes with a rectangle hit test
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Filters.NNRectangleFilter.#ctor">
            <summary>
            Default contructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Filters.NNRectangleFilter.#ctor(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Creates a new rect filter for the specified rect and with the specified hit test context
            </summary>
            <param name="rect">rect to filter by</param>
            <param name="context">hit test context</param>
        </member>
        <member name="M:Nevron.Diagram.Filters.NNRectangleFilter.Filter(System.Object)">
            <summary>
            Overriden to return true if the object is of type INHitTestable and its HitTest by rect method returned true
            </summary>
            <param name="obj">object to filter</param>
            <returns>true if the object is of type INHitTestable and its HitTest by rect method returned true, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.Filters.NShapeTypeFilter">
            <summary>
            Filters shapes of the specified type
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Filters.NShapeTypeFilter.#ctor(Nevron.Diagram.ShapeType)">
            <summary>
            Initializer constructor
            </summary>
            <param name="shapeType"></param>
        </member>
        <member name="M:Nevron.Diagram.Filters.NShapeTypeFilter.Filter(System.Object)">
            <summary>
            Overriden to return true if the object is a NShape instance and its type is the specified type
            </summary>
            <param name="obj">object to filter</param>
            <returns>true if the object is a NShape instance and its type is the specified type</returns>
        </member>
        <member name="T:Nevron.Diagram.Filters.NValidBoundsFilter">
            <summary>
            Filters nodes by valid bounds
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Filters.NValidBoundsFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Filters.NValidBoundsFilter.Filter(System.Object)">
            <summary>
            Overriden to return true if the object implements INBoundable and its Width and Height are larger than 0
            </summary>
            <param name="obj">object to filter</param>
            <returns>true if the object implements INBoundable and its Width and Height are larger than 0, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.Filters.NVisibleFilter">
            <summary>
            Filters visible nodes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Filters.NVisibleFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Filters.NVisibleFilter.Filter(System.Object)">
            <summary>
            Overriden to return true if the object implements INNode interface and is visible
            </summary>
            <param name="obj">object to filter</param>
            <returns>true if the object implements INNode interface and is visible, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NDataGrouping">
            <summary>
            Base class for all data grouping algorithms.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NDataGrouping.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NDataGrouping.RoundedRanges">
            <summary>
            Determines whether to round the ranges calculated in the Classify method or not.
            By default set top false. Note that the rounding of the data ranges will produce
            "nicer" numbers for the map legend but may alter the way the algorithm clssifies
            the data points. So it is recommended not to use rounding for a small number of
            data points.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NDataGrouping.Classify(System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Creates the specified number of data ranges (classes) for the given
            set of data points (distinct values).
            </summary>
            <param name="data">The data points to classify.</param>
            <param name="classCount">The number of classes desired.</param>
            <returns>An array of doubles representing the data ranges. For example an array {0, 12, 32.1} means
            that there are 3 data ranges: [0, 12), [12, 32.1) and [32.1, Infinity).</returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NDataGroupingEqualDistribution">
            <summary>
            Also known as quantiles, this method allows for unequally sized data intervals and
            involves adjustment of the interval limits until an equal number of data points can
            be slotted into each interval.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NDataGroupingEqualDistribution.Classify(System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Creates the specified number of data ranges (classes) for the given
            set of data points (distinct values).
            </summary>
            <param name="data">The data points to classify sorted in ascending order.</param>
            <param name="classCount">The number of classes desired.</param>
            <returns>An array of doubles representing the data ranges. For example an array {0, 12, 32.1} means
            that there are 3 data ranges: [0, 12), [12, 32.1) and [32.1, Infinity).</returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NDataGroupingEqualInterval">
            <summary>
            Also known as equal ranges (or steps), this method involves division of the entire data
            range into equally sized intervals.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NDataGroupingEqualInterval.Classify(System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Creates the specified number of data ranges (classes) for the given
            set of data points (distinct values).
            </summary>
            <param name="data">The data points to classify sorted in ascending order.</param>
            <param name="classCount">The number of classes desired.</param>
            <returns>An array of doubles representing the data ranges. For example an array {0, 12, 32.1} means
            that there are 3 data ranges: [0, 12), [12, 32.1) and [32.1, Infinity).</returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NDataGroupingOptimal">
            <summary>
            Uses the Jenks-Caspall optimal data grouping algorithm.
            </summary>
            <remarks>
            The algorithm is based on iterative re-cycling: the values on the edge of each class,
            with the mean of their own class and the average of the next class. If a value closer
            to the mean of the neighboring class, it will be moved into this. The process is repeated
            iteratively until no further optimization is possible.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Maps.NDataGroupingOptimal.Classify(System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Creates the specified number of data ranges (classes) for the given
            set of data points (distinct values).
            </summary>
            <param name="data">The data points to classify sorted in ascending order.</param>
            <param name="classCount">The number of classes desired.</param>
            <returns>An array of doubles representing the data ranges. For example an array {0, 12, 32.1} means
            that there are 3 data ranges: [0, 12), [12, 32.1) and [32.1, Infinity).</returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapColumnMatch">
            <summary>
            Represents a pair of columns - one from the map data table and one from
            the binding data table that are used for row matching and import 
            during the data binding process.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapColumnMatch.#ctor(System.String,System.String)">
            <summary>
            Creates a case sensitive map column match for the given columns.
            </summary>
            <param name="mapColumnName"></param>
            <param name="bindingColumnName"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapColumnMatch.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Craetes a map column match for the given columns.
            </summary>
            <param name="mapColumnName"></param>
            <param name="bindingColumnName"></param>
            <param name="caseSensitive"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapColumnMatch.CompareRows(System.Data.DataRow,System.Data.DataRow)">
            <summary>
            Compares the given map row to the given binding row in the context of this column matching.
            If the two rows match, the method returns 0.
            </summary>
            <param name="mapRow"></param>
            <param name="bindingRow"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Diagram.Maps.NMapColumnMatch.CaseSensitive">
            <summary>
            Determines whether the matching of the row values for the given columns should be case sensitive.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.NMapColumnMatch.MapColumnName">
            <summary>
            The name of the column from the map data table.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.NMapColumnMatch.BindingColumnName">
            <summary>
            The name of the column from the binding data table.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapOleDbDataBindingSource">
            <summary>
            Map data binding to an OLE DB database.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapOleDbDataBindingSource.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapOleDbDataBindingSource.#ctor(System.String,System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="connectionString"></param>
            <param name="selectQuery"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapOleDbDataBindingSource.LoadDataTable">
            <summary>
            Loads a data table.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapDatabaseBindingSource">
            <summary>
            Represents a map data binding source.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapDatabaseBindingSource.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapDatabaseBindingSource.#ctor(System.String,System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="connectionString"></param>
            <param name="selectQuery"></param>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapDatabaseBindingSource.ConnectionString">
            <summary>
            Gets/Sets the database connection string.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapDatabaseBindingSource.SelectQuery">
            <summary>
            Gets/Sets the SELECT query to execute on the database.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapDatabaseBindingSource.GetTableName(System.String)">
            <summary>
            Obtains the table name from the given SELECT query.
            </summary>
            <param name="selectQuery"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapDataBindingSource">
            <summary>
            Base class for map data binding sources.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapDataTableBindingSource">
            <summary>
            A map data table binding source.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapDataTableBindingSource.#ctor(System.Data.DataTable)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="dataTable"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapDataTableBindingSource.LoadDataTable">
            <summary>
            Returns the data table of this binding source.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapSqlDataBindingSource">
            <summary>
            Map data binding to an SQL database.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapSqlDataBindingSource.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapSqlDataBindingSource.#ctor(System.String,System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="connectionString"></param>
            <param name="selectQuery"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapSqlDataBindingSource.LoadDataTable">
            <summary>
            Loads a data table.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapArcsPrimitive">
            <summary>
            A primitive, which renders map arcs and their labels.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapArcsPrimitive.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapPointLabel">
            <summary>
            Represents the label of a map point shape.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapPointLabel.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapPointLabel.PinPoint">
            <summary>
            Gets/Sets the center point of the map point shape.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapPointLabel.Bounds">
            <summary>
            Gets the bounds of this label.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapPointLabel.Clone">
            <summary>
            Creates an identical copy of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapPointLabel.UpdateBounds">
            <summary>
            Updates the bounds of this label.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapPointLabel.GetShapeToTextSpacing">
            <summary>
            Gets the spacing between the point shape and its text.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Diagram.Maps.NMapPointLabel.ShapeType">
            <summary>
            The point shape type.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.NMapPointLabel.CustomShapeName">
            <summary>
            The shape to use when ShapeType is set to custom.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.NMapPointLabel.ShapeSize">
            <summary>
            The size of the point shape.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.NMapPointLabel.TextSize">
            <summary>
            The size of the text.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.NMapPointLabel.TextAlignment">
            <summary>
            The alignment of the text.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapPolygonLabel">
            <summary>
            Represents the label of a map polygon shape.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapPolygonLabel.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapPolygonLabel.#ctor(System.String,Nevron.GraphicsCore.NRectangleF,System.Single)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
            <param name="bounds"></param>
            <param name="weight"></param>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapPolygonLabel.PinPoint">
            <summary>
            Gets/Sets the pin point of this map label.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapPolygonLabel.Bounds">
            <summary>
            Gets the bounds of this map label.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapPolygonLabel.BoundsXml">
            <summary>
            The bounds of the label. Needed for XML serialization.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapPolygonLabel.MasterElement">
            <summary>
            Gets the diagram element this map label shows text for.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapPolygonLabel.Clone">
            <summary>
            Creates an identical copy of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapPolygonLabel.UpdateBounds">
            <summary>
            Updates the bounds of this label.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.NMapPolygonLabel.Empty">
            <summary>
            Gets an empty polygon label.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapArcsShape">
            <summary>
            A shape, which contains map arcs (parallels and meridians).
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapArcsShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapArcsShape.#ctor(Nevron.Diagram.Maps.ArcType)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapArcsShape.ArcType">
            <summary>
            Gets the type of the arcs this map arcs shape renders.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapArcsShape.ArcRenderMode">
            <summary>
            Gets/Sets the arc render mode.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapArcsShape.ArcStep">
            <summary>
            Gets/Sets the arc rendering step when ArcRenderMode is set to Fixed.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapArcsShape.LabelRenderMode">
            <summary>
            Specifies the rendering mode of map arc labels.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapArcsShape.FormatString">
            <summary>
            Gets/Sets the format string of the map arcs labels.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapArcsShape.ArcTypeXml">
            <summary>
            The type of the map arcs of this shape. Needed for XML serialization.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapArcsShape.ProjectionXml">
            <summary>
            The map projection that should be used to calculate map arc points.
            Needed for XML serialization.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapArcsShape.Find(Nevron.Diagram.NDrawingDocument,Nevron.Diagram.Maps.ArcType)">
            <summary>
            Finds and returns the first map arcs shape in the given drawing document that contains
            map arcs of the specified type.
            </summary>
            <param name="document"></param>
            <param name="arcType"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapLabelCollection">
            <summary>
            A collection of map labels.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLabelCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLabelCollection.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Overriden to accept only nodes of type NShape
            </summary>
            <param name="index">index at which the node must be inserted</param>
            <param name="node">node which must be inserted</param>
            <returns>true if the node can be inserted, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLabelCollection.Visible">
            <summary>
            Controls the visibility of the map labels.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLabelCollection.Invalidate">
            <summary>
            Invalidates all contained shapes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLabelCollection.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the map labels collection can be painted.
            </summary>
            <param name="context">Paint context to check for.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLabelCollection.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the labels.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Diagram.Maps.ShapefileRecordType">
            <summary>
            Indicates the type of shapes described by a single ESRI shapefile record.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ShapefileRecordType.Automatic">
            <summary>
            The record type is automatically determined by analyzing the contents of the
            record.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ShapefileRecordType.MultiPatch">
            <summary>
            Unused. The record represents a solid surface connected by several points.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ShapefileRecordType.MultiPoint">
            <summary>
            The record represents a collection of unconnected geographic points.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ShapefileRecordType.MultiPointM">
            <summary>
            Unused. The record represents a collection of measured, unconnected
            points.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ShapefileRecordType.MultiPointZ">
            <summary>
            Unused. The record represents a collection of unconnected three-dimensional
            geographic points.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ShapefileRecordType.NullShape">
            <summary>
            The record represents an empty value.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ShapefileRecordType.Point">
            <summary>
            The record represents a single geographic point.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ShapefileRecordType.PointM">
            <summary>
            Unused. The record represents a single measured point.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ShapefileRecordType.PointZ">
            <summary>
            Unused. The record represents a three-dimensional coordinate.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ShapefileRecordType.Polygon">
            <summary>
            The record represents a closed shape.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ShapefileRecordType.PolygonM">
            <summary>
            Unused. The record represents a measured shape.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ShapefileRecordType.PolygonZ">
            <summary>
            Unused. The record represents a closed, three-dimensional shape.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ShapefileRecordType.PolyLine">
            <summary>
            The record represents a line connected by two or more points.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ShapefileRecordType.PolyLineM">
            <summary>
            Unused. The record represents a single measured line.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ShapefileRecordType.PolyLineZ">
            <summary>
            Unused. The record represents a three-dimensional line connected by two or more points.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.ArcZOrder">
            <summary>
            Enumerates the arc Z order.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ArcZOrder.BelowObjects">
            <summary>
            The arcs are drawn below other map objects.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ArcZOrder.AboveObjects">
            <summary>
            The arcs are drawn above other map objects.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.ArcLabelPlacement">
            <summary>
            Enumerates the possible arc label placements.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ArcLabelPlacement.None">
            <summary>
            The arcs will not be labeled.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ArcLabelPlacement.FirstArc">
            <summary>
            The labels will be placed above the first arc.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ArcLabelPlacement.MiddleArc">
            <summary>
            The labels will be placed above the middle arc.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ArcLabelPlacement.LastArc">
            <summary>
            The labels will be placed below the last arc.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.ArcRenderMode">
            <summary>
            Enumerates the map arcs render modes.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ArcRenderMode.Hidden">
            <summary>
            Map arcs are not shown.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ArcRenderMode.Fine">
            <summary>
            Map arcs are rendered at a small step (dense arcs).
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ArcRenderMode.Normal">
            <summary>
            Map arcs are rendered at a normal step.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ArcRenderMode.Coarse">
            <summary>
            Map arcs are rendered at a large step (coarse arcs).
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ArcRenderMode.Fixed">
            <summary>
            Map arcs are rendered at a fixed step, which does not depend on the current zoom level.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.ArcLabelRenderMode">
            <summary>
            Enumerates the map arc label render modes.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ArcLabelRenderMode.Hidden">
            <summary>
            Map arc labels are not shown.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ArcLabelRenderMode.Visible">
            <summary>
            Map arc labels are shown.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ArcLabelRenderMode.VisibleWithArcClipping">
            <summary>
            Map arc labels are shown and map arcs are clipped so that they do not cross the labels.
            This mode produces the nicest results but may slow drawing performance.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.CylindricalEqualAreaProjectionType">
            <summary>
            Defines the avilable Cylindrical Equal-Area projections.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.CylindricalEqualAreaProjectionType.Lambert">
            <summary>
            Cylindrical Equal-Area projection with standard parallel of 0 degrees.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.CylindricalEqualAreaProjectionType.Behrmann">
            <summary>
            Cylindrical Equal-Area projection with standard parallel of 30 degrees.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.CylindricalEqualAreaProjectionType.TristanEdwards">
            <summary>
            Cylindrical Equal-Area projection with standard parallel of 37.383 degrees.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.CylindricalEqualAreaProjectionType.Peters">
            <summary>
            Cylindrical Equal-Area projection with standard parallel of 44.138 degrees.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.CylindricalEqualAreaProjectionType.Gall">
            <summary>
            Cylindrical Equal-Area projection with standard parallel of 45 degrees.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.CylindricalEqualAreaProjectionType.Balthasart">
            <summary>
            Cylindrical Equal-Area projection with standard parallel of 50 degrees.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.MapConditionOperator">
            <summary>
            Enumerates the map condition operators.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.MapConditionOperator.Equals">
            <summary>
            The equals operator.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.MapConditionOperator.NotEquals">
            <summary>
            The not equals operator.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.MapConditionOperator.LessThan">
            <summary>
            The less than operator.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.MapConditionOperator.GreaterThan">
            <summary>
            The greater than operator.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.MapCombinatorType">
            <summary>
            Enumerates the map combinator types.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.MapCombinatorType.And">
            <summary>
            The "And" combinator.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.MapCombinatorType.Or">
            <summary>
            The "Or" combinator.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.PolygonLabelingMode">
            <summary>
            Enumerates the polygon labeling modes.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.PolygonLabelingMode.BoundsCenter">
            <summary>
            Labels are placed at the center of the polygon's bounding box if it is inside the
            polygon. If it is not, the Optimal rendering mode is used.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.PolygonLabelingMode.Centroid">
            <summary>
            Labels are placed at the centroid of the polygon if it is inside the polygon. If
            it is not, the Optimal rendering mode is used.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.PolygonLabelingMode.Optimal">
            <summary>
            Labels are placed at an optimal position in the polygon. This produces the best results,
            but is the most computationally expensive mode.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.LabelVisibility">
            <summary>
            Enumerates possible label visibility modes.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.LabelVisibility.None">
            <summary>
            The labels will not be visible.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.LabelVisibility.NoOverlapByGeometry">
            <summary>
            Labels that overlap other labels will be hidden based on shape geometry factors,
            for example the area of a polygon shape, the size of a point shape, etc.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.LabelVisibility.NoOverlapByValue">
            <summary>
            Labels that overlap other labels will be hidden based on the value associated to
            the shape by the fill rule.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.LabelVisibility.All">
            <summary>
            All labels will be visible.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.MapFeatureType">
            <summary>
            Enumerates the basic map feature types.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.MapFeatureType.Other">
            <summary>
            Other feature type.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.MapFeatureType.Point">
            <summary>
            Point features.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.MapFeatureType.Multipoint">
            <summary>
            Multipoint features.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.MapFeatureType.Polyline">
            <summary>
            Polyline features.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.MapFeatureType.Polygon">
            <summary>
            Polygon (area) features.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.ArcType">
            <summary>
            Enumerates the possible map arc types.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ArcType.Parallel">
            <summary>
            Parallels
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.ArcType.Meridian">
            <summary>
            Meridians
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.MapCoordinateSystemType">
            <summary>
            Enumerates the coordinate system types.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.MapCoordinateSystemType.Geographic">
            <summary>
            Geographics (i.e. longitude-latitude base) map coordinate system.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.MapCoordinateSystemType.Projected">
            <summary>
            Projected map coordinate system.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.NEsriShapefile">
            <summary>
            Represents an ESRI shapefile containing geographical data.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NEsriShapefile.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="shapefileName">The name of the ESRI file to read data from.</param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NEsriShapefile.#ctor(System.String,System.IO.Stream,System.IO.Stream)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
            <param name="shapefileStream"></param>
            <param name="dbfFileStream"></param>
        </member>
        <member name="P:Nevron.Diagram.Maps.NEsriShapefile.MapBounds">
            <summary>
            Gets the bounds of the map.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NEsriShapefile.FeaturesType">
            <summary>
            Gets the type of the features of this layer.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NEsriShapefile.RecordType">
            <summary>
            Gets the record type contained in this ESRI shapefile.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NEsriShapefile.DbfEncoding">
            <summary>
            The encoding to use when reading string data from the accompanying DBF data file. By default set to UTF-8.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NEsriShapefile.ToString">
            <summary>
            Returns a string description of the current NEsriShapefile.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NEsriShapefile.Read">
            <summary>
            Reads the ESRI shapefile (.shp) and its attributes (.dbf).
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NEsriShapefile.GetColumnNames">
            <summary>
            Gets only the names of the columns in the DBF file without reading the other data.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NEsriMapImporter">
            <summary>
            Represents a collection of ESRI shapefiles.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NEsriMapImporter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NEsriMapImporter.Read">
            <summary>
            Reads all ESRI shapefiles of the map.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NEsriMapImporter.CreateShapeImporter">
            <summary>
            Creates the shape importer.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.INShapeCreatedListener">
            <summary>
            Interface, which contains methods called by the shape importer
            when a new shape has been created.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.INShapeCreatedListener.BeginLayer(Nevron.Diagram.NLayer,Nevron.Diagram.Maps.NEsriShapefile)">
            <summary>
            Called when a layer starts to be imported
            </summary>
            <param name="diagramLayer"></param>
            <param name="esriLayer"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.INShapeCreatedListener.EndLayer(Nevron.Diagram.NLayer,Nevron.Diagram.Maps.NEsriShapefile)">
            <summary>
            Called when a layer ends to be imported
            </summary>
            <param name="diagramLayer"></param>
            <param name="esriLayer"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.INShapeCreatedListener.OnPolygonCreated(Nevron.Diagram.NDiagramElement,Nevron.Diagram.Maps.NMapFeature)">
            <summary>
            Called when a polygon shape has been created. Return false to cancel
            the adding of the shape to the document.
            </summary>
            <param name="element"></param>
            <param name="mapFeature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.INShapeCreatedListener.OnMultiPolygonCreated(Nevron.Diagram.NDiagramElement,Nevron.Diagram.Maps.NMapFeature)">
            <summary>
            Called when a shape, which consists of multiple polygons has been created.
            Return false to cancel the adding of the shape to the document.
            </summary>
            <param name="element"></param>
            <param name="mapFeature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.INShapeCreatedListener.OnPolylineCreated(Nevron.Diagram.NDiagramElement,Nevron.Diagram.Maps.NMapFeature)">
            <summary>
            Called when a polyline shape has been created. Return false to cancel
            the adding of the shape to the document.
            </summary>
            <param name="element"></param>
            <param name="mapFeature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.INShapeCreatedListener.OnMultiPolylineCreated(Nevron.Diagram.NDiagramElement,Nevron.Diagram.Maps.NMapFeature)">
            <summary>
            Called when a shape, which consists of multiple polylines has been created.
            Return false to cancel the adding of the shape to the document.
            </summary>
            <param name="element"></param>
            <param name="mapFeature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.INShapeCreatedListener.OnPointCreated(Nevron.Diagram.Maps.NMapPointLabel,Nevron.Diagram.Maps.NMapFeature)">
            <summary>
            Called when a point label has been created. Return false to cancel
            the adding of the label to the document.
            </summary>
            <param name="pointLabel"></param>
            <param name="mapFeature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.INShapeCreatedListener.OnMultiPointCreated(Nevron.Diagram.NDiagramElement,Nevron.Diagram.Maps.NMapFeature)">
            <summary>
            Called when a point element, which consists of multiple points has been created.
            Return false to cancel the adding of the shape to the document.
            </summary>
            <param name="element"></param>
            <param name="mapFeature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.INShapeCreatedListener.OnPolygonLabelCreated(Nevron.Diagram.Maps.NMapPolygonLabel,Nevron.Diagram.Maps.NMapFeature)">
            <summary>
            Called when the label of a polygon shape has been created.
            </summary>
            <param name="polygonLabel"></param>
            <param name="mapFeature"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NShapeCreatedListener">
            <summary>
            Empty implementation of the INShapeCreatedListener interface.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NShapeCreatedListener.BeginLayer(Nevron.Diagram.NLayer,Nevron.Diagram.Maps.NEsriShapefile)">
            <summary>
            Called when a layer starts to be imported
            </summary>
            <param name="diagramLayer"></param>
            <param name="esriLayer"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NShapeCreatedListener.EndLayer(Nevron.Diagram.NLayer,Nevron.Diagram.Maps.NEsriShapefile)">
            <summary>
            Called when a layer ends to be imported
            </summary>
            <param name="diagramLayer"></param>
            <param name="esriLayer"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NShapeCreatedListener.OnPolygonCreated(Nevron.Diagram.NDiagramElement,Nevron.Diagram.Maps.NMapFeature)">
            <summary>
            Called when a polygon shape has been created. Return false to cancel
            the adding of the shape to the document.
            </summary>
            <param name="element"></param>
            <param name="mapFeature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NShapeCreatedListener.OnMultiPolygonCreated(Nevron.Diagram.NDiagramElement,Nevron.Diagram.Maps.NMapFeature)">
            <summary>
            Called when a shape, which consists of multiple polygons has been created.
            Return false to cancel the adding of the shape to the document.
            </summary>
            <param name="element"></param>
            <param name="mapFeature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NShapeCreatedListener.OnPolylineCreated(Nevron.Diagram.NDiagramElement,Nevron.Diagram.Maps.NMapFeature)">
            <summary>
            Called when a polyline shape has been created. Return false to cancel
            the adding of the shape to the document.
            </summary>
            <param name="element"></param>
            <param name="mapFeature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NShapeCreatedListener.OnMultiPolylineCreated(Nevron.Diagram.NDiagramElement,Nevron.Diagram.Maps.NMapFeature)">
            <summary>
            Called when a shape, which consists of multiple polylines has been created.
            Return false to cancel the adding of the shape to the document.
            </summary>
            <param name="element"></param>
            <param name="mapFeature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NShapeCreatedListener.OnPointCreated(Nevron.Diagram.Maps.NMapPointLabel,Nevron.Diagram.Maps.NMapFeature)">
            <summary>
            Called when a point label has been created. Return false to cancel
            the adding of the point label to the document.
            </summary>
            <param name="pointLabel"></param>
            <param name="mapFeature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NShapeCreatedListener.OnMultiPointCreated(Nevron.Diagram.NDiagramElement,Nevron.Diagram.Maps.NMapFeature)">
            <summary>
            Called when a point element, which consists of multiple points has been created.
            Return false to cancel the adding of the shape to the document.
            </summary>
            <param name="element"></param>
            <param name="mapFeature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NShapeCreatedListener.OnPolygonLabelCreated(Nevron.Diagram.Maps.NMapPolygonLabel,Nevron.Diagram.Maps.NMapFeature)">
            <summary>
            Called when the label of a polygon shape has been created.
            </summary>
            <param name="polygonLabel"></param>
            <param name="mapFeature"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NShapeImporter">
            <summary>
            Converts GIS features to diagram elements and imports them in a diagram document.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NShapeImporter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NShapeImporter.PolygonsAsShapes">
            <summary>
            Determines whether to render the polylines as shapes or as paths. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NShapeImporter.PolylinesAsShapes">
            <summary>
            Determines whether to render the polygons as shapes or as paths. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NShapeImporter.ImportInMultipleLayers">
            <summary>
            Determines whether to import the data from each map layer into separate layer. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NShapeImporter.ShapeCreatedListener">
            <summary>
            Contains methods called when diagram shapes are created.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NShapeImporter.ImportShapes(Nevron.Diagram.NDrawingDocument,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Creates and imports the shapes defined in the map into the drawing document.
            </summary>
            <param name="document">The document to import the map in.</param>
            <param name="importArea">The bounds of the area the map is rendered on.</param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NShapeImporter.OnBeginLayer(Nevron.Diagram.NLayer,Nevron.Diagram.Maps.NEsriShapefile)">
            <summary>
            Called when a layer starts to be imported
            </summary>
            <param name="diagramLayer"></param>
            <param name="esriLayer"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NShapeImporter.OnEndLayer(Nevron.Diagram.NLayer,Nevron.Diagram.Maps.NEsriShapefile)">
            <summary>
            Called when a layer ends to be imported
            </summary>
            <param name="diagramLayer"></param>
            <param name="esriLayer"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NShapeImporter.OnPolygonCreated(Nevron.Diagram.NDiagramElement,Nevron.Diagram.Maps.NMapFeature)">
            <summary>
            Called when a polygon shape has been created. Return false to cancel
            the adding of the shape to the document.
            </summary>
            <param name="element"></param>
            <param name="mapFeature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NShapeImporter.OnMultiPolygonCreated(Nevron.Diagram.NDiagramElement,Nevron.Diagram.Maps.NMapFeature)">
            <summary>
            Called when a shape, which consists of multiple polygons has been created.
            Return false to cancel the adding of the shape to the document.
            </summary>
            <param name="element"></param>
            <param name="mapFeature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NShapeImporter.OnPolylineCreated(Nevron.Diagram.NDiagramElement,Nevron.Diagram.Maps.NMapFeature)">
            <summary>
            Called when a polyline shape has been created. Return false to cancel
            the adding of the shape to the document.
            </summary>
            <param name="element"></param>
            <param name="mapFeature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NShapeImporter.OnMultiPolylineCreated(Nevron.Diagram.NDiagramElement,Nevron.Diagram.Maps.NMapFeature)">
            <summary>
            Called when a shape, which consists of multiple polylines has been created.
            Return false to cancel the adding of the shape to the document.
            </summary>
            <param name="element"></param>
            <param name="mapFeature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NShapeImporter.OnPointCreated(Nevron.Diagram.Maps.NMapPointLabel,Nevron.Diagram.Maps.NMapFeature)">
            <summary>
            Called when a point label has been created. Return false to cancel
            the adding of the point label to the document.
            </summary>
            <param name="pointLabel"></param>
            <param name="mapFeature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NShapeImporter.OnMultiPointCreated(Nevron.Diagram.NDiagramElement,Nevron.Diagram.Maps.NMapFeature)">
            <summary>
            Called when a point element, which consists of multiple points has been created.
            Return false to cancel the adding of the shape to the document.
            </summary>
            <param name="element"></param>
            <param name="mapFeature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NShapeImporter.OnPolygonLabelCreated(Nevron.Diagram.Maps.NMapPolygonLabel,Nevron.Diagram.Maps.NMapFeature)">
            <summary>
            Called when the label of a polygon shape has been created.
            </summary>
            <param name="polygonLabel"></param>
            <param name="mapFeature"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapFillRule">
            <summary>
            Base class for map fill rules.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRule.#ctor(System.String,System.Drawing.Color[])">
            <summary>
            Initializing constructor.
            </summary>
            <param name="columnName">The name of the column to get values from.</param>
            <param name="colors">The colors to use for filling.</param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRule.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="columnName">The name of the column to get values from.</param>
            <param name="color1">The start color for gradient generation.</param>
            <param name="color2">The end color for gradient generation.</param>
            <param name="colorCount">The number of gradient colors to generate.</param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRule.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="columnName">The name of the column to get values from.</param>
            <param name="color1">The start color for gradient generation.</param>
            <param name="color2">The middle color for gradient generation.</param>
            <param name="color3">The end color for gradient generation.</param>
            <param name="colorCount">The number of gradient colors to generate.</param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRule.#ctor(System.String,Nevron.GraphicsCore.NFillStyle[])">
            <summary>
            Initializing constructor.
            </summary>
            <param name="columnName">The name of the column to get values from.</param>
            <param name="fillStyles">The fill styles to use for filling.</param>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapFillRule.FillStyles">
            <summary>
            Gets the array of fill styles that this rule uses.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapFillRule.ColumnName">
            <summary>
            Gets/Sets the name of the data column this fill rule is bound to.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapFillRule.OwnerLayer">
            <summary>
            Gets the layer, which owns this fill rule.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRule.Initialize">
            <summary>
            Inspects the shapefile data and initializes the map fill rule.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRule.GetStyleSheetNameForValue(System.Object)">
            <summary>
            Gets the name of the stylesheet that should be associated with the given value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRule.GetValueCount">
            <summary>
            Gets the number of values for this fill rule, i.e. the number of values for value fill rules
            and number of ranges for range fill rules.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRule.GetValueAt(System.Int32)">
            <summary>
            Gets the value at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapFillRuleRange">
            <summary>
            A map fill rule that fills the map shapes based on a value associated with each of them.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRuleRange.#ctor(System.String,System.Drawing.Color[])">
            <summary>
            Initializing constructor.
            </summary>
            <param name="columnName">The name of the column to get values from.</param>
            <param name="colors">The colors to use for filling.</param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRuleRange.#ctor(System.String,Nevron.GraphicsCore.NFillStyle[])">
            <summary>
            Initializing constructor.
            </summary>
            <param name="columnName">The name of the column to get values from.</param>
            <param name="fillStyles">The fill styles to use for filling.</param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRuleRange.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="columnName">The name of the column to get values from.</param>
            <param name="color1">The start color for gradient generation.</param>
            <param name="color2">The end color for gradient generation.</param>
            <param name="colorCount">The number of gradient colors to generate.</param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRuleRange.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="columnName">The name of the column to get values from.</param>
            <param name="color1">The start color for gradient generation.</param>
            <param name="color2">The middle color for gradient generation.</param>
            <param name="color3">The end color for gradient generation.</param>
            <param name="colorCount">The number of gradient colors to generate.</param>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapFillRuleRange.DataGrouping">
            <summary>
            Gets/Sets the data grouping algorithm to use for determining the data ranges.
            By default set to optimal data grouping.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapFillRuleRange.Ranges">
            <summary>
            Gets the ranges of the fill rule
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRuleRange.Initialize">
            <summary>
            Inspects the shapefile data and initializes the map fill rule.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRuleRange.GetStyleSheetNameForValue(System.Object)">
            <summary>
            Gets the name of the stylesheet that should be associated with the given value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRuleRange.GetValueCount">
            <summary>
            Gets the number of values of this value fill rule.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRuleRange.GetValueAt(System.Int32)">
            <summary>
            Gets the value at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRuleRange.GetDataGroups(System.Collections.Generic.List{System.Double},System.Int32)">
            <summary>
            Gets the specified number of data ranges (classes) for the given
            set of data points (distinct values).
            </summary>
            <param name="data">The data points to classify sorted in ascending order.</param>
            <param name="classCount">The number of classes desired.</param>
            <returns>An array of doubles representing the data ranges. For example an array {0, 12, 32.1} means
            that there are 3 data ranges: [0, 12), [12, 32.1) and [32.1, Infinity).</returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRuleRange.GetLowerBoundIndex(System.Double)">
            <summary>
            Gets the index of the data group the given value should belong to.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRuleValue.#ctor(System.String,System.Drawing.Color[])">
            <summary>
            Initializing constructor.
            </summary>
            <param name="columnName">The name of the column to get values from.</param>
            <param name="colors">The colors to use for filling.</param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRuleValue.#ctor(System.String,Nevron.GraphicsCore.NFillStyle[])">
            <summary>
            Initializing constructor.
            </summary>
            <param name="columnName">The name of the column to get values from.</param>
            <param name="fillStyles">The fill styles to use for filling.</param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRuleValue.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="columnName">The name of the column to get values from.</param>
            <param name="color1">The start color for gradient generation.</param>
            <param name="color2">The end color for gradient generation.</param>
            <param name="colorCount">The number of gradient colors to generate.</param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRuleValue.Initialize">
            <summary>
            Inspects the shapefile data and initializes the map fill rule.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRuleValue.GetStyleSheetNameForValue(System.Object)">
            <summary>
            Gets the name of the stylesheet that should be associated with the given value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRuleValue.GetValueCount">
            <summary>
            Gets the number of values of this value fill rule.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFillRuleValue.GetValueAt(System.Int32)">
            <summary>
            Gets the value at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapFeatureFilterCombinator">
            <summary>
            Represents a map feature filter combinator.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapFeatureFilterCombinator.Type">
            <summary>
            Gets the type of this combinator.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapFeatureFilterCondition">
            <summary>
            Represents a map feature filter condition.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFeatureFilterCondition.#ctor(System.String,Nevron.Diagram.Maps.MapConditionOperator,System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="attributeName"></param>
            <param name="oper"></param>
            <param name="value"></param>
        </member>
        <member name="F:Nevron.Diagram.Maps.NMapFeatureFilterCondition.AttributeName">
            <summary>
            The name of the attribute to evaluate.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.NMapFeatureFilterCondition.Operator">
            <summary>
            The operator to use.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.NMapFeatureFilterCondition.Value">
            <summary>
            The value to check against.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapFeatureFilterSelectorPart">
            <summary>
            Base class for all map feature filter selector parts.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapFeatureAttributesFilter">
            <summary>
            A map shape filter, which filters map features based on the values of one or more of their attributes.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFeatureAttributesFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapFeatureAttributesFilter.SelectorParts">
            <summary>
            Gets the map filter selector parts.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFeatureAttributesFilter.Filter(Nevron.Diagram.Maps.NMapFeature)">
            <summary>
            Checks whether the given feature matches this filter.
            </summary>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFeatureAttributesFilter.Add(Nevron.Diagram.Maps.NMapFeatureFilterCondition)">
            <summary>
            Adds the given condition to the selector parts of this filter and adds an AND
            combinator after it.
            </summary>
            <param name="condition"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFeatureAttributesFilter.Add(Nevron.Diagram.Maps.NMapFeatureFilterCondition,Nevron.Diagram.Maps.NMapFeatureFilterCombinator)">
            <summary>
            Adds the given condition and combinator to the selector parts of this filter.
            </summary>
            <param name="condition"></param>
            <param name="combinator"></param>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapFeatureFilter">
            <summary>
            Base class for all map feature filters.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFeatureFilter.Filter(Nevron.Diagram.Maps.NMapFeature)">
            <summary>
            Checks whether the given map feature matches this filter.
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapZoom">
            <summary>
            Contains map center and zoom options.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapZoom.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapZoom.OwnerMapImporter">
            <summary>
            Gets the map importer that owns this map zoom object.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapZoom.CalculateMapBounds">
            <summary>
            Calculates the map bounds according to the logic of this map zoom object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapZoomToAllLayers">
            <summary>
            Zooms a map to all map layers.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapZoomToAllLayers.CalculateMapBounds">
            <summary>
            Calculates the map bounds according to the logic of this map zoom object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapZoomToDataBoundFeatures">
            <summary>
            Zooms a map to all data bound features.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapZoomToDataBoundFeatures.CalculateMapBounds">
            <summary>
            Calculates the map bounds according to the logic of this map zoom object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapZoomToLayer">
            <summary>
            Zooms a map to a specific layer.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapZoomToLayer.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="layerName"></param>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapZoomToLayer.LayerName">
            <summary>
            Gets/Sets the name of the layer to zoom to.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapZoomToLayer.CalculateMapBounds">
            <summary>
            Calculates the map bounds according to the logic of this map zoom object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapZoomToFeatures">
            <summary>
            Zooms a map to a set of features, which match a given filter.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapZoomToFeatures.#ctor(Nevron.Diagram.Maps.NMapFeatureFilter)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapZoomToFeatures.CalculateMapBounds">
            <summary>
            Calculates the map bounds according to the logic of this map zoom object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapFeature">
            <summary>
            Represents a map feature.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapFeature.Bounds">
            <summary>
            Gets the bounds of this map shape.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFeature.GetAttributeValue(System.String)">
            <summary>
            Returns the value of the attribute with the given name. Throws an exception
            if the shape does not have an attribute with the given name.
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapFeature.TryGetAttributeValue(System.String,System.Object@)">
            <summary>
            Tries to get the value of the attribute with the given name.
            </summary>
            <param name="attributeName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapLegend">
            <summary>
            Base class for all map legends.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLegend.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLegend.Title">
            <summary>
            Gets/Sets the title of the legend. By default set to "Legend".
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLegend.Create(Nevron.Diagram.NLayer)">
            <summary>
            Creates the legend as a table shape and adds it to the specified layer.
            </summary>
            <param name="layer">The layer to put the legend in.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLegend.Create(System.Windows.Forms.Panel)">
            <summary>
            Creates the legend in a panel. Note that the height of the panel is changed in order to
            fit the legend.
            </summary>
            <param name="panel">The panel to place the legend in.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLegend.GetRowCount">
            <summary>
            Gets the number of rows in the legend excluding the title. By default returns
            the number of colors in the fill rule this legend is created from.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLegend.GetFillStyleAt(System.Int32)">
            <summary>
            Gets the color for the row at the given index.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLegend.OnPanelPaint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Called when the panel that hosts this legend needs to be painted.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapLegendRange">
            <summary>
            Map legend containing data ranges.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLegendRange.#ctor(Nevron.Diagram.Maps.NMapFillRuleRange)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="mapFillRule">A map fill rule to use when generating the legend.</param>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLegendRange.LastFormatString">
            <summary>
            Gets/Sets the format string used for the last line of the legend.
            By default set to "more than {0}".
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLegendRange.RangeFormatString">
            <summary>
            Gets/Sets the format string used in all lines of the legend (except for the last one).
            By default set to "{0} - {1}".
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLegendValue.#ctor(Nevron.Diagram.Maps.NMapFillRuleValue)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="mapFillRule">A map fill rule to use when generating the legend.</param>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapImporter">
            <summary>
            Base class for maps.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapImporter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapImporter.MapBounds">
            <summary>
            Gets/Sets the bounds of the map.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapImporter.ShapeCreatedListener">
            <summary>
            Contains methods called when diagram shapes are created. This is a shortcut
            property to the ShapeCreatedListener of this map's shape importer.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapImporter.ShapeImporter">
            <summary>
            Controls the way the GIS features are converted to diagram elements and imported in the document.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapImporter.Projection">
            <summary>
            Gets/sets the projection.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapImporter.Parallels">
            <summary>
            Gets the settings for the paralles.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapImporter.Meridians">
            <summary>
            Gets the settings for the meridinans.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapImporter.LayerCount">
            <summary>
            Gets the number of layers of this map importer.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapImporter.MapZoom">
            <summary>
            Get/Sets the map zoom options.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapImporter.Read">
            <summary>
            Reads the geometry and data of all map layers added to this map importer.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapImporter.GetProjectedWidthToHeightRatio">
            <summary>
            Gets the width to height ratio of the projected map bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapImporter.Import(Nevron.Diagram.NDrawingDocument,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Creates and imports the shapes defined in the map into the drawing document.
            </summary>
            <param name="document">The document to import the map in.</param>
            <param name="importArea">The area map data should be imported in.</param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapImporter.Import(Nevron.Diagram.NDrawingDocument,Nevron.GraphicsCore.NRectangleF,System.Boolean)">
            <summary>
            Creates and imports the shapes defined in the map into the drawing document.
            </summary>
            <param name="document">The document to import the map in.</param>
            <param name="importArea">The area map data should be imported in.</param>
            <param name="initializeFillRules"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapImporter.GetLegend(Nevron.Diagram.Maps.NMapFillRule)">
            <summary>
            Gets a legend based on the specified map fill rule.
            </summary>
            <param name="fillRule"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapImporter.AddLayer(Nevron.Diagram.Maps.NMapLayer)">
            <summary>
            Adds the given map layer to the map importer.
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapImporter.RemoveAllLayers">
            <summary>
            Removes all layers of the map importer.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapImporter.GetLayerAt(System.Int32)">
            <summary>
            Gets the map layer at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapImporter.InitializeFillRules">
            <summary>
            Initializes all fill rules.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapImporter.CreateShapeImporter">
            <summary>
            Creates the shape importer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapImporter.CreateFillRulesStyleSheets(Nevron.Diagram.NDrawingDocument)">
            <summary>
            Creates and adds the style sheets for the fill rules of this map importer to
            the given drawing document.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapImporter.CalculateMapBounds(Nevron.Diagram.Maps.NMapZoom)">
            <summary>
            Calculates the map bounds using the given map zoom object.
            </summary>
            <param name="mapZoom"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapArc">
            <summary>
            Represents a map arc, i.e. a polyline with a set of points.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapArc.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapArc.#ctor(Nevron.Diagram.Maps.NMapArcsPrimitive,System.Double,Nevron.Diagram.Maps.NProjectedFeature)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="parentPrimitive"></param>
            <param name="arcValue"></param>
            <param name="projectedArc"></param>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapArc.Bounds">
            <summary>
            Gets the bounds of this map arc.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapArc.ArcValueXml">
            <summary>
            The value of this arc. Needed for XML serialization.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapArc.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Gets whether this map arc can be painted on the given context.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapArc.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints this map arc on the given context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapArc.Invalidate">
            <summary>
            Invalidates the node.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapArcsSettings">
            <summary>
            Controls the way parallels and meridians are rendered.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapArcsSettings.ArcType">
            <summary>
            Gets the arc type.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapArcsSettings.Step">
            <summary>
            Determines the distance in degrees between two adjacent arcs.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapArcsSettings.ZOrder">
            <summary>
            Determines the way the arcs are rendered. By default set to Hidden.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapArcsSettings.ArcRenderMode">
            <summary>
            Gets/Sets the arc render mode.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapArcsSettings.LabelRenderMode">
            <summary>
            Determines the arc label render mode. By default set to VisibleWithArcClipping.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapArcsSettings.StyleSheetName">
            <summary>
            Gets/Sets the name of the style sheet to use for these map arcs.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapArcsSettings.FormatString">
            <summary>
            Gets/Sets the arc label format string.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapBounds">
            <summary>
            Contains information about the bounds of a map.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapBounds.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="minLongitude"></param>
            <param name="maxLongitude"></param>
            <param name="minLatitude"></param>
            <param name="maxLatitude"></param>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapBounds.MinLongitude">
            <summary>
            Gets/Sets the minimum longitude in degrees. Should be in the range [-180, 180].
            By default set to Double.NaN, which means that the value will be automatically determined
            from the imported map data.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapBounds.MaxLongitude">
            <summary>
            Gets/Sets the maximum longitude in degrees. Should be in the range [-180, 180].
            By default set to Double.NaN, which means that the value will be automatically determined
            from the imported map data.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapBounds.MinLatitude">
            <summary>
            Gets/Sets the minimum latitude in degrees. Should be in the range [-90, 90].
            By default set to Double.NaN, which means that the value will be automatically determined
            from the imported map data.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapBounds.MaxLatitude">
            <summary>
            Gets/Sets the maximum latitude in degrees. Should be in the range [-90, 90].
            By default set to Double.NaN, which means that the value will be automatically determined
            from the imported map data.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapBounds.Width">
            <summary>
            Gets the width of this map bounds, i.e. the difference between the maximum and the minimum longitude.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapBounds.Height">
            <summary>
            Gets the height of this map bounds, i.e. the difference between the maximum and the minimum latitude.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapBounds.Center">
            <summary>
            Gets the center of this map bounds
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapBounds.IsAuto">
            <summary>
            Gets whether this map bounds object is set to Auto, which is true if at least one of
            the min or max longitudes or latitudes is set to Double.NaN.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapBounds.IsEmpty">
            <summary>
            Gets whether this map bounds has zero width or height.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapBounds.CoordinateSystemType">
            <summary>
            Gets the coordinate system type of this map bounds.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapBounds.ToString">
            <summary>
            Gets the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapBounds.Union(Nevron.Diagram.Maps.NMapBounds)">
            <summary>
            Creates the smallest possible map bounds, which contains both this and the given map bounds.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapBounds.Intersection(Nevron.Diagram.Maps.NMapBounds)">
            <summary>
            Returns a third map bounds that represents the intersection of two map bounds.
            If there is no intersection, the Auto map bounds is returned.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapBounds.ClampToWorldBounds">
            <summary>
            Clamps this map bounds to the World bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapBounds.Contains(Nevron.Diagram.Maps.NMapBounds)">
            <summary>
            Determines whether the map bounds contains the specified map bounds.
            </summary>
            <param name="mapBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapBounds.ToNRectangleF">
            <summary>
            Converts this map bounds to an NRectangleF instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapBounds.Union(Nevron.Diagram.Maps.NMapBounds,Nevron.Diagram.Maps.NMapBounds)">
            <summary>
            Creates the smallest possible map bounds, which contains both given map bounds.
            </summary>
            <param name="mapBounds1"></param>
            <param name="mapBounds2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapBounds.Intersection(Nevron.Diagram.Maps.NMapBounds,Nevron.Diagram.Maps.NMapBounds)">
            <summary>
            Returns a third map bounds that represents the intersection of two map bounds.
            If there is no intersection, the Auto map bounds is returned.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapBounds.FromNRectangleF(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Creates a map bounds from the given NRectangleF instance.
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Diagram.Maps.NMapBounds.Auto">
            <summary>
            Denotes that the map bounds should be automatically calculated based on the imported map data.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.NMapBounds.World">
            <summary>
            Represents the world map bounds.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapLayer">
            <summary>
            Represents a map layer.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLayer.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLayer.MapBounds">
            <summary>
            Gets the bounds of this map layer.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLayer.FeaturesType">
            <summary>
            Gets the type of the features of this layer.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLayer.Features">
            <summary>
            Gets the features of this map layer.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLayer.DataTable">
            <summary>
            Gets the data table that contains attribute data for the features in this map layer.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLayer.Name">
            <summary>
            Gets the name of the shapefile without the extension.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLayer.MinShowZoomFactor">
            <summary>
            Gets/sets the minimum zoom factor above which the layer is shown.
            By default set to 0.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLayer.MaxShowZoomFactor">
            <summary>
            Gets/sets the maximum zoom factor below which the layer is shown. 
            By default set to Single.MaxValue.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLayer.MinTextShowZoomFactor">
            <summary>
            Gets/sets the zoom factor above which texts are shown.
            By default set to 0.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLayer.MaxTextShowZoomFactor">
            <summary>
            Gets/sets the zoom factor below which text are shown.
            By default set to Single.MaxValue.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLayer.NameColumn">
            <summary>
            Determines the data column to use for naming of the diagram elements created from this map layer.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLayer.TextColumn">
            <summary>
            Determines the data column to use for labeling of the diagram elements created from this map layer.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLayer.ColumnNames">
            <summary>
            Gets only the names of the data columns of this map layer without reading the other data.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLayer.FillRule">
            <summary>
            Gets/Sets the fill rule to use for coloring the features of this map layer.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLayer.DefaultStyleSheetName">
            <summary>
            Gets/Sets the default style sheet to apply to diagram elements created from the map features of this map layer.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLayer.LabelVisibility">
            <summary>
            Gets/Sets the label visibility mode. By default set to NoOverlapByGeometry.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLayer.PolygonLabelingMode">
            <summary>
            Determines the mode for labeling of polygon features.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLayer.MinPointShapeSize">
            <summary>
            Gets/Sets the minimum size of point shapes.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLayer.MaxPointShapeSize">
            <summary>
            Gets/Sets the maximum size of point shapes.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLayer.PointSizeColumn">
            <summary>
            Gets/Sets the name of the column that should be used to determine point shape sizes.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLayer.DataBind(Nevron.Diagram.Maps.NMapDataBindingSource,Nevron.Diagram.Maps.NMapDataBindingContext)">
            <summary>
            Imports data from a database.
            </summary>
            <param name="source"></param>
            <param name="context">A data binding context.</param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLayer.GetColumnNames">
            <summary>
            Reads only the names of the columns from the attributes data that accompanies this map layer.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Diagram.Maps.NMapLayer.m_DataTable">
            <summary>
            The data table that contains attribute data for the shapes in this map layer.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.NEsriShapeImporter">
            <summary>
            Converts ESRI features to diagram shapes.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NEsriShapeImporter.ImportShapes(Nevron.Diagram.NDrawingDocument,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Creates and imports the shapes defined in the map into the drawing document.
            </summary>
            <param name="document">The document to import the map in.</param>
            <param name="importArea">The bounds of the area the map is rendered on.</param>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapDataBindingContext">
            <summary>
            Contains information about the binding of a data table to map data.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapDataBindingContext.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapDataBindingContext.ColumnMatchings">
            <summary>
            Gets/Sets the column matches.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapDataBindingContext.ColumnsToImport">
            <summary>
            Gets/Sets the columns from the binding data table to import data from.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapDataBindingContext.TrimStrings">
            <summary>
            If true the strings will be trimmed before they are compared for matches.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapDataBindingContext.AddColumnMatching(System.String,System.String)">
            <summary>
            Creates a case sensitive column matching for the given columns and adds it to this context.
            </summary>
            <param name="mapColumn"></param>
            <param name="dataColumn"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapDataBindingContext.AddColumnMatching(System.String,System.String,System.Boolean)">
            <summary>
            Creates a column matching for the given columns and adds it to this context.
            </summary>
            <param name="mapColumn"></param>
            <param name="dataColumn"></param>
            <param name="caseSensitive"></param>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapLabel">
            <summary>
            Base class for all map label elements.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLabel.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLabel.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLabel.#ctor(System.String,System.Single)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
            <param name="weight"></param>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLabel.PinPoint">
            <summary>
            Gets/Sets the pin point of this map label.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLabel.Bounds">
            <summary>
            The bounds of the map label.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLabel.HasText">
            <summary>
            Gets whether this map label has text set.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLabel.Text">
            <summary>
            The text of the map label.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLabel.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Gets whether this label can be painted on the given context.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLabel.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints this label on the given context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLabel.Clone">
            <summary>
            Creates an identical copy of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLabel.Invalidate">
            <summary>
            Invalidates the node.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLabel.UpdateBounds">
            <summary>
            Updates the bounds of this label.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.NMapLabel.Weight">
            <summary>
            The weight of the label. It is used to determine which label should remain visible
            when two or more labels overlap. Labels with greater Weight have priority.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapLabelsShape">
            <summary>
            A shape, which contains map labels.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLabelsShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapLabelsShape.MapLabels">
            <summary>
            Gets the map labels collection of this map labels shape.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLabelsShape.UpdateElementReferences">
            <summary>
            Updates any cached references of map label elements.
            </summary>
            <remarks>
            Overriden to cache a reference to the map labels collection.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapLabelsShape.ComputeModelBounds">
            <summary>
            Computes the bounds of the aggregated model.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NProjectedFeature">
            <summary>
            Represents a projected feature.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NProjectedFeature.#ctor(Nevron.GraphicsCore.NPointF[],System.Int32[])">
            <summary>
            Initializing constructor.
            </summary>
            <param name="points"></param>
            <param name="figureStarts"></param>
        </member>
        <member name="F:Nevron.Diagram.Maps.NProjectedFeature.Points">
            <summary>
            The points of the projected feature.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Maps.NProjectedFeature.FigureStarts">
            <summary>
            The indexes in the point array at which a figure starts.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.NAitoffProjection">
            <summary>
            The Aitoff projection is a modified azimuthal map projection.
            </summary>
            <remarks>
            Proposed by David A. Aitoff in 1889, it is the equatorial form of the azimuthal
            equidistant projection, but stretched into a 2:1 ellipse while halving the longitude
            from the central meridian.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Maps.NAitoffProjection.ProjectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NAitoffProjection.DeprojectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NAitoffProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NAitoffProjection.InitializeArcsInfo">
            <summary>
            Sets the arcs info for this projection.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.NBonneProjection">
            <summary>
            A Bonne projection is a pseudoconical equal-area map projection.
            </summary>
            <remarks>
            <para>
            All parallels are standard, with the same scale as the central meridian;
            parallels are concentric circles. No distortion along the reference parallel
            or the central meridian.
            </para>
            <para>
            Special Cases: Werner results when the reference parallel
            is at a pole. Sinusoidal results when the reference parallel is at the equator.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Maps.NBonneProjection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NBonneProjection.#ctor(System.Single)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="standardParallel">The standard parallel of the projection. Must be
            between -90 and 90 degrees.</param>
        </member>
        <member name="P:Nevron.Diagram.Maps.NBonneProjection.StandardParallel">
            <summary>
            The standard parallel of the projection. Must be between -90 and 90 degrees.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NBonneProjection.ProjectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NBonneProjection.DeprojectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NBonneProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NBonneProjection.InitializeArcsInfo">
            <summary>
            Sets the arcs info for this projection.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.NCylindricalEqualAreaProjection">
            <summary>
            Represents the general Cylindrical Equal-Area projection.
            </summary>
            <remarks>
            The following is a summary of cylindrical equal-area projection's special cases: 
            - Lambert         : standard parallel of  0     degrees 
            - Behrmann        : standard parallel of 30     degrees 
            - Tristan Edwards : standard parallel of 37.383 degrees 
            - Peters          : standard parallel of 44.138 degrees 
            - Gall            : standard parallel of 45     degrees 
            - Balthasart      : standard parallel of 50     degrees
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Maps.NCylindricalEqualAreaProjection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NCylindricalEqualAreaProjection.#ctor(Nevron.Diagram.Maps.CylindricalEqualAreaProjectionType)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="type">The type of the Cylindrical Equal-Area projection.</param>
        </member>
        <member name="P:Nevron.Diagram.Maps.NCylindricalEqualAreaProjection.Type">
            <summary>
            Gets/sets the type of the Cylindrical Equal-Area projection.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NCylindricalEqualAreaProjection.ProjectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NCylindricalEqualAreaProjection.DeprojectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NCylindricalEqualAreaProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NEckertIVProjection">
            <summary>
            The Eckert IV projection, used for world maps, is a pseudocylindrical and equal-area.
            </summary>
            <remarks>
            The central meridian is straight, the 180th meridians are semi-circles, other meridians
            are elliptical. Scale is true along the parallel at 40:30 North and South.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Maps.NEckertIVProjection.ProjectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NEckertIVProjection.DeprojectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NEckertIVProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NEckertVIProjection">
            <summary>
            The Eckert VI projection, used for maps of the world, is pseudocylindrical and equal area.
            </summary>
            <remarks>
            The central meridian and all parallels are at right angles, all other meridians are sinusoidal
            curves. Shape distortion increases at the poles. Scale is correct at standard parallels of
            49:16 North and South.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Maps.NEckertVIProjection.ProjectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NEckertVIProjection.DeprojectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NEckertVIProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NHammerProjection">
            <summary>
            The Hammer projection is an equal-area map projection, described by Ernst Hammer in 1892.
            </summary>
            <remarks>
            Directly inspired by the Aitoff projection, Hammer suggested the use of the equatorial form
            of the Lambert azimuthal equal-area projection instead of Aitoff's use of the azimuthal
            equidistant projection. Visually, the Aitoff and Hammer projections are very similar but the
            Hammer has seen more use because of its equal-area property.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Maps.NHammerProjection.ProjectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NHammerProjection.DeprojectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NHammerProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NHammerProjection.InitializeArcsInfo">
            <summary>
            Sets the arcs info for this projection.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.NKavrayskiyVIIProjection">
            <summary>
            The Kavrayskiy VII is a map projection invented by V. V. Kavrayskiy in 1939 for use
            as a general purpose pseudocylindrical projection. 
            </summary>
            <remarks>
            Like the Robinson projection, it is a compromise intended to produce good quality maps
            with low distortion overall. It scores well in that respect compared to other popular
            projections, such as the Winkel Tripel, despite straight, evenly-spaced parallels
            and a simple formulation. It has been used in the former Soviet Union but is almost
            unknown in the Western world.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Maps.NKavrayskiyVIIProjection.ProjectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NKavrayskiyVIIProjection.DeprojectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NKavrayskiyVIIProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMapProjection">
            <summary>
            Base class for all map projections. Call the Initialize method to set
            the size of the map and the canvas to render it in.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapProjection.#ctor">
            <summary>
            Initializing constructor.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapProjection.MapBounds">
            <summary>
            Gets the bounds of the map.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapProjection.TotalMapBounds">
            <summary>
            Gets the bounds of all layers of the map.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapProjection.ProjectedMapBounds">
            <summary>
            Gets the projected bounds of the map. They are computed upon first request and then cached.
            The cache is invalidated if the map bounds set to the owner map change.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapProjection.CanvasBounds">
            <summary>
            Gets the bounds of the canvas where the map is rendered.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapProjection.MeridianArcLabelPlacement">
            <summary>
            Determines the arc label placement.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapProjection.MeridianLabelAlignment">
            <summary>
            Get/Sets the arc labels relative alignment around the parallel - meridian intersection point.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapProjection.ParallelArcLabelPlacement">
            <summary>
            Determines the arc label placement.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapProjection.ParallelLabelAlignment">
            <summary>
            Get/Sets the arc labels relative alignment around the parallel - meridian intersection point.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapProjection.MapBoundsXml">
            <summary>
            The bounds of the map. Needed for XML serialization.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapProjection.TotalMapBoundsXml">
            <summary>
            The bounds of all layers of the map. Needed for XML serialization.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapProjection.CanvasBoundsXml">
            <summary>
            The bounds of the map canvas. Needed for XML serialization.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Maps.NMapProjection.MatrixXml">
            <summary>
            A trasnformation matrix that trasnforms projected coordinates to canvas coordinates.
            Needed for XML serialization.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapProjection.ProjectPoints(Nevron.GraphicsCore.NPointF[],System.Int32[])">
            <summary>
            Projects the specified points and returns a projected feature or null if the
            given points are not visible in this projection and should not be imported.
            </summary>
            <param name="points"></param>
            <param name="figureStarts"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapProjection.ProjectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapProjection.ProjectRectangle(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Projects the given rectangle.
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapProjection.DeprojectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapProjection.DeprojectRectangle(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Deprojects the given rectangle.
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapProjection.Initialize(Nevron.Diagram.Maps.NMapBounds,Nevron.Diagram.Maps.NMapBounds,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Initialize the projection.
            </summary>
            <param name="mapBounds">The bounds of the map.</param>
            <param name="totalMapBounds">The bounds of the canvas where the map is rendered.</param>
            <param name="canvasBounds"></param>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapProjection.InitializeArcsInfo">
            <summary>
            Sets the arcs info for this projection.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMapProjection.GetArcCount(Nevron.Diagram.Maps.ArcRenderMode,System.Single,System.Double,System.Single,System.Single)">
            <summary>
            Gets the number of arcs to render for the specified canvas length.
            </summary>
            <param name="renderMode"></param>
            <param name="customStep"></param>
            <param name="mapLength"></param>
            <param name="canvasLength"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NEquirectangularProjection">
            <summary>
            Basic GIS projection that maps meridians to equally spaced vertical straight lines,
            and parallels to equally spaced horizontal straight lines.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NEquirectangularProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMercatorProjection">
            <summary>
            Implements the Mercator projection.
            </summary>
            <remarks>
            This map projection introduced in 1569 by Gerardus Mercator. 
            It is often described as a cylindrical projection, but it must be derived
            mathematically. The meridians are equally spaced, parallel vertical lines, 
            and the parallels of latitude are parallel, horizontal straight lines, 
            spaced farther and farther apart as their distance from the Equator 
            increases. This projection is widely used for navigation charts, because 
            any straight line on a Mercator-projection map is a line of constant true 
            bearing that enables a navigator to plot a straight-line course. 
            It is less practical for world maps because the scale is distorted; 
            areas farther away from the equator appear disproportionately large. 
            On a Mercator projection, for example, the landmass of Greenland appears 
            to be greater than that of the continent of South America; in actual area, 
            Greenland is smaller than the Arabian Peninsula.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMercatorProjection.ProjectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMercatorProjection.DeprojectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMercatorProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMillerCylindricalProjection">
            <summary>
            The Miller cylindrical projection is a modified Mercator projection, proposed by Osborn
            Maitland Miller (1897-1979) in 1942.
            </summary>
            <remarks>
            The parallels of latitude are scaled by a factor of 0.8, projected according to Mercator,
            and then the result is divided by 0.8 to retain scale along the equator.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMillerCylindricalProjection.ProjectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMillerCylindricalProjection.DeprojectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMillerCylindricalProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NMollweideProjection">
            <summary>
            The Mollweide projection is a pseudocylindrical map projection generally used for global 
            maps of the world (or sky). Also known as the Babinet projection, homolographic projection,
            or elliptical projection.
            </summary>
            <remarks>
            As its more explicit name Mollweide equal area projection indicates, it sacrifices fidelity
            to angle and shape in favor of accurate depiction of area. It is used primarily where accurate
            representation of area takes precedence over shape, for instance small maps depicting global
            distributions.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMollweideProjection.ProjectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMollweideProjection.DeprojectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMollweideProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NMollweideProjection.InitializeArcsInfo">
            <summary>
            Sets the arcs info for this projection.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.NOrthographicProjection">
            <summary>
            Orthographic projection is a perspective (or azimuthal) projection, in which the sphere
            is projected onto a tangent plane. It depicts a hemisphere of the globe as it appears from
            outer space. The shapes and areas are distorted, particularly near the edges, but distances
            are preserved along parallels.
            </summary>
            <remarks>
            You can control the central meridian of the projection using the <see cref="P:Nevron.Diagram.Maps.NOrthographicProjection.CentralMeridian"/>
            property.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Maps.NOrthographicProjection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NOrthographicProjection.#ctor(System.Single)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="centralMeridian">The central meridian of the projection.
            Must be between -90 and 90 degrees.</param>
        </member>
        <member name="P:Nevron.Diagram.Maps.NOrthographicProjection.CentralMeridian">
            <summary>
            The meridian in the center of the projection. Must be between -90 and 90 degrees.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NOrthographicProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NOrthographicProjection.ProjectPoints(Nevron.GraphicsCore.NPointF[],System.Int32[])">
            <summary>
            Projects the given points.
            </summary>
            <param name="points"></param>
            <param name="figureStarts"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NOrthographicProjection.ProjectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NOrthographicProjection.DeprojectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NOrthographicProjection.InitializeArcsInfo">
            <summary>
            Sets the arcs info for this projection.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NOrthographicProjection.GetArcCount(Nevron.Diagram.Maps.ArcRenderMode,System.Single,System.Double,System.Single,System.Single)">
            <summary>
            Gets the number of arcs to render for the specified canvas length.
            </summary>
            <param name="renderMode"></param>
            <param name="customStep"></param>
            <param name="mapLength"></param>
            <param name="canvasLength"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NRobinsonProjection">
            <summary>
            The Robinson projection is a map projection made in 1988 to show the entire world at once.
            It was specifically created in an attempt to find the good compromise to the problem of
            readily showing the whole globe as a flat image.
            </summary>
            <remarks>
            The projection is neither equal-area nor conformal, abandoning both for a compromise.
            The creator felt this produced a better overall view than could be achieved by adhering
            to either. The meridians curve gently, avoiding extremes, but thereby stretch the poles
            into long lines instead of leaving them as points. Hence distortion close to the poles
            is severe but quickly declines to moderate levels moving away from them. The straight
            parallels imply severe angular distortion at the high latitudes toward the outer edges
            of the map, a fault inherent in any pseudocylindrical projection.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Maps.NRobinsonProjection.ProjectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NRobinsonProjection.DeprojectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NRobinsonProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NStereographicProjection">
            <summary>
            The stereographic projection is a particular mapping (function) that projects a sphere
            onto a plane.
            </summary>
            <remarks>
            The fact that no map from the sphere to the plane can accurately represent both angles
            (and thus shapes) and areas is the fundamental problem of cartography. In general,
            area-preserving map projections are preferred for statistical applications, because
            they behave well with respect to integration, while angle-preserving (conformal) map
            projections are preferred for navigation. The stereographic projection falls into the
            second category.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Maps.NStereographicProjection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NStereographicProjection.ProjectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NStereographicProjection.DeprojectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NStereographicProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NStereographicProjection.InitializeArcsInfo">
            <summary>
            Sets the arcs info for this projection.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.NVanDerGrintenProjection">
            <summary>
            The van der Grinten projection is neither equal-area nor conformal. It projects 
            the entire Earth into a circle, though the polar regions are subject to extreme distortion.
            </summary>
            <remarks>
            <para>
            The projection was the first of four proposed by Alphons J. van der Grinten in 1904,
            and, unlike most projections, is an arbitrary geometric construction on the plane.
            It was made famous when the National Geographic Society adopted it as their reference 
            map of the world from 1922 until 1988.
            </para>
            <para>
            The projection offers pleasant balance of shape and scale distortion. Boundary is a circle;
            all parallels and meridians are circular arcs (spacing of parallels is arbitrary). No 
            distortion along the standard parallel at the equator. Usually clipped near 80� N/S.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Maps.NVanDerGrintenProjection.ProjectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NVanDerGrintenProjection.DeprojectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NVanDerGrintenProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NVanDerGrintenProjection.InitializeArcsInfo">
            <summary>
            Sets the arcs info for this projection.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Maps.NWagnerVIProjection">
            <summary>
            Wagner VI is a pseudocylindrical whole Earth map projection. Like the Robinson projection,
            it is a compromise projection, not having any special attributes other than a pleasing,
            low distortion appearance.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Maps.NWagnerVIProjection.ProjectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NWagnerVIProjection.DeprojectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NWagnerVIProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Maps.NWinkelTripelProjection">
            <summary>
            The Winkel Tripel projection (Winkel III) is a modified azimuthal map projection proposed
            by Oswald Winkel in 1921. The projection is the arithmetic mean of the equirectangular
            projection and the Aitoff projection.
            </summary>
            <remarks>
            Goldberg and Gott show that the Winkel Tripel is arguably the best overall whole-earth map
            projection known, producing very small distance errors, small combinations of ellipticity
            and area errors, and the smallest skewness of any map. In 1998, the Winkel Tripel projection
            replaced the Robinson projection as the standard projection for world maps made by the 
            National Geographic Society.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Maps.NWinkelTripelProjection.ProjectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NWinkelTripelProjection.DeprojectPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Maps.NWinkelTripelProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NDiagramElementCompositeImpl">
            <summary>
            The NDiagramElementCompositeImpl class represents a stock implementation of the INDiagramElementComposite interface, which can be reused and extended
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCompositeImpl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCompositeImpl.QueryNextName(Nevron.Diagram.INDiagramElement)">
            <summary>
            Queries for the next unique name, which will be assigned to the specified element if it is inserted to this composite
            </summary>
            <param name="element">element for which to obtain unique name</param>
            <returns>unique name</returns>
        </member>
        <member name="P:Nevron.Diagram.NDiagramElementCompositeImpl.AutoGenerateUniqueNames">
            <summary>
            Gets/sets the whether the composite must automatically generate unique names for newly inserted nodes.
            Set this property to false if a large number of nodes is about to be inserted in the composite
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCompositeImpl.GetChildByName(System.String,System.Int32)">
            <summary>
            Gets the first child element with the specified name
            </summary>
            <param name="name">child name</param>
            <param name="startIndex">index to start from</param>
            <returns>child diagram element</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCompositeImpl.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Convertes the measurement unit of all contained nodes which contain logical measurements
            </summary>
            <param name="converter">converter</param>
            <param name="from">from unit</param>
            <param name="to">to unit</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCompositeImpl.SplitPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Split paints the contained paintable nodes (first paints their shadow and then their appearance), 
            if the context is not already in split paint mode
            </summary>
            <param name="context">paint context</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCompositeImpl.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints all paintable nodes contained in this composite to the specified context
            </summary>
            <param name="context">paint context</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCompositeImpl.Invalidate">
            <summary>
            Invalidates all invalidatable nodes contained in this composite
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCompositeImpl.HitTest(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests by point all node descendants, which satisfy the specified filter
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>list of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCompositeImpl.HitTest(Nevron.GraphicsCore.NRectangleF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests by rectangle all node descendants, which satisfy the specified filter
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>array of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCompositeImpl.LastHit(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Returns the last hit descendant by point, which statisfies the specified filter
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>hit node, or null if there is not hit node</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCompositeImpl.OnInserting(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Called when a node is about to be inserted in the base array list
            </summary>
            <remarks>
            Overriden to assign a name to the element, if it does not have one already
            </remarks>
            <param name="index">index at which the node will be inserted</param>
            <param name="node">node which will be inserted</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCompositeImpl.OnInserted(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Called when a node has been inserted in the base array list
            </summary>
            <param name="index">index at which the node was inserted</param>
            <param name="node">node which was inserted</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCompositeImpl.OnRemoving(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Called when a node is about to be removed from the base array list
            </summary>
            <param name="index">node index</param> 
            <param name="node">node which will be removed</param>
            <returns></returns> 
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCompositeImpl.OnRemoved(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Called when a node has been removed from the base array list
            </summary>
            <param name="index">node index</param>
            <param name="node">node which has been removed</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramElementCompositeImpl.OnIndexChanged(Nevron.Dom.INNode,System.Int32,System.Int32)">
            <summary>
            Called when the index of the specified node is about to change
            </summary>
            <remarks>
            Overriden to perform the following actions:
            1. Invalidate the node if it is visible
            </remarks>
            <param name="node">node whose index in the base array is changing</param>
            <param name="curIndex">current node index</param>
            <param name="oldIndex">old node index</param>
        </member>
        <member name="T:Nevron.Diagram.NDiagramNodeCompositeImpl">
            <summary>
            The NDiagramNodeCompositeImpl class represents an enhanced implementation of the INNodeComposite interface, 
            which can be resused and extended
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCompositeImpl.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints all paintable nodes contained in this composite to the specified context
            </summary>
            <param name="context">paint context</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCompositeImpl.Invalidate">
            <summary>
            Invalidates all visible nodes contained in this composite
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCompositeImpl.HitTest(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests by point all node descendants, which satisfy the specified filter
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>list of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCompositeImpl.HitTest(Nevron.GraphicsCore.NRectangleF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests by rectangle all node descendants, which satisfy the specified filter
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>array of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCompositeImpl.LastHit(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Returns the last hit descendant by point, which statisfies the specified filter
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>hit node, or null if there is not hit node</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCompositeImpl.OnInserted(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Called when a node has been inserted in the base array list
            </summary>
            <remarks>
            Overriden to invalidate the node if it is visible
            </remarks>
            <param name="index">index at which the node was inserted</param>
            <param name="node">node which was inserted</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCompositeImpl.OnRemoving(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Called when a node is about to be removed from the base array list
            </summary>
            <param name="index">node index</param> 
            <param name="node">node which will be removed</param>
            <returns></returns> 
        </member>
        <member name="M:Nevron.Diagram.NDiagramNodeCompositeImpl.OnIndexChanged(Nevron.Dom.INNode,System.Int32,System.Int32)">
            <summary>
            Called when the index of the specified node is about to change
            </summary>
            <remarks>
            Overriden to invalidate the node if it is visible
            </remarks>
            <param name="node">node whose index in the base array is changing</param>
            <param name="curIndex">current node index</param>
            <param name="oldIndex">old node index</param>
        </member>
        <member name="T:Nevron.Diagram.NInplaceEditWinFormControlSurrogate">
            <summary>
            The NInplaceEditSurrogateControl represents a host for the control defined by a winform host primtive.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NInplaceEditWinFormControlSurrogate.#ctor(Nevron.Diagram.NWinFormControlHostPrimitive)">
            <summary>
            Creates a new inplace-edit surrogate attached to the specified node
            </summary>
            <param name="primitive"></param>
        </member>
        <member name="P:Nevron.Diagram.NInplaceEditWinFormControlSurrogate.Element">
            <summary>
            Gets the element, which the control edits
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NInplaceEditWinFormControlSurrogate.Transform(Nevron.GraphicsCore.NMatrix2DF)">
            <summary>
            Transform the control with the specified transformations
            </summary>
            <param name="worldToDevice">world to device transformation</param>
        </member>
        <member name="M:Nevron.Diagram.NInplaceEditWinFormControlSurrogate.EndEditing(System.Boolean)">
            <summary>
            Ends the control editing
            </summary>
            <param name="commit"></param>
        </member>
        <member name="M:Nevron.Diagram.NInplaceEditWinFormControlSurrogate.OnGotFocus(System.EventArgs)">
            <summary>
            Overriden to forward the focus to the aggregated control
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Nevron.Diagram.NInplaceEditTextBox">
            <summary>
            The NInplaceEditTextBox represents a text box, which is used for the inplace editing of elements, 
            which display text (e.g. NTextPrimitive, NLabel etc.) 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NInplaceEditTextBox.#ctor(Nevron.Diagram.INInplaceEditable)">
            <summary>
            Creates a new inplace-edit text box attached to the specified node
            </summary>
            <param name="node">node to edit</param>
        </member>
        <member name="P:Nevron.Diagram.NInplaceEditTextBox.Element">
            <summary>
            Gets/sets the element, which the control edits
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NInplaceEditTextBox.Transform(Nevron.GraphicsCore.NMatrix2DF)">
            <summary>
            Transform the control with the specified transformations
            </summary>
            <param name="worldToDevice">world to device transformation</param>
        </member>
        <member name="M:Nevron.Diagram.NInplaceEditTextBox.EndEditing(System.Boolean)">
            <summary>
            Ends the editing
            </summary>
            <param name="commit">whether to commit changes</param>
        </member>
        <member name="M:Nevron.Diagram.NInplaceEditTextBox.OnLostFocus(System.EventArgs)">
            <summary>
            Overriden to destroy the control
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.NInplaceEditTextBox.OnTextChanged(System.EventArgs)">
            <summary>
            Overriden to call the ResizeToTextBounds method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.NInplaceEditTextBox.UpdateTextBoxStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NInplaceEditTextBox.UpdateFont">
            <summary>
            Updates the text box font to resemble the composed node text style font
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NInplaceEditTextBox.ResizeToTextBounds">
            <summary>
            Resizes the control to the desired text bounds of the node
            </summary>
        </member>
        <member name="T:Nevron.Diagram.INBridgeManager">
            <summary>
            Implemented by elements, which have a NBridgeManager attribute
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INBridgeManager.BridgeManager">
            <summary>
            Gets/sets the bridge manager
            </summary>
        </member>
        <member name="T:Nevron.Diagram.INConnectionContainer">
            <summary>
            Implemented by elements, which have a NConnectionContainer attribute
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INConnectionContainer.ConnectionContainer">
            <summary>
            Gets/sets the interaction style of the node
            </summary>
        </member>
        <member name="T:Nevron.Diagram.INRoutingManager">
            <summary>
            Implemented by elements, which have a NRoutingManager attribute
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INRoutingManager.RoutingManager">
            <summary>
            Gets/sets the routing manager
            </summary>
        </member>
        <member name="T:Nevron.Diagram.INStyleable">
            <summary>
            Implemented by nodes, which can compose styles and contain a local style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INStyleable.Style">
            <summary>
            Gets/sets the local node style
            </summary>
        </member>
        <member name="T:Nevron.Diagram.INStyleComposer">
            <summary>
            Implemented by nodes, which can compose styles
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INStyleComposer.ComposeStyle">
            <summary>
            Composes a new style, which contains cloning of the composes styles
            </summary>
            <returns>new composed style</returns>
        </member>
        <member name="M:Nevron.Diagram.INStyleComposer.ComposeStrokeStyle">
            <summary>
            Composes the stroke style
            </summary>
            <returns>reference to the composed stroke style</returns>
        </member>
        <member name="M:Nevron.Diagram.INStyleComposer.ComposeShadowStyle">
            <summary>
            Composes the shadow style
            </summary>
            <returns>reference to the composed shadow style</returns>
        </member>
        <member name="M:Nevron.Diagram.INStyleComposer.ComposeFillStyle">
            <summary>
            Composes the fill style
            </summary>
            <returns>reference to the composed fill style</returns>
        </member>
        <member name="M:Nevron.Diagram.INStyleComposer.ComposeTextStyle">
            <summary>
            Composes the text style
            </summary>
            <returns>reference to the composed text style</returns>
        </member>
        <member name="M:Nevron.Diagram.INStyleComposer.ComposeBridgeStyle">
            <summary>
            Composes the bridge style
            </summary>
            <returns>reference to the composed bridge style</returns>
        </member>
        <member name="M:Nevron.Diagram.INStyleComposer.ComposeStartArrowheadStyle">
            <summary>
            Composes the start arrowhead style
            </summary>
            <returns>reference to the composed start arrowhead style</returns>
        </member>
        <member name="M:Nevron.Diagram.INStyleComposer.ComposeEndArrowheadStyle">
            <summary>
            Composes the end arrowhead style
            </summary>
            <returns>reference to the composed end arrowhead style</returns>
        </member>
        <member name="M:Nevron.Diagram.INStyleComposer.ComposeInteractivityStyle">
            <summary>
            Composes the interactivity style
            </summary>
            <returns>reference to the interactivity style</returns>
        </member>
        <member name="M:Nevron.Diagram.INStyleComposer.ComposeAnimationsStyle">
            <summary>
            Composes the animations style
            </summary>
            <returns>reference to the animations style</returns>
        </member>
        <member name="T:Nevron.Diagram.INTranslationMaster">
            <summary>
            Implemented by elements, which must be translated with their slaves
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INTranslationMaster.AccumulateTranslationSlaves(Nevron.Dom.NNodeList,System.Collections.Hashtable,System.Boolean)">
            <summary>
            Accumulates the nodes, which should be translated when this master is translated
            </summary>
            <param name="nodes">node list in which to accumulate the slaves</param>
            <param name="visited">hash table of already visisted masters</param> 
            <param name="directOnly">whether to accumulate only direct or to drill down</param>
        </member>
        <member name="T:Nevron.Diagram.INContextMenuEditable">
            <summary>
            Implemented by elements, which can be edited with context menus 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INContextMenuEditable.Verbs">
            <summary>
            Obtains an array list of NCommand instances representing the verbs supported by the node
            </summary>
        </member>
        <member name="T:Nevron.Diagram.INInplaceEditable">
            <summary>
            Implemented by nodes which support inplace editing 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INInplaceEditable.CreateInplaceEditControl">
            <summary>
            Creates an inplace edit control
            </summary>
            <returns>control which must implement the INInplaceEditControl interface</returns>
        </member>
        <member name="T:Nevron.Diagram.INInplaceEditControl">
            <summary>
            Implemented by inplace edit controls
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INInplaceEditControl.Element">
            <summary>
            Gets the element, which is edited by the control
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INInplaceEditControl.Transform(Nevron.GraphicsCore.NMatrix2DF)">
            <summary>
            Transform the control with the specified transformation
            </summary>
            <param name="worldToDevice">world to device transformation</param>
        </member>
        <member name="M:Nevron.Diagram.INInplaceEditControl.EndEditing(System.Boolean)">
            <summary>
            Ends the editing
            </summary>
            <param name="commit">whether to commit changes</param>
        </member>
        <member name="T:Nevron.Diagram.INBoundable">
            <summary>
            Implemented by nodes, which have manipulatable axis parallel bounds measured in scene coordinates
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INBoundable.Bounds">
            <summary>
            Gets/sets the bounds of the node (in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INBoundable.Center">
            <summary>
            Gets/sets the node center (in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INBoundable.Location">
            <summary>
            Gets/sets the node location (top left corner of the bounds, in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INBoundable.Width">
            <summary>
            Gets/sets the node width (in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INBoundable.Height">
            <summary>
            Gets/sets the node height (in scene coordinates)
            </summary>
        </member>
        <member name="T:Nevron.Diagram.INBridgeablePath">
            <summary>
            Implemented by paths, which can display bridges (hops) on self intersections, or intersections with other bridgeable paths below it in the ZOrder
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INBridgeablePath.InvalidateBridges">
            <summary>
            Invalidates the bridges of the node
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INBridgeablePath.GetBridgeableSegmentIterator">
            <summary>
            Obtains a bridgeable segment iterator for this bridgable primitive
            </summary>
            <returns>iterator</returns>
        </member>
        <member name="T:Nevron.Diagram.INPoints">
            <summary>
            Implemented by elements, which have a fixed count of editable points (vertices)
            </summary>
            <remarks>
            Points exposed by this interface must always be in scene coordinates
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.INPoints.GetPointInfo(System.Int32)">
            <summary>
            Obtains information about the point at the specified index
            </summary>
            <param name="index">point index</param>
            <returns>information for the point at the specified index</returns>
        </member>
        <member name="P:Nevron.Diagram.INPoints.PointsCount">
            <summary>
            Obtains the points count 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INPoints.Points">
            <summary>
            Gets/sets the node points (in scene coordinates)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INPoints.GetPointAt(System.Int32)">
            <summary>
            Gets the point at the specified index (in scene coordinates)
            </summary>
            <param name="index">point index</param>
            <returns>point at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.INPoints.SetPointAt(System.Int32,Nevron.GraphicsCore.NPointF)">
            <summary>
            Sets the point at the specified index (in scene coordinates)
            </summary>
            <param name="index">point index</param>
            <param name="point">point to set</param>
        </member>
        <member name="T:Nevron.Diagram.INPolyPoints">
            <summary>
            Implemented by nodes, which have a variable count of editable points (vertices)
            </summary>
            <remarks>
            Points exposed by this interface must always be in scene coordinates
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.INPolyPoints.MinPointsCount">
            <summary>
            Obtains the minimal allowed number of points
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INPolyPoints.AddPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Adds a new point to the node (in scene coordinates)
            </summary>
            <param name="point">point to add</param>
        </member>
        <member name="M:Nevron.Diagram.INPolyPoints.InsertPoint(System.Int32,Nevron.GraphicsCore.NPointF)">
            <summary>
            Inserts a new point to the node at the specified index (in scene coordinates)
            </summary>
            <param name="index">index to insert at</param>
            <param name="point">point to insert</param>
        </member>
        <member name="M:Nevron.Diagram.INPolyPoints.RemovePointAt(System.Int32)">
            <summary>
            Removes the point at the specified index
            </summary>
            <param name="index">index of point to remove</param>
        </member>
        <member name="M:Nevron.Diagram.INPolyPoints.MergePoints(System.Single)">
            <summary>
            Merges (removes) all points, whose oriented distance from the line formed 
            by its neighbours is smaller than the specified.
            </summary>
            <param name="distance">oriented distance below which the point is merged (in scene coordinates)</param>
        </member>
        <member name="T:Nevron.Diagram.INDeviceText">
            <summary>
            Implemented by elements which can display text in the device coordinate system
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INDeviceText.GetDeviceTextPaintInfo(System.String,Nevron.Diagram.NTextPaintInfo@)">
            <summary>
            Obtains text paint info in device coordinates
            </summary>
            <param name="text">text for which to obtain paint info</param> 
            <param name="info">result paint info</param>
            <returns>true if paint info was successfully obtained, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.INSegments">
            <summary>
            Implemented by nodes, whose points form editable segments
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INSegments.SegmentsCount">
            <summary>
            Obtains the count of segments
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INSegments.GetSegmentMidPointInfo(System.Int32)">
            <summary>
            Obtains information about the segment mid point
            </summary>
            <param name="segmentIndex">index of segment</param> 
            <returns>information about the segment mid point</returns>
        </member>
        <member name="M:Nevron.Diagram.INSegments.MoveSegment(System.Int32,Nevron.GraphicsCore.NPointF)">
            <summary>
            Moves the segment to the specified location
            </summary>
            <param name="segmentIndex">segment index</param>
            <param name="location">location to move to</param>
        </member>
        <member name="M:Nevron.Diagram.INSegments.SplitSegment(System.Int32)">
            <summary>
            Splits the specified segment and returns information about the point, which can be subsequently translated
            </summary>
            <param name="segmentIndex">segment index</param>
            <returns>information about the point which can be translated</returns>
        </member>
        <member name="M:Nevron.Diagram.INSegments.ToLineSegments">
            <summary>
            Get the line segments forming this node.
            </summary>
            <returns>An array of line segments.</returns>
        </member>
        <member name="T:Nevron.Diagram.INText">
            <summary>
            Implemented by elements which can display text
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INText.Text">
            <summary>
            Gets/sets the node text
            </summary>
        </member>
        <member name="T:Nevron.Diagram.INWorldText">
            <summary>
            Implemented by elements which can display text in the world coordinate system
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INWorldText.GetWorldTextPaintInfo(System.String,Nevron.Diagram.NTextPaintInfo@)">
            <summary>
            Obtains text paint info in world coordinates
            </summary>
            <param name="text">text for which to obtain paint info</param> 
            <param name="info">result paint info</param>
            <returns>true if paint info was successfully obtained, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.INHitTest">
            <summary>
            Implemented by nodes, which can initiate hit tests
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INHitTest.HitTest(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests by point all node descendants, which satisfy the specified filter
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>list of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.INHitTest.HitTest(Nevron.GraphicsCore.NRectangleF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests by rectangle all node descendants, which satisfy the specified filter
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>array of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.INHitTest.LastHit(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Returns the last hit descendant by point, which statisfies the specified filter
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>hit node, or null if there is not hit node</returns>
        </member>
        <member name="T:Nevron.Diagram.INHitTestable">
            <summary>
            Implemented by nodes, which can be hit tested
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INHitTestable.HitTest(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the node by point with the specified context
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.INHitTestable.HitTest(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the node by rectangle with the specified context
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.INDragDropEventHandler">
            <summary>
            Implemented by elements, which can handle drag and drop events (drag drop targets)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INDragDropEventHandler.OnDragEnter(Nevron.Diagram.NDragEventArgs)">
            <summary>
            Called when a dragged object entered the element
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.INDragDropEventHandler.OnDragDrop(Nevron.Diagram.NDragEventArgs)">
            <summary>
            Called when a dragged object is dropped in the element
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.INDragDropEventHandler.OnDragLeave(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when a dragged object leaves the element
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.INDragDropEventHandler.OnDragOver(Nevron.Diagram.NDragEventArgs)">
            <summary>
            Called when a dragged object is moved over the element
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="T:Nevron.Diagram.INKeyboardEventHandler">
            <summary>
            Implemented by elements, which can handle keyboard events 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INKeyboardEventHandler.OnKeyDown(Nevron.Diagram.NKeyEventArgs)">
            <summary>
            Handles the key down event
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.INKeyboardEventHandler.OnKeyPress(Nevron.Diagram.NKeyPressEventArgs)">
            <summary>
            Handles the key press event
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.INKeyboardEventHandler.OnKeyUp(Nevron.Diagram.NKeyEventArgs)">
            <summary>
            Handles the key up event
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.INKeyboardEventHandler.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is an input key
            </summary>
            <param name="keyData">key</param>
            <returns>true if the key is an input key, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.INKeyboardEventHandler.IsInputChar(System.Char)">
            <summary>
            Determines whether the specified character is an input charecter
            </summary>
            <param name="charCode">character</param>
            <returns>true if the character is an input character, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.INMouseEventHandler">
            <summary>
            Implemented by elements, which can handle mouse events 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INMouseEventHandler.OnMouseEnter(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the mouse entered the element
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.INMouseEventHandler.OnMouseMove(Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Called when the mouse moves in the element
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.INMouseEventHandler.OnMouseHover(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the mouse hovers in the element
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.INMouseEventHandler.OnMouseDown(Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Called when a mouse button is down in the element
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.INMouseEventHandler.OnMouseUp(Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Called when a mouse button is up in the element
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.INMouseEventHandler.OnMouseWheel(Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Called when a mouse wheel was moved in the element
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.INMouseEventHandler.OnMouseLeave(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the mouse leaves the element
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.INMouseEventHandler.OnClick(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the user clicked on the element
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Diagram.INMouseEventHandler.OnDoubleClick(Nevron.Diagram.NViewEventArgs)">
            <summary>
            Called when the user double clicked on the element
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="T:Nevron.Diagram.INMeasurementContext">
            <summary>
            Implemented by objects, which can provide a graphics device for measurements
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INMeasurementContext.MeasurementContext">
            <summary>
            Obtains a graphics device which can be used for measurements
            </summary>
        </member>
        <member name="T:Nevron.Diagram.INMeasurements">
            <summary>
            Implemented by objects, which store logical measurements
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INMeasurements.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="T:Nevron.Diagram.INMeasurementSystemManager">
            <summary>
            Implemented by objects, which can provide a measurement systems manager
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INMeasurementSystemManager.MeasurementSystemManager">
            <summary>
            Obtains a measurement system manager
            </summary>
        </member>
        <member name="T:Nevron.Diagram.INMeasurementUnit">
            <summary>
            Implemented by objects, which have a local measurement unit
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INMeasurementUnit.MeasurementUnit">
            <summary>
            Gets/sets the measurement unit of the object
            </summary>
        </member>
        <member name="T:Nevron.Diagram.INMeasurementUnitConverter">
            <summary>
            Implemented by objects, which can provide a measurement unit converter
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INMeasurementUnitConverter.MeasurementUnitConverter">
            <summary>
            Obtains a measurement unit converter
            </summary>
        </member>
        <member name="T:Nevron.Diagram.INResolution">
            <summary>
            Implemented by objects, which can provide resultion for convertion between device dependant and device independant measurement units
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INResolution.Resolution">
            <summary>
            Gets/sets the resolution used for convertion between device dependant and device independant measurement units (in dots per inch)
            </summary>
        </member>
        <member name="T:Nevron.Diagram.INWorld">
            <summary>
            Implemented by scene roots and provides information about the scene to world transformation
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INWorld.SceneScaleToWorldX">
            <summary>
            Obtains the current X scaling of scene units to world units
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INWorld.SceneScaleToWorldY">
            <summary>
            Obtains the current X scaling of scene units to world units
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INWorld.SceneToWorld">
            <summary>
            Obtains the current scene to world transform
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INWorld.WorldMeasurementUnit">
            <summary>
            Gets the current world measurement unit
            </summary>
        </member>
        <member name="T:Nevron.Diagram.INAncestorCollapseObserver">
            <summary>
            Implemented by nodes, which require to be notified when an ancestor is collapsed or expanded
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INAncestorCollapseObserver.OnAncestorCollapseChanging(Nevron.Dom.INNode,System.Boolean)">
            <summary>
            Called when the specified ancestor is changing its collapsed/expanded state
            </summary>
            <param name="ancestor">ancestor whose collapsed/expanded state is changing</param>
            <param name="collapsing">true if the ancestor is collapsing, false if it is expanding</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.INAncestorCollapseObserver.OnAncestorCollapseChanged(Nevron.Dom.INNode)">
            <summary>
            Called when the specified ancestor collapsed/expanded state has changed
            </summary>
            <param name="ancestor">ancestor whose collapsed/expanded state has changed</param>
        </member>
        <member name="T:Nevron.Diagram.INAncestorTransformObserver">
            <summary>
            Implemented by nodes, which require to be notified when the transformation of an ancestor is changing or has changed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INAncestorTransformObserver.OnAncestorTransformChanging(Nevron.Dom.INNode,Nevron.GraphicsCore.NMatrix2DF)">
            <summary>
            Called when the transformation of the specified ancestor is changing
            </summary>
            <param name="ancestor">ancestor whose transformation is changing</param>
            <param name="newTransform">new ancestor transformation</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.INAncestorTransformObserver.OnAncestorTransformChanged(Nevron.Dom.INNode)">
            <summary>
            Called when the transformaiton of the specified ancestor has changed
            </summary>
            <param name="ancestor">ancestor whose transformation has changed</param>
        </member>
        <member name="T:Nevron.Diagram.INLayerObserver">
            <summary>
            Implemented by elements, which need to be notified for layers changes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INLayerObserver.OnLayerInserted(Nevron.Diagram.NLayer)">
            <summary>
            Called when a layer has been inserted
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:Nevron.Diagram.INLayerObserver.OnLayerRemoved(Nevron.Diagram.NLayer)">
            <summary>
            Called when a layer has been removed
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:Nevron.Diagram.INLayerObserver.OnLayerIndexChanged(Nevron.Diagram.NLayer)">
            <summary>
            Called when the index of a layer inside its container has changed
            </summary>
            <param name="layer"></param>
        </member>
        <member name="T:Nevron.Diagram.INShapeConstrainer">
            <summary>
            Implemented by nodes, which can constrain the bounds of the contained shapes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INShapeConstrainer.IsShapeConstrained(Nevron.Diagram.NShape)">
            <summary>
            Determines whether the shape bounds are constrained
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.INShapeConstrainer.GetShapeConstrainBounds(Nevron.Diagram.NShape)">
            <summary>
            Get the constrain bounds for the specified shape
            </summary>
            <param name="shape">shape for which to get constrain bounds</param>
            <returns>shape constrain bounds</returns>
        </member>
        <member name="T:Nevron.Diagram.INShapeObserver">
            <summary>
            Implemented by elements, which need to be notified for shape changes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INShapeObserver.OnShapeInserted(Nevron.Diagram.NShape)">
            <summary>
            Called when a shape has been inserted
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Diagram.INShapeObserver.OnShapeRemoved(Nevron.Diagram.NShape)">
            <summary>
            Called when a shape has been removed
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Diagram.INShapeObserver.OnShapeIndexChanged(Nevron.Diagram.NShape)">
            <summary>
            Called when the index of a shape inside its container has changed
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Diagram.INShapeObserver.OnShapeBoundsChanged(Nevron.Diagram.NShape)">
            <summary>
            Called when the bounds of the specified shape has changed
            </summary>
            <param name="shape"></param>
        </member>
        <member name="T:Nevron.Diagram.INDirtyInflate">
            <summary>
            Implemented by nodes, which can estimate the area outside them in world coordinates, which is 
            affected by their painting.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INDirtyInflate.DirtyInflate">
            <summary>
            Obtains the dirty inflate of the node in world coordinates
            </summary>
        </member>
        <member name="T:Nevron.Diagram.INInvalidatable">
            <summary>
            Implemented by nodes which can be invalidated
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INInvalidatable.Invalidate">
            <summary>
            Invalidates the projection of the object on the drawing surface
            </summary>
        </member>
        <member name="T:Nevron.Diagram.INPaintable">
            <summary>
            Implemented by nodes, which can be painted
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INPaintable.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the node in the specified context
            </summary>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.INPaintable.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the node can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the node can be painted, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.INVisible">
            <summary>
            Implemented by nodes, whose visibility can be controlled
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INVisible.Visible">
            <summary>
            Controls the visibility of the node
            </summary>
        </member>
        <member name="T:Nevron.Diagram.INSerializationCallback">
            <summary>
            Implemented by diagram objects, which can be serialized in persistent sections and need to be notified when they are serialized or deserialized
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INSerializationCallback.OnSerializing">
            <summary>
            Called when the object is about to be serialized
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INSerializationCallback.OnDeserialized">
            <summary>
            Called when the object has been deserialized
            </summary>
        </member>
        <member name="T:Nevron.Diagram.INDiagramElement">
            <summary>
            Implemened by each element residing in a diagram document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INDiagramElement.Name">
            <summary>
            User defined name of the element
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INDiagramElement.Abilities">
            <summary>
            Gets the element abilities 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INDiagramElement.Protection">
            <summary>
            Gets/sets the element protection 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INDiagramElement.Permissions">
            <summary>
            Gets the allowed element abilities (e.g its permissions)
            </summary>
        </member>
        <member name="T:Nevron.Diagram.INDiagramElementComposite">
            <summary>
            Implemented by INDiagramElementContainer nodes, whose child nodes can be inserted and removed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INDiagramElementComposite.EnumInstantiatableTypes">
            <summary>
            Enumerates the known types, which can be instantiated and inserted to this composite at runtime
            </summary>
            <returns>types of the nodes which can be instanciated and inserted to this composite at runtime</returns>
        </member>
        <member name="M:Nevron.Diagram.INDiagramElementComposite.QueryNextName(Nevron.Diagram.INDiagramElement)">
            <summary>
            Queries for the next unique name, which will be assigned to the specified element if it is inserted to this composite
            </summary>
            <param name="element">element for which to obtain unique name</param>
            <returns>unique name</returns>
        </member>
        <member name="P:Nevron.Diagram.INDiagramElementComposite.AutoGenerateUniqueNames">
            <summary>
            Gets/sets the whether the composite must automatically generate unique names for newly inserted nodes.
            Set this property to false if a large number of nodes is about to be inserted in the composite
            </summary>
        </member>
        <member name="T:Nevron.Diagram.INDiagramElementContainer">
            <summary>
            Implemented by INDiagramElement nodes, which contain other INDiagramElement nodes.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INDiagramElementContainer.GetChildByName(System.String)">
            <summary>
            Gets the first child element with the specified name
            </summary>
            <param name="name">child name</param>
            <returns>child diagram element</returns>
        </member>
        <member name="M:Nevron.Diagram.INDiagramElementContainer.GetChildByName(System.String,System.Int32)">
            <summary>
            Gets the first child element with the specified name
            </summary>
            <param name="name">child name</param>
            <param name="startIndex">index to start from</param>
            <returns>child diagram element</returns>
        </member>
        <member name="T:Nevron.Diagram.INDiagramElementReferenceHolder">
            <summary>
            Implemented by diagram elements nodes, which reference other 
            diagram elements by their unique ids and expose editable properties for the reference selection
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INDiagramElementReferenceHolder.GetFilterForReferenceProperty(System.String)">
            <summary>
            Provides a filter for the specified reference property
            </summary>
            <param name="property">property exposing unique id, for which to obtain filter</param>
            <returns>filter</returns>
        </member>
        <member name="M:Nevron.Diagram.INDiagramElementReferenceHolder.GetRootForReferenceProperty(System.String)">
            <summary>
            Obtains the root, from which to search for the referenced element
            </summary>
            <param name="property">property exposing id</param>
            <returns>root for the search</returns>
        </member>
        <member name="T:Nevron.Diagram.INZOrderable">
            <summary>
            Implemented by nodes, whose ZOrder can be changed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INZOrderable.ZOrder">
            <summary>
            Gets/sets the ZOrder of the node
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INZOrderable.BringForward">
            <summary>
            Brings the node one position forward in the Z order
            </summary>
            <returns>previous node Z order</returns>
        </member>
        <member name="M:Nevron.Diagram.INZOrderable.BringToFront">
            <summary>
            Brings the node to front position in the Z order
            </summary>
            <returns>previous node Z order</returns>
        </member>
        <member name="M:Nevron.Diagram.INZOrderable.SendBackward">
            <summary>
            Sends the node one position backward in the Z order
            </summary>
            <returns>previous node Z order</returns>
        </member>
        <member name="M:Nevron.Diagram.INZOrderable.SendToBack">
            <summary>
            Sends the node to back position in the Z order
            </summary>
            <returns>previous node Z order</returns>
        </member>
        <member name="M:Nevron.Diagram.INZOrderable.CanBringForward">
            <summary>
            Determines whether the node is not already at front position
            </summary>
            <returns>true if it is not at front position, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.INZOrderable.CanSendBackward">
            <summary>
            Determines whether the node is not already at back position
            </summary>
            <returns>true if it is not at back position, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.INBridgeableShape">
            <summary>
            Implemented by bridgeable shapes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INBridgeableShape.BridgeTargets">
            <summary>
            Specified the bridge targets of the shape
            </summary>
        </member>
        <member name="T:Nevron.Diagram.INReflexiveShape">
            <summary>
            Implemented by shapes, which can be configured to aesthetically reflex around the shape to 
            which their start and end plugs are connected
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INReflexiveShape.CanReflex">
            <summary>
            Determines whether the shape can reflex
            </summary>
            <returns>true it it can, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.INReflexiveShape.Reflex">
            <summary>
            Modifies the shape to aesthetically loop around the reflexed shape
            </summary>
            <returns>true if the reflex succeeded, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.INRoutableShape">
            <summary>
            Implemented by shapes, which can be treated as routes, avoiding obstacles
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INRoutableShape.CanReroute">
            <summary>
            Determines whether the route can currently be rerouted
            </summary>
            <returns>true if it can reroute, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.INRoutableShape.Reroute">
            <summary>
            Finds a new route, which strives not to cross any obstacles
            </summary>
            <returns>true if the routing succeeded, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.INRoutableShape.RerouteAutomatically">
            <summary>
            Specifies the mode in which this route is automatically rerouted
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INRoutableShape.ComposeRouteRequirements">
            <summary>
            Composes the requirements of a route
            </summary>
            <returns>route requirements or null if the route cannot be rerouted</returns>
        </member>
        <member name="T:Nevron.Diagram.INShapesFactory">
            <summary>
            Implemented by objects, which can create shapes by name
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INShapesFactory.CreateShape(System.String)">
            <summary>
            Creates a new instance of the shape with the specified name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.INShapesFactory.CanCreateShape(System.String)">
            <summary>
            Determines whether this shape factory can create a shape with the specified name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.INXCoordinateSnapper">
            <summary>
            Implemented by objects, which can snap X coordinates
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INXCoordinateSnapper.SnapX(System.Single,Nevron.Diagram.NSnapContext,System.Single@)">
            <summary>
            Tries to snap the specified X coordinate
            </summary>
            <param name="x">x coordinate to snap</param>
            <param name="context">snap context</param>
            <param name="snappedX">snapped X coordinate</param>
            <returns>true if successfully snapped, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.INYCoordinateSnapper">
            <summary>
            Implemented by objects, which can snap Y coordinates
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INYCoordinateSnapper.SnapY(System.Single,Nevron.Diagram.NSnapContext,System.Single@)">
            <summary>
            Tries to snap the specified Y coordinate
            </summary>
            <param name="y">y coordinate to snap</param>
            <param name="context">snap context</param>
            <param name="snappedY">snapped Y coordinate</param>
            <returns>true if successfully snapped, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.INTransformable">
            <summary>
            Implemented by nodes, which can be transformed relatively to their parent
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INTransformable.Transform">
            <summary>
            Gets/sets transformation, which transforms the node to the parent coordinate system
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INTransformable.SceneTransform">
            <summary>
            Gets the transformation, which transforms the node to the scene coordinate system
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INTransformable.WorldTransform">
            <summary>
            Gets the transformation, which transforms the node to the world coordinate system
            </summary>
        </member>
        <member name="P:Nevron.Diagram.INTransformable.ParentSceneTransform">
            <summary>
            Gets the transformation, which transforms the parent transformable node to the scene coordinate system
            </summary>
        </member>
        <member name="T:Nevron.Diagram.INTranslatable">
            <summary>
            Implemented by nodes, which can be translated
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INTranslatable.Translate(System.Single,System.Single)">
            <summary>
            Translates the node with the specified offset
            </summary>
            <param name="dx">x offset</param>
            <param name="dy">y offset</param>
        </member>
        <member name="T:Nevron.Diagram.INView">
            <summary>
            Implemented by document views
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INView.Refresh">
            <summary>
            Refreshes the view (repaint it)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INView.SmartRefresh">
            <summary>
            Smartly refreshes the view (only repaints the view area which is invalid)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INView.UpdateView">
            <summary>
            Informs the view that it needs to update itself
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INView.GetViewBridge(Nevron.Diagram.ViewBridgeType)">
            <summary>
            Gets a reference for the specified view bridge
            </summary>
            <param name="bridgeType">view bridge type to get</param>
            <returns>reference to view bridge, or null if the view cannot provide it</returns>
        </member>
        <member name="T:Nevron.Diagram.INViewInteractivityBridge">
            <summary>
            Bridge interface for the view interactivity requests made by the document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INViewInteractivityBridge.RequestCursor(System.Windows.Forms.Cursor)">
            <summary>
            Requests the specified cursor
            </summary>
            <param name="cursor">requested cursor</param>
        </member>
        <member name="M:Nevron.Diagram.INViewInteractivityBridge.RequestTooltip(System.String)">
            <summary>
            Requests the specified tooltip
            </summary>
            <param name="tooltip">requested tooltip</param>
        </member>
        <member name="T:Nevron.Diagram.INViewSmartPaintBridge">
            <summary>
            Bridge interface for smart paint service requests made by the document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INViewSmartPaintBridge.InvalidateDocumentSceneRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Called by the document smart paint service to invalidate the specified scene rect
            </summary>
            <param name="sceneRect">scene rect to invalidate</param>
            <param name="worldInflate">inflate of the rect in world cooordinates</param>
        </member>
        <member name="M:Nevron.Diagram.INViewSmartPaintBridge.InvalidateDocumentWorldRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Called by the document smart paint service to invalidate the specified world rect
            </summary>
            <param name="worldRect">world rect to invalidate</param>
            <param name="worldInflate">inflate of the rect in world cooordinates</param>
        </member>
        <member name="M:Nevron.Diagram.INViewSmartPaintBridge.InvalidateDocumentScenePoint(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Called by the document smart paint service to invalidate the specified scene point
            </summary>
            <param name="scenePoint">scene point to invalidate</param>
            <param name="deviceSize">size of the point in device coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.INViewSmartPaintBridge.InvalidateDocumentInfiniteLine(System.Single,System.Boolean,System.Single)">
            <summary>
            Called by the document smart paint service to invalidate an infinite vertical or horizontal line
            </summary>
            <param name="sceneCoordinate">coordinate of the line</param>
            <param name="horizontal">true of the line is horizontal, false if it is vertical</param>
            <param name="worldInflate">inflate in world cooordinates</param>
        </member>
        <member name="M:Nevron.Diagram.INViewSmartPaintBridge.InvalidateDocumentNodeInstance(Nevron.Dom.INNode)">
            <summary>
            Called by the document smart paint service to invalidate all view instances of the node
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Diagram.INViewSmartPaintBridge.Invalidate">
            <summary>
            Invalidates the entire view area
            </summary>
        </member>
        <member name="T:Nevron.Diagram.INViewTrackersBridge">
            <summary>
            Bridge interface for the trackers requests made by the document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.INViewTrackersBridge.CreateTrackersForShape(Nevron.Diagram.NShape)">
            <summary>
            Creates the trackers for the specified shape
            </summary>
            <param name="shape">shape for which to create trackers</param>
        </member>
        <member name="M:Nevron.Diagram.INViewTrackersBridge.DestroyTrackersForShape(Nevron.Diagram.NShape)">
            <summary>
            Destroys the trackers of the specified shape
            </summary>
            <param name="shape">shape whose trackers to destroy</param>
        </member>
        <member name="M:Nevron.Diagram.INViewTrackersBridge.UpdateTrackersForShape(Nevron.Diagram.NShape)">
            <summary>
            Updates the trackers of the specified shape
            </summary>
            <param name="shape">shape whose trackers to update</param>
        </member>
        <member name="M:Nevron.Diagram.INViewTrackersBridge.RecreateTrackersForShape(Nevron.Diagram.NShape)">
            <summary>
            Recreates the trackers for the specified shape
            </summary>
            <param name="shape">shape whose trackers to recreate</param>
        </member>
        <member name="T:Nevron.Diagram.Layout.NBody">
            <summary>
            The NBody class represents a visually arrangeable abstract shape,
            which can optionally represent a logical object. Layouts actually arrange bodies.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody.Translate(System.Single,System.Single)">
            <summary>
            Translates the body
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody.FlipX">
            <summary>
            Flips the X coordinates of body
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody.FlipY">
            <summary>
            Flips the Y coordinates of body
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody.Rotate(Nevron.Diagram.Layout.LayoutRotation)">
            <summary>
            Rotates the body
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody.GetBounds">
            <summary>
            Gets the bounds of the body 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody.RotatePoint(Nevron.Diagram.Layout.LayoutRotation,Nevron.GraphicsCore.NPointF)">
            <summary>
            Rotates the specified point with the specified rotation
            </summary>
            <param name="rotation"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Diagram.Layout.NBody.Object">
            <summary>
            Gets/sets the logical object represented by this body
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NBody.SpringStiffnessKey">
            <summary>
            Defines the spring stiffness of a force directed edge
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NBody.SpringLengthKey">
            <summary>
            Defines the spring length of a force directed edge
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NBody.MagnetizationTypeKey">
            <summary>
            Defines the magnetization type of a force directed edge
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NBody.ForceXMoveableKey">
            <summary>
            Defines whether the body is moveable by forces in the X direction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NBody.ForceYMoveableKey">
            <summary>
            Defines whether the body is moveable by forces in the Y direction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NBody.ElectricalChargeKey">
            <summary>
            Defines the electrical charge of a force directed vertex
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NBody.MassKey">
            <summary>
            Defines the mass of a force directed vertex
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NBody.TipOverChildrenPlacementKey">
            <summary>
            Defines the children placement of a tip over tree vertex
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NBody.HorizontalContentPlacementKey">
            <summary>
            Defines the horizontal placement of content inside a content placeholder
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NBody.VerticalContentPlacementKey">
            <summary>
            Defines the vertical placement of content inside a content placeholder
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NBody.MinSizeKey">
            <summary>
            Defines the min size of a cell content
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NBody.MaxSizeKey">
            <summary>
            Defines the max size of a cell content
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NBody.DockAreaKey">
            <summary>
            Defines the docking area occupied by a docking cell in dock layouts
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NBody1D">
            <summary>
            The NBody1D class represents a body, which behaves like a line connecting 2D bodies.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody1D.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody1D.CompareTo(Nevron.Diagram.Layout.NBody1D)">
            <summary>
            Returns -1 if this edge must be on an upper bus than the given one or 1 if
            it must be on a lower bus. Value of 0 means that the edges do not intersect.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.Layout.NBody1D.StartPoint">
            <summary>
            Gets the start point (position of the FromPlug)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NBody1D.EndPoint">
            <summary>
            Gets the end point (position of the ToPlug)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NBody1D.StartPointAnchor">
            <summary>
            Gets the start point anchoring point at the respective FromPlugAnchor side of the FromBody.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NBody1D.EndPointAnchor">
            <summary>
            Gets the end point anchoring point at the respective EndPlugAnchor side of the ToBody.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NBody1D.FromBody">
            <summary>
            Gets the 2D body from which the 1D body starts
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NBody1D.ToBody">
            <summary>
            Gets the 2D body at which the 1D body ends
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody1D.Translate(System.Single,System.Single)">
            <summary>
            Translates the body
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody1D.FlipX">
            <summary>
            Flips the X coordinates of body
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody1D.FlipY">
            <summary>
            Flips the Y coordinates of body
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody1D.Rotate(Nevron.Diagram.Layout.LayoutRotation)">
            <summary>
            Rotates the body
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody1D.GetBounds">
            <summary>
            Gets the bounds of the body
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody1D.ToString">
            <summary>
            Retusrns a string that represents the current body
            </summary>
            <returns>A string that represents the current body</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody1D.GetLines">
            <summary>
            Returns the line segments building the current 1D body.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Diagram.Layout.NBody1D.FromPlugAnchor">
            <summary>
            Preffered From plug anchor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NBody1D.ToPlugAnchor">
            <summary>
            Preffered To plug anchor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NBody1D.StartPlugOffset">
            <summary>
            Offset of the start plug location from the anchor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NBody1D.EndPlugOffset">
            <summary>
            Offset of the end plug location from anchor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NBody1D.RoutingStyle">
            <summary>
            Preffered routing style 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NBody1D.MidPoints">
            <summary>
            Optional mid points in case routing style is set to Orthogonal or Polyline
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NBody2D">
            <summary>
            The NBody2D class represents a body, which behaves like a box
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody2D.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NBody2D.Center">
            <summary>
            Gets/sets the center of the body
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NBody2D.CenterX">
            <summary>
            Gets/sets the X center of the body
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NBody2D.CenterY">
            <summary>
            Gets/sets the Y center of the body
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NBody2D.Left">
            <summary>
            Gets/sets the left side of the body
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NBody2D.Right">
            <summary>
            Gets/sets the right side of the body
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NBody2D.Top">
            <summary>
            Gets/sets the top side of the body
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NBody2D.Bottom">
            <summary>
            Gets/sets the bottom side of the body
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody2D.SetBounds(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Sets a new bounds for this body
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody2D.Translate(System.Single,System.Single)">
            <summary>
            Translates the body
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody2D.FlipX">
            <summary>
            Flips the X coordinates of body
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody2D.FlipY">
            <summary>
            Flips the Y coordinates of body
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody2D.Rotate(Nevron.Diagram.Layout.LayoutRotation)">
            <summary>
            Rotates the body
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody2D.GetBounds">
            <summary>
            Gets the bounds of the body
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBody2D.ToString">
            <summary>
            Returns a string that represents the current body
            </summary>
            <returns>A string that represents the current body</returns>
        </member>
        <member name="F:Nevron.Diagram.Layout.NBody2D.Width">
            <summary>
            The width of the body 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NBody2D.Height">
            <summary>
            The height of the body 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NBody2D.Location">
            <summary>
            The location of the body left-top corner
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NCellBody">
            <summary>
            The NCellBody class represents a 2D body, 
            which serves as body for objects arranged by cell layouts
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBody.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBody.GetContentDimension(Nevron.Diagram.Layout.CellContentDimension)">
            <summary>
            Gets the specified cell content dimension
            </summary>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBody.FlipDimensions">
            <summary>
            Flips the shape's dimensions
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBody.MirrorX(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Mirrors the X coordinate of the body according to the center Y line of the area.
            </summary>
            <param name="area"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBody.MirrorY(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Mirrors the Y coordinate of the body according to the center X line of the area.
            </summary>
            <param name="area"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBody.Initialize(Nevron.Diagram.Layout.NCellsLayout,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Initializes the cell body
            </summary>
            <param name="layout"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBody.AlignContent(System.Drawing.ContentAlignment)">
            <summary>
            Aligns the bounds of the body to the bounds of the cell
            </summary>
            <param name="alignment">alignment to use</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBody.PlaceContent">
            <summary>
            Places the content of the cell
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NCellBody.CellBounds">
            <summary>
            Bounds of the cell as determined by the cells layout
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NCellBody.HorizontalPlacement">
            <summary>
            Defines the horizontal cell content placement 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NCellBody.VerticalPlacement">
            <summary>
            Defines the vertical cell content placement 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NCellBody.MinSize">
            <summary>
            Defines the minimal size of the cell content
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.NCellBody.MaxSize">
            <summary>
            Defines the maximal size of the cell content
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NCellBodyList">
            <summary>
            The NCellBodyList class represents a typed list of NCellBody instances
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.#ctor(System.Collections.ArrayList)">
            <summary>
            Shallow copy constructor
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.#ctor(System.Collections.ICollection)">
            <summary>
            Shallow copy constructor
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.MinExtraWidth">
            <summary>
            Gets the min minimal extra width (Width - MinWidth)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.MaxExtraWidth">
            <summary>
            Gets the min maximal extra width (MaxWidth - Width)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.MinExtraHeight">
            <summary>
            Gets the min minimal extra height (Height - MinHeight)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.MaxExtraHeight">
            <summary>
            Gets the min maximal extra height (MaxHeight - Height)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.GetBounds">
            <summary>
            Gets the bounds of the cells 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.Add(Nevron.Diagram.Layout.NCellBody)">
            <summary>
            Adds the cell to the end of the collection
            </summary>
            <param name="value">cell to add</param>
            <returns>The zero-based index at which the new cell is inserted</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.AddRange(Nevron.Diagram.Layout.NCellBody[])">
            <summary>
            Copies the elements of a cell array to the end of the collection.
            </summary>
            <param name="value">cell array</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.AddRange(Nevron.Diagram.Layout.NCellBodyList)">
            <summary>
            Copies the elements of a cell list to the end of the collection.
            </summary>
            <param name="value">cell list</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.AddRange(System.Collections.ICollection)">
            <summary>
            Copies the elements of the specified collection to the end of this collection.
            </summary>
            <param name="value">cell collection</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.Contains(Nevron.Diagram.Layout.NCellBody)">
            <summary>
            Determines whether the specified cell is in the collection
            </summary>
            <param name="value">cell</param>
            <returns>true if cell is found in the collection, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.CopyTo(Nevron.Diagram.Layout.NCellBody[],System.Int32)">
            <summary>
            Copies the entire collection values to a one-dimensional array of cells, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array of cells that is the destination of the elements copied from collection. The Array must have zero-based indexing</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.IndexOf(Nevron.Diagram.Layout.NCellBody)">
            <summary>
            Searches for the specified cell and returns the zero-based index of the first occurrence within the collection
            </summary>
            <param name="value">the cell to locate</param>
            <returns>index of the cell</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.Insert(System.Int32,Nevron.Diagram.Layout.NCellBody)">
            <summary>
            Inserts the cell at the specified index
            </summary>
            <param name="index">index at which the cell is inserted</param>
            <param name="value">the cell to insert</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.Remove(Nevron.Diagram.Layout.NCellBody)">
            <summary>
            Removes the first occurrence of a specific cell from the collection
            </summary>
            <param name="value">cell to remove</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.Filter(Nevron.Filters.NFilter)">
            <summary>
            Filters the elements of this list and returns a new list in which all elements satisfy the filter criteria
            </summary>
            <param name="filter">filter to use, or null if no filter should be used</param>
            <returns>filtered list</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.FilterCount(Nevron.Filters.NFilter)">
            <summary>
            Determines the count of elements in this array, which satisfy the specified filter
            </summary>
            <param name="filter">filter to apply</param>
            <returns>count on elements which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.AddNoDuplicates(Nevron.Diagram.Layout.NCellBody)">
            <summary>
            Adds a non duplicate cell to the list
            </summary>
            <param name="value">cell to add</param>
            <returns>The zero-based index at which the new cell is inserted, or -1 if it already exists in the list</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.AddRangeNoDuplicates(System.Collections.ICollection)">
            <summary>
            Copies the elements of the specified collection to the end of this collection and does not add any duplicate entries
            </summary>
            <param name="value">cell collection</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the element of this list with the specified comparer
            </summary>
            <param name="comparer">comparer to use</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.ToArray(System.Type)">
            <summary>
            Copies the elements of this list to a new array of the specified type.
            </summary>
            <param name="type">he type of array to create and copy elements to.</param>
            <returns>an array of the specified type containing copies of the elements in this list</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.RemoveRange(System.Collections.ICollection)">
            <summary>
            Removes the specified range of elements from the collection
            </summary>
            <param name="value">cell collection</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.IntersectsWith(System.Collections.ICollection)">
            <summary>
            Determines whether this and the specified collection have common entries
            </summary>
            <param name="value">cell collection</param>
            <returns>true if common entries have been founds, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.Initialize(Nevron.Diagram.Layout.NCellsLayout,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Sets the Bounds of all contained cells to be equal to the cell ContentBounds
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.GetMaxCellSize">
            <summary>
            Returns the max cell size
            </summary>
            <remarks>
            The max cell size is formed by the max cell bounds width and max cell bounds height of all contained cells
            </remarks>
            <returns>max item size</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.GetCellBounds">
            <summary>
            Gets the bounds of the cells 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.PlaceContent">
            <summary>
            Places the content of the cells
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.MakeEqualCellWidth(System.Single)">
            <summary>
            Makes all cells with the specified width
            </summary>
            <param name="width"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.MakeEqualCellHeight(System.Single)">
            <summary>
            Makes all cells with the specified height
            </summary>
            <param name="height"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.JustifyHorizontally(System.Single,System.Single)">
            <summary>
            Justifies the cells horizontally
            </summary>
            <param name="width"></param>
            <param name="availableWidth"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.JustifyVertically(System.Single,System.Single)">
            <summary>
            Justifies the cells vertically
            </summary>
            <param name="height"></param>
            <param name="availableHeight"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.MinContentDimension(Nevron.Diagram.Layout.CellContentDimension)">
            <summary>
            Gets the min content dimension
            </summary>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.MaxContentDimension(Nevron.Diagram.Layout.CellContentDimension)">
            <summary>
            Gets the max content dimension
            </summary>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.SumContentDimension(Nevron.Diagram.Layout.CellContentDimension)">
            <summary>
            Sums the specified content dimension
            </summary>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellBodyList.Clone">
            <summary>
            Creates an exact replica of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.Layout.NCellBodyList.Item(System.Int32)">
            <summary>
            Typed indexer
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellsDirectionConverter.#ctor(Nevron.Diagram.Layout.NDirectedCellsLayout,Nevron.Diagram.Layout.NLayoutContext,Nevron.Diagram.Layout.NCellBodyList)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="layout"></param>
            <param name="context"></param>
            <param name="cells"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellsLayouter.#ctor(Nevron.Diagram.Layout.NCellsDirectionConverter,Nevron.Diagram.Layout.NDirectedCellsLayout,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="cellsDirectionConverter"></param>
            <param name="layout"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellsLayouter.Layout">
            <summary>
            Performs the layout of the cells.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NConstrainedCellsLayout">
            <summary>
            The NConstrainedCellsLayout class represents a directed cells layout, 
            the cells placement of which can be constrained in the layout direction
            </summary>
            <remarks>
            Constrained cells layouts typically switch to a new lane when a constrain is broken.
            There are two ways for constraining the layout, which is controlled by the ConstrainMode property:
            <list type="bullet">
            	<item>
            		<term>Size</term>
            		<description>
            		the layout will switch to a new lane, if the next placable cell will go outside the 
            		respective side of the container client area. For a horizontal layout this is the right container side. 
            		For a vertical layout this is the bottom container side.
            		</description>
            	</item>
            	<item>
            		<term>Ordinal</term>
            		<description>
            		the layout will switch to a new lane, if the next placable cell ordinal index withing its lane, will exceed 
            		the MaxOrdinal property setting.
            		</description>
            	</item>
            </list>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NConstrainedCellsLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NConstrainedCellsLayout.#ctor(Nevron.Diagram.Layout.NConstrainedCellsLayout)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NConstrainedCellsLayout.ConstrainMode">
            <summary>
            Gets/sets the mode, in which the flow layout expansion is constrained in the flow direction. 
            By default set to Size.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NConstrainedCellsLayout.MaxOrdinal">
            <summary>
            Gets/sets the maximum ordinal to which the layout can expand. 
            Only applicable if ConstrainMode is set to Ordinal.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NDirectedCellsLayout">
            <summary>
            The NDirectedCellsLayout class represents a cells layout, 
            which serves as base class for cells layout algorithms, 
            whose cells direction can be controlled.
            </summary>
            <remarks>
            Directed cells layouts place adjacent cells in lanes, 
            which follow the direction specified by the Direction property.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDirectedCellsLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDirectedCellsLayout.#ctor(Nevron.Diagram.Layout.NDirectedCellsLayout)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NDirectedCellsLayout.Direction">
            <summary>
            Gets/sets the direction in which the layout arranges adjacent cells
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDirectedCellsLayout.LayoutCells(Nevron.Diagram.Layout.NCellBodyList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            
            </summary>
            <param name="cells"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDirectedCellsLayout.CreateDirectionConverter(Nevron.Diagram.Layout.NCellBodyList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            
            </summary>
            <param name="cells"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDirectedCellsLayout.CreateLayouter(Nevron.Diagram.Layout.NCellsDirectionConverter,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            
            </summary>
            <param name="directionConverter"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Layout.NFlowLayout">
            <summary>
            The NFlowLayout class represents a constrained cells layout, 
            which arranges the cells in horizontal or vertical lanes.
            </summary>
            <remarks>
            The flow layout is a typical constrained cells layout, which does not preserve tabular metrics. 
            That is why you can specify whether the layout must justify the the cells in each lane. 
            This is done by the JustifyLanes properties.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NFlowLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NFlowLayout.#ctor(Nevron.Diagram.Layout.NFlowLayout)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NFlowLayout.JustifyLanes">
            <summary>
            Gets/sets whether the cells in the lanes must be justified or not. Only applicable if ConstrainMode is Size. By default set to false.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NFlowLayout.Inverted">
            <summary>
            Gets/sets if the lanes are layouted from the first to the last (by default) or from the last to the first (inverted). By default set to false.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NFlowLayout.GetCellsLayoutSize(Nevron.Diagram.Layout.CellContentDimension,Nevron.Diagram.Layout.CellContentDimension,Nevron.Diagram.Layout.NCellBodyList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called to get the layout size for the specified cell dimensions
            </summary>
            <param name="xdimension"></param>
            <param name="ydimension"></param>
            <param name="cells"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Layout.NStackLayout">
            <summary>
            The NStackLayout class represents a directed cells layout, 
            which stacks the cells in horizontal or vertical order. 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NStackLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NStackLayout.#ctor(Nevron.Diagram.Layout.NStackLayout)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NStackLayout.FillMode">
            <summary>
            Gets/sets the stack fill mode, which determines the behavior of the layout 
            when the cells need less space than provided (e.g. how to fill the extra area).
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NStackLayout.FitMode">
            <summary>
            Gets/sets the stack fit mode, which determines the behavior of the layout when the cells need more space than provided (e.g. how to fit in the available space).
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NStackLayout.CreateLayouter(Nevron.Diagram.Layout.NCellsDirectionConverter,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            
            </summary>
            <param name="directionConverter"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NStackLayout.GetCellsLayoutSize(Nevron.Diagram.Layout.CellContentDimension,Nevron.Diagram.Layout.CellContentDimension,Nevron.Diagram.Layout.NCellBodyList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called to get the layout size for the specified cell dimensions
            </summary>
            <param name="xdimension"></param>
            <param name="ydimension"></param>
            <param name="cells"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Layout.NTableLayout">
            <summary>
            NTableLayout
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NTableLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NTableLayout.#ctor(Nevron.Diagram.Layout.NTableLayout)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NTableLayout.EqualCellsSize">
            <summary>
            Gets/sets whether the cells in the table must have an equal size. By default set to false.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NTableLayout.Inverted">
            <summary>
            Gets/sets if the lanes are layouted from the first to the last (by default) or from the last to the first (inverted). By default set to false.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NTableLayout.GetCellsLayoutSize(Nevron.Diagram.Layout.CellContentDimension,Nevron.Diagram.Layout.CellContentDimension,Nevron.Diagram.Layout.NCellBodyList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called to get the layout size for the specified cell dimensions
            </summary>
            <param name="xdimension"></param>
            <param name="ydimension"></param>
            <param name="cells"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Layout.NDockLayout">
            <summary>
            The NDockLayout class represents a cells layout, 
            which layouts the cells by subsequently docking them to cells defined docking areas.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDockLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDockLayout.#ctor(Nevron.Diagram.Layout.NDockLayout)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NDockLayout.FillMode">
            <summary>
            The fill mode of the dock layout
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NDockLayout.FitMode">
            <summary>
            The fit mode of the dock layout
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDockLayout.CreateCell">
            <summary>
            Called in the cells creation process to create a cell instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDockLayout.LayoutCells(Nevron.Diagram.Layout.NCellBodyList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called to layout the specified cells
            </summary>
            <param name="cells"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDockLayout.GetCellsLayoutSize(Nevron.Diagram.Layout.CellContentDimension,Nevron.Diagram.Layout.CellContentDimension,Nevron.Diagram.Layout.NCellBodyList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called to get the layout size for the specified cell dimensions
            </summary>
            <param name="xdimension"></param>
            <param name="ydimension"></param>
            <param name="cells"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Layout.NCellsLayout">
            <summary>
            The NCellsLayout class represents a layout, 
            which serves as base class for layouts, which can arrange cells
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellsLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellsLayout.#ctor(Nevron.Diagram.Layout.NCellsLayout)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="E:Nevron.Diagram.Layout.NCellsLayout.LayingOutCells">
            <summary>
            Occurs when cells are about to layed out by this layout.
            </summary>
        </member>
        <member name="E:Nevron.Diagram.Layout.NCellsLayout.LayedOutCells">
            <summary>
            Occurs when cells have been layed out by this layout.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NCellsLayout.HorizontalSpacing">
            <summary>
            Gets/sets the minimal horizontal spacing between the cells
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NCellsLayout.VerticalSpacing">
            <summary>
            Gets/sets the minimal vertical spacing between the cells
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NCellsLayout.HorizontalContentPlacement">
            <summary>
            Gets/sets the default placement of the cell content in regards to the X dimension of the cell bounds. By default set to Fit.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NCellsLayout.VerticalContentPlacement">
            <summary>
            Gets/sets the default placement of the cell content in regards to the Y dimension of the cell bounds. By default set to Fit.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellsLayout.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in the table 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellsLayout.Layout(Nevron.Collections.NList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Applies the layout to the specified objects
            </summary>
            <param name="objects">objects to layout</param>
            <param name="context">layout context</param> 
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellsLayout.GetDesiredLayoutSize(Nevron.Dom.NNodeList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Gets the desired size of the layout container, assuming that the arranged objects
            are at their desired size. 
            </summary>
            <param name="objects"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellsLayout.GetMinLayoutSize(Nevron.Dom.NNodeList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Gets the minimal size of the layout container, assuming that the arranged objects
            are at their minimal size. 
            </summary>
            <param name="objects"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellsLayout.GetMaxLayoutSize(Nevron.Dom.NNodeList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Gets the maximal size of the layout container, assuming that the arranged objects
            are at their maximal size. 
            </summary>
            <param name="objects"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellsLayout.CreateCells(Nevron.Collections.NList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called to create a list of the cells, which need to be arranged
            </summary>
            <param name="objects"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellsLayout.CreateCell">
            <summary>
            Called in the cells creation process to create a cell instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellsLayout.OnLayingOutCells(Nevron.Diagram.Layout.NCellBodyList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called before the layout of the specified cells
            </summary>
            <remarks>
            This implementation raises the LayingOutCells event
            </remarks>
            <param name="cells"></param>
            <param name="context"></param> 
            <returns>true if the layout can be performed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellsLayout.LayoutCells(Nevron.Diagram.Layout.NCellBodyList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called to layout the specified cells
            </summary>
            <param name="cells"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellsLayout.OnLayedOutCells(Nevron.Diagram.Layout.NCellBodyList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called after the layout of the specified cells
            </summary>
            <remarks>
            This implementation raises the LayedOutCells event
            </remarks>
            <param name="cells"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellsLayout.WriteCellsBodies(Nevron.Diagram.Layout.NCellBodyList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called to write the cell bodies in the objects they represent
            </summary>
            <param name="cells"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellsLayout.GetCellsLayoutSize(Nevron.Diagram.Layout.CellContentDimension,Nevron.Diagram.Layout.CellContentDimension,Nevron.Diagram.Layout.NCellBodyList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called to get the layout size for the specified cell dimensions
            </summary>
            <param name="xdimension"></param>
            <param name="ydimension"></param>
            <param name="cells"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Layout.NBodyAdapter">
            <summary>
            The NBodyAdapter class is an adapter, which is used to abstract layouts, 
            from the actual way in which an object is represented by a body.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBodyAdapter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBodyAdapter.UpdateBody2DFromObject(Nevron.Diagram.Layout.NBody2D)">
            <summary>
            Updates the shape of a 2D body from the object it represents
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBodyAdapter.UpdateBody1DFromObject(Nevron.Diagram.Layout.NBody1D)">
            <summary>
            Updates the shape of a 1D body from the object it represents
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBodyAdapter.GetBodyProperty(Nevron.Diagram.Layout.NBody,System.Int32,System.Boolean@)">
            <summary>
            Gets a property of a body
            </summary>
            <param name="body"></param>
            <param name="propertyKey"></param>
            <param name="found"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBodyAdapter.UpdateObjectFromBody2D(Nevron.Diagram.Layout.NBody2D)">
            <summary>
            Updates the shape of an object from the 2D body which represents it
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBodyAdapter.UpdateObjectFromBody1D(Nevron.Diagram.Layout.NBody1D)">
            <summary>
            Updates the shape of an object from the 1D body which represents it
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Layout.NBodyContainerAdapter">
            <summary>
            The NBodyContainerAdapter abstract class is used to abstract layouts 
            from the actual container, in which the bodies are layed out
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBodyContainerAdapter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBodyContainerAdapter.GetLayoutArea">
            <summary>
            Gets the container layout area
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBodyContainerAdapter.StartObjectsUpdate(Nevron.Diagram.Layout.NLayout)">
            <summary>
            Called by layouts to mark the start of an objects update session
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBodyContainerAdapter.EndObjectsUpdate(Nevron.Diagram.Layout.NLayout)">
            <summary>
            Called by layouts to mark the end of an objects update session
            </summary>
            <param name="layout"></param>
        </member>
        <member name="T:Nevron.Diagram.Layout.NDrawingBodyContainerAdapter">
            <summary>
            The NDrawingBodyContainerAdapter is a body container adapter,
            which adapts a drawing document.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDrawingBodyContainerAdapter.#ctor(Nevron.Diagram.NDrawingDocument)">
            <summary>
            Creates a drawing body container which is initialized 
            with the current drawing bounds
            </summary>
            <param name="drawing"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDrawingBodyContainerAdapter.#ctor(Nevron.Diagram.NDrawingDocument,Nevron.Diagram.NGroup)">
            <summary>
            Creates a drawing body container which is initialized 
            with the bounds of the given group
            </summary>
            <param name="drawing"></param>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDrawingBodyContainerAdapter.GetLayoutArea">
            <summary>
            Gets the current layout area
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDrawingBodyContainerAdapter.StartObjectsUpdate(Nevron.Diagram.Layout.NLayout)">
            <summary>
            Called by layouts to mark the beggining of a write section
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDrawingBodyContainerAdapter.EndObjectsUpdate(Nevron.Diagram.Layout.NLayout)">
            <summary>
            Called by layouts to mark the end of a write section
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDrawingBodyContainerAdapter.SetLayoutArea(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Sets a custom layout area
            </summary>
            <param name="area"></param>
        </member>
        <member name="T:Nevron.Diagram.Layout.NDrawingLayoutContext">
            <summary>
            The NDrawingLayoutContext class serves as a bridge between the layout
            and the user.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDrawingLayoutContext.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDrawingLayoutContext.#ctor(Nevron.Diagram.NDrawingDocument)">
            <summary>
            Creates a layout context with the default adapters bound to the specified document.
            </summary>
            <param name="document">The document to bind the adapters to.</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDrawingLayoutContext.#ctor(Nevron.Diagram.NDrawingDocument,Nevron.Diagram.NGroup)">
            <summary>
            Creates a layout context with the default adapters bound to the specified document.
            Only the shapes in the given group are layouted.
            </summary>
            <param name="document">The document to bind the adapters to.</param>
            <param name="group">The group to layout.</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDrawingLayoutContext.#ctor(Nevron.Diagram.NDrawingDocument,Nevron.Dom.NNodeList)">
            <summary>
            Creates a layout context with the default adapters bound to the specified document.
            Only the given nodes are layouted.
            </summary>
            <param name="document">The document to bind the adapters to.</param>
            <param name="nodes">The nodes to layout.</param>
        </member>
        <member name="T:Nevron.Diagram.Layout.NLayoutContext">
            <summary>
            The NLayoutContext class is used to abstract the layouts with 
            the actual types and relations between the objects it layouts 
            and container in which they are hosted. It serves as a bridge 
            between the layouts and their user.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayoutContext.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayoutContext.GraphAdapter">
            <summary>
            Gets/sets the graph adapter
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayoutContext.BodyAdapter">
            <summary>
            Gets/sets the body adapter. 
            It is used by layouts in to obtain a 
            body representation for the arranged objects.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayoutContext.BodyContainerAdapter">
            <summary>
            Gets/sets the container adapter.
            It is used by layouts to obtain information 
            about the layout container.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NShapeBodyAdapter">
            <summary>
            The NShapeBodyAdapter represents an object body adapter,
            which provides layouts with the ability to adapt shapes to bodies and vise-versa.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NShapeBodyAdapter.#ctor(Nevron.Diagram.NDrawingDocument)">
            <summary>
            Initializer constructor
            </summary>
            <param name="drawing">drawing document, to which the shapes belong</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NShapeBodyAdapter.UpdateBody2DFromObject(Nevron.Diagram.Layout.NBody2D)">
            <summary>
            Reads the shape of a 2D body
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NShapeBodyAdapter.UpdateBody1DFromObject(Nevron.Diagram.Layout.NBody1D)">
            <summary>
            Reads the shape of a 1D body
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NShapeBodyAdapter.GetBodyProperty(Nevron.Diagram.Layout.NBody,System.Int32,System.Boolean@)">
            <summary>
            Gets a property of a 2D body
            </summary>
            <remarks>
            This implementation reads the respetive property from the shape LayoutData attribute.
            </remarks>
            <param name="body"></param>
            <param name="propertyKey"></param>
            <param name="found"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NShapeBodyAdapter.UpdateObjectFromBody2D(Nevron.Diagram.Layout.NBody2D)">
            <summary>
            Reads the shape of a 2D body
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NShapeBodyAdapter.UpdateObjectFromBody1D(Nevron.Diagram.Layout.NBody1D)">
            <summary>
            Reads the shape of a 1D body
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NShapeBodyAdapter.GetPortFromPlugAnchor(Nevron.Diagram.NShape,Nevron.Diagram.Layout.PlugAnchor)">
            <summary>
            Gets a port of the specified shape, which matches the proposed by the layout plug anchor.
            This implementation tries to find a named port (e.g. port with Center, Left, Top, Right or Bottom name).
            </summary>
            <param name="shape"></param>
            <param name="anchor"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Layout.CellsLayoutCancelEventHandler">
            <summary>
            Delegate for events, which receive information about cancelable cells layouts
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.CellsLayoutEventHandler">
            <summary>
            Delegate for events, which receive information about cells layouts
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.GraphLayoutCancelEventHandler">
            <summary>
            Delegate for events, which receive information about cancelable graph layouts
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.GraphLayoutEventHandler">
            <summary>
            Delegate for events, which receive information about graph layouts
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.TreeLayoutCancelEventHandler">
            <summary>
            Delegate for events, which receive information about cancelable tree layouts
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.TreeLayoutEventHandler">
            <summary>
            Delegate for events, which receive information about tree layouts
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.GridCellSizeMode">
            <summary>
            Defines the possible cellsizing modes.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.GridCellSizeMode.GridBased">
            <summary>
            All cells have the size of the biggest cell in the grid.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.GridCellSizeMode.CellBased">
            <summary>
            The maximal width and height of each row and column is determined
            according to the cells it contains.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.LayoutDirection">
            <summary>
            Defines the possible expand directions for directed layouts
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.LayoutDirection.TopToBottom">
            <summary>
            The layout is directed vertically, starting from the top and expanding downwards
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.LayoutDirection.BottomToTop">
            <summary>
            The layout is directed vertically, starting from the bottom and expanding upwards
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.LayoutDirection.LeftToRight">
            <summary>
            The layout is directed horizontally, starting from the left and expanding to the right
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.LayoutDirection.RightToLeft">
            <summary>
            The layout is directed horizontally, starting from the right and expanding to the left
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.LayoutRotation">
            <summary>
            Enumerates the allowed angles at which a layout can be rotated
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.LayoutRotation.None">
            <summary>
            No rotation
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.LayoutRotation.Rotate90">
            <summary>
            Rotate to 90 degrees
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.LayoutRotation.Rotate180">
            <summary>
            Rotate to 180 degrees
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.LayoutRotation.Rotate270">
            <summary>
            Rotate to 270 degrees
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.RelativeAlignment">
            <summary>
            Defines the possible relative alignment used by directed layouts
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.RelativeAlignment.Near">
            <summary>
            Near
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.RelativeAlignment.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.RelativeAlignment.Far">
            <summary>
            Far
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.CellDirection">
            <summary>
            Defines the directions in which the directed cells layout, must place adjacent cells
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.CellDirection.Horizontal">
            <summary>
            Place cells horizontally, from left to right
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.CellDirection.Vertical">
            <summary>
            Place cells vertically, from top to bottom
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.CellConstrainMode">
            <summary>
            Defines the possible modes, in which a constrained directed cells layout can be constrained
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.CellConstrainMode.Size">
            <summary>
            The layout is constrained by the size of the container 
            in the respective layout direction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.CellConstrainMode.Ordinal">
            <summary>
            The layout is constrained by the ordinal limit (e.g. max row or col count) 
            in the respective layout direction
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.ContentPlacement">
            <summary>
            Defines the ways, in which content can be placed horizontally or vertically within a content holder box
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.ContentPlacement.Near">
            <summary>
            The content is aligned to the near side of the content holder
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.ContentPlacement.Center">
            <summary>
            The content is aligned to the center of the content holder
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.ContentPlacement.Far">
            <summary>
            The content is aligned to the far side of the content holder
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.ContentPlacement.Fit">
            <summary>
            The content is resized to the respective content holder size
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.MagneticFieldDirection">
            <summary>
            Defines the possible types of magnetic field directions
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.MagneticFieldDirection.PolarOutward">
            <summary>
            The magnetic field radiates from the origin
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.MagneticFieldDirection.PolarInward">
            <summary>
            The magnetic field radiates towards the origin
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.MagneticFieldDirection.ConcentricClockwise">
            <summary>
            The magnetic field circulates around the origin in 
            a clockwise direction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.MagneticFieldDirection.ConcentricCounterClockwise">
            <summary>
            The magnetic field circulates around the origin in 
            a counter clockwise direction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.MagneticFieldDirection.ParallelRightward">
            <summary>
            The magnetic field is parallel and flows from left to right
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.MagneticFieldDirection.ParallelLeftward">
            <summary>
            The magnetic field is parallel and flows from right to left
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.MagneticFieldDirection.ParallelDownward">
            <summary>
            The magnetic field is parallel and flows from top to bottom
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.MagneticFieldDirection.ParallelUpward">
            <summary>
            The magnetic field is parallel and flows from bottom to top
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.MagneticFieldDirection.OrthogonalLeftwardDownward">
            <summary>
            The magnetic field is orthogonal with leftward - downward direction 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.MagneticFieldDirection.OrthogonalLeftwardUpward">
            <summary>
            The magnetic field is orthogonal with leftward - upward direction 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.MagneticFieldDirection.OrthogonalRightwardDownward">
            <summary>
            The magnetic field is orthogonal with rightward - downward direction 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.MagneticFieldDirection.OrthogonalRightwardUpward">
            <summary>
            The magnetic field is orthogonal with rightward - upward direction 
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.MagnetizationType">
            <summary>
            Defines the ways in which a force directed edge body can be magnetized
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.MagnetizationType.None">
            <summary>
            The body is not magnetized
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.MagnetizationType.Unidirectional">
            <summary>
            The body is magnetized and tends to align with the magnetic field 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.MagnetizationType.Bidirectional">
            <summary>
            The body is magnetized and tends to align with the magnetic field in either direction
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.SpringForceLaw">
            <summary>
            Defines the way, in which the spring force is affected by its natural and current length
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.SpringForceLaw.Logarithmic">
            <summary>
            Spring force is proportional to Log(curLength / naturalLength)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.SpringForceLaw.HookeLaw">
            <summary>
            Spring force is proportional to (curLength - naturalLength)
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.BodyArea">
            <summary>
            Enumerates the types of body areas
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.BodyArea.BoundingBox">
            <summary>
            Bounding box
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.BodyArea.BoundingCircle">
            <summary>
            Bounding circle
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.BodyArea.InscribedCircle">
            <summary>
            Inscribed circle
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.FreeVertexPlacementMode">
            <summary>
            Defines the ways, in which the free vertices can be initially placed by a force directed layout
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.FreeVertexPlacementMode.Original">
            <summary>
            The layouts starts with the original free vertex positions
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.FreeVertexPlacementMode.Random">
            <summary>
            The layouts starts with randomly chosen positions for the free vertices
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.FreeVertexPlacementMode.Zero">
            <summary>
            The layouts starts with all free vertices placed at (0,0) coordinates
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.FreeVertexPlacementMode.FixedBarycenter">
            <summary>
            The layouts starts with all free vertices placed at the barycenter of the fixed vertices
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.FixedVertexPlacementMode">
            <summary>
            Defines the ways, in which the fixed vertices can be initially placed by a force directed layout
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.FixedVertexPlacementMode.Original">
            <summary>
            The layouts starts with the original fixed vertex positions
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.FixedVertexPlacementMode.PredefinedEllipseRim">
            <summary>
            The layouts places the vertices at the rim of a predefined ellipse
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.FixedVertexPlacementMode.AutomaticEllipseRim">
            <summary>
            The layouts places the vertices at the rim of an automatically calculated ellipse
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.TipOverChildrenPlacement">
            <summary>
            Defines the possible ways for placing the children in a tip over tree layout
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.TipOverChildrenPlacement.Inherit">
            <summary>
            The children placement is inherited from a more global property
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.TipOverChildrenPlacement.Row">
            <summary>
            The children are placed in a row
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.TipOverChildrenPlacement.ColLeft">
            <summary>
            The children are placed in a row which is on the left of the edge bus
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.TipOverChildrenPlacement.ColRight">
            <summary>
            The children are placed in a col which is on the right of the edge bus
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.TipOverChildrenPlacement.ColBoth">
            <summary>
            The children are placed in 2 columns separated by the edge bus
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.PlugAnchor">
            <summary>
            Defines the anchors at which plugs can be glued
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.PlugAnchor.NotSpecified">
            <summary>
            The anchor is not specified
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.PlugAnchor.Center">
            <summary>
            Center of body
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.PlugAnchor.Left">
            <summary>
            Left side of body
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.PlugAnchor.Right">
            <summary>
            Right side of body
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.PlugAnchor.Top">
            <summary>
            Top side of body
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.PlugAnchor.Bottom">
            <summary>
            Bottom side of body
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.RoutingStyle">
            <summary>
            Defines the routing styles of 1D bodies
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.RoutingStyle.NotSpecified">
            <summary>
            The body type is not specified
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.RoutingStyle.Straight">
            <summary>
            The body should be drawn as a straight line
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.RoutingStyle.Orthogonal">
            <summary>
            The body should be drawn with an orthogonal line
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.RoutingStyle.Polyline">
            <summary>
            The body should be drawn with a polyline
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.PortStyle">
            <summary>
            Defines the predefined configurations of ports for vertices in tree layouts
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.PortStyle.Center">
            <summary>
            The edges end points are glued to the verices centers
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.PortStyle.Sides">
            <summary>
            The edges end points are glued to the verices sides
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.ParentAnchor">
            <summary>
            Defines the predefined places at which a parent tree vertex can be anchored in respect to its subtree or children
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.ParentAnchor.ChildrenNear">
            <summary>
            The parent is anchored at the near side of the first child
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.ParentAnchor.ChildrenCenter">
            <summary>
            The parent is anchored at the children center
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.ParentAnchor.ChildrenFar">
            <summary>
            The parent is anchored at the far side of the last child
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.ParentAnchor.SubtreeNear">
            <summary>
            The parent is anchored at the near side of the subtree
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.ParentAnchor.SubtreeCenter">
            <summary>
            The parent is anchored at the center of the subtree
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.ParentAnchor.SubtreeFar">
            <summary>
            The parent is anchored at the far side the subtree
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.ParentAnchor.FirstChildCenter">
            <summary>
            The parent is anchored at the center of the first child
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.ParentAnchor.LastChildCenter">
            <summary>
            The parent is anchored at the center of the last child
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.DockArea">
            <summary>
            Enumerates the docking areas, in which the cells in a dock layout can be docked
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.DockArea.Left">
            <summary>
            The cell is docked to the current left area
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.DockArea.Right">
            <summary>
            The cell is docked to the current right area
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.DockArea.Top">
            <summary>
            The cell is docked to the current top area
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.DockArea.Bottom">
            <summary>
            The cell is docked to the current bottom area
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.DockArea.Center">
            <summary>
            The cell is docked to the current center area
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.StackMode">
            <summary>
            Enumerates the modes for stack layouts
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.StackMode.None">
            <summary>
            The stack layout does not attemp to resolve the available/insufficient area problem
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.StackMode.Equal">
            <summary>
            The stack inflates the size of each object with equal amount of space in order to
            resolve the available/insufficient area problem
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.StackMode.Proportional">
            <summary>
            The stack inflates the size each object with amount of space proportional to its
            size in order to resolve the available/insufficient area problem
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.StackMode.First">
            <summary>
            The stack inflates the size of the first object in the stack, then the size of the
            second one and so on until the available/insufficient area problem is ressolved
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.StackMode.Last">
            <summary>
            The stack inflates the size of the last object in the stack, then the size of the
            object before it and so on until the available/insufficient area problem is ressolved
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.DockMode">
            <summary>
            Enumerates the modes for dock layoutss
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.DockMode.None">
            <summary>
            The dock layout does not attemp to resolve the available/insufficient area problem
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.DockMode.Equal">
            <summary>
            The dock inflates the size of each object with equal amount of space in order to
            resolve the available/insufficient area problem
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.DockMode.CenterFirst">
            <summary>
            The dock inflates the size of the center object in the dock, then the size of the
            pair formed by the previous and the next one and so on until the available/insufficient
            area problem is ressolved
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.DockMode.SidesFirst">
            <summary>
            The dock inflates the size of the pair formed by the first and the last object in the dock,
            then the size of the pair formed by the next and the previous one and so on until the
            available/insufficient area problem is ressolved
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.DockMode.ForwardOrder">
            <summary>
            The bodies are resized in the order they were added
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.DockMode.ReverseOrder">
            <summary>
            The bodies are resized in reverse order to the order they were added
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.CellContentDimension">
            <summary>
            Enumerates the sizes of the cell content
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.CellContentDimension.DesiredSizeWidth">
            <summary>
            Desired size width
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.CellContentDimension.DesiredSizeHeight">
            <summary>
            Desired size height
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.CellContentDimension.CellBoundsWidth">
            <summary>
            Cell bounds width
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.CellContentDimension.CellBoundsHeight">
            <summary>
            Cell vounds height
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.CellContentDimension.MinSizeWidth">
            <summary>
            Min size width 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.CellContentDimension.MinSizeHeight">
            <summary>
            Min size height
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.CellContentDimension.MaxSizeWidth">
            <summary>
            Min size width 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.CellContentDimension.MaxSizeHeight">
            <summary>
            Min size height
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.CellMeasure">
            <summary>
            Enumerates the measurements, which can be requested for a cell
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.CellMeasure.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.CellMeasure.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.CellMeasure.MinWidth">
            <summary>
            Min width
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.CellMeasure.MinHeight">
            <summary>
            Min height
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.CellMeasure.MaxWidth">
            <summary>
            Max width
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.CellMeasure.MaxHeight">
            <summary>
            Max height
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.CellMeasure.DesiredWidth">
            <summary>
            Desired width
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.CellMeasure.DesiredHeight">
            <summary>
            Desired height
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.PlugSpacingMode">
            <summary>
            Enumerates the ways in which plugs can be spaced
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.PlugSpacingMode.None">
            <summary>
            Plugs are not spaced
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.PlugSpacingMode.Proportional">
            <summary>
            Plugs are spaced proportionally at the anchor side
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.PlugSpacingMode.Fixed">
            <summary>
            Plugs are spaced with a fixed offset at the anchor side
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.LayeredLayoutNodeRank">
            <summary>
            Enumerates the ranking policies for layered layouts
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.LayeredLayoutNodeRank.TopMost">
            <summary>
            All nodes without incomming edges are assigned to the topmost layer
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.LayeredLayoutNodeRank.Optimal">
            <summary>
            Layer distribution is done in such a way that the total length of all edges
            is minimized
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.LayeredLayoutNodeRank.Gravity">
            <summary>
            Similar to the topmost, but after the initial assignment all nodes fall downwards
            as much as possible
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.LayeredLayoutEdgeRouting">
            <summary>
            Enumerates the edge routing styles for layered layouts
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.LayeredLayoutEdgeRouting.Polyline">
            <summary>
            The edges are drawn using a polyline with few bends
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Layout.LayeredLayoutEdgeRouting.Orthogonal">
            <summary>
            The edges are drawn using only horizontal and vertical line segments
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NCellsLayoutCancelEventArguments">
            <summary>
            The NCellsLayoutCancelEventArguments represents the event arguments associated with cancelable cells layout events
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellsLayoutCancelEventArguments.#ctor(Nevron.Diagram.Layout.NLayout,Nevron.Diagram.Layout.NLayoutContext,Nevron.Diagram.Layout.NCellBodyList)">
            <summary>
            Initializer constructor
            </summary>
            <param name="targetNode"></param>
            <param name="context"></param>
            <param name="cells"></param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NCellsLayoutCancelEventArguments.Cells">
            <summary>
            Gets the cells subject to layout
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NCellsLayoutEventArguments">
            <summary>
            The NCellsLayoutCancelEventArguments represents the event arguments associated with cells layout events
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellsLayoutEventArguments.#ctor(Nevron.Diagram.Layout.NLayout,Nevron.Diagram.Layout.NLayoutContext,Nevron.Diagram.Layout.NCellBodyList)">
            <summary>
            Initializer constructor
            </summary>
            <param name="targetNode"></param>
            <param name="context"></param>
            <param name="cells"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCellsLayoutEventArguments.#ctor(Nevron.Diagram.Layout.NCellsLayoutEventArguments)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NCellsLayoutEventArguments.Cells">
            <summary>
            Gets the cells subject to layout
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NGraphLayoutCancelEventArguments">
            <summary>
            The NGraphLayoutCancelEventArguments represents the event arguments associated with cancelable graph layout events
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphLayoutCancelEventArguments.#ctor(Nevron.Diagram.Layout.NLayout,Nevron.Diagram.Layout.NLayoutContext,Nevron.Diagram.DataStructures.NGraph)">
            <summary>
            Initializer constructor
            </summary>
            <param name="targetNode"></param>
            <param name="context"></param>
            <param name="graph"></param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NGraphLayoutCancelEventArguments.Graph">
            <summary>
            Gets the graph subject to layout
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NGraphLayoutEventArguments">
            <summary>
            The NGraphLayoutCancelEventArguments represents the event arguments associated with graph layout events
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphLayoutEventArguments.#ctor(Nevron.Diagram.Layout.NLayout,Nevron.Diagram.Layout.NLayoutContext,Nevron.Diagram.DataStructures.NGraph)">
            <summary>
            Initializer constructor
            </summary>
            <param name="targetNode"></param>
            <param name="context"></param>
            <param name="graph"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphLayoutEventArguments.#ctor(Nevron.Diagram.Layout.NGraphLayoutEventArguments)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NGraphLayoutEventArguments.Graph">
            <summary>
            Gets the graph subject to layout
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NLayoutCancelEventArgs">
            <summary>
            The NLayoutCancelEventArgs class serves as base class for all cancelable layout event arguments
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayoutCancelEventArgs.#ctor(Nevron.Diagram.Layout.NLayout,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Initializer constructor
            </summary>
            <param name="targetNode"></param>
            <param name="context"></param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayoutCancelEventArgs.Context">
            <summary>
            Gets the layout context
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayoutCancelEventArgs.TargetNode">
            <summary>
            Gets the target node
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayoutCancelEventArgs.Cancel">
            <summary>
            Gets/sets whether the layout action associated with this event must be canceled
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NLayoutEventArgs">
            <summary>
            The NLayoutEventArgs class serves as base class for all layout event arguments
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayoutEventArgs.#ctor(Nevron.Diagram.Layout.NLayout,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Initializer constructor
            </summary>
            <param name="layout"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayoutEventArgs.#ctor(Nevron.Diagram.Layout.NLayoutEventArgs)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayoutEventArgs.Context">
            <summary>
            Gets the layout context
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayoutEventArgs.Layout">
            <summary>
            Gets the layout 
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NTreeLayoutCancelEventArguments">
            <summary>
            The NTreeLayoutEventArguments represents the event arguments associated with cancelable tree layout events
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NTreeLayoutCancelEventArguments.#ctor(Nevron.Diagram.Layout.NLayout,Nevron.Diagram.Layout.NLayoutContext,Nevron.Diagram.DataStructures.NTree)">
            <summary>
            Initializer constructor
            </summary>
            <param name="targetNode"></param>
            <param name="context"></param>
            <param name="tree"></param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NTreeLayoutCancelEventArguments.Tree">
            <summary>
            Gets the tree subject to layout
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NTreeLayoutEventArguments">
            <summary>
            The NTreeLayoutEventArguments represents the event arguments associated with tree layout events
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NTreeLayoutEventArguments.#ctor(Nevron.Diagram.Layout.NLayout,Nevron.Diagram.Layout.NLayoutContext,Nevron.Diagram.DataStructures.NTree)">
            <summary>
            Initializer constructor
            </summary>
            <param name="targetNode"></param>
            <param name="context"></param>
            <param name="tree"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NTreeLayoutEventArguments.#ctor(Nevron.Diagram.Layout.NTreeLayoutEventArguments)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NTreeLayoutEventArguments.Tree">
            <summary>
            Gets the tree subject to layout
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NPlugSpacing">
            <summary>
            The NPlugSpacing attribute is used to space plugs connected to a single side port.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NPlugSpacing.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NPlugSpacing.#ctor(Nevron.Diagram.Layout.NPlugSpacing)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NPlugSpacing.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NPlugSpacing.Mode">
            <summary>
            Gets/sets the mode in which the plugs are spaced. By default set to None
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NPlugSpacing.Offset">
            <summary>
            Gets/sets the constant spacing offset. Valid only when Mode is set to Fixed.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NCircularGraphLayout">
            <summary>
            The base class for all circular layouts
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCircularGraphLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCircularGraphLayout.#ctor(Nevron.Diagram.Layout.NCircularGraphLayout)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCircularGraphLayout.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NCircularGraphLayout.RingRadius">
            <summary>
            Gets/sets the ring radius for the layout
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NCircularGraphLayout.AspectRatio">
            <summary>
            Determines the aspect (width/height) ratio of the layout. By default set to 1
            which layouts the nodes in a circle.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NCircularGraphLayout.AutoSizeRings">
            <summary>
            Deterimnes if the layout will auto set the ring radius in order to eliminate node overlapping
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCircularGraphLayout.LayoutGraph(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Overriden to perform the radial graph layout algorithm
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCircularGraphLayout.Overlap(Nevron.Diagram.DataStructures.NGraphVertexList)">
            <summary>
            Test if there's overlapping between the given vertices.
            </summary>
            <param name="vertices">The vertices to check.</param>
            <returns>True if there's overlapping.</returns>
        </member>
        <member name="T:Nevron.Diagram.Layout.NRadialGraphLayout">
            <summary>
            In Radial Graph Layout the focus node is placed at the center of 
            the display and all other nodes are laid out around it
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRadialGraphLayout.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRadialGraphLayout.CreateVertexBody">
            <summary>
            Creates a new vertex body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRadialGraphLayout.LayoutGraph(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Overriden to perform the radial graph layout algorithm
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NSingleCycleLayout">
            <summary>
            The single cycle layout arranges shapes on a single circle
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NSingleCycleLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NSingleCycleLayout.#ctor(Nevron.Diagram.Layout.NSingleCycleLayout)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NSingleCycleLayout.ReduceCrossings">
            <summary>
            Determines whether to perform crossing reduction of the edges connecting the vertices
            on the circle by repositioning the vertices. Note that this step is very computational
            heavy, so it is recommended you turn it off for large graphs (i.e. graphs with 50+ vertices).
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NSingleCycleLayout.LayoutGraph(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Overriden to perform the radial graph layout algorithm
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NLayeredGraphLayout">
            <summary>
            The NLayeredGraphLayout class is a graph layout, which layouts the graph vertices
            and edges bodies of an acyclic graph on layers.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayeredGraphLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayeredGraphLayout.#ctor(Nevron.Diagram.Layout.NLayeredGraphLayout)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayeredGraphLayout.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in the layout 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayeredGraphLayout.CreateEdgeBody">
            <summary>
            Creates a new edge body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayeredGraphLayout.CreateVertexBody">
            <summary>
            Creates a new vertex body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayeredGraphLayout.LayoutGraph(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Layouts a graph to layers.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayeredGraphLayout.NodeAlignment">
            <summary>
            Determines the horizontal alignment of the vertices in the layers.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayeredGraphLayout.LayerAlignment">
            <summary>
            Determines the vertical alignment of the vertices in the layers.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayeredGraphLayout.PlugSpacing">
            <summary>
            Determines the plug spacing of the edges.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayeredGraphLayout.LayerSpacing">
            <summary>
            Gets/sets the layer spacing.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayeredGraphLayout.VertexSpacing">
            <summary>
            Gets/sets the vertex spacing.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayeredGraphLayout.EdgeRouting">
            <summary>
            Gets/sets what edge routing is applied.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayeredGraphLayout.NodeRank">
            <summary>
            Gets/sets the node ranking policy.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayeredGraphLayout.SelfLoopSpacingFactor">
            <summary>
            Gets/sets the self loop spacing factor. It spaces the self loops as a ratio of the body height.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayeredGraphLayout.StraightenLines">
            <summary>
            Tries to straighten the lines as much as possible in the case of orthogonal edge routing.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayeredGraphLayout.UseSingleBus">
            <summary>
            If true and the EdgeRouting is orthogonal, all edges will be placed on a single bus between each pair of layers.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayeredGraphLayout.Compact">
            <summary>
            Determines whether the layout should try to minimize the width of the drawing or not.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NDirectedGraphLayout">
            <summary>
            The NDirectedGraphLayout class represents a graph layout, 
            which serves as base class for all graph layouts, whose direction can be controlled
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDirectedGraphLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDirectedGraphLayout.#ctor(Nevron.Diagram.Layout.NDirectedGraphLayout)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NDirectedGraphLayout.Direction">
            <summary>
            Gets/sets the direction of the graph layout. By default set to TopToBottom
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NFixedVertexPlacement">
            <summary>
            The NFixedVertexPlacement class is used to encapsulate the initial placement of 
            the fixed vertices in a force directed layout.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NFixedVertexPlacement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NFixedVertexPlacement.#ctor(Nevron.Diagram.Layout.NFixedVertexPlacement)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NFixedVertexPlacement.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in the layout 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NFixedVertexPlacement.PlaceFixedVertices(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called by the force directed layout to initially place the fixed vertices
            </summary>
            <param name="graph"></param>
            <param name="context"></param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NFixedVertexPlacement.Mode">
            <summary>
            Gets/set the fixed vertex placement mode. By default set to Original
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NFixedVertexPlacement.PredefinedEllipseBounds">
            <summary>
            Gets/sets the bounds of the predefined ellipse, at the rim of which fixed vertices must be placed. Applicable only if the Mode property is set to PredefinedEllipseRim
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NForceEnvironment">
            <summary>
            The NForceEnvironment class is used to encapsulate the force directed layout 
            settings related to the global environment in which the forces operate
            </summary>
            <remarks>
            The force enviroment controls the amount of force actually applied to the vertices 
            in a force directed layout. It defines the notion of global and local temperatures.
            <para>
            If the UseGlobalTemperature property is set to true, the enviroment will gradually 
            decrease the area in which the vertices are allowed to move (e.g. will perform global cooling). 
            At the first iteration this area will be equal to the MaxForce property, 
            and will gradually decrease to 0, as the layout progresses.
            </para>
            <para>
            If the UseLocalTemperature property is set to ture, the enviroment will assign 
            a local temperature to each vertex. The force applied to the vertex is 
            magnified by its local temperature.
            <para>
            If the vertex is constantly moving in approximately the same direction 
            (plus-minus the allowed deviation controlled by the LocalDirectionDeviation property), 
            its temperature will increase (with the value specified by the LocalWarmingStep property) 
            and it will speed up. 
            </para>
            <para>
            If the vertex is oscilating or rotating its temperature will decrease and it will slow down 
            (with the value specified by the LocalCoolingStep property).
            </para>
            The maximum value of the local temperature is specified by the MaxLocalTemperature property.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceEnvironment.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceEnvironment.#ctor(Nevron.Diagram.Layout.NForceEnvironment)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceEnvironment.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in the layout 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForceEnvironment.Layout">
            <summary>
            Gets the force directed layout to which this environment belongs
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForceEnvironment.XMagnitudeFactor">
            <summary>
            Gets/sets the X magnitude factor. Controls the X force fraction to apply at each iteration. By default set to 0.5f
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForceEnvironment.YMagnitudeFactor">
            <summary>
            Gets/sets the Y magnitude factor. Controls the Y force fraction to apply at each iteration. By default set to 0.5f
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForceEnvironment.UseGlobalTemperature">
            <summary>
            Gets/sets whether to use global temperature. If this setting is set to true the movement of the vertices will be gradually constrained until they are finally freezed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForceEnvironment.MaxForce">
            <summary>
            Gets/sets the max force. In order to ensure the layout stability, the max force is used to define the largest possible force applied at each iteration.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForceEnvironment.UseLocalTemperature">
            <summary>
            Gets/sets whether to use local temperature. Setting this property to true, speeds up the movement of vertices traveling in the same direction and slows down the oscillating and rotating vertices
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForceEnvironment.MaxLocalTemperature">
            <summary>
            Gets/sets the max local temperature. It controls the maximum to which a vertex can be warmed. By default set to 1.0f
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForceEnvironment.LocalDirectionDeviation">
            <summary>
            Gets/sets the direction deviation. It controls the allowed deviation from the previous vertex force direction, below which the vertex is considered to have the same direction. By default set to 45 degrees
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForceEnvironment.LocalCoolingStep">
            <summary>
            Gets/sets the local cooling step. It controls the amount with which the vertex local temperature is decreased if it deviates from its direction. By default set to 0.1f
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForceEnvironment.LocalWarmingStep">
            <summary>
            Gets/sets the local warming step. It controls the amount with which the vertex local temperature is increased if it follows its direction. By default set to 0.1f
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceEnvironment.Reset(Nevron.Diagram.DataStructures.NGraphVertexList)">
            <summary>
            Resets the enviroment. This method is called before the first iteration of each pass
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceEnvironment.ApplyForce(Nevron.Diagram.DataStructures.NGraphVertex)">
            <summary>
            Called to apply the force, which was accumulated in the specified vertex
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceEnvironment.Update(System.Int32)">
            <summary>
            Updates the enviroment. This method is called on each layout iteration.
            </summary>
            <param name="iteration"></param>
        </member>
        <member name="T:Nevron.Diagram.Layout.NFreeVertexPlacement">
            <summary>
            The NFreeVertexPlacement class is used to encapsulate the initial placement of 
            the free vertices in a force directed layout.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NFreeVertexPlacement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NFreeVertexPlacement.#ctor(Nevron.Diagram.Layout.NFreeVertexPlacement)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NFreeVertexPlacement.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in the layout 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NFreeVertexPlacement.PlaceFreeVertices(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called by the force directed layout to initially place the free vertices
            </summary>
            <param name="graph"></param>
            <param name="context"></param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NFreeVertexPlacement.Mode">
            <summary>
            Gets/set the free vertex placement mode. By default set to Random
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NFreeVertexPlacement.RandomizationArea">
            <summary>
            Gets/sets the area in which the random positions must be contained. Applicable only if the Mode property is set to Random.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NBarycenterForce">
            <summary>
            The NBarycenterForce class represents an edge force, 
            which tries to place connected vertices at their barycenter (center of gravity)
            </summary>
            <remarks>
            The barycenter force is attractive by definition. It tries to collapse the 
            vertices to the center of their mass. The force magnitude experienced by the 
            vertices is specified by the following formulas:
            <para>
            vertex1Force = AttractionCoefficient * vertex1.Mass / (vertex1.Mass + vertex2.Mass)
            </para>
            <para>
            vertex2Force = AttractionCoefficient * vertex2.Mass / (vertex1.Mass + vertex2.Mass)
            </para>
            <para>
            The Mass parameter can be specified on a per vertex basis. If a vertex does not 
            provide a concrete value for this parameter it is by default considered to be 1.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBarycenterForce.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBarycenterForce.#ctor(Nevron.Diagram.Layout.NBarycenterForce)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBarycenterForce.OnLayingOutGraph(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called before the force is used in the specified graph
            </summary>
            <param name="graph"></param>
            <param name="context"></param> 
        </member>
        <member name="P:Nevron.Diagram.Layout.NBarycenterForce.AttractionCoefficient">
            <summary>
            Gets/sets the attraction coefficient, which affects the power with which connected vertices attract each other.
            Should be a value in the the [0;1] range
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NDesiredDistanceForce">
            <summary>
            The NDesiredDistanceForce is a force, which couples 
            an attraction force (edge force), and a repulsion force (vertex force).
            The two forces balance each other when the distance between connected vertices 
            is equal to the specified desired distance.
            </summary>
            <remarks>
            The attraction force magnitute is computed by the following formula:
            <para>
            AttractionCoefficient * Math.Pow(distance, 2) / Math.Pow(DesiredDistance, 2)
            </para>
            <para>
            The repulsion force magnitute is computed by the following formula:
            <para>
            RepulsionCoefficient * Math.Pow(DesiredDistance, 2) / Math.Pow(distance, 2)
            </para>
            </para>
            <para>
            Provided that the RepulsionCoefficient and AttractionCoefficient are 
            equal, the two forces balance each other at DesiredDistance. 
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDesiredDistanceForce.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDesiredDistanceForce.#ctor(Nevron.Diagram.Layout.NDesiredDistanceForce)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDesiredDistanceForce.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in the object
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NDesiredDistanceForce.RepulsionCoefficient">
            <summary>
            Gets/sets the repulsion coefficient, which affects the power with which vertices repel each other.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NDesiredDistanceForce.AttractionCoefficient">
            <summary>
            Gets/sets the attraction coefficient, which affects the power with which connected vertices attract each other.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NDesiredDistanceForce.DesiredDistance">
            <summary>
            Gets/sets the desired distance between between a pair of connected vertices
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDesiredDistanceForce.OnLayingOutGraph(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called before the force is used in the specified graph layout
            </summary>
            <param name="graph"></param>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Diagram.Layout.NElectricalForce">
            <summary>
            The NElectricalForce class represents a vertices force, 
            which simulates the electrical repulsion between two ellectrically charged particles.
            </summary>
            <remarks>
            The ellectrical force magnitute is computed by the following formula:
            <para>
            (RepulsionCoefficient * Math.Pow(NominalDistance, 2) * Novertex1.ElectricalCharge * vertex2.ElectricalCharge) / (distance * distance)
            </para>
            <para>
            Provided that the electrical charges are equal in sign (which is the most common case), 
            the ellectrical force is repulsive and decreases in an inverse square law as the distance between 
            the vertices is increased.
            </para>
            <para>
            The ElectricalCharge parameter can be specified on a per vertex basis. If a vertex does not 
            provide a concrete value for this parameter it is by default considered to be 1.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NElectricalForce.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NElectricalForce.#ctor(Nevron.Diagram.Layout.NElectricalForce)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NElectricalForce.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in the object
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NElectricalForce.RepulsionCoefficient">
            <summary>
            Gets/sets the repulsion coefficient, which affects the power with which vertices repel each other.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NElectricalForce.NominalDistance">
            <summary>
            Gets/sets the nominal distance, which affects the power with which vertices repel each other in a square low
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NElectricalForce.OnLayingOutGraph(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called before the force is used in the specified graph
            </summary>
            <param name="graph"></param>
            <param name="context"></param> 
        </member>
        <member name="T:Nevron.Diagram.Layout.NForce">
            <summary>
            The NForce class serves as base class for all types of forces,
            which can be used in force directed layouts
            </summary>
            <remarks>
            Each force can be enabled or disabled, which is controlled by the Enabled property. 
            When disabled the force will not be taken into account by the force directed layout. 
            This lets you easily turn on/off different force configurations.
            <para>
            Provided that the force is enabled, it activates at the pass, specified by the ActivationPass property.
            The force directed layout will perform as many passes as the maximum ActivationPass setting of 
            all currently enabled forces.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForce.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForce.#ctor(Nevron.Diagram.Layout.NForce)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForce.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in the object
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForce.OnLayingOutGraph(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called before the force is used in the specified graph
            </summary>
            <param name="graph"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForce.OnLayedOutGraph(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called after the force is used in the specified graph layout
            </summary>
            <param name="graph"></param>
            <param name="context"></param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForce.ActivationPass">
            <summary>
            Gets/sets the pass, at which the force becomes active
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForce.Enabled">
            <summary>
            Determines whether the force is enabled or not
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForce.Layout">
            <summary>
            Gets the force directed layout to which this force belongs
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NForceList">
            <summary>
            The NForceList class represents a typed list of NForce instances
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceList.#ctor(System.Collections.ArrayList)">
            <summary>
            Shallow copy constructor
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceList.#ctor(System.Collections.ICollection)">
            <summary>
            Shallow copy constructor
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceList.Add(Nevron.Diagram.Layout.NForce)">
            <summary>
            Adds the force to the end of the collection
            </summary>
            <param name="value">force to add</param>
            <returns>The zero-based index at which the new force is inserted</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceList.AddRange(Nevron.Diagram.Layout.NForce[])">
            <summary>
            Copies the elements of a force array to the end of the collection.
            </summary>
            <param name="value">force array</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceList.AddRange(Nevron.Diagram.Layout.NForceList)">
            <summary>
            Copies the elements of a force list to the end of the collection.
            </summary>
            <param name="value">force list</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceList.AddRange(System.Collections.ICollection)">
            <summary>
            Copies the elements of the specified collection to the end of this collection.
            </summary>
            <param name="value">force collection</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceList.Contains(Nevron.Diagram.Layout.NForce)">
            <summary>
            Determines whether the specified force is in the collection
            </summary>
            <param name="value">force</param>
            <returns>true if force is found in the collection, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceList.CopyTo(Nevron.Diagram.Layout.NForce[],System.Int32)">
            <summary>
            Copies the entire collection values to a one-dimensional array of forces, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array of forces that is the destination of the elements copied from collection. The Array must have zero-based indexing</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceList.IndexOf(Nevron.Diagram.Layout.NForce)">
            <summary>
            Searches for the specified force and returns the zero-based index of the first occurrence within the collection
            </summary>
            <param name="value">the force to locate</param>
            <returns>index of the force</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceList.Insert(System.Int32,Nevron.Diagram.Layout.NForce)">
            <summary>
            Inserts the force at the specified index
            </summary>
            <param name="index">index at which the force is inserted</param>
            <param name="value">the force to insert</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceList.Remove(Nevron.Diagram.Layout.NForce)">
            <summary>
            Removes the first occurrence of a specific force from the collection
            </summary>
            <param name="value">force to remove</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceList.Filter(Nevron.Filters.NFilter)">
            <summary>
            Filters the elements of this list and returns a new list in which all elements satisfy the filter criteria
            </summary>
            <param name="filter">filter to use, or null if no filter should be used</param>
            <returns>filtered list</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceList.FilterCount(Nevron.Filters.NFilter)">
            <summary>
            Determines the count of elements in this array, which satisfy the specified filter
            </summary>
            <param name="filter">filter to apply</param>
            <returns>count on elements which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceList.AddNoDuplicates(Nevron.Diagram.Layout.NForce)">
            <summary>
            Adds a non duplicate force to the list
            </summary>
            <param name="value">force to add</param>
            <returns>The zero-based index at which the new force is inserted, or -1 if it already exists in the list</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceList.AddRangeNoDuplicates(System.Collections.ICollection)">
            <summary>
            Copies the elements of the specified collection to the end of this collection and does not add any duplicate entries
            </summary>
            <param name="value">force collection</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceList.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the element of this list with the specified comparer
            </summary>
            <param name="comparer">comparer to use</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceList.ToArray(System.Type)">
            <summary>
            Copies the elements of this list to a new array of the specified type.
            </summary>
            <param name="type">he type of array to create and copy elements to.</param>
            <returns>an array of the specified type containing copies of the elements in this list</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceList.RemoveRange(System.Collections.ICollection)">
            <summary>
            Removes the specified range of elements from the collection
            </summary>
            <param name="value">force collection</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceList.IntersectsWith(System.Collections.ICollection)">
            <summary>
            Determines whether this and the specified collection have common entries
            </summary>
            <param name="value">force collection</param>
            <returns>true if common entries have been founds, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceList.Clone">
            <summary>
            Creates an exact replica of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForceList.Item(System.Int32)">
            <summary>
            Typed indexer
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NGravityForce">
            <summary>
            The NGravityForce class represents a global force, which simulates a gravity attraction to the current barycenter of the graph
            </summary>
            <remarks>
            The gravity force simulates an attraction to the current barycenter of the graph, 
            which is experienced by all vertices in the graph. The force magnitude is computed by 
            the following formula:
            <para>
            AttractionCoefficient * (1 + vertex.Degree * DegreeFactor) * (Barycenter - vertex.Center)
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGravityForce.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGravityForce.#ctor(Nevron.Diagram.Layout.NGravityForce)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NGravityForce.AttractionCoefficient">
            <summary>
            Gets/sets the attraction coefficient, which affects the power with which vertices are attracted to the barycenter
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NGravityForce.DegreeFactor">
            <summary>
            Gets/sets the degree factor, which affects the tendency vertices with higher degree to be more attracted to the barycenter
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NMagneticFieldForce">
            <summary>
            The NMagneticFieldForce is an edge force, which is used to impose an edge orientation constrain
            </summary>
            <remarks>
            The magnetic force magnitute is computed by the following formula:
            <para>
            TorsionCoefficient *  Math.Pow(distance, DistancePower) * Math.Pow(angle, AnglePower)
            </para>
            where angle is the angle, which the edge forms with the magnetic field.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NMagneticFieldForce.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NMagneticFieldForce.#ctor(Nevron.Diagram.Layout.NMagneticFieldForce)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NMagneticFieldForce.OnLayingOutGraph(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called before the force is used in the specified graph
            </summary>
            <param name="graph"></param>
            <param name="context"></param> 
        </member>
        <member name="P:Nevron.Diagram.Layout.NMagneticFieldForce.FieldDirection">
            <summary>
            Gets/sets the direction of the magnetic field
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NMagneticFieldForce.FieldOrigin">
            <summary>
            Gets/sets the magnetic field origin. Only used when the magnetic field direction is set to Polar or Concentric.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NMagneticFieldForce.MagnetizationType">
            <summary>
            Gets/sets the default magnetization type of force directed edges. By default set to Bidirectional.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NMagneticFieldForce.TorsionCoefficient">
            <summary>
            Gets/sets the torsion coefficient, which affects the power with which the field rotates the edges.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NMagneticFieldForce.DistancePower">
            <summary>
            Gets/sets the distance power, which affects the tendency longer edges to exert larger torsion
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NMagneticFieldForce.AnglePower">
            <summary>
            Gets/sets the angle power, which affects the tendency edges to be more strongly aligned with the field
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NBounceBackForce">
            <summary>
            The NBounceBackForce class represents a vertices force, 
            which simulates a repulsion between overrlapping vertices
            </summary>
            <remarks>
            The bounce back force magnitute is computed by the following formula:
            RepulsionCoefficient * Math.Sqrt(IntersectionArea)
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBounceBackForce.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBounceBackForce.#ctor(Nevron.Diagram.Layout.NBounceBackForce)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBounceBackForce.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in the object
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NBounceBackForce.Padding">
            <summary>
            Gets/sets the padding applied to the bodies
            </summary>
            <remarks>
            By default set to 10
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.Layout.NBounceBackForce.RepulsionCoefficient">
            <summary>
            Gets/sets the repulsion coefficient. By default set to 1.0f
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NBounceBackForce.BodyArea">
            <summary>
            Gets/sets the body area, which is considered when measuring the overlap between two bodies. 
            By default set to BoundingBox.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NSpringForce">
            <summary>
            The NSpringForce class represents an edge force, 
            which simulates a spring connecting adjacent vertices.
            </summary>
            <remarks>
            The spring force magnitude formula can take two forms based on the SpringForceLaw property value:
            <list type="bullet">
            	<item>
            		<term>Logarithmic</term>
            		<description>
            		edge.SpringStiffness * Math.Log(LogBase, distance / edge.SpringLength)
            		</description>
            	</item>
            	<item>
            		<term>HookeLaw</term>
            		<description>
            		edge.SpringStiffness * (d - edge.SpringLength)
            		</description>
            	</item>
            </list>
            <para>
            In both forms the spring force becomes repulsive, if the distance is smaller than the spring length, 
            and becomes attractive, when the distance is larger than the spring length. That is, the spring force 
            aims to make the distance between connected vertices equal to the natural (zero energy) of the spring.
            </para>
            The SpringStiffness and SpringLength parameters can be specified on a per edge basis. If an edge does not 
            provide a concrete value for either of these parameters, the default values are obtained from the 
            SpringStiffness and SpringLength properties respectively.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NSpringForce.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NSpringForce.#ctor(Nevron.Diagram.Layout.NSpringForce)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NSpringForce.OnLayingOutGraph(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called before the force is used in the specified graph
            </summary>
            <param name="graph"></param>
            <param name="context"></param> 
        </member>
        <member name="P:Nevron.Diagram.Layout.NSpringForce.SpringLength">
            <summary>
            Gets/sets the default spring length.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NSpringForce.SpringStiffness">
            <summary>
            Gets/sets the default string stiffness
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NSpringForce.LogBase">
            <summary>
            Gets/sets the base of the logarithm in case the force law is set to Logarithmic
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NSpringForce.SpringForceLaw">
            <summary>
            Gets/sets the type of spring force to use. By default set to HookeLaw.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NBarycenterLayout">
            <summary>
            The NBarycenterLayout class represents a force directed layout, which implements the barycenter layout method.
            </summary>
            <remarks>
            The barycenter layout method splits the input graph into a set of fixed and free vertices.
            Fixed vertices are nailed to the corners of a strictly convex polygon, while free vertices 
            are placed in the barycenter of their neighbours.
            <para>
            In case there are no fixed vertices this will place all vertices at a single point, 
            which is obviously not a good graph drawing. That is why the barycenter layout needs 
            at least three fixed vertices. 
            </para>
            <para>
            The minimal amount of fixed vertices is specified by the MinFixedVerticesCount property. 
            If the input graph does not have that many fixed vertices, the layout will automatically 
            forefill this requirement. This is done by fixing the vertices with the smallest degree.
            </para>
            <para>
            The attractive force pulling the vertices towards their barycenter is represented by an instance of the 
            <see cref="T:Nevron.Diagram.Layout.NBarycenterForce">NBarycenterForce</see> class, 
            accessible from the BarycenterForce property. 
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBarycenterLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBarycenterLayout.#ctor(Nevron.Diagram.Layout.NBarycenterLayout)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NBarycenterLayout.MinFixedVerticesCount">
            <summary>
            Gets/sets the minimal count of fixed vertices. If the graph does not have that many fixed vertices they will be automaticall chosen. By default set to 3
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NBarycenterLayout.BarycenterForce">
            <summary>
            Gets the barycenter force, which tries to collapse the vertices their center of gravity
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBarycenterLayout.DetermineFixedVertices(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Determines the fixed vertices of the input graph. 
            Fixes the needed amount of vertices if the input graph does not have that many.
            </summary>
            <param name="graph"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBarycenterLayout.LayoutGraph(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Overriden to perform the barycenter layout on the specified graph
            </summary>
            <param name="graph"></param>
            <param name="context"></param> 
        </member>
        <member name="M:Nevron.Diagram.Layout.NBarycenterLayout.GetForces(System.Boolean)">
            <summary>
            Gets a list of the currently declared forces
            </summary>
            <param name="enabledOnly"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Layout.NForceDirectedLayout">
            <summary>
            The NForceDirectedLayout class is a graph layout, which layouts the graph vertices and edges, 
            according to the forces acting on them. It serves as base class for all types of force directed layouts.
            </summary>
            <remarks>
            The force directed layout basically implements an iterative algorithm, 
            which tries to minimize the physical energy (reach equilibrium), enduced by the forces in the provided graph. 
            Different force directed layouts use different sets of forces, however all forces are derived from 
            the base <see cref="T:Nevron.Diagram.Layout.NForce">NForce</see> class.
            <para>
            In general the algorithm performs the following steps:
            </para>
            <list type="bullet">
            	<item>
            		<term>Fixed vertex placement</term>
            		<description>
            		fixed vertices are such vertices, which cannot be moved in both X and Y directions. 
            		Their initial placement is controlled by an instance of the <see cref="T:Nevron.Diagram.Layout.NFixedVertexPlacement">NFixedVertexPlacement</see> class,
            		accessible from the FixedVertexPlacement property.
            		</description>
            	</item>
            	<item>
            		<term>Free vertex placement</term>
            		<description>
            		free vertices are such vertices, which can be moved in X or Y directions. 
            		Their initial placement is controlled by an instance of the <see cref="T:Nevron.Diagram.Layout.NFreeVertexPlacement">NFreeVertexPlacement</see> class,
            		accessible from the FreeVertexPlacement property.
            		</description>
            	</item>
            	<item>
            		<term>Iteration phase</term>
            		<description>
            		the iteration phase is repeated until all enabled forces are activated. At each iteration phase the 
            		algorithm tries to reach equilibrium in the number of iterations specified by the MaxIterations property.
            		At each iteration the algorithm first accumulates the forces acting on all vertices and then ask 
            		the enviroment to apply them (actually move the vertices). The enviroment is represented by an 
            		instance of the <see cref="T:Nevron.Diagram.Layout.NForceEnvironment">NForceEnvironment</see> class, accessible 
            		from the ForceEnvironment property.
            		</description>
            	</item>
            </list>
            The force directed layout provides the following optional force model:
            <list type="bullet">
            	<item>
            		<term>Magnetic Field Force</term>
            		<description>
            		The magnetic field force tries to impose an orientation of the edges in the graph.
            		It is represented by an instance of the <see cref="T:Nevron.Diagram.Layout.NMagneticFieldForce">NMagneticFieldForce</see> class,
            		accessible from the MagneticFieldForce property.
            		</description>
            	</item>
            	<item>
            		<term>Bounce Back Force</term>
            		<description>
            		The bounce back force forces tries to additionally repel overlapping vertices.
            		It is represented by an instance of the <see cref="T:Nevron.Diagram.Layout.NBounceBackForce">NBounceBackForce</see> class,
            		accessible from the BounceBackForce property.
            		</description>
            	</item>
            	<item>
            		<term>Gravity Force</term>
            		<description>
            		The gravity force forces tries to attact the vertices to the current barycenter of the graph.
            		It is represented by an instance of the <see cref="T:Nevron.Diagram.Layout.NGravityForce">NGravityForce</see> class,
            		accessible from the GravityForce property.
            		</description>
            	</item>
            </list>
            All of the above mentioned forces are by default disabled and their activation pass is set to 1. 
            In this way, if any of those forces is enabled, the graph will be given a chance to relax during 
            the first pass, in which only the primary force model will act.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceDirectedLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceDirectedLayout.#ctor(Nevron.Diagram.Layout.NForceDirectedLayout)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="E:Nevron.Diagram.Layout.NForceDirectedLayout.IterationCompleted">
            <summary>
            Layout events category event, which is raised on the completion of each iteration of a force directed layout.
            The implementation installs an event listener for this event of this node in the layout events category.
            </summary>
        </member>
        <member name="E:Nevron.Diagram.Layout.NForceDirectedLayout.PassCompleted">
            <summary>
            Layout events category event, which is raised on the completion of each pass of a force directed layout.
            The implementation installs an event listener for this event of this node in the layout events category.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceDirectedLayout.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in the layout 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForceDirectedLayout.FreeVertexPlacement">
            <summary>
            Controls the initial placement of the free vertices
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForceDirectedLayout.FixedVertexPlacement">
            <summary>
            Controls the initial placement of the fixed vertices
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForceDirectedLayout.StopForce">
            <summary>
            Gets/sets the stop force. If all current forces are smaller than this force, then the layout is automatically stopped.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForceDirectedLayout.MaxIterations">
            <summary>
            Gets/sets the maximum iterations in which the layout must try to reach equilibrium. By default set to 500
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForceDirectedLayout.MaxTime">
            <summary>
            Gets/sets the maximum time in milliseconds in which the layout must try to reach equilibrium. By default set to 5000.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForceDirectedLayout.MinDelta">
            <summary>
            Gets/sets the minial delta measure for distances, which can become zero 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForceDirectedLayout.BounceBackForce">
            <summary>
            Gets/sets the bounce back force, which can be used to repulse the vertices, whose bodies overlap
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForceDirectedLayout.MagneticFieldForce">
            <summary>
            Gets/sets the magnetic field force, which can be used to impose an edge orientation
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForceDirectedLayout.GravityForce">
            <summary>
            Gets/sets the gravity force, which attracts vertices to the current barycenter of the graph
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForceDirectedLayout.Environment">
            <summary>
            Gets/sets the force enviroment, which is used to control global settings about the environment in which forces operate
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NForceDirectedLayout.PlugSpacing">
            <summary>
            Gets/sets the plug spacing to apply when routing duplicate edges
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceDirectedLayout.OnLayingOutGraph(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called before the layout of the specified graph
            </summary>
            <remarks>
            Overriden to read the X and Y moveable constrains of the vertices and to call the 
            OnLayingOutGraph method of all enabled forces.
            </remarks>
            <param name="graph"></param>
            <param name="context"></param> 
            <returns>true if the layout can be performed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceDirectedLayout.LayoutGraph(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Overriden to perform the force directed layout on the specified graph
            </summary>
            <param name="graph"></param>
            <param name="context"></param> 
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceDirectedLayout.OnLayedOutGraph(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called after the layout of the specified graph
            </summary>
            <remarks>
            Overriden to call the OnLayedOutGraph method of all enabled forces.
            </remarks>
            <param name="graph"></param>
            <param name="context"></param> 
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceDirectedLayout.CreateVertexBody">
            <summary>
            Called in the graph building process to create a body for each vertex
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceDirectedLayout.CreateEdgeBody">
            <summary>
            Called in the graph building process to create a body for each edge
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceDirectedLayout.OnIterationCompleted(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called on each layout iteration
            </summary>
            <remarks>
            This implementation raises the IterationCompleted event
            </remarks>
            <param name="graph"></param>
            <param name="context"></param>
            <returns>true if the layout must continue, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceDirectedLayout.OnPassCompleted(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called on each layout pass
            </summary>
            <remarks>
            This implementation raises the PassCompleted event
            </remarks>
            <param name="graph"></param>
            <param name="context"></param>
            <returns>true if the layout must continue, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NForceDirectedLayout.GetForces(System.Boolean)">
            <summary>
            Gets a list of the currently declared forces
            </summary>
            <param name="enabledOnly"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Layout.NSpringLayout">
            <summary>
            The NSpringLayout class represents a force directed layout, 
            which simulates a physical system with spring and electical forces.
            </summary>
            <remarks>
            The spring layout represents a classical implementation of a force directed layout, 
            with spring and electicral forces. It allows for many per vertex and per edge settings, 
            which can seamlessly reflect the nature of the graph.
            <para>
            Graph vertices are threated as ellectically charged particles, which repel each other.
            The electical force aims to ensure that vertices should not be close together.
            The parameters of the electrical force are controlled by an instance of the 
            <see cref="T:Nevron.Diagram.Layout.NElectricalForce">NElectricalForce</see> class, 
            accessible from the ElectricalForce property.
            </para>
            <para>
            Graph edges are threated as springs. Springs aim to ensure that the distance between adjacent 
            vertices is approximately equal to the spring length.
            The parameters of the spring force are controlled by an instance of the 
            <see cref="T:Nevron.Diagram.Layout.NSpringForce">NSpringForce</see> class, 
            accessible from the SpringForce property.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NSpringLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NSpringLayout.#ctor(Nevron.Diagram.Layout.NSpringLayout)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NSpringLayout.ElectricalForce">
            <summary>
            Gets/sets the electical force, which tries to repel the vertices so that they do not stay too close together
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NSpringLayout.SpringForce">
            <summary>
            Gets/sets the spring force, which tries to make the distance between connected vertices equal to the natural length of the spring
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NSpringLayout.GetForces(System.Boolean)">
            <summary>
            Gets a list of the currently declared forces
            </summary>
            <param name="enabledOnly"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Layout.NSymmetricalLayout">
            <summary>
            The NSymmetricalLayout class is a force directed layout, 
            which simulates a physical system with repulsive and attractive forces, 
            which strive to produce a symmetrical drawing of a graph.
            </summary>
            <remarks>
            The symmetrical layout represents an implementation of the Fruchertman and Reingold force directed layout (with some modifications). 
            It uses attractive and repulsive forces, which aim to produce a drawing with uniform distance between 
            each set of connected vertices. Because of that the drawing tends to be symmetrical.
            <para>
            The attractive and repulsive forces are coupled in an instance of the 
            <see cref="T:Nevron.Diagram.Layout.NDesiredDistanceForce">NDesiredDistanceForce</see> class, 
            accessible from the DesiredDistanceForce property. 
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NSymmetricalLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NSymmetricalLayout.#ctor(Nevron.Diagram.Layout.NSymmetricalLayout)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NSymmetricalLayout.DesiredDistanceForce">
            <summary>
            Gets/sets the force, which tries to enforce a certain distance between connected vertices and repulse disconnected vertices
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NSymmetricalLayout.GetForces(System.Boolean)">
            <summary>
            Gets a list of the currently declared forces
            </summary>
            <param name="enabledOnly"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Layout.NGraphLayout">
            <summary>
            The NGraphLayout class represents a regioned layout, whose regions are graphs. 
            It serves as a base class for all graph layouts.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphLayout.#ctor(Nevron.Diagram.Layout.NGraphLayout)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="E:Nevron.Diagram.Layout.NGraphLayout.LayingOutGraph">
            <summary>
            Occurs when a graph is about to layed out by this layout.
            </summary>
        </member>
        <member name="E:Nevron.Diagram.Layout.NGraphLayout.LayedOutGraph">
            <summary>
            Occurs when a graph has been layed out by this layout.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphLayout.CreateRegions(Nevron.Collections.NList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Overriden to split the object regions into graphs, 
            and create a graph region for each resulting graph.
            </summary>
            <param name="objects"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphLayout.LayoutRegionContent(Nevron.Diagram.Layout.NRegion,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called to layout the content of the specified region. 
            </summary>
            <param name="region"></param>
            <param name="context"></param> 
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphLayout.CreateVertexBody">
            <summary>
            Called in the graph building process to create a body for each vertex
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphLayout.CreateEdgeBody">
            <summary>
            Called in the graph building process to create a body for each edge
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphLayout.OnLayingOutGraph(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called before the layout of the specified graph
            </summary>
            <remarks>
            This implementation raises the LayingOutGraph event
            </remarks>
            <param name="graph"></param>
            <param name="context"></param> 
            <returns>true if the layout can be performed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphLayout.LayoutGraph(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called to layout the specified graph
            </summary>
            <param name="graph"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphLayout.OnLayedOutGraph(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called after the layout of the specified graph
            </summary>
            <remarks>
            This implementation raises the LayedOutGraph event
            </remarks>
            <param name="graph"></param>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Diagram.Layout.NGraphRegion">
            <summary>
            The NGraphRegion class represents a region, whose content is a graph
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphRegion.#ctor(Nevron.Diagram.DataStructures.NGraph)">
            <summary>
            Initializer constructor
            </summary>
            <param name="graph">graph, which represents this region content</param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NGraphRegion.Graph">
            <summary>
            Obtains a reference to the graph for which the graph layout item was constructed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphRegion.Translate(System.Single,System.Single)">
            <summary>
            Translates the item
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphRegion.GetPartsEnumerator">
            <summary>
            Must override to provide a graph parts enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Layout.NOrthogonalGraphLayout">
            <summary>
            Implements the Orthogonal Graph Layout.
            </summary>
            <remarks>
            Input : simple graph
            Output: orthogonal (and planar if the graph is planar) grid drawing of the graph
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NOrthogonalGraphLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NOrthogonalGraphLayout.#ctor(Nevron.Diagram.Layout.NOrthogonalGraphLayout)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NOrthogonalGraphLayout.Compact">
            <summary>
            Determines whether to use a compaction algorithm on the layout.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NOrthogonalGraphLayout.GridCellSizeMode">
            <summary>
            Determines the sizing mode of the grid cells.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NOrthogonalGraphLayout.CellSpacing">
            <summary>
            Determines the inter cell spacing of the grid cells.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NOrthogonalGraphLayout.PlugSpacing">
            <summary>
            Determines the plug spacing of the nodes.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NOrthogonalGraphLayout.CreateEdgeBody">
            <summary>
            Creates a new edge body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NOrthogonalGraphLayout.CreateVertexBody">
            <summary>
            Creates a new vertex body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NOrthogonalGraphLayout.LayoutGraph(Nevron.Diagram.DataStructures.NGraph,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Overriden to perform the orthogonal graph layout algorithm.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NGraphPartsLayout">
            <summary>
            The NGraphPartsLayout class represents a layout, 
            which serves as base class for graph and tree layouts. 
            </summary>
            <remarks>
            Common for graph and tree layouts is that they split the input set of objects 
            into regions (e.g. connected components), which are subject to arrangement by the primary layout algorithm.
            <para>
            When the content of all regions is arranged, the regions are optionally arranged with the layout specified by the RegionLayout property. 
            By default this property holds an instance of the NFlowLayout class.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphPartsLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphPartsLayout.#ctor(Nevron.Diagram.Layout.NGraphPartsLayout)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphPartsLayout.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in the layout 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphPartsLayout.Layout(Nevron.Collections.NList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Applies the layout to the specified objects
            </summary>
            <param name="objects">objects to layout</param>
            <param name="context">layout context</param> 
        </member>
        <member name="P:Nevron.Diagram.Layout.NGraphPartsLayout.RegionLayout">
            <summary>
            Gets/sets the region layout used for the optional final arrangement of the regions
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphPartsLayout.CreateRegions(Nevron.Collections.NList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called to create the regions from the specified list of objects
            </summary>
            <param name="objects">objects, which to split into regions</param>
            <param name="context">layout context</param>
            <returns>list of the regions</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphPartsLayout.CreateGraphBuilder(Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called to create graph builder which is used to build the arranged graphs or trees 
            from the input set of objects
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphPartsLayout.CreateVertexBody">
            <summary>
            Called in the graph building process to create a body for each vertex
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphPartsLayout.CreateEdgeBody">
            <summary>
            Called in the graph building process to create a body for each edge
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphPartsLayout.LayoutRegionsContent(Nevron.Diagram.Layout.NRegionList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called to layout the content of all regions
            </summary>
            <param name="regions"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphPartsLayout.LayoutRegionContent(Nevron.Diagram.Layout.NRegion,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called to layout the content of the specified region. 
            </summary>
            <param name="region"></param>
            <param name="context"></param> 
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphPartsLayout.LayoutRegions(Nevron.Diagram.Layout.NRegionList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called to layout the regions
            </summary>
            <param name="regions"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NGraphPartsLayout.UpdateObjects(Nevron.Diagram.Layout.NRegionList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called to update the objects from the bodies contained in all regions
            </summary>
            <param name="regions"></param>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Diagram.Layout.NRegion">
            <summary>
            The NRegion class serves as base class for different connected graph components 
            (e.g. graph and tree regions).
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegion.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegion.Translate(System.Single,System.Single)">
            <summary>
            Translates the entire region
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegion.GetPartsEnumerator">
            <summary>
            Must override to provide a graph parts enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegion.GetBounds">
            <summary>
            Return the acumulated bounds of the graph parts bodies
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NRegionList">
            <summary>
            The NRegionList class represents a typed list of NRegion instances
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegionList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegionList.#ctor(System.Collections.ArrayList)">
            <summary>
            Shallow copy constructor
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegionList.#ctor(System.Collections.ICollection)">
            <summary>
            Shallow copy constructor
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegionList.Add(Nevron.Diagram.Layout.NRegion)">
            <summary>
            Adds the region to the end of the collection
            </summary>
            <param name="value">region to add</param>
            <returns>The zero-based index at which the new region is inserted</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegionList.AddRange(Nevron.Diagram.Layout.NRegion[])">
            <summary>
            Copies the elements of a region array to the end of the collection.
            </summary>
            <param name="value">region array</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegionList.AddRange(Nevron.Diagram.Layout.NRegionList)">
            <summary>
            Copies the elements of a region list to the end of the collection.
            </summary>
            <param name="value">region list</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegionList.AddRange(System.Collections.ICollection)">
            <summary>
            Copies the elements of the specified collection to the end of this collection.
            </summary>
            <param name="value">region collection</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegionList.Contains(Nevron.Diagram.Layout.NRegion)">
            <summary>
            Determines whether the specified region is in the collection
            </summary>
            <param name="value">region</param>
            <returns>true if region is found in the collection, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegionList.CopyTo(Nevron.Diagram.Layout.NRegion[],System.Int32)">
            <summary>
            Copies the entire collection values to a one-dimensional array of regions, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array of regions that is the destination of the elements copied from collection. The Array must have zero-based indexing</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegionList.IndexOf(Nevron.Diagram.Layout.NRegion)">
            <summary>
            Searches for the specified region and returns the zero-based index of the first occurrence within the collection
            </summary>
            <param name="value">the region to locate</param>
            <returns>index of the region</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegionList.Insert(System.Int32,Nevron.Diagram.Layout.NRegion)">
            <summary>
            Inserts the region at the specified index
            </summary>
            <param name="index">index at which the region is inserted</param>
            <param name="value">the region to insert</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegionList.Remove(Nevron.Diagram.Layout.NRegion)">
            <summary>
            Removes the first occurrence of a specific region from the collection
            </summary>
            <param name="value">region to remove</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegionList.Filter(Nevron.Filters.NFilter)">
            <summary>
            Filters the elements of this list and returns a new list in which all elements satisfy the filter criteria
            </summary>
            <param name="filter">filter to use, or null if no filter should be used</param>
            <returns>filtered list</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegionList.FilterCount(Nevron.Filters.NFilter)">
            <summary>
            Determines the count of elements in this array, which satisfy the specified filter
            </summary>
            <param name="filter">filter to apply</param>
            <returns>count on elements which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegionList.AddNoDuplicates(Nevron.Diagram.Layout.NRegion)">
            <summary>
            Adds a non duplicate region to the list
            </summary>
            <param name="value">region to add</param>
            <returns>The zero-based index at which the new region is inserted, or -1 if it already exists in the list</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegionList.AddRangeNoDuplicates(System.Collections.ICollection)">
            <summary>
            Copies the elements of the specified collection to the end of this collection and does not add any duplicate entries
            </summary>
            <param name="value">region collection</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegionList.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the element of this list with the specified comparer
            </summary>
            <param name="comparer">comparer to use</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegionList.ToArray(System.Type)">
            <summary>
            Copies the elements of this list to a new array of the specified type.
            </summary>
            <param name="type">he type of array to create and copy elements to.</param>
            <returns>an array of the specified type containing copies of the elements in this list</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegionList.RemoveRange(System.Collections.ICollection)">
            <summary>
            Removes the specified range of elements from the collection
            </summary>
            <param name="value">region collection</param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegionList.IntersectsWith(System.Collections.ICollection)">
            <summary>
            Determines whether this and the specified collection have common entries
            </summary>
            <param name="value">region collection</param>
            <returns>true if common entries have been founds, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NRegionList.Clone">
            <summary>
            Creates an exact replica of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.Layout.NRegionList.Item(System.Int32)">
            <summary>
            Typed indexer
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NBalloonTreeLayout">
            <summary>
            The NBalloonTreeLayout class is a tree layout, which tries to compact the drawing area
            of the tree and places the vertices in balloons around the root.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBalloonTreeLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBalloonTreeLayout.#ctor(Nevron.Diagram.Layout.NBalloonTreeLayout)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBalloonTreeLayout.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NBalloonTreeLayout.ParentChildSpacing">
            <summary>
            Gets/sets the spacing between a parent and a child vertex in the layout direction.
            The real spacing may be different for some nodes, because the layout does not allow overlappings.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NBalloonTreeLayout.VertexSpacing">
            <summary>
            Gets/sets the minimal spacing between two vertices in the layout.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NBalloonTreeLayout.RootWedge">
            <summary>
            Gets/sets the sector angle (measured in degrees) for the children of the root vertex.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NBalloonTreeLayout.ChildrenWedge">
            <summary>
            Gets/sets the sector angle (measured in degrees) for the children of each vertex.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NBalloonTreeLayout.StartAngle">
            <summary>
            Gets/sets the start angle for the children of the root vertex, measured in degrees
            counter clockwise from the x-axis.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NBalloonTreeLayout.LayoutTree(Nevron.Diagram.DataStructures.NTree,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Overriden to perform the balloon tree layout algorithm
            </summary>
            <param name="tree"></param>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Diagram.Layout.NClassicalTreeLayout">
            <summary>
            The NClassicalTreeLayout class represents a directed tree layout, which serves as base class 
            for all classical tree layouts. 
            </summary>
            <remarks>
            In a classical tree layout, the vertex children are always arranged in a row below their parent, 
            in the respective layout direction.
            <para>
            Although in different types of classical tree layouts the depth arrangement of the tree vertices  
            can be different, they all share a VertexSpacing property, which controls the minimal distance 
            between vertices in the breadth layout dimension.
            </para>
            <para>
            You can specify whether the drawing must be compact in the breadth dimension via 
            the CompactBreadth property. When this property is set to true the layout will analyze each 
            subtree outline and place siblings subtrees with minimal breadth spacing. When this property is set to false 
            the layout will only analyze the subtree bounding box, which increases the layout speed, 
            but also increases the tree drawing area.
            </para>
            <para>
            Classical tree layouts admit both orthogonal and straight line tree drawings. 
            If the OrthogonalEdgeRouting property is set to true, the edges will be routed in a bus-like fashion.
            The bus itself can be aligned relatively to the gap, in which it resides with the help of the BusAlignment property.
            </para>
            <para>
            Classical tree layouts use an uniform parent placement, which is applicable for all parent vertices. 
            The parameters of the parent placement strategy are controlled by an instance of the 
            <see cref="T:Nevron.Diagram.Layout.NParentPlacement">NParentPlacement</see> class, 
            accessible from the ParentPlacement property.
            </para>
            <para>
            The PortStyle property specifies the predefined configuration of ports, to which the layout must attempt to glue the 
            edges end-points.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NClassicalTreeLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NClassicalTreeLayout.#ctor(Nevron.Diagram.Layout.NClassicalTreeLayout)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NClassicalTreeLayout.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NClassicalTreeLayout.VertexSpacing">
            <summary>
            Gets/sets the minimal spacing between the vertices in the breadth dimension
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NClassicalTreeLayout.OrthogonalEdgeRouting">
            <summary>
            Gets/sets whether to perform orthogonal edge routing. If set to true all edges will be routed orthogonally in a bus-like fashion. If set to false, all edges will be routed as straight lines.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NClassicalTreeLayout.BusAlignment">
            <summary>
            Gets/sets the bus alignment relative to the aesthetically available space between parent and child nodes. Only applicable if OrthogonalEdgeRouting is set to true. Accepts values in the [0-1] range. By default set to 0.5f (middle).
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NClassicalTreeLayout.PortStyle">
            <summary>
            Gets/sets the way in which the layout must glue the edges end-points to the vertices they connect. By default set to Sides. This property is disregarded in the case of orthogonal edge routing.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NClassicalTreeLayout.CompactBreadth">
            <summary>
            Gets/sets whether the breadth of the tree drawing should be compacted. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NClassicalTreeLayout.ParentPlacement">
            <summary>
            Gets/sets the parent placement attribute, which controls the placement of the parent in respect to its children or subtree.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NClassicalTreeLayout.PlugSpacing">
            <summary>
            Determines the plug spacing of the incomming edges.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NClassicalTreeLayout.UseSingleBus">
            <summary>
            If true all edges will be placed on a single bus between each pair of layers.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NCompactDepthTreeLayout">
            <summary>
            The NCompactDepthTreeLayout class represents a classical tree layout, 
            which compacts the depth of the tree drawing area.
            </summary>
            <remarks>
            In the compact depth tree layout, the depth spacing between a parent and a child vertex is always equal 
            to the value specified by the ParentChildSpacing property. This ensures that the 
            tree drawings produced by this layout are compact in depth.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCompactDepthTreeLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCompactDepthTreeLayout.#ctor(Nevron.Diagram.Layout.NCompactDepthTreeLayout)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCompactDepthTreeLayout.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NCompactDepthTreeLayout.ParentChildSpacing">
            <summary>
            Gets/sets the spacing between a parent and a child vertex in the layout direction
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NCompactDepthTreeLayout.LayoutTree(Nevron.Diagram.DataStructures.NTree,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Overriden to perform the compact tree layout algorithm
            </summary>
            <param name="tree"></param>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Diagram.Layout.NDirectedTreeLayout">
            <summary>
            The NDirectedTreeLayout class represents a tree layout, 
            which serves as base class for tree layouts, whose direction can be controlled.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDirectedTreeLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NDirectedTreeLayout.#ctor(Nevron.Diagram.Layout.NDirectedTreeLayout)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NDirectedTreeLayout.Direction">
            <summary>
            Gets/sets the direction of the tree layout. By default set to TopToBottom
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Layout.NLayeredTreeLayout">
            <summary>
            The NLayeredTreeLayout class represents a classical tree layout, 
            which arranges the tree levels in layers.
            </summary>
            <remarks>
            The layered tree layout places vertices from one level of the tree in a single layer.
            The depth spacing between adjacent layers is controlled by the LayerSpacing property.
            The depth alignment of the vertices inside the layer is controlled by the LayerAlignment property.
            <para>
            Additionally, when the OrthogonalEdgeRouting is set to true, you can instruct 
            the layout to consider the bus gap between the layers, instead of the gap between the parent and its top-most child. 
            This is controlled by the BusBetweenLayers property.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayeredTreeLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayeredTreeLayout.#ctor(Nevron.Diagram.Layout.NLayeredTreeLayout)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayeredTreeLayout.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayeredTreeLayout.LayerSpacing">
            <summary>
            Gets/sets the spacing between adjacent layers in the layout direction
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayeredTreeLayout.LayerAlignment">
            <summary>
            Gets/sets the depth alignment of the vertices inside the layer. By default set to Center.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayeredTreeLayout.BusBetweenLayers">
            <summary>
            Gets/sets whether the bus should be positioned between the layers or between the parent and its children. Only applicable if OrthogonalEdgeRouting is set to true. By default set to true.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayeredTreeLayout.LayoutTree(Nevron.Diagram.DataStructures.NTree,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Overriden to perform the layered tree layout algorithm
            </summary>
            <param name="tree"></param>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Diagram.Layout.NParentPlacement">
            <summary>
            The NParentPlacement class represents an attribute, 
            which is used to encapsulate the horizontal or vertical 
            placement of a parent tree vertex in respect to its children or subtree.
            </summary>
            <remarks>
            When the subtree of a parent vertex is layed out, the value of the Anchor property is used to determine 
            a base position (anchor) for the parent vertex to be placed at. This position is generally relative to 
            a metric of the already arranged children or subtree. Then the anchor is additionally offset with the value 
            specified by the Offset property. Finally the parent is aligned to the anchor in accordance to the 
            Alignment property setting.
            <para>
            Note that the above metioned parent placement can be performed either horizontally or vertically, 
            as the containing layout decides.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NParentPlacement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NParentPlacement.#ctor(Nevron.Diagram.Layout.NParentPlacement)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NParentPlacement.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NParentPlacement.Anchor">
            <summary>
            Gets/sets the place at which the parent tree vertices are anchored in respect to their subtree or children. By default set to ChildrenCenter.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NParentPlacement.Alignment">
            <summary>
            Gets/sets the alignment of the parent, relative to the anchor position defined by the Anchor and Offset properties. By default set to Center.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NParentPlacement.Offset">
            <summary>
            Gets/sets the constant offset applied to the parent anchor position, determined by the Anchor property. By default set to 0.0f.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NParentPlacement.PlaceParentHorizontally(Nevron.Diagram.DataStructures.NTreeVertex)">
            <summary>
            Places the specified parent horizontally in respect to its subtree or children.
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NParentPlacement.PlaceParentVertically(Nevron.Diagram.DataStructures.NTreeVertex)">
            <summary>
            Places the specified parent vertically in respect to its subtree or children.
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="T:Nevron.Diagram.Layout.NTipOverTreeLayout">
            <summary>
            The NTipOverTreeLayout class is a tree layout, which places the children 
            of a vertex in a single row or column.
            </summary>
            <remarks>
            The tip-over tree layout implements an orthogontal tree drawing algorithm, which recursively arranges 
            the children subtrees of a tree vertex in either a single row or a single column.
            <para>
            The children placement can be specified on a per vertex basis. If a vertex does not 
            provide a concrete value for this parameter it is by default obtained from the ChildrenPlacement property.
            </para>
            <para>
            Unlike classical tree layouts, this type of layout does not use an uniform parent placement. 
            Based on whether the parent children must be arranged in a row or col, the layout uses the instance of the 
            <see cref="T:Nevron.Diagram.Layout.NParentPlacement">NParentPlacement</see> class, accessible from 
            the RowParentPlacement or the ColParentPlacement properties respectively.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NTipOverTreeLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NTipOverTreeLayout.#ctor(Nevron.Diagram.Layout.NTipOverTreeLayout)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NTipOverTreeLayout.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NTipOverTreeLayout.Compact">
            <summary>
            Gets/sets whether the layout should attempt to compact the tree drawing area. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NTipOverTreeLayout.HorizontalSpacing">
            <summary>
            Gets/sets the minimal spacing between vertices in the horizontal dimension
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NTipOverTreeLayout.VerticalSpacing">
            <summary>
            Gets/sets the minimal spacing between vertices in the vertical dimension.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NTipOverTreeLayout.RowBusFactor">
            <summary>
            Gets/sets the bus alignment relative to the aesthetically available space between parent and child nodes. Only applicable for edges, which connect children arranged in Row. Accepts values in the [0-1] range. By default set to 0.5f (middle).
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NTipOverTreeLayout.ColumnBusFactor">
            <summary>
            Gets/sets the bus alignment relative to the HorizontalSpacing property. Only applicable for edges, which connect children arranged in Column. Accepts values in the [0-1] range. By default set to 0.5f (middle).
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NTipOverTreeLayout.ChildrenPlacement">
            <summary>
            Gets/sets the default children placement. If a vertex does not provide a local value for this parameter, it will use this property value. By default set to Row.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NTipOverTreeLayout.LeafsPlacement">
            <summary>
            Gets/sets the default leafs placement. If a leaf does not provide a local value for this parameter, it will use this property value. By default set to Inherit.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NTipOverTreeLayout.RowParentPlacement">
            <summary>
            Gets/sets the placement of the parent vertices whose children are arranged in a row.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NTipOverTreeLayout.ColLeftParentPlacement">
            <summary>
            Gets/sets the placement of the parent vertices whose children are arranged in a left column.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NTipOverTreeLayout.ColRightParentPlacement">
            <summary>
            Gets/sets the placement of the parent vertices whose children are arranged in a right column.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NTipOverTreeLayout.OnLayingOutTree(Nevron.Diagram.DataStructures.NTree,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called before the layout of the specified tree
            </summary>
            <param name="tree"></param>
            <param name="context"></param> 
            <returns>true if the layout can be performed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.Layout.NTipOverTreeLayout.LayoutTree(Nevron.Diagram.DataStructures.NTree,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Overriden to perform the tip-over tree layout algorithm
            </summary>
            <param name="tree"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NTipOverTreeLayout.CreateVertexBody">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Layout.NTreeLayout">
            <summary>
            The NTreeLayout class represents a graph parts layout, whose regions are trees. 
            It serves as a base class for all tree layouts.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NTreeLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NTreeLayout.#ctor(Nevron.Diagram.Layout.NTreeLayout)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="E:Nevron.Diagram.Layout.NTreeLayout.LayingOutTree">
            <summary>
            Occurswhen a tree is about to layed out by this layout.
            </summary>
        </member>
        <member name="E:Nevron.Diagram.Layout.NTreeLayout.LayedOutTree">
            <summary>
            Occurs when a tree has been layed out by this layout.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NTreeLayout.CreateRegions(Nevron.Collections.NList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Overriden to split the object regions into trees, 
            and create a tree region for each resulting tree.
            </summary>
            <param name="objects"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NTreeLayout.LayoutRegionContent(Nevron.Diagram.Layout.NRegion,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called to layout the content of the specified region.
            </summary>
            <param name="region"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NTreeLayout.CreateVertexBody">
            <summary>
            Called in the tree building process to create a body for each vertex
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NTreeLayout.CreateEdgeBody">
            <summary>
            Called in the tree building process to create a body for each edge
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NTreeLayout.OnLayingOutTree(Nevron.Diagram.DataStructures.NTree,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called before the layout of the specified tree
            </summary>
            <remarks>
            This implementation raises the LayingOutTree event
            </remarks>
            <param name="tree"></param>
            <param name="context"></param> 
            <returns>true if the layout can be performed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.Layout.NTreeLayout.LayoutTree(Nevron.Diagram.DataStructures.NTree,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called to layout the specified tree
            </summary>
            <param name="tree"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NTreeLayout.OnLayedOutTree(Nevron.Diagram.DataStructures.NTree,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Called after the layout of the specified tree
            </summary>
            <remarks>
            This implementation raises the LayedOutTree event
            </remarks>
            <param name="tree"></param>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Diagram.Layout.NTreeRegion">
            <summary>
            The NTreeRegion class represents a layout item, whose content is a tree
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NTreeRegion.#ctor(Nevron.Diagram.DataStructures.NTree)">
            <summary>
            Initializer constructor
            </summary>
            <param name="tree">tree, which represents the item content</param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NTreeRegion.Tree">
            <summary>
            Obtains a reference to the tree for which the tree layout item was constructed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NTreeRegion.Translate(System.Single,System.Single)">
            <summary>
            Translates the item
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NTreeRegion.GetPartsEnumerator">
            <summary>
            Must override to provide a graph parts enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.Layout.NLayout">
            <summary>
            The NLayout abstract class serves as base class for all layout algorithms
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayout.#ctor(Nevron.Diagram.Layout.NLayout)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayout.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in the layout 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayout.Resolution">
            <summary>
            Gets/sets the resolution used for convertion between device dependant and device independant measurement units
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayout.MeasurementUnit">
            <summary>
            Gets/sets the measurement unit of the node
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayout.ToString">
            <summary>
            Overriden to return the layout name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayout.Layout(Nevron.Collections.NList,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Applies the layout to the specified objects
            </summary>
            <param name="objects">objects to layout</param>
            <param name="context">layout context</param> 
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayout.AppendPerfromanceLine">
            <summary>
            Appends a new line to the performance info.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayout.AppendPerformanceSeparator">
            <summary>
            Appends a separator to the performance info.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayout.AppendPerformanceInfo(System.String,System.String)">
            <summary>
            Appends the provided performance data to the performance info.
            </summary>
            <param name="description"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayout.AppendPerformanceInfo(System.String,System.Int32)">
            <summary>
            Appends the provided performance data to the performance info.
            </summary>
            <param name="description"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayout.AppendPerformanceInfo(System.String,System.Diagnostics.Stopwatch)">
            <summary>
            Appends the provided performance data to the performance info.
            </summary>
            <param name="description"></param>
            <param name="stopwatch"></param>
        </member>
        <member name="M:Nevron.Diagram.Layout.NLayout.AppendPerformanceInfo(System.Diagnostics.Stopwatch[])">
            <summary>
            Appends the provided performance data to the performance info.
            </summary>
            <param name="stopwatches"></param>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayout.Name">
            <summary>
            Gets/sets the name of the layout
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayout.MultiThreaded">
            <summary>
            Determines whether the layout is allowed to use multiple threads for its calculations. If set to true, this will lead to improved perfomance on multi-core processors.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.Layout.NLayout.PerformanceInfo">
            <summary>
            Provides information for the performance of the layout.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NDiagramLoadAssemblyType">
            <summary>
            Used to explicitly load the Nevron.Diagram.dll assembly.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NDLicenseProvider">
            <summary>
            License provider for instances declared in the Nevron.Diagram.dll assembly
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Routing.NRouteEnd">
            <summary>
            The NRouteEnd class represents the start or end of a route 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Routing.NRouteEnd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Routing.NRouteEnd.#ctor(Nevron.GraphicsCore.NPointF,System.Single,System.Boolean,Nevron.GraphicsCore.NRectangleF,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="location"></param>
            <param name="direction"></param>
            <param name="validDirection"></param>
            <param name="box"></param>
            <param name="validBox"></param>
        </member>
        <member name="F:Nevron.Diagram.Routing.NRouteEnd.Location">
            <summary>
            The location of the route end point
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Routing.NRouteEnd.ValidDirection">
            <summary>
            Indicates whether the direction is valid
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Routing.NRouteEnd.Direction">
            <summary>
            The route end point direction (in radians)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Routing.NRouteEnd.Box">
            <summary>
            The route end point box which it must escape
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Routing.NRouteEnd.ValidBox">
            <summary>
            Indicates whether the box is valid
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Routing.NRouteRequirements">
            <summary>
            An instance of this class is used to encapsulate the requirements of a route
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Routing.NRouteRequirements.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Routing.NRouteRequirements.RoutedShape">
            <summary>
            Routed shape
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Routing.NRouteRequirements.Type">
            <summary>
            Route type
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Routing.NRouteRequirements.Start">
            <summary>
            Route start
            </summary>
        </member>
        <member name="F:Nevron.Diagram.Routing.NRouteRequirements.End">
            <summary>
            Route end
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NDiagramEventSinkService">
            <summary>
            The NDiagramEventSinkService class represent an extended node event sink service, to which NDiagramNode instances try to connect to
            </summary>
            <remarks>
            Since NDiagramNodeEventSinkService serves as base class for document and view event sink services, 
            nodes can transparently fire events regardless of whether they are hosted in a document or in a view.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.#ctor(System.String,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name">name of the service</param>
            <param name="started">whether the service is initially started</param> 
        </member>
        <member name="E:Nevron.Diagram.NDiagramEventSinkService.NodeBoundsChanging">
            <summary>
            Fired when the bounds of a node are about to change
            </summary>
            <remarks>
            You can install a node event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDiagramEventSinkService.NodeBoundsChanged">
            <summary>
            Fired when the bounds of a node have changed
            </summary>
            <remarks>
            You can install a node event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDiagramEventSinkService.NodeTransformChanging">
            <summary>
            Fired when the transformation of a node is about to change
            </summary>
            <remarks>
            You can install a node event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDiagramEventSinkService.NodeTransformChanged">
            <summary>
            Fired when the transformation of a node has been changed
            </summary>
            <remarks>
            You can install a node event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDiagramEventSinkService.NodeMouseEnter">
            <summary>
            Fired when the mouse entered a node
            </summary>
            <remarks>
            You can install a node event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDiagramEventSinkService.NodeMouseMove">
            <summary>
            Fired when the mouse moves in a node
            </summary>
            <remarks>
            You can install a node event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDiagramEventSinkService.NodeMouseHover">
            <summary>
            Fired when the mouse hovers in a node
            </summary>
            <remarks>
            You can install a node event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDiagramEventSinkService.NodeMouseDown">
            <summary>
            Fired when a mouse button is down in a node
            </summary>
            <remarks>
            You can install a node event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDiagramEventSinkService.NodeMouseUp">
            <summary>
            Fired when a mouse button went up in a node
            </summary>
            <remarks>
            You can install a node event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDiagramEventSinkService.NodeMouseWheel">
            <summary>
            Fired when the mouse wheel was moved in a node
            </summary>
            <remarks>
            You can install a node event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDiagramEventSinkService.NodeMouseLeave">
            <summary>
            Fired when the mouse leaves a node
            </summary>
            <remarks>
            You can install a node event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDiagramEventSinkService.NodeClick">
            <summary>
            Fired when the user clicked on a node
            </summary>
            <remarks>
            You can install a node event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDiagramEventSinkService.NodeDoubleClick">
            <summary>
            Fired when the user double clicked on a node
            </summary>
            <remarks>
            You can install a node event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDiagramEventSinkService.NodeKeyDown">
            <summary>
            Fired when a key is down
            </summary>
            <remarks>
            You can install a node event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDiagramEventSinkService.NodeKeyUp">
            <summary>
            Fired when a key is up
            </summary>
            <remarks>
            You can install a node event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDiagramEventSinkService.NodeKeyPress">
            <summary>
            Fired when a key is pressed
            </summary>
            <remarks>
            You can install a node event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDiagramEventSinkService.NodeDragEnter">
            <summary>
            Fired when a dragged object entered a node
            </summary>
            <remarks>
            You can install a node event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDiagramEventSinkService.NodeDragOver">
            <summary>
            Fired when a dragged object is moved over a node
            </summary>
            <remarks>
            You can install a node event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDiagramEventSinkService.NodeDragDrop">
            <summary>
            Fired when a dragged object is dropped on a node
            </summary>
            <remarks>
            You can install a node event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDiagramEventSinkService.NodeDragLeave">
            <summary>
            Fired when a dragged object leaves a node
            </summary>
            <remarks>
            You can install a node event listener for this event
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.NDiagramEventSinkService.IsInputKey">
            <summary>
            Delegate for the is InputKey query
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDiagramEventSinkService.IsInputChar">
            <summary>
            Delegate for the is InputChar query
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.FireNodeBoundsChanging(Nevron.Dom.INNode,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Fires the NodeBoundsChanging event
            </summary>
            <param name="node">node whose bounds are changing</param>
            <param name="newBounds">new node bounds</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.FireNodeBoundsChanged(Nevron.Dom.INNode)">
            <summary>
            Fires the NodeBoundsChanged event
            </summary>
            <param name="node">node whose bounds have changed</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.FireNodeTransformChanging(Nevron.Dom.INNode,Nevron.GraphicsCore.NMatrix2DF)">
            <summary>
            Fires the NodeTransformChanging event
            </summary>
            <param name="node">node whose transform is changing</param>
            <param name="newTransform">new node transform</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.FireNodeTransformChanged(Nevron.Dom.INNode)">
            <summary>
            Fires the NodeTransformChanged event
            </summary>
            <param name="node">node whose transform has changed</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.FireNodeMouseEnter(Nevron.Dom.INNode,Nevron.Diagram.NViewEventArgs)">
            <summary>
            Fires the NodeMouseEnter event
            </summary>
            <param name="node">node for which to fire the event</param>
            <param name="args">event arguments received from the view</param>
            <returns>true if the event was handled, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.FireNodeMouseMove(Nevron.Dom.INNode,Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Fires the NodeMouseMove event
            </summary>
            <param name="node">node for which to fire the event</param>
            <param name="args">event arguments received from the view</param>
            <returns>true if the event was handled, otherwise false</returns>
            <returns>true if the event was handled, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.FireNodeMouseHover(Nevron.Dom.INNode,Nevron.Diagram.NViewEventArgs)">
            <summary>
            Fires the NodeMouseHover event
            </summary>
            <param name="node">node for which to fire the event</param>
            <param name="args">event arguments received from the view</param>
            <returns>true if the event was handled, otherwise false</returns>
            <returns>true if the event was handled, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.FireNodeMouseDown(Nevron.Dom.INNode,Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Fires the NodeMouseDown event
            </summary>
            <param name="node">node for which to fire the event</param>
            <param name="args">event arguments received from the view</param>
            <returns>true if the event was handled, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.FireNodeMouseUp(Nevron.Dom.INNode,Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Fires the NodeMouseUp event
            </summary>
            <param name="node">node for which to fire the event</param>
            <param name="args">event arguments received from the view</param>
            <returns>true if the event was handled, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.FireNodeMouseWheel(Nevron.Dom.INNode,Nevron.Diagram.NMouseEventArgs)">
            <summary>
            Fires the NodeMouseWheel event
            </summary>
            <param name="node">node for which to fire the event</param>
            <param name="args">event arguments received from the view</param>
            <returns>true if the event was handled, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.FireNodeMouseLeave(Nevron.Dom.INNode,Nevron.Diagram.NViewEventArgs)">
            <summary>
            Fires the NodeMouseLeave event
            </summary>
            <param name="node">node for which to fire the event</param>
            <param name="args">event arguments received from the view</param>
            <returns>true if the event was handled, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.FireNodeClick(Nevron.Dom.INNode,Nevron.Diagram.NViewEventArgs)">
            <summary>
            Fires the NodeClick event
            </summary>
            <param name="node">node for which to fire the event</param>
            <param name="args">event arguments received from the view</param>
            <returns>true if the event was handled, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.FireNodeDoubleClick(Nevron.Dom.INNode,Nevron.Diagram.NViewEventArgs)">
            <summary>
            Fires the NodeDoubleClick event
            </summary>
            <param name="node">node for which to fire the event</param>
            <param name="args">event arguments received from the view</param>
            <returns>true if the event was handled, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.FireNodeKeyDown(Nevron.Dom.INNode,Nevron.Diagram.NKeyEventArgs)">
            <summary>
            Fires the NodeKeyDown event
            </summary>
            <param name="node">node for which to fire the event</param>
            <param name="args">event arguments received from the view</param>
            <returns>true if the event was handled, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.FireNodeKeyUp(Nevron.Dom.INNode,Nevron.Diagram.NKeyEventArgs)">
            <summary>
            Fires the NodeKeyUp event
            </summary>
            <param name="node">node for which to fire the event</param>
            <param name="args">event arguments received from the view</param>
            <returns>true if the event was handled, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.FireNodeKeyPress(Nevron.Dom.INNode,Nevron.Diagram.NKeyPressEventArgs)">
            <summary>
            Fires the NodeKeyPress event
            </summary>
            <param name="node">node for which to fire the event</param>
            <param name="args">event arguments received from the view</param>
            <returns>true if the event was handled, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.FireNodeDragEnter(Nevron.Dom.INNode,Nevron.Diagram.NDragEventArgs)">
            <summary>
            Fires the NodeDragEnter event
            </summary>
            <param name="node">node for which to fire the event</param>
            <param name="args">event arguments received from the view</param>
            <returns>true if the event was handled, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.FireNodeDragOver(Nevron.Dom.INNode,Nevron.Diagram.NDragEventArgs)">
            <summary>
            Fires the NodeDragOver event
            </summary>
            <param name="node">node for which to fire the event</param>
            <param name="args">event arguments received from the view</param>
            <returns>true if the event was handled, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.FireNodeDragDrop(Nevron.Dom.INNode,Nevron.Diagram.NDragEventArgs)">
            <summary>
            Fires the NodeDragDrop event
            </summary>
            <param name="node">node for which to fire the event</param>
            <param name="args">event arguments received from the view</param>
            <returns>true if the event was handled, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.FireNodeDragLeave(Nevron.Dom.INNode,Nevron.Diagram.NViewEventArgs)">
            <summary>
            Fires the NodeDragLeave event
            </summary>
            <param name="node">node for which to fire the event</param>
            <param name="args">event arguments received from the view</param>
            <returns>true if the event was handled, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.QueryIsInputKey(Nevron.Dom.INNode,System.Windows.Forms.Keys)">
            <summary>
            Queries whether the specified key is an input key for the specified node
            </summary>
            <remarks>
            This implementation will try to call the DelegateIsInputKey delegate. 
            If no delegate is provided it will return false.
            </remarks>
            <param name="node">node</param>
            <param name="keyData">key</param>
            <returns>true if key is input key for the specified node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDiagramEventSinkService.QueryIsInputChar(Nevron.Dom.INNode,System.Char)">
            <summary>
            Queries whether the specified char is an input char for the specified node
            </summary>
            <remarks>
            This implementation will try to call the DelegateIsInputChar delegate. 
            If no delegate is provided it will return false.
            </remarks>
            <param name="node">node</param>
            <param name="charCode">char</param>
            <returns>true if char is input char for the specified node, otherwise false</returns>
        </member>
        <member name="F:Nevron.Diagram.NDiagramEventSinkService.keyNodeBoundsChanging">
            <summary>
            Key for the NodeBoundsChanging event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDiagramEventSinkService.keyNodeBoundsChanged">
            <summary>
            Key for the NodeBoundsChanged event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDiagramEventSinkService.keyNodeTransformChanging">
            <summary>
            Key for the NodeTransfornChanging event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDiagramEventSinkService.keyNodeTransformChanged">
            <summary>
            Key for the NodeTransformChanged event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDiagramEventSinkService.keyNodeMouseEnter">
            <summary>
            Key for the NodeMouseEnter event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDiagramEventSinkService.keyNodeMouseMove">
            <summary>
            Key for the NodeMouseMove event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDiagramEventSinkService.keyNodeMouseHover">
            <summary>
            Key for the NodeMouseHover event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDiagramEventSinkService.keyNodeMouseDown">
            <summary>
            Key for the NodeMouseDown event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDiagramEventSinkService.keyNodeMouseUp">
            <summary>
            Key for the NodeMouseUp event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDiagramEventSinkService.keyNodeMouseWheel">
            <summary>
            Key for the NodeMouseWheel event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDiagramEventSinkService.keyNodeMouseLeave">
            <summary>
            Key for the NodeMouseLeave event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDiagramEventSinkService.keyNodeClick">
            <summary>
            Key for the NodeClick event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDiagramEventSinkService.keyNodeDoubleClick">
            <summary>
            Key for the NodeDoubleClick event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDiagramEventSinkService.keyNodeKeyDown">
            <summary>
            Key for the NodeKeyDown event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDiagramEventSinkService.keyNodeKeyUp">
            <summary>
            Key for the NodeKeyUp event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDiagramEventSinkService.keyNodeKeyPress">
            <summary>
            Key for the NodeKeyPress event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDiagramEventSinkService.keyNodeDragEnter">
            <summary>
            Key for the NodeDragEnter event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDiagramEventSinkService.keyNodeDragOver">
            <summary>
            Key for the NodeDragOver event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDiagramEventSinkService.keyNodeDragDrop">
            <summary>
            Key for the NodeDragDrop event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDiagramEventSinkService.keyNodeDragLeave">
            <summary>
            Key for the NodeDragLeave event
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NDiagramSmartPaintService">
            <summary>
            The NDiagramSmartPaintService class represents a smart invalidation service, 
            which nodes use to invalidate themselves in document and view scenes
            </summary>
            <remarks>
            NDiagramNode instances try to connect to a service of this type. Since NDiagramSmartPaintService serves as base class for document and view smart paint services, 
            nodes can transparently invalidate themselves regardless of the scene in which they currently reside.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDiagramSmartPaintService.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDiagramSmartPaintService.#ctor(System.String,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name">name of the service</param>
            <param name="started">whether the service is initially started</param> 
        </member>
        <member name="M:Nevron.Diagram.NDiagramSmartPaintService.InvalidateSceneRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Invalidates a rectangle specified in scene coordinates, which has the specified dirty inflate in world coordinates
            </summary>
            <param name="sceneRect">rectangle in scene coordinates</param>
            <param name="worldInflate">inflate in world coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramSmartPaintService.InvalidateWorldRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Invalidates a rectangle specified in world coordinates, which has the specified dirty inflate in world coordinates
            </summary>
            <param name="worldRect">rectangle in world coordinates</param>
            <param name="worldInflate">inflate in world coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramSmartPaintService.InvalidateScenePoint(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Invalidates a point defined with center in scene coordinates and size in device coordinates
            </summary>
            <param name="scenePoint">point in scene coordinates</param>
            <param name="deviceSize">point size in device coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramSmartPaintService.InvalidateSceneInfiniteLine(System.Single,System.Boolean,System.Single)">
            <summary>
            Invalidates an infinite horizontal or vertical line with coordinate specified in scene coordinates and width specified in world coordinates
            </summary>
            <param name="sceneCoordinate">coordinate in scene coordinates</param>
            <param name="horizontal">true if the line is horizontal, false if the line is vertical</param>
            <param name="worldInflate">inflate in world coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramSmartPaintService.InvalidateNodeInstance(Nevron.Dom.INNode)">
            <summary>
            Invalidates the instance of the specified node 
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Diagram.NDiagramSmartPaintService.Invalidate">
            <summary>
            Invalidates the entire drawing area
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NDocumentEventSinkService">
            <summary>
            The NDocumentEventSinkService class represents the event sink service used by diagram documents
            </summary>
            <remarks>
            An instance of this class can be obtained from the EventSinkService property of the NDrawingDocument and NLibrary class.
            NDocumentEventSinkService enhances its base NEventSinkService with the following events:
            <list type="bullet">
            <item>
            	<term>Document Modified event</term>
            	<description>
            	This event is fired when the document has been modified
            	</description>
            </item>
            <item>
            	<term>Document Views Changed event</term>
            	<description>
            	This event is fired when the views displaying the document have changed
            	</description>
            </item>
            <item>
            	<term>Document Active Layer changed event</term>
            	<description>
            	This event is fired when the active layer of the document has changed (applicable for drawing documents only)
            	</description>
            </item>
            <item>
            	<term>Connections</term>
            	<description>
            	the (Connecting - Connected) events pair is fired before and after a connection between two elements is created.
            	The (Disconnecting - Disconnected) events pair is fired before and after a connection between two elements is destroyed.
            	</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDocumentEventSinkService.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocumentEventSinkService.#ctor(System.String,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name">name of the service</param>
            <param name="started">whether the service is initially started</param> 
        </member>
        <member name="M:Nevron.Diagram.NDocumentEventSinkService.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Updates the references stored by the object
            </summary>
            <remarks>
            Overriden to store a reference to a NDocument type instance
            </remarks>
            <param name="provider">provider from which to obtain references</param>
        </member>
        <member name="P:Nevron.Diagram.NDocumentEventSinkService.Document">
            <summary>
            Obtains a reference to the document to which this service is connected
            </summary>
        </member>
        <member name="E:Nevron.Diagram.NDocumentEventSinkService.DocumentModified">
            <summary>
            Fired when the document IsModified property is set to true
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDocumentEventSinkService.DocumentViewsChanged">
            <summary>
            Fired when the views displaying the document have changed
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDocumentEventSinkService.DocumentActiveLayerChanged">
            <summary>
            Fired when the active layer of the document has changed (applicable for drawing documents only)
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDocumentEventSinkService.Connecting">
            <summary>
            Fired when a connection between two nodes is about to be created
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDocumentEventSinkService.Connected">
            <summary>
            Fired when a connection between two nodes has been created
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDocumentEventSinkService.Disconnecting">
            <summary>
            Fired when a connection between two nodes is about to be destroyed
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDocumentEventSinkService.Disconnected">
            <summary>
            Fired when a connection between two nodes has been destroyed
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDocumentEventSinkService.CanSnapStartPlug">
            <summary>
            Fired when a start plug is about to be snapped to a port.
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.NDocumentEventSinkService.CanSnapEndPlug">
            <summary>
            Fired when an end plug is about to be snapped to a port.
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDocumentEventSinkService.FireDocumentModified">
            <summary>
            Fires the DocumentModified event
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocumentEventSinkService.FireDocumentViewsChanged">
            <summary>
            Fires the DocumentViewsChanged event
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocumentEventSinkService.FireDocumentActiveLayerChanged">
            <summary>
            Fires the DocumentActiveLayerChanged event
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocumentEventSinkService.FireConnecting(System.Guid,System.Guid)">
            <summary>
            Fires the Connecting event for the elements with the specified unique ids
            </summary>
            <param name="uid1">uid1</param>
            <param name="uid2">uid2</param>
            <returns>true if the connection can be created, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocumentEventSinkService.FireConnected(System.Guid,System.Guid)">
            <summary>
            Fires the Connected event for the elements with the specified unique ids
            </summary>
            <param name="uid1">uid1</param>
            <param name="uid2">uid2</param>
        </member>
        <member name="M:Nevron.Diagram.NDocumentEventSinkService.FireDisconnecting(System.Guid,System.Guid)">
            <summary>
            Fires the Disconnecting event for the elements with the specified unique ids
            </summary>
            <param name="uid1">uid1</param>
            <param name="uid2">uid2</param>
            <returns>true if the connection can be destroyed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocumentEventSinkService.FireDisconnected(System.Guid,System.Guid)">
            <summary>
            Fires the Disconnected event for the elements with the specified unique ids
            </summary>
            <param name="uid1">uid1</param>
            <param name="uid2">uid2</param>
        </member>
        <member name="M:Nevron.Diagram.NDocumentEventSinkService.FireCanSnapStartPlug(Nevron.Diagram.NShape,Nevron.Diagram.NPort)">
            <summary>
            Fires the can connect start plug event
            </summary>
            <param name="connector"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NDocumentEventSinkService.FireCanSnapEndPlug(Nevron.Diagram.NShape,Nevron.Diagram.NPort)">
            <summary>
            Fires the can connect end plug event
            </summary>
            <param name="connector"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Diagram.NDocumentEventSinkService.keyDocumentModified">
            <summary>
            Key for the DocumentModified event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDocumentEventSinkService.keyDocumentViewsChanged">
            <summary>
            Key for the DocumentViewsChanged event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDocumentEventSinkService.keyDocumentActiveLayerChanged">
            <summary>
            Key for the DocumentActiveLayerChanged event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDocumentEventSinkService.keyConnecting">
            <summary>
            Key for the Connecting event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDocumentEventSinkService.keyConnected">
            <summary>
            Key for the Connected event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDocumentEventSinkService.keyDisconnecting">
            <summary>
            Key for the Disconnecting event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDocumentEventSinkService.keyDisconnected">
            <summary>
            Key for the Disconnected event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDocumentEventSinkService.keyCanSnapStartPlug">
            <summary>
            Key for the CanSnapStartPlug event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDocumentEventSinkService.keyCanSnapEndPlug">
            <summary>
            Key for the CanSnapEndPlug event
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NDocumentHistoryService">
            <summary>
            The NDocumentHistoryService class represents the history service used by diagram documents
            </summary>
            <remarks>
            An instance of this class can be obtained from the HistoryService property of the NDrawingDocument and NLibrary class.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDocumentHistoryService.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocumentHistoryService.#ctor(System.String,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name">name of the service</param>
            <param name="started">whether the service is initially started</param> 
        </member>
        <member name="M:Nevron.Diagram.NDocumentHistoryService.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Updates the references stored by the object
            </summary>
            <remarks>
            Overriden to store a reference to a NDocument type instance
            </remarks>
            <param name="provider">provider from which to obtain references</param>
        </member>
        <member name="P:Nevron.Diagram.NDocumentHistoryService.Document">
            <summary>
            Obtains a reference to the document to which this service is connected
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocumentHistoryService.Undo">
            <summary>
            Undoes the last operation in the undo stack
            </summary>
            <remarks>
            Overriden to raise the document IsModified flag and to refresh all document views.
            </remarks>
            <returns>true if undoing succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocumentHistoryService.Redo">
            <summary>
            Redoes the last operation in the redo stack
            </summary>
            <remarks>
            Overriden to raise the document IsModified flag and to refresh all document views.
            </remarks>
            <returns>true if redoing succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NDocumentHistoryService.OnOperationRecordingRequested">
            <summary>
            Overriden to raise the document IsModified flag
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NDocumentSmartPaintService">
            <summary>
            The NDocumentSmartPaintService class represents the smart paint service used by documents
            </summary>
            <remarks>
            An instance of this class can be obtained from the SmartPaintService property of the NDocument class.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NDocumentSmartPaintService.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDocumentSmartPaintService.#ctor(System.String,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name">name of the service</param>
            <param name="started">whether the service is initially started</param> 
        </member>
        <member name="M:Nevron.Diagram.NDocumentSmartPaintService.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Updates the references stored by the object
            </summary>
            <remarks>
            Overriden to store a reference to a NDocument type instance
            </remarks>
            <param name="provider">provider from which to obtain references</param>
        </member>
        <member name="M:Nevron.Diagram.NDocumentSmartPaintService.InvalidateSceneRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Invalidates a rectangle specified in scene coordinates, which has the specified dirty inflate in world coordinates
            </summary>
            <param name="sceneRect">rect in scene coordinaets</param>
            <param name="worldInflate">inflate in world coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.NDocumentSmartPaintService.InvalidateWorldRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Invalidates a rectangle specified in world coordinates, which has the specified dirty inflate in world coordinates
            </summary>
            <param name="worldRect">rectangle in world coordinates</param>
            <param name="worldInflate">inflate in world coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.NDocumentSmartPaintService.InvalidateScenePoint(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Invalidates a point defined with center in scene coordinates and size in device coordinates
            </summary>
            <param name="scenePoint">point in scene coordinates</param>
            <param name="deviceSize">point size in device coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.NDocumentSmartPaintService.InvalidateSceneInfiniteLine(System.Single,System.Boolean,System.Single)">
            <summary>
            Invalidates an infinite horizontal or vertical line with coordinate specified in scene coordinates and width specified in world coordinates
            </summary>
            <param name="sceneCoordinate">coordinate of the line</param>
            <param name="horizontal">true of the line is horizontal, false if it is vertical</param>
            <param name="worldInflate">inflate in world cooordinates</param>
        </member>
        <member name="M:Nevron.Diagram.NDocumentSmartPaintService.InvalidateNodeInstance(Nevron.Dom.INNode)">
            <summary>
            Invalidates the instance of the specified node 
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Diagram.NDocumentSmartPaintService.Invalidate">
            <summary>
            Invalidates the entire drawing area
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDocumentSmartPaintService.Document">
            <summary>
            Obtains a referencve to the document to which this service is attached
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NFunctions">
            <summary>
            Namespace class for static functions
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NFunctions.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NFunctions.ComputeNodesBounds(Nevron.Dom.NNodeList,Nevron.Filters.NFilter)">
            <summary>
            Computes the bounds of the specified nodes
            </summary>
            <param name="nodes"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NFunctions.UnionPermissions(Nevron.Dom.NNodeList)">
            <summary>
            Performs a union of elements permissions
            </summary>
            <param name="elements"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.NFunctions.NumberVertices(Nevron.Diagram.DataStructures.NGraph)">
            <summary>
            Numbers the vertices in the graph assigning them text labels from 1 to vertexCount.
            </summary>
            <param name="graph"></param>
        </member>
        <member name="T:Nevron.Diagram.NSceneTree">
            <summary>
            Namespace class for static operations with scene trees and nodes residing in scene trees.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NSceneTree.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NSceneTree.Ancestors(Nevron.Dom.INNode,Nevron.Filters.INFilter)">
            <summary>
            Finds all node ancestors, which satisfy the specified filter
            </summary>
            <param name="node">node whose ancestors to obtain</param>
            <param name="filter">ancestors filter</param>
            <returns>ancestors, which satisfies the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.NSceneTree.FirstAncestorINBridgeManager(Nevron.Dom.INNode)">
            <summary>
            Finds the first node ancestor of type INBridgeManager
            </summary>
            <param name="node">node whose ancestor to obtain</param>
            <returns>first INBridgeManager ancestor, or null if such ancestor does not exist</returns>
        </member>
        <member name="M:Nevron.Diagram.NSceneTree.FirstAncestorNLayer(Nevron.Dom.INNode)">
            <summary>
            Finds the first node ancestor of type NLayer
            </summary>
            <param name="node">node whose ancestor to obtain</param>
            <returns>first NLayer ancestor, or null if such ancestor does not exist</returns>
        </member>
        <member name="M:Nevron.Diagram.NSceneTree.FirstAncestorNGroup(Nevron.Dom.INNode)">
            <summary>
            Finds the first node ancestor of type NGroup
            </summary>
            <param name="node">node whose ancestor to obtain</param>
            <returns>first NGroup ancestor, or null if such ancestor does not exist</returns>
        </member>
        <member name="M:Nevron.Diagram.NSceneTree.FirstAncestorNDocument(Nevron.Dom.INNode)">
            <summary>
            Finds the first node ancestor of type NDocument
            </summary>
            <param name="node">node whose ancestor to obtain</param>
            <returns>first NDocument ancestor, or null if such ancestor does not exist</returns>
        </member>
        <member name="M:Nevron.Diagram.NSceneTree.FirstAncestorINTransformable(Nevron.Dom.INNode)">
            <summary>
            Finds the first node ancestor of type INTransformable
            </summary>
            <param name="node">node whose ancestor to obtain</param>
            <returns>first INTransformable ancestor, or null if such ancestor does not exist</returns>
        </member>
        <member name="M:Nevron.Diagram.NSceneTree.FirstAncestorINShapeObserver(Nevron.Dom.INNode)">
            <summary>
            Finds the first node ancestor of type INShapeObserver
            </summary>
            <param name="node">node whose ancestor to obtain</param>
            <returns>first INShapeObserver ancestor, or null if such ancestor does not exist</returns>
        </member>
        <member name="M:Nevron.Diagram.NSceneTree.FirstAncestorINLayerObserver(Nevron.Dom.INNode)">
            <summary>
            Finds the first node ancestor of type INLayerObserver
            </summary>
            <param name="node">node whose ancestor to obtain</param>
            <returns>first INLayerObserver ancestor, or null if such ancestor does not exist</returns>
        </member>
        <member name="M:Nevron.Diagram.NSceneTree.FirstAncestorNAggregateModel(Nevron.Dom.INNode)">
            <summary>
            Finds the first node ancestor of type NAggregateModel
            </summary>
            <param name="node">node whose ancestor to obtain</param>
            <returns>first NAggregateModel ancestor, or null if such ancestor does not exist</returns>
        </member>
        <member name="M:Nevron.Diagram.NSceneTree.FirstAncestorINStyleable(Nevron.Dom.INNode)">
            <summary>
            Finds the first node ancestor of type INStyle
            </summary>
            <param name="node">node whose ancestor to obtain</param>
            <returns>first INStyle ancestor, or null if such ancestor does not exist</returns>
        </member>
        <member name="M:Nevron.Diagram.NSceneTree.FirstAncestorINDiagramElementComposite(Nevron.Dom.INNode)">
            <summary>
            Finds the first node ancestor of type INDiagramElementComposite
            </summary>
            <param name="node">node whose ancestor to obtain</param>
            <returns>first INDiagramElementComposite ancestor, or null if such ancestor does not exist</returns>
        </member>
        <member name="M:Nevron.Diagram.NSceneTree.IsVisible(Nevron.Dom.INNode)">
            <summary>
            Determines whether the node is visible
            </summary>
            <remarks>
            This method will perform the following actions:
            <para>
            1. Check whether the node implements the INVisible interface and whether its Visible property is true. 
            If one of these conditions fails it will return false.
            </para>
            <para>
            2. If the node has no parent it will return true
            </para>
            <para>
            3. If the node has a parent it will return the IsVisible value for it.
            </para>para>
            </remarks>
            <param name="node">node whose visibility to determine</param>
            <returns>true if the node is visible, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NSceneTree.GetConstrainBounds(Nevron.Dom.NNodeList,Nevron.Filters.INFilter)">
            <summary>
            Calculates the constrain bounds of the specified nodes,
            by intersecting the constrain bounds of each shape and obeying to the specified filter
            </summary>
            <param name="nodes">nodes whose constrain bounds to obtain</param>
            <param name="filter">filter to use</param>
            <returns>constrain bounds of the nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.NSceneTree.GetIsBoundsConstrained(Nevron.Dom.NNodeList,Nevron.Filters.INFilter)">
            <summary>
            Determines whether the specified nodes contains a bounds constrained shape
            </summary>
            <param name="nodes">nodes whose constrains to check</param>
            <param name="filter">filter to use</param>
            <returns>true if the bounds are constrained, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.NSceneTree.BranchBounds(Nevron.Dom.INNode,Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Obtains the bounds of the node branch subtree by obeying to the specified filter and depth parameters
            </summary>
            <param name="node">node</param>
            <param name="filter">filter</param> 
            <param name="depth">depth in which to explore the branch subtree, or -1 to explore the whole tree</param>
            <returns>branch bounds</returns>
        </member>
        <member name="T:Nevron.Diagram.NStockAbilities">
            <summary>
            Namespace class for static commonly used abilities. By design diagram elements by default use the abilities 
            defined in this class.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.StyleableElementMask">
            <summary>
            Mask for styleable elements
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.DeletableElementMask">
            <summary>
            Mask for deleteable elements
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.SelectableElementMask">
            <summary>
            Mask for selectable elements
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.ExportableElementMask">
            <summary>
            Mask for exportable elements (elements which can be printed and exported)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.InplaceEditableElementMask">
            <summary>
            Mask for inplace editable elements
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.ContainerElementMask">
            <summary>
            Mask for container elements
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.CompositeElementMask">
            <summary>
            Mask for composite elements
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.TranslatableElementMask">
            <summary>
            Mask for translatable elements
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.TransformableElementMask">
            <summary>
            Mask for transformable elements
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.GuidelineMask">
            <summary>
            Mask for guidelines
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.ShapePointMask">
            <summary>
            Mask for shape points
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.LayerMask">
            <summary>
            Mask for layers
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.StyleSheetMask">
            <summary>
            Mask for stylesheets
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.ModelMask">
            <summary>
            Mask for models 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.TextPrimitiveMask">
            <summary>
            Mask for text primitives
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.WinFormControlHostPrimitiveMask">
            <summary>
            Mask for win form control host primitives
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.AggregateModelMask">
            <summary>
            Mask for aggregate models 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.ShapeMask">
            <summary>
            Mask for shapes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.GroupMask">
            <summary>
            Mask for groups
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.HorizontalGuidelineMask">
            <summary>
            Mask for horizontal guidelines
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.VerticalGuidelineMask">
            <summary>
            Mask for vertical guidelines
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.MasterMask">
            <summary>
            Mask for masters
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.DrawingDocumentMask">
            <summary>
            Mask for drawing document
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.LibraryDocumentMask">
            <summary>
            Mask for library document
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.LabelMask">
            <summary>
            Mask for labels
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.PortMask">
            <summary>
            Mask for ports
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.ControlPointMask">
            <summary>
            Mask for control points
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.PlugMask">
            <summary>
            Mask for plugs
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.UmlMethodMask">
            <summary>
            Mask for uml methods
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.CompositeGeometryMask">
            <summary>
            Mask for the composite geometry 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.PointMask">
            <summary>
            Mask for the points
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.MapPointMask">
            <summary>
            Mask for the map points
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.DecoratorMask">
            <summary>
            Mask for decorators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.FrameDecoratorHeaderMask">
            <summary>
            Mask for text decorators
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.ControlPointCollectionMask">
            <summary>
            Mask for the control points collection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.UmlFieldCollectionMask">
            <summary>
            Mask for uml field colletcion
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.LabelCollectionMask">
            <summary>
            Mask for the labels collection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.DecoratorCollectionMask">
            <summary>
            Mask for the decorators collection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.PortCollectionMask">
            <summary>
            Mask for the ports collection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockAbilities.OverlayCollectionMask">
            <summary>
            Mask for the overlay collection
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NStockStyles">
            <summary>
            Namespace class for static commonly used styles. By design many styles in the diagram 
            are by default initialized with copies of the stock styles.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockStyles.DefaultDrawingDocumentStyle">
            <summary>
            Default style for drawing documents 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockStyles.DefaultDrawingViewStyle">
            <summary>
            Default style for drawing views
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockStyles.DefaultGuidelinesStyle">
            <summary>
            Default style for guidelines
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockStyles.DefaultConnectorsStyle">
            <summary>
            Default style for connectors
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockStyles.DefaultFrameDecoratorBackgroundStyle">
            <summary>
            Default style for frame decorator backgrounds
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockStyles.DefaultFrameDecoratorHeaderStyle">
            <summary>
            Default style for frame decorator backgrounds
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockStyles.DefaultToggleDecoratorBackgroundStyle">
            <summary>
            Default style for toggle decorator backgrounds
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockStyles.DefaultToggleDecoratorSymbolStyle">
            <summary>
            Default style for toggle decorator symbp;s
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockStyles.DefaultDrawingDocumentBackgroundStyle">
            <summary>
            Default background style for drawing documents
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NStockStyles.DefaultLibraryDocumentBackgroundStyle">
            <summary>
            Default background style for library documents
            </summary>
        </member>
        <member name="T:Nevron.Diagram.NDR">
            <summary>
            Namespace class for resources used by the Nevron.Diagram assembly
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDR.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NDR.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.ServiceDiagramEventSink">
            <summary>
            Name for the diagram event sink service
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.ServiceDiagramSmartPaint">
            <summary>
            Name for the diagram smart paint service
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.ServiceDocumentEventSink">
            <summary>
            Name for the document event sink service
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.ServiceDocumentHistory">
            <summary>
            Name for the document history service
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.ServiceLibraryImageFactory">
            <summary>
            Name for the document image factory service
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.ServiceDrawingSmartPaint">
            <summary>
            Name for the drawing smart paint service
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.ServiceDrawingTrackers">
            <summary>
            Name for the drawing trackers service
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HintAutoBoundsMode">
            <summary>
            Hint for AutoBoundsMode change
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HintAutoBoundsPadding">
            <summary>
            Hint for AutoBoundsPadding change
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HintAutoBoundsMinSize">
            <summary>
            Hint for AutoBoundsMinSize change
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HintFirstVerticalChange">
            <summary>
            Hint for FirstVerticalChange change
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HintDefineModel">
            <summary>
            Hint for DefineModel change
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HintArrowConnectorTypeChange">
            <summary>
            Hint for Arrow Connector Type change
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HintShapeTypeChange">
            <summary>
            Hint for Shape Type change
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HintRerouteAutomaticallyChange">
            <summary>
            Hint for RerouteAutomatically change
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HintConnectionsChanged">
            <summary>
            Hint for Connections change
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HintShowAll">
            <summary>
            Hint for ShowAll
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HintHideAll">
            <summary>
            Hint for HideAll
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HintRoutableConnectorTypeChange">
            <summary>
            Hint for Routable Connector Type change
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HistoryActionStartReplacePrimitive">
            <summary>
            History action for start replace primtive 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HistoryActionEndReplacePrimitive">
            <summary>
            History action for end replace primtive 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HistoryActionStartRoutableConnectorTypeChange">
            <summary>
            History action for start routable connector type change
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HistoryActionEndRoutableConnectorTypeChange">
            <summary>
            History action for end routable connector type change
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HistoryActionStartStartPointChange">
            <summary>
            History action for start start point change
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HistoryActionEndStartPointChange">
            <summary>
            History action for end start point change
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HistoryActionStartEndPointChange">
            <summary>
            History action for start end point change
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HistoryActionEndEndPointChange">
            <summary>
            History action for end end point change
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HistoryActionStartConnectPoints">
            <summary>
            History action for start connect points
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HistoryActionEndConnectPoints">
            <summary>
            History action for end connect plug to port
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HistoryActionStartDisconnectPoints">
            <summary>
            History action for start disconnect points
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HistoryActionEndDisconnectPoints">
            <summary>
            History action for end disconnect plug to port
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionUpdateModelBounds">
            <summary>
            Update model bounds transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionShowElements">
            <summary>
            Show elements transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionHideElements">
            <summary>
            Hide elements transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionDeleteElements">
            <summary>
            Delete elements transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionInsertElements">
            <summary>
            Insert elements transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionAlignToGrid">
            <summary>
            Align to grid transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionAlignLefts">
            <summary>
            Align lefts transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionAlignRights">
            <summary>
            Align rights transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionAlignTops">
            <summary>
            Align tops transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionAlignBottoms">
            <summary>
            Align bottoms transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionAlignCenters">
            <summary>
            Align centers transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionAlignMiddles">
            <summary>
            Align middles transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionSizeToGrid">
            <summary>
            Size to grid transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionMakeSameWidth">
            <summary>
            Make same width transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionMakeSameHeight">
            <summary>
            Make same height transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionMakeSameSize">
            <summary>
            Make same size transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionIncreaseWidth">
            <summary>
            Increase width transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionIncreaseHeight">
            <summary>
            Increase height transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionDecreaseWidth">
            <summary>
            Decrease width transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionDecreaseHeight">
            <summary>
            Decrease height transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionHorizontalSpacingEqual">
            <summary>
            Make horizontal spacing equal transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionIncreaseHorizontalSpacing">
            <summary>
            Increase horizontal spacing transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionDecreaseHorizontalSpacing">
            <summary>
            Decrease horizontal spacing transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionRemoveHorizontalSpacing">
            <summary>
            Remove horizontal spacing transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionVerticalSpacingEqual">
            <summary>
            Make vertical spacing equal transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionIncreaseVerticalSpacing">
            <summary>
            Increase vertical spacing transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionDecreaseVerticalSpacing">
            <summary>
            Decrease vertical spacing transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionRemoveVerticalSpacing">
            <summary>
            Remove vertical spacing transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionCenterHorizontally">
            <summary>
            Center horizontally transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionCenterVertically">
            <summary>
            Center vertically transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionChangeStrokeStyle">
            <summary>
            Change stroke style transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionChangeShadowStyle">
            <summary>
            Change shadow style transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionChangeFillStyle">
            <summary>
            Change fill style transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionChangeTextStyle">
            <summary>
            Change text style transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionBold">
            <summary>
            Make bold text transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionItalic">
            <summary>
            Make italic text transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionUnderline">
            <summary>
            Make underlined text transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionHorzTextAlignLeft">
            <summary>
            Text align left transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionHorzTextAlignRight">
            <summary>
            Text align right transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionHorzTextAlignCenter">
            <summary>
            Text align center transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionVertTextAlignTop">
            <summary>
            Text align top transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionVertTextAlignBottom">
            <summary>
            Text align bottom transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionVertTextAlignMiddle">
            <summary>
            Text align middle transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionChangeBridgeStyle">
            <summary>
            Change bridge style transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionChangeStartArrowheadStyle">
            <summary>
            Change start arrowhead style transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionChangeEndArrowheadStyle">
            <summary>
            Change end arrowhead style transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionChangePointStyle">
            <summary>
            Change point style transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionChangeInteractivity">
            <summary>
            Change interactivity style transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionChangeStyle">
            <summary>
            Change style transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionChangeProtection">
            <summary>
            Change protection transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionChangeInteractionStyle">
            <summary>
            Change interaction style transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionRemoveAllNodes">
            <summary>
            Change remove all nodes transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionMoveElements">
            <summary>
            Move elements transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionEditPlug">
            <summary>
            Edit plug transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionEditPort">
            <summary>
            Edit port transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionEditPoint">
            <summary>
            Edit point transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionGroup">
            <summary>
            Group transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionUngroup">
            <summary>
            Ungroup transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionCompose">
            <summary>
            Compose transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionDecompose">
            <summary>
            Decompose transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionAutoBoundsMode">
            <summary>
            AutoBoundsMode change transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionDropElements">
            <summary>
            Drop nodes transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionPasteElements">
            <summary>
            Paste nodes transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionReroute">
            <summary>
            Reroute routes transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionReflex">
            <summary>
            Reflex transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionModifyControlPoint">
            <summary>
            Modify control point transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionReverse">
            <summary>
            Reverse transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionReverseModel">
            <summary>
            Reverse node transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionPropertiesChange">
            <summary>
            Properties change transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionCompositeChange">
            <summary>
            Composite change transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionInplaceEdit">
            <summary>
            Inplace edit transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionResizeShape">
            <summary>
            Resize shape transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionRotateShape">
            <summary>
            Rotate shape transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionCreateConnector">
            <summary>
            Create connector transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionReplacePrimitive">
            <summary>
            Replace primitive transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionFlipHorizontal">
            <summary>
            Flip horizontal transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionFlipVertical">
            <summary>
            Flip vertical transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionRotateLeft">
            <summary>
            Rotate left transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionRotateRight">
            <summary>
            Rotate right transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionBringForward">
            <summary>
            Bring forward transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionBringToFront">
            <summary>
            Bring to front transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionSendBackward">
            <summary>
            Send backward transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionSendToBack">
            <summary>
            Send to back transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionMergePoints">
            <summary>
            Merge points transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionCut">
            <summary>
            Cut transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionCopy">
            <summary>
            Copy transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionPaste">
            <summary>
            Paste transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionDuplicate">
            <summary>
            Duplicate transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionReorderMasters">
            <summary>
            Reorder masters transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionScaleModel">
            <summary>
            Scale model transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionCreateShapeElements">
            <summary>
            Create shape elements transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionDestroyShapeElements">
            <summary>
            Destroy shape elements transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionChangeRoutableConnectorType">
            <summary>
            Change routable connector type transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionChangeStartPoint">
            <summary>
            Change start point transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionChangeEndPoint">
            <summary>
            Change end point transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionConnectPoints">
            <summary>
            Connect points transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionDisconnectPoints">
            <summary>
            Disconnect points transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionDisconnectConnectedPoints">
            <summary>
            Disconnect connected points transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionSizeToText">
            <summary>
            Size to text transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionExpand">
            <summary>
            Expand transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TransactionCollapse">
            <summary>
            Collapse transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HistoryOperationConnectElements">
            <summary>
            Description for the connect elements history operation
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HistoryOperationImportConnections">
            <summary>
            Description for the import connections history operation
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HistoryOperationDisconnectElements">
            <summary>
            Description for the disconnect elements history operation
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HistoryOperationPauseResumeRoutingManager">
            <summary>
            Description for the pause resume routing manager operation
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.HistoryOperationPauseResumeBridgeManager">
            <summary>
            Description for the pause resume bridge manager operation
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeFillStyle">
            <summary>
            Name for the fill style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeStrokeStyle">
            <summary>
            Name for the stroke style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeShadowStyle">
            <summary>
            Name for the shadow style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeTextStyle">
            <summary>
            Name for the text style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeBridgeStyle">
            <summary>
            Name for the bridge style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeInteractivityStyle">
            <summary>
            Name for the interactivity style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeAnimationsStyle">
            <summary>
            Name for animations style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeConnectionContainer">
            <summary>
            Name for the connection container attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeMasterImageGenerator">
            <summary>
            Name for the master image generator attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeDrawingSettings">
            <summary>
            Name for the drawing settings attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeLibraryLayout">
            <summary>
            Name for the library layout attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeStyle">
            <summary>
            Name for the style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeLayoutData">
            <summary>
            Name for the layout data attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeInfo">
            <summary>
            Name for the document info attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeTransform">
            <summary>
            Name for the transform attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeStartArrowheadStyle">
            <summary>
            Name for the start arrowhead style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeEndArrowheadStyle">
            <summary>
            Name for the end arrowhead style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeFrameDecoratorStyle">
            <summary>
            Name for the end frame style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributePointStyle">
            <summary>
            Name for the point style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributePortStyle">
            <summary>
            Name for the port style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributePlugStyle">
            <summary>
            Name for the plug style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeRoutingManager">
            <summary>
            Name for the routing manager attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeBridgeManager">
            <summary>
            Name for the bridge manager attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeBackgroundStyle">
            <summary>
            Name for the background style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeGlobalVisibility">
            <summary>
            Name for the global visibility attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeHitTestSettings">
            <summary>
            Name for the hit test settings attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.AttributeGraphicsSettings">
            <summary>
            Name for the graphics settings attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameArrowheadShapesStencil">
            <summary>
            Name for arrowhead shapes stencil
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NamePointShapesStencil">
            <summary>
            Name for arrowhead shapes stencil
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameGuidelinesCollection">
            <summary>
            Name for the guidelines collection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NamePlugsContainer">
            <summary>
            Name for the plugs container
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameLeftAdornerHost">
            <summary>
            Name for the left adorner host
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameRightAdornerHost">
            <summary>
            Name for the right adorner host
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameTopAdornerHost">
            <summary>
            Name for the top adorner host
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameBottomAdornerHost">
            <summary>
            Name for the bottom adorner host
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameShapesCollection">
            <summary>
            Name for the shapes collection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameMapLabelCollection">
            <summary>
            Name for map label collection.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameMapArcCollection">
            <summary>
            Name for map arc collection.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NamePrimitiveModelCollection">
            <summary>
            Name for the primitive model collection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameLayersCollection">
            <summary>
            Name for the layers collection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameControlPointsCollection">
            <summary>
            Name for the control points collection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameOverlaysCollection">
            <summary>
            Name for the control points collection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameErmColumnsCollection">
            <summary>
            Name for the Erm columns collection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameTableColumnCollection">
            <summary>
            Name for the table cell collection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameTableCellCollection">
            <summary>
            Name for the table cell collection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameUmlFieldCollection">
            <summary>
            Name for the table cell collection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameStyleSheetsCollection">
            <summary>
            Name for the stylesheets collection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NamePortsCollection">
            <summary>
            Name for the ports collection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NamePlugsCollection">
            <summary>
            Name for the plugs collection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameLabelsCollection">
            <summary>
            Name for the labels collection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameDecoratorsCollection">
            <summary>
            Name for the decorators collection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameGuidelinesStyleSheet">
            <summary>
            Name for the default guidelines style sheet
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameConnectorsStyleSheet">
            <summary>
            Name for the default connectors style sheet
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameFrameDecoratorBackgroundsStyleSheet">
            <summary>
            Name for the default FrameDecorator backgrounds style sheet
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameFrameDecoratorHeadersStyleSheet">
            <summary>
            Name for the default FrameDecorator headers style sheet
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameToggleDecoratorBackgroundsStyleSheet">
            <summary>
            Name for the default ToggleDecorator backgrounds style sheet
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameToggleDecoratorSymbolsStyleSheet">
            <summary>
            Name for the default FrameDecorator headers style sheet
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.NameNoneStyleSheet">
            <summary>
            Name for the None style sheet
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.VerbProperties">
            <summary>
            Name for the properties verb
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.VerbSingleArrow">
            <summary>
            Name for the Single Arrow verb
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.VerbDoubleArrow">
            <summary>
            Name for the Double Arrow verb
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.VerbDynamicHV">
            <summary>
            Name for the Dynamic HV verb
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.VerbDynamicPolyline">
            <summary>
            Name for the Dynamic Polyline verb
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.VerbErm">
            <summary>
            Name for the Erm verb
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.VerbDynamicCurve">
            <summary>
            Name for the Dynamic Curve verb
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.VerbSizeToContent">
            <summary>
            Name for the Size To Content verb
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.VerbInflateToContent">
            <summary>
            Name for the Inflate To Content verb
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.ImageListDiagramElementTypes">
            <summary>
            Image list for important document nodes types
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.ImageListVerbs">
            <summary>
            Image list for known verbs
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NDR.GetDiagramElementTypeImageIndex(System.Type)">
            <summary>
            Obtains an index in the ImageListDiagramElementTypes for the specified type
            </summary>
            <param name="type">type to obtain index for</param>
            <returns>index in the image list</returns>
        </member>
        <member name="M:Nevron.Diagram.NDR.GetVerbImageIndex(System.String)">
            <summary>
            Obtains an index in the ImageListVerbs for the specified verb
            </summary>
            <param name="verbName">verb name</param>
            <returns>index in the image list</returns>
        </member>
        <member name="F:Nevron.Diagram.NDR.BitmapInwardPort">
            <summary>
            Bitmap for inward ports
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.BitmapOutwardPort">
            <summary>
            Bitmap for outward ports
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.BitmapInwardAndOutwardPort">
            <summary>
            Bitmap for inward and outward ports
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.BitmapProperty">
            <summary>
            Bitmap for properties
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.BitmapMethod">
            <summary>
            Bitmap for methods
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.BitmapPortSize">
            <summary>
            Size of the outward ports bitmap
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TooltipCircularArcControlPoint">
            <summary>
            Tooltip for the circular arc control point
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TooltipElipicalArcCenter">
            <summary>
            Tooltip for the elliptical arc center
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TooltipElipicalArcControlPoint">
            <summary>
            Tooltip for the elliptical control point
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TooltipElipicalArcAngleAndRatio">
            <summary>
            Tooltip for the addiontal elliptical arc control points
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TooltipControlPoint">
            <summary>
            Tooltip for control points
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TooltipGeometryControlPoint">
            <summary>
            Tooltip for geometry control points
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TooltipBasePoint">
            <summary>
            Tooltip for base points
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TooltipMidPoint">
            <summary>
            Tooltip for mid points
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TooltipStartPlug">
            <summary>
            Tooltip for start point
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TooltipEndPlug">
            <summary>
            Tooltip for end point
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TooltipPlug">
            <summary>
            Tooltip for plug points
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TooltipPort">
            <summary>
            Tooltip for port points
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.MessageTransactionNotCompleted">
            <summary>
            Message for non completed transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.MessageTransactionNotCommited">
            <summary>
            Message for non commited transaction
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TemplateEllipticalGrid">
            <summary>
            Name for the elliptical grid template
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TemplateRectangularGrid">
            <summary>
            Name for the rectangular grid template
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TemplateTriangularGrid">
            <summary>
            Name for the triangular grid template
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TemplateRandomGraph">
            <summary>
            Name for the triangular grid template
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TemplateFamilyTree">
            <summary>
            Name for the family tree template
            </summary>
        </member>
        <member name="F:Nevron.Diagram.NDR.TemplateGenericTree">
            <summary>
            Name for the generic tree template
            </summary>
        </member>
        <member name="T:Nevron.Diagram.Visio.NVisioImporter">
            <summary>
            Imports Visio XML stencils in a nevron library document.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.Visio.NVisioImporter.#ctor(Nevron.Diagram.NLibraryDocument)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="libraryDocument"></param>
        </member>
        <member name="P:Nevron.Diagram.Visio.NVisioImporter.MeasurementUnit">
            <summary>
            Determines the measurement unit the importer should use. By default set to NGraphicsUnit.Inch.
            </summary>
            <remarks>
            Set to inch by default, because inch is the default measurement unit used in Visio.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.Visio.NVisioImporter.PreserveShapeHierarchy">
            <summary>
            Controls whether the importer should preserve the shape hierarchy as in the Visio stencil thus
            creating nested groups or to import all Visio child shapes as custom paths in a composite shape. By
            default set to false.
            </summary>
            <remarks>
            If you set this property to true the Visio child shapes will be imported as shapes in a group
            (or groups nested in a group) thus giving you a great level of control over each child shape and making it
            possible to use inherited styles. But note that this will also lead to higher memory consumption than the
            import of the Visio child shapes as custom paths in a composite shape.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.Visio.NVisioImporter.Import(System.String)">
            <summary>
            Imports the Visio stencil from the specified file.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Nevron.Diagram.Visio.NVisioImporter.Import(System.IO.Stream)">
            <summary>
            Imports the Visio stencil from the specified stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:Nevron.Diagram.NNurbsCurveF">
            <summary>
            Represents a non-uniform rational B-spline (NURBS) curve.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NNurbsCurveF.#ctor(System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="degree"></param>
        </member>
        <member name="P:Nevron.Diagram.NNurbsCurveF.Degree">
            <summary>
            Gets/Sets the degree of the NURBS.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NNurbsCurveF.ConrolPoints">
            <summary>
            Gets the control points of the NURBS.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.NNurbsCurveF.Knots">
            <summary>
            Gets the knot vector of the NURBS.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NNurbsCurveF.Refine">
            <summary>
            Refines the NURBS curve by inserting knot (and control points) in order to make
            each knot multiplicity equal to the NURBS curve degree.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.NNurbsCurveF.InsertKnot(System.Single)">
            <summary>
            Inserts a knot and modifies and inserts control points as needed.
            </summary>
            <param name="knot"></param>
            <remarks>
            The algorithm is described at:
            http://www.cs.mtu.edu/~shene/COURSES/cs3621/NOTES/spline/NURBS-knot-insert.html
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.NNurbsCurveF.GetKnotMultiplicity(System.Single)">
            <summary>
            Gets the number of times the given knot value exists in the NURBS
            curve knot vector.
            </summary>
            <param name="knot"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.NNurbsControlPoint">
            <summary>
            Represents a weighted NURBS control point.
            </summary>
        </member>
        <member name="M:Nevron.Internal.vxAE.Sort">
            <summary>
            Sorts the brige collection based on the slope angle defined by the line segment to which the bridges belong
            </summary>
        </member>
        <member name="M:Nevron.Internal.vxAE.hYAE.Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="IYAE"></param>
            <param name="jYAE"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.vxAE.KYAE.Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="lYAE"></param>
            <param name="MYAE"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.vxAE.nYAE.Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="OYAE"></param>
            <param name="pYAE"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.vxAE.QYAE.Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="rYAE"></param>
            <param name="SYAE"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Internal.MCbE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Internal.AhbE.Current">
            <summary>
            Gets the current data source record
            </summary>
        </member>
        <member name="M:Nevron.Internal.AhbE.MoveNext">
            <summary>
            Moves the enumerator to the next data source record
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.AhbE.Reset">
            <summary>
            Resets the enumerator
            </summary>
        </member>
        <member name="P:Nevron.Internal.AhbE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.jhbE.GetColumnValue(System.String)">
            <summary>
            Gets the data record value for a given column name
            </summary>
            <param name="MhbE"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.phbE.GetEnumerator">
            <summary>
            Gets a data source enumerator, which enumerates the data source records.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Internal.nvbE.Item(System.Int32)">
            <summary>
            Gets the index of the vertex at the specified position of the face.
            </summary>
            <param name="index">The index of the desired vertex.</param>
            <returns>The index of the verex at the specified position.</returns>
        </member>
        <member name="M:Nevron.Internal.UxbE.Clone">
            <summary>
            Creates an exact copy of the current <see cref="T:Nevron.Internal.UxbE"/>.
            </summary>
            <returns>The clone of the current object.</returns>
        </member>
        <member name="M:Nevron.Internal.OACE.GetHashCode">
            <summary>
            Returns the hash code of the current object.
            </summary>
            <returns>The hash code of the current object.</returns>
        </member>
        <member name="M:Nevron.Internal.OACE.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current one.
            </summary>
            <param name="SACE">The object to compare with the current one.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:Nevron.Internal.UbCE.Clone">
            <summary>
            Creates an exact copy of the current <see cref="T:Nevron.Internal.UbCE"/>.
            </summary>
            <returns>The clone of the current object.</returns>
        </member>
        <member name="P:Nevron.Internal.vdCE.Item(System.Int32)">
            <summary>
            Gets the tree vertex at the specified index in the vertex list of the tree.
            </summary>
            <param name="index">The tree vertex index.</param>
            <returns>The tree vertex at the specified position.</returns>
        </member>
        <member name="P:Nevron.Internal.UWdE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.UWdE.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Internal.rYdE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.rYdE.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Nevron.Internal.AbEE.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Internal.AbEE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.pEEE.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Internal.pEEE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Internal.ffEE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Internal.KIEE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.KIEE.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Internal.tIEE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.YIEE.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Internal.YIEE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Internal.xjEE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.xjEE.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Internal.llEE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.llEE.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Internal.vlEE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Internal.AMEE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Internal.MMEE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.rMEE.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Internal.rMEE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.dOEE.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Internal.dOEE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.jQEE.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Internal.jQEE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Internal.tSEE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Internal.btEE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.btEE.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Nevron.Internal.jUEE.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Internal.jUEE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Internal.IvEE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Internal.nvEE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.nvEE.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Nevron.Internal.dYEE.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Internal.dYEE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.dYEE.GetFormTitle">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Internal.bAfE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.bAfE.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Internal.bdfE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.bdfE.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Internal.QEfE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.QEfE.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Internal.pffE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.pffE.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Nevron.Internal.OUfE.GetCount(System.Int32,System.Boolean)">
            <summary>
            Gets the number of values equal to the given one in the specified row.
            </summary>
            <param name="SUfE"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.OUfE.SetBit(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the bit on the specified location to the given value and returns
            true if the bit value has been changed (that is if it has a value different
            from the given one).
            </summary>
            <param name="tUfE"></param>
            <param name="UUfE"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Internal.hYfE.Bounds">
            <summary>
            Gets the bounds of this shape.
            </summary>
        </member>
        <member name="M:Nevron.Internal.hYfE.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.KYfE.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.KYfE.GetAttributeValue(System.String)">
            <summary>
            Returns the value of the attribute with the given name. Throws an exception
            if the shape does not have an attribute with the given name.
            </summary>
            <param name="MYfE"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Internal.KAGE.Bounds">
            <summary>
            Gets the bounds of this shape.
            </summary>
        </member>
        <member name="P:Nevron.Internal.MAGE.Bounds">
            <summary>
            Gets the bounds of this shape.
            </summary>
        </member>
        <member name="M:Nevron.Internal.MnGE.ToString">
            <summary>
            Gets the string representation of this region.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Internal.xSGE.FromBody">
            <summary>
            Gets the 2D body from which the 1D body starts
            </summary>
        </member>
        <member name="P:Nevron.Internal.xSGE.ToBody">
            <summary>
            Gets the end point
            </summary>
        </member>
        <member name="P:Nevron.Internal.EtGE.FromBody">
            <summary>
            Gets the 2D body from which the 1D body starts
            </summary>
        </member>
        <member name="P:Nevron.Internal.EtGE.ToBody">
            <summary>
            Gets the 2D body at which the 1D body end
            </summary>
        </member>
        <member name="M:Nevron.Internal.lAhE.Layout">
            <summary>
            Performs the layout of the cells.
            </summary>
        </member>
        <member name="M:Nevron.Internal.tChE.Initialize(Nevron.Diagram.Layout.NCellsLayout,Nevron.Diagram.Layout.NLayoutContext)">
            <summary>
            Initializes the cell body
            </summary>
            <param name="UChE"></param>
            <param name="vChE"></param>
        </member>
        <member name="M:Nevron.Internal.AKhE.ToString">
            <summary>
            Retusrns a string that represents the current body
            </summary>
            <returns>A string that represents the current body</returns>
        </member>
        <member name="M:Nevron.Internal.jrhE.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overriden to return force info
            </summary>
            <param name="KrhE"></param>
            <param name="lrhE"></param>
            <param name="value"></param>
            <param name="MrhE"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.xbIE.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.xbIE.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="pdIE"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.xbIE.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.MGIE.ToString">
            <summary>
            Returns the string representation of the grid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.lIIE.ToString">
            <summary>
            Retusrns the string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Internal.bKIE.Item(System.Int32)">
            <summary>
            Indexer for the cells collection of the current row.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.pxIE.fYIE.Compare(Nevron.Internal.KYIE,Nevron.Internal.KYIE)">
            <summary>
            
            </summary>
            <param name="hYIE"></param>
            <param name="IYIE"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.hljE.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="KljE"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.hljE.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.hljE.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.hljE.op_Equality(Nevron.Internal.hljE,Nevron.Internal.hljE)">
            <summary>
            Determines whether a is equal to b.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.hljE.op_Inequality(Nevron.Internal.hljE,Nevron.Internal.hljE)">
            <summary>
            Determines whether a is not equal to b.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
    </members>
</doc>
