<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nevron.Diagram.WinForm</name>
    </assembly>
    <members>
        <member name="T:Nevron.Diagram.WinForm.Commands.NCommandBuilder">
            <summary>
            The NCommandBuilder abstract class serves as base class for all command builders
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NCommandBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NCommandBuilder.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NCommandBuilder.CreateNonSerializedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NCommandBuilder.GetReferenceProvider">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NCommandBuilder.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NCommandBuilder.Manager">
            <summary>
            Obtains a reference to the command bars manager
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NCommandBuilder.CreateCommand(System.Int32,System.Boolean)">
            <summary>
            Creates a new command from the command context identified by the specified command id and optionally marks it as new group (separator)
            </summary>
            <param name="commandId">command id</param>
            <param name="beginGroup">whether to mark the command as a new group (separator)</param>
            <returns>new command</returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NDiagramContextMenuBuilder">
            <summary>
            The NDiagramContextMenuBuilder class is a command builder, which is used to create context menus
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramContextMenuBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramContextMenuBuilder.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramContextMenuBuilder.BuildContextMenu(System.Object)">
            <summary>
            Builds a context menu for the specifed object
            </summary>
            <remarks>
            This implementation simply creates a new context menu and calls the AddSpecificCommands, AddGenericCommands and AddVerbs methods.
            </remarks>
            <param name="obj">object to build menu for</param>
            <returns>new context menu</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramContextMenuBuilder.AddSpecificCommands(System.Object,Nevron.UI.WinForm.Controls.NContextMenu)">
            <summary>
            Adds object specific commands to the specified context menu
            </summary>
            <param name="obj">object for which to prepend commands</param>
            <param name="menu">menu in which to add the commands</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramContextMenuBuilder.AddGenericCommands(System.Object,Nevron.UI.WinForm.Controls.NContextMenu)">
            <summary>
            Adds generic commands, which apply to the specified object to the specified context menu
            </summary>
            <remarks>
            This method will call the GetEditCommands, GetFormatCommands, GetViewCommands and GetActionCommands methods 
            for the specified object and add the returned commands in submenus.
            </remarks>
            <param name="obj">object for which to add generic commands</param>
            <param name="menu">menu in which to add the commands</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramContextMenuBuilder.AddVerbs(System.Object,Nevron.UI.WinForm.Controls.NContextMenu)">
            <summary>
            Adds the object verbs to the specified menu
            </summary>
            <param name="obj">object whose verbs to add</param>
            <param name="menu">menu in which to add the commands</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramContextMenuBuilder.GetEditCommands(System.Object,System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            Gets the edit command ids which apply to the specified object
            </summary>
            <param name="obj">object for which to get edit commands</param>
            <param name="commandIds">resulting command ids</param>
            <param name="beginGroupIds">resulting begin group command ids</param>
            <returns>true if any commands have been acquired, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramContextMenuBuilder.GetFormatCommands(System.Object,System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            Gets the format commandIds which apply to the specified object
            </summary>
            <param name="obj">object for which to get format commandIds</param>
            <param name="commandIds">resulting commandIds</param>
            <param name="beginGroupIds">resulting command beginGroupIds</param>
            <returns>true if any commandIds have been acquired, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramContextMenuBuilder.GetViewCommands(System.Object,System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            Gets the view commandIds which apply to the specified object
            </summary>
            <param name="obj">object for which to get view commandIds</param>
            <param name="commandIds">resulting commandIds</param>
            <param name="beginGroupIds">resulting command beginGroupIds</param>
            <returns>true if any commandIds have been acquired, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramContextMenuBuilder.GetActionCommands(System.Object,System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            Gets the action commandIds which apply to the specified object
            </summary>
            <param name="obj">object for which to get action commandIds</param>
            <param name="commandIds">resulting commandIds</param>
            <param name="beginGroupIds">resulting command beginGroupIds</param>
            <returns>true if any commandIds have been acquired, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramContextMenuBuilder.AddCommandsToCommandCollection(Nevron.UI.WinForm.Controls.NCommandCollection,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Creates commands from the contexts identified by the specified commandIds and adds them to the specified command collection
            </summary>
            <param name="collection">collection in which to add the newly created commands</param>
            <param name="commandIds">command ids from which to obtain contexts</param>
            <param name="beginGroupIds">command ids which must be treated as new groups</param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NDiagramMainMenuBuilder">
            <summary>
            The NDiagramMainMenuBuilder class is a command builder, which is used to create the predefined main menu
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramMainMenuBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramMainMenuBuilder.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramMainMenuBuilder.FileCommandIds">
            <summary>
            Gets/sets the ids of the commands in the File menu
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramMainMenuBuilder.EditCommandIds">
            <summary>
            Gets/sets the ids of the commands in the Edit menu
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramMainMenuBuilder.ViewCommandIds">
            <summary>
            Gets/sets the ids of the commands in the View menu
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramMainMenuBuilder.InsertCommandIds">
            <summary>
            Gets/sets the ids of the commands in the Insert menu
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramMainMenuBuilder.FormatCommandIds">
            <summary>
            Gets/sets the ids of the commands in the Format menu
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramMainMenuBuilder.ActionCommandIds">
            <summary>
            Gets/sets the ids of the commands in the Action menu
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramMainMenuBuilder.LayoutCommandIds">
            <summary>
            Gets/sets the ids of the commands in the Layout menu
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramMainMenuBuilder.ToolsCommandIds">
            <summary>
            Gets/sets the ids of the commands in the Tools menu
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramMainMenuBuilder.HelpCommandIds">
            <summary>
            Gets/sets the ids of the commands in the Help menu
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramMainMenuBuilder.BeginGroupCommandIds">
            <summary>
            Gets/sets the ids of the commands which must begin new groups
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramMainMenuBuilder.BuildMainMenu">
            <summary>
            Builds the main menu
            </summary>
            <returns>new menu bar</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramMainMenuBuilder.Reset">
            <summary>
            Resets the command id arrays to their default values
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NDiagramToolbarsBuilder">
            <summary>
            The NDiagramMainMenuBuilder class is a command builder, which is used to create the predefined toolbars
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramToolbarsBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramToolbarsBuilder.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramToolbarsBuilder.StandardCommandIds">
            <summary>
            Gets/sets the ids of the commands in the Standard toolbar
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramToolbarsBuilder.ViewCommandIds">
            <summary>
            Gets/sets the ids of the commands in the View toolbar
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramToolbarsBuilder.FormatCommandIds">
            <summary>
            Gets/sets the ids of the commands in the Format toolbar
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramToolbarsBuilder.ToolsCommandIds">
            <summary>
            Gets/sets the ids of the commands in the Tools toolbar
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramToolbarsBuilder.LayoutCommandIds">
            <summary>
            Gets/sets the ids of the commands in the Layout toolbar
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramToolbarsBuilder.ActionCommandIds">
            <summary>
            Gets/sets the ids of the commands in the Action toolbar
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramToolbarsBuilder.LibraryCommandIds">
            <summary>
            Gets/sets the ids of the commands in the Library toolbar
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramToolbarsBuilder.BeginGroupCommandIds">
            <summary>
            Gets/sets the ids of the commands which must begin new groups
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramToolbarsBuilder.BuildToolbars">
            <summary>
            Builds the toolbars
            </summary>
            <returns>new toolbars</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramToolbarsBuilder.Reset">
            <summary>
            Resets the command id arrays to their default values
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NBringForwardCommand">
            <summary>
            The NBringForwardCommand class represents the Bring Forward command
            </summary>
            <remarks>
            This command will bring forward all selected nodes
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NBringForwardCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NBringForwardCommand.Execute">
            <summary>
            Brings forward all selected nodes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NBringForwardCommand.IsEnabled">
            <summary>
            Determines whether the selected nodes can be brought forward
            </summary>
            <returns>true if the command is enabled, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NBringForwardCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NBringToFrontCommand">
            <summary>
            The NBringForwardCommand class represents the Bring To Front command
            </summary>
            <remarks>
            This command will bring to front all selected nodes
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NBringToFrontCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NBringToFrontCommand.Execute">
            <summary>
            Brings to front the selected nodes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NBringToFrontCommand.IsEnabled">
            <summary>
            Determines whether the selected nodes can be brought to front
            </summary>
            <returns>true if the command is enabled, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NBringToFrontCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NComposeCommand">
            <summary>
            The NComposeCommand class represents the Compose command
            </summary>
            <remarks>
            This command will create a new shape, whose geometry will contain the selected nodes
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NComposeCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NComposeCommand.Enabled">
            <summary>
            Determines whether the selected nodes can be composed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NComposeCommand.Execute">
            <summary>
            Composes the selected nodes in a new shape and selects it
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NComposeCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NDecomposeCommand">
            <summary>
            The NDecomposeCommand class represents the Decompose command
            </summary>
            <remarks>
            This command will decompose the selection anchor (if it is a NCompositeShape)
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDecomposeCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDecomposeCommand.Enabled">
            <summary>
            Determines whether the selection anchor node can be decomposed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDecomposeCommand.Execute">
            <summary>
            Decomposes the selection anchor (if it is a NCompositeShape) and multi selects its geometry children
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDecomposeCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NFlipHorizontalCommand">
            <summary>
            The NFlipHorizontalCommand class represents the Flip Horizontal command
            </summary>
            <remarks>
            This command will flip horizontally all selected nodes
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NFlipHorizontalCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NFlipHorizontalCommand.Execute">
            <summary>
            Flips all selected nodes horizontally 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NFlipHorizontalCommand.IsEnabled">
            <summary>
            Determines whether the selected nodes can be flipped horizontally
            </summary>
            <returns>true if the command is enabled, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NFlipHorizontalCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NFlipVerticalCommand">
            <summary>
            The NFlipVerticalCommand class represents the Flip Vertical command
            </summary>
            <remarks>
            This command will flip vertically all selected nodes
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NFlipVerticalCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NFlipVerticalCommand.Execute">
            <summary>
            Flips all selected nodes vertically
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NFlipVerticalCommand.IsEnabled">
            <summary>
            Determines whether the selected nodes can be flipped vertically
            </summary>
            <returns>true if the command is enabled, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NFlipVerticalCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NGroupCommand">
            <summary>
            The NGroupCommand class represents the Group command
            </summary>
            <remarks>
            This command will create a new group containing the selected nodes
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NGroupCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NGroupCommand.Enabled">
            <summary>
            Determines whether the selected nodes can be grouped
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NGroupCommand.Execute">
            <summary>
            Groups the selected nodes in a new group and selects it
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NGroupCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NNudgeBottomCommand">
            <summary>
            The NNudgeBottomCommand class represents the Nudge Bottom command
            </summary>
            <remarks>
            This command will nudge all selected nodes to the bottom. 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NNudgeBottomCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NNudgeBottomCommand.Execute">
            <summary>
            Nudges the selected nodes to the bottom
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NNudgeBottomCommand.IsEnabled">
            <summary>
            Determines whether the selected nodes can be nudged to the bottom
            </summary>
            <returns>true if the command is enabled, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NNudgeBottomCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NNudgeLeftCommand">
            <summary>
            The NNudgeLeftCommand class represents the Nudge Left command
            </summary>
            <remarks>
            This command will nudge all selected nodes to the left
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NNudgeLeftCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NNudgeLeftCommand.Execute">
            <summary>
            Nudges the selected nodes to the left
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NNudgeLeftCommand.IsEnabled">
            <summary>
            Determines whether the selected nodes can be nudged to the left
            </summary>
            <returns>true if the command is enabled, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NNudgeLeftCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NNudgeRightCommand">
            <summary>
            The NNudgeRightCommand class represents the Nudge Right command
            </summary>
            <remarks>
            This command will nudge all selected nodes to the right
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NNudgeRightCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NNudgeRightCommand.Execute">
            <summary>
            Nudges the selected nodes to the right
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NNudgeRightCommand.IsEnabled">
            <summary>
            Determines whether the selected nodes can be nudged to the right
            </summary>
            <returns>true if the command is enabled, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NNudgeRightCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NNudgeTopCommand">
            <summary>
            The NNudgeTopCommand class represents the Nudge Top command
            </summary>
            <remarks>
            This command will nudge all selected nodes to the top. 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NNudgeTopCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NNudgeTopCommand.Execute">
            <summary>
            Nudges the selected nodes to the top
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NNudgeTopCommand.IsEnabled">
            <summary>
            Determines whether the selected nodes can be nudged to the top
            </summary>
            <returns>true if the command is enabled, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NNudgeTopCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NReflexCommand">
            <summary>
            The NReflexCommand class represents the Reroute Reflexively command
            </summary>
            <remarks>
            This command will reroute all selected reflexive routes (implementers of the INReflexiveRoute interface)
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NReflexCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NReflexCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view and whether the view selection contains any reflexive routes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NReflexCommand.Execute">
            <summary>
            Reroutes all selected routes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NReflexCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NRerouteCommand">
            <summary>
            The NRerouteCommand class represents the Reroute command
            </summary>
            <remarks>
            This command will reroute all selected routes (implementers of the INRoute interface)
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NRerouteCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NRerouteCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view and whether the view selection contains any routes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NRerouteCommand.Execute">
            <summary>
            Reroutes all selected routes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NRerouteCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NReverseCommand">
            <summary>
            The NReverseCommand class represents the Reverse command
            </summary>
            <remarks>
            This command will reverse all selected graph edges (implementers of the INGraphEdge interface)
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NReverseCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NReverseCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view and whether the view selection contains any graph edges
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NReverseCommand.Execute">
            <summary>
            Reroutes all selected graph edges
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NReverseCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NRotateLeftCommand">
            <summary>
            The NRotateLeftCommand class represents the Rotate Left command
            </summary>
            <remarks>
            This command will rotate all selected nodes to the left
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NRotateLeftCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NRotateLeftCommand.Execute">
            <summary>
            Rotates all selected nodes to the left
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NRotateLeftCommand.IsEnabled">
            <summary>
            Determines whether the selected nodes can be rotated to the left
            </summary>
            <returns>true if the command is enabled, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NRotateLeftCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NRotateRightCommand">
            <summary>
            The NRotateRightCommand class represents the Rotate Right command
            </summary>
            <remarks>
            This command will rotate all selected nodes to the right
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NRotateRightCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NRotateRightCommand.Execute">
            <summary>
            Rotates all selected nodes to the right
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NRotateRightCommand.IsEnabled">
            <summary>
            Determines whether the selected nodes can be rotated to the right
            </summary>
            <returns>true if the command is enabled, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NRotateRightCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSendBackwardCommand">
            <summary>
            The NSendBackwardCommand class represents the Send Backward command
            </summary>
            <remarks>
            This command will send backward all selected nodes
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSendBackwardCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSendBackwardCommand.Execute">
            <summary>
            Sends backward all selected nodes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSendBackwardCommand.IsEnabled">
            <summary>
            Determines whether the selected nodes can be sent backward
            </summary>
            <returns>true if the command is enabled, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSendBackwardCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSendToBackCommand">
            <summary>
            The NSendToBackCommand class represents the Send To Back command
            </summary>
            <remarks>
            This command will send to back all selected nodes
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSendToBackCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSendToBackCommand.Execute">
            <summary>
            Sends to back all selected nodes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSendToBackCommand.IsEnabled">
            <summary>
            Determines whether the selected nodes can be sent to back
            </summary>
            <returns>true if the command is enabled, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSendToBackCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NUngroupCommand">
            <summary>
            The NUngroupCommand class represents the Ungroup command
            </summary>
            <remarks>
            This command will ungroup the selection anchor (if it is a NGroup)
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NUngroupCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NUngroupCommand.Enabled">
            <summary>
            Determines whether the selection anchor node can be ungrouped
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NUngroupCommand.Execute">
            <summary>
            Decomposes the selection anchor (if it is a NGroup) and multi selects its geometry children
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NUngroupCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NUpdateModelBoundsCommand">
            <summary>
            The NUpdateModelBoundsCommand class represents the Update Model Bounds command
            </summary>
            <remarks>
            This command will update the model bounds of all selected model aggregates
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NUpdateModelBoundsCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NUpdateModelBoundsCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view and whether the view selection contains any aggregate models
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NUpdateModelBoundsCommand.Execute">
            <summary>
            Update the model bounds of all selected model aggregates
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NUpdateModelBoundsCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NRedoCommandContext">
            <summary>
            The Redo command context
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NRedoCommandContext.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NUndoCommandContext">
            <summary>
            The Undo command context
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NUndoCommandContext.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.SimpleMethod">
            <summary>
            Delegate used to build a context menu for the specified object
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.SetControlHostVisibility">
            <summary>
            Deletete for commands, which optionally control the visibility of the control host
            </summary>
            <param name="show"></param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.GetControlHostVisibility">
            <summary>
            Deletete for commands, which optionally determine their checked state by whether the control host is visible or not
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NDocumentBackgroundCommand">
            <summary>
            The NDocumentBackgroundCommand class represents the Document Background command
            </summary>
            <remarks>
            This command is used to edit the document background style
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDocumentBackgroundCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDocumentBackgroundCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDocumentBackgroundCommand.Execute">
            <summary>
            Shows the background style editor for the document background style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDocumentBackgroundCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NDocumentLayersCommand">
            <summary>
            The NDocumentLayersCommand class represents the Document Layers command
            </summary>
            <remarks>
            This command is used to edit the document layers
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDocumentLayersCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDocumentLayersCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDocumentLayersCommand.Execute">
            <summary>
            Shows the document layers editor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDocumentLayersCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NDocumentStyleSheetsCommand">
            <summary>
            The NDocumentStyleSheetsCommand class represents the Document Style Sheets command
            </summary>
            <remarks>
            This command is used to edit the document layers
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDocumentStyleSheetsCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDocumentStyleSheetsCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDocumentStyleSheetsCommand.Execute">
            <summary>
            Shows the document style sheets editor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDocumentStyleSheetsCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NCopyCommand">
            <summary>
            The NCopyCommand class represents the Copy command
            </summary>
            <remarks>
            This command will copy the selected nodes to the clipboard
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NCopyCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NCopyCommand.Enabled">
            <summary>
            Determines whether the selected nodes can be copied
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NCopyCommand.Execute">
            <summary>
            Copies the selected nodes to the clipboard
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NCopyCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NCutCommand">
            <summary>
            The NCutCommand class represents the Cut command
            </summary>
            <remarks>
            This command will cut the selected nodes to the clipboard
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NCutCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NCutCommand.Enabled">
            <summary>
            Determines whether the selected nodes can be cut
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NCutCommand.Execute">
            <summary>
            Cuts the selected nodes to the clipboard
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NCutCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NDeleteCommand">
            <summary>
            The NDeleteCommand class represents the Delete command
            </summary>
            <remarks>
            This command will delete the selected nodes
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDeleteCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDeleteCommand.Enabled">
            <summary>
            Determines whether the selected nodes can be deleted
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDeleteCommand.Execute">
            <summary>
            Deletes the selected nodes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDeleteCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NPasteCommand">
            <summary>
            The NPasteCommand class represents the Paste command
            </summary>
            <remarks>
            This command will paste the clipboard content in the document active layer
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NPasteCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NPasteCommand.Enabled">
            <summary>
            Determines whether the clipboard content can be pasted
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NPasteCommand.Execute">
            <summary>
            Pastes the clipboard content in the document active layer
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NPasteCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NRedoCommand">
            <summary>
            The NRedoCommand class represents the Redo command
            </summary>
            <remarks>
            This command will redo the heap command in the Redo stack
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NRedoCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NRedoCommand.Enabled">
            <summary>
            Determines whether the redo can be executed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NRedoCommand.CreateUICommand">
            <summary>
            Creates a redo user interface command for the this diagram command
            </summary>
            <returns>redo user interface command</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NRedoCommand.Execute">
            <summary>
            Redoes the heap command in the Redo stack
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NRedoCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSelectAll1DShapesCommand">
            <summary>
            The NSelectAll1DShapesCommand class represents the Select All 1D Shapes command
            </summary>
            <remarks>
            This command will select all 1D shapes, which are children of the active layer and have selectable permissions
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSelectAll1DShapesCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSelectAll1DShapesCommand.Enabled">
            <summary>
            Determines whether the select all command can be executed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSelectAll1DShapesCommand.Execute">
            <summary>
            Selects all active layer children which have selectable permissions
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSelectAll1DShapesCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSelectAll2DShapesCommand">
            <summary>
            The NSelectAll2DShapesCommand class represents the Select All 2D shapes command
            </summary>
            <remarks>
            This command will select all 2D shapes, which are children of the active layer and have selectable permissions
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSelectAll2DShapesCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSelectAll2DShapesCommand.Enabled">
            <summary>
            Determines whether the select all command can be executed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSelectAll2DShapesCommand.Execute">
            <summary>
            Selects all active layer children which have selectable permissions
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSelectAll2DShapesCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSelectAllCommand">
            <summary>
            The NSelectAllCommand class represents the Select All command
            </summary>
            <remarks>
            This command will select all active layer children which have the selectable permissions
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSelectAllCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSelectAllCommand.Enabled">
            <summary>
            Determines whether the select all command can be executed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSelectAllCommand.Execute">
            <summary>
            Selects all active layer children which have selectable permissions
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSelectAllCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NUndoCommand">
            <summary>
            The NUndoCommand class represents the Undo command
            </summary>
            <remarks>
            This command will undo the heap command in the Undo stack
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NUndoCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NUndoCommand.Enabled">
            <summary>
            Determines whether the undo can be executed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NUndoCommand.CreateUICommand">
            <summary>
            Creates an undo user interface command for the this diagram command
            </summary>
            <returns>undo user interface command</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NUndoCommand.Execute">
            <summary>
            Undos the heap command in the Undo stack
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NUndoCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.DiagramCommand">
            <summary>
            Enumerates the diagram commands
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.NewDrawing">
            <summary>
            New drawing
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.OpenDrawing">
            <summary>
            Open drawing
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SaveDrawing">
            <summary>
            Save drawing
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.PageSetup">
            <summary>
            Page setup
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.Print">
            <summary>
            Print
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.PrintPreview">
            <summary>
            Print preview
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ImageExport">
            <summary>
            Image export
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.AutocadExport">
            <summary>
            Autocad export
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SvgExport">
            <summary>
            Svg export
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.FlashExport">
            <summary>
            Flash export
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SilverlightExport">
            <summary>
            Silverlight export
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.PdfExport">
            <summary>
            Pdf export
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.MapImport">
            <summary>
            Map import
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.RenderTechnology">
            <summary>
            Render technology
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.Exit">
            <summary>
            Exit
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SelectAll">
            <summary>
            Select all 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SelectAll1DShapes">
            <summary>
            Select all 1D shapes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SelectAll2DShapes">
            <summary>
            Select all 2D shapes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.Cut">
            <summary>
            Cut
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.Copy">
            <summary>
            Copy
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.Paste">
            <summary>
            Paste
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.Delete">
            <summary>
            Delete
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.Undo">
            <summary>
            Undo 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.Redo">
            <summary>
            Redo
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ToggleGrid">
            <summary>
            Toggle grid visibility
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ToggleRulers">
            <summary>
            Toggle rulers visibility
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ToggleGuidelines">
            <summary>
            Toggle guidelines visibility
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.TogglePortsCommand">
            <summary>
            Toggle ports visibility
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ToggleShadows">
            <summary>
            Toggle shadows visibility
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ToggleArrowheads">
            <summary>
            Toggle arrowheads visibility
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ToggleStatusbar">
            <summary>
            Toggle statusbar visibility
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.TogglePropertyBrowser">
            <summary>
            Toggle property browser visibility
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ToggleLibraryBrowser">
            <summary>
            Toggle library browser visibility
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.TogglePanAndZoom">
            <summary>
            Toggle pan and zoom window visibility
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ToggleSnapToGrid">
            <summary>
            Toggle snap to grid
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ToggleSnapToRulers">
            <summary>
            Toggle snap to ruler
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ToggleSnapToGuidelines">
            <summary>
            Toggle snap to guidelines
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ToggleSnapRotation">
            <summary>
            Toggle snap to rotation
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ChangeGridStyle">
            <summary>
            Changes the grid style
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetGridStyleToMajorLines">
            <summary>
            Sets the grid style to major lines
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetGridStyleToMajorDots">
            <summary>
            Sets the grid style to major dots
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetGridStyleToMajorMinorLines">
            <summary>
            Sets the grid style to major - minor lines
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetGridStyleToInterlaced">
            <summary>
            Sets the grid style to interlaced
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetGridStyleToInterlacedHorizontally">
            <summary>
            Sets the grid style to interlaced horizontally
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetGridStyleToInterlacedVertically">
            <summary>
            Sets the grid style to interlaced vertically
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ChangeViewLayout">
            <summary>
            Changes the view layout
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetViewLayoutToNormal">
            <summary>
            Sets the view layout to normal
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetViewLayoutToFit">
            <summary>
            Sets the view layout to fit
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetViewLayoutToStretch">
            <summary>
            Sets the view layout to stretch
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetViewLayoutToStretchToWidth">
            <summary>
            Sets the view layout to stretch to width
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetViewLayoutToStretchToHeight">
            <summary>
            Sets the view layout to stretch to height
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ZoomIn">
            <summary>
            Zoom in
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ZoomOut">
            <summary>
            Zoom out
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ZoomPercent">
            <summary>
            Zoom percent
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ChangeRenderTechnology">
            <summary>
            Change render technology
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetGDIPlusRenderTechnology">
            <summary>
            Sets the GDI+ render technology
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetOpenGLSoftwareRenderTechnology">
            <summary>
            Sets the OpenGL software render technology
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetOpenGLHardwareRenderTechnology">
            <summary>
            Sets OpenGL hardware render technology
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.MakeBoldText">
            <summary>
            Makes bold text
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.MakeItalicText">
            <summary>
            Makes italic text
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.MakeUnderlineText">
            <summary>
            Makes underline text
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.AlignTextLeft">
            <summary>
            Aligns text horizontally to the left
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.AlignTextCenter">
            <summary>
            Aligns text horizontally to the center
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.AlignTextRight">
            <summary>
            Aligns text horizontally to the right
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.AlignTextTop">
            <summary>
            Aligns text vertically to the top
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.AlignTextMiddle">
            <summary>
            Aligns text vertically to the middle
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.AlignTextBottom">
            <summary>
            Aligns text vertically to the bottom
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ChangeFillStyle">
            <summary>
            Changes the fill style
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ChangeStrokeStyle">
            <summary>
            Changes the stroke style
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ChangeShadowStyle">
            <summary>
            Changes the shadow style
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ChangeTextStyle">
            <summary>
            Changes the text style
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ChangeStartArrowheadStyle">
            <summary>
            Changes the start arrowhead style
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ChangeEndArrowheadStyle">
            <summary>
            Changes the end arrowhead style
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ChangeBridgeStyle">
            <summary>
            Changes the bridge style
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ChangeInteractivityStyle">
            <summary>
            Changes the interactivity style
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ChangeProtection">
            <summary>
            Changes the protection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ChangeInteractionStyle">
            <summary>
            Changes the interaction style
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.EnablePointerTool">
            <summary>
            Enables the pointer tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.EnableCreateRectangleTool">
            <summary>
            Enables the create rectangle tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.EnableCreateEllipseTool">
            <summary>
            Enables the create ellipse tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.EnableCreateLineTool">
            <summary>
            Enables the create line tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.EnableCreateEllipticalArcTool">
            <summary>
            Enables the elliptical arc tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.EnableCreateCircularArcTool">
            <summary>
            Enables the circular arc tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.EnableCreatePolylineTool">
            <summary>
            Enables the polyline tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.EnableCreatePolygonTool">
            <summary>
            Enables the polygon tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.EnableCreateCurveTool">
            <summary>
            Enables the create curve tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.EnableCreateClosedCurveTool">
            <summary>
            Enables the create closed curve tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.EnableCreateBezierCurveTool">
            <summary>
            Enables the create bezier curve tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.EnableCreateTextTool">
            <summary>
            Enables the create text tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.EnablePanTool">
            <summary>
            Enables the pan tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.EnableCreateConnectorTool">
            <summary>
            Enables the create connector tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetNewConnectorToLine">
            <summary>
            Set the new connector type to Line
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetNewConnectorToBezier">
            <summary>
            Set the new connector type to Bezier
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetNewConnectorToSingleArrow">
            <summary>
            Set the new connector type to Single Arrow
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetNewConnectorToDoubleArrow">
            <summary>
            Set the new connector type to Double Arrow
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetNewConnectorToDynamicHV">
            <summary>
            Set the new connector type to Dynamic HV
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetNewConnectorToDynamicPolyline">
            <summary>
            Set the new connector type to Dynamic Polyline
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetNewConnectorToDynamicCurve">
            <summary>
            Set the new connector type to Curve
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetNewConnectorToStep2FirstVertical">
            <summary>
            Set the new connector type to Top/bottom to side
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetNewConnectorToStep2FirstHorizontal">
            <summary>
            Set the new connector type to Side to Top/bottom
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetNewConnectorToStep3FirstVertical">
            <summary>
            Set the new connector type to Top to bottom
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetNewConnectorToStep3FirstHorizontal">
            <summary>
            Set the new connector type to Side to Side
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SetNewConnectorToErm">
            <summary>
            Set the new connector type to Erm
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.Customize">
            <summary>
            Shows the Customize dialog
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.Options">
            <summary>
            Shows the Options dialog
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.AlignToGrid">
            <summary>
            Align to grid
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SizeToGrid">
            <summary>
            Size to grid
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.AlignLefts">
            <summary>
            Align lefts
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.AlignCenters">
            <summary>
            Align centers
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.AlignRights">
            <summary>
            Align rights
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.AlignTops">
            <summary>
            Align tops
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.AlignMiddles">
            <summary>
            Align middles
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.AlignBottoms">
            <summary>
            Align bottoms
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.MakeSameWidth">
            <summary>
            Make same width
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.MakeSameHeight">
            <summary>
            Make same height
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.MakeSameSize">
            <summary>
            Make same size
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.MakeHorizontalSpacingEqual">
            <summary>
            Make horizontal spacing equal
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.IncreaseHorizontalSpacing">
            <summary>
            Increase horizontal spacing 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.DecreaseHorizontalSpacing">
            <summary>
            Decrease horizontal spacing 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.RemoveHorizontalSpacing">
            <summary>
            Remove horizontal spacing 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.MakeVerticalSpacingEqual">
            <summary>
            Make vertical spacing equal
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.IncreaseVerticalSpacing">
            <summary>
            Increase vertical spacing
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.DecreaseVerticalSpacing">
            <summary>
            Decrease vertical spacing
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.RemoveVerticalSpacing">
            <summary>
            Remove vertical spacing
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.CenterInDocumentHorizontally">
            <summary>
            Center in document horizontally
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.CenterInDocumentVertically">
            <summary>
            Center in document vertically
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.ShowLayoutDialog">
            <summary>
            Shows the layout dialog
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.FlipHorizontal">
            <summary>
            Flip horizontal
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.FlipVertical">
            <summary>
            Flip vertical
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.RotateLeft">
            <summary>
            Rotate to the left
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.RotateRight">
            <summary>
            Rotate to the right
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.BringToFront">
            <summary>
            Bring to front
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SendToBack">
            <summary>
            Send to back
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.BringForward">
            <summary>
            Bring forward
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SendBackward">
            <summary>
            Send backward
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.Ungroup">
            <summary>
            Ungroup
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.Compose">
            <summary>
            Compose
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.Decompose">
            <summary>
            Decompose
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.NudgeLeft">
            <summary>
            Nudge left
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.NudgeRight">
            <summary>
            Nudge right
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.NudgeTop">
            <summary>
            Nudge top
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.NudgeBottom">
            <summary>
            Nudge bottom
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.Reroute">
            <summary>
            Reroute the routable shapes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.Reflex">
            <summary>
            Reflexes the reflexive shapes
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.Reverse">
            <summary>
            Reverse graph edges
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.UpdateModelBounds">
            <summary>
            Update model bounds of model aggregates
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.DocumentBackground">
            <summary>
            Edit document background
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.DocumentLayers">
            <summary>
            Edit document layers
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.DocumentStyleSheets">
            <summary>
            Edit document stylesheets
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SubmenuGrouping">
            <summary>
            Submenu with grouping commands
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SubmenuComposition">
            <summary>
            Submenu with composition commands
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SubmenuOrder">
            <summary>
            Submenu with order commands
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SubmenuRotateOrFlip">
            <summary>
            Submenu with flip and rotate commands
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SubmenuOperations">
            <summary>
            Submenu with operations commands
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SubmenuAlign">
            <summary>
            Submenu with aling commands
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SubmenuSize">
            <summary>
            Submenu with size commands
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SubmenuCenter">
            <summary>
            Submenu with center commands
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SubmenuSpacing">
            <summary>
            Submenu with spacing commands
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SubmenuNudge">
            <summary>
            Submenu with nudge commands
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.InsertTemplate">
            <summary>
            Insert new template
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.About">
            <summary>
            Show help about dialog
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.NewLibrary">
            <summary>
            New library
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.OpenLibrary">
            <summary>
            Open library
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.SaveLibrary">
            <summary>
            Save library
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.CloseLibrary">
            <summary>
            Close library
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.LibraryViewStyleIconsAndDetails">
            <summary>
            Set the library view style to icons and details
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.LibraryViewStyleIconsAndNames">
            <summary>
            Set the library view style to icons and names
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.LibraryViewStyleIconsOnly">
            <summary>
            Set the library view style to icons only
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.LibraryViewStyleList">
            <summary>
            Set the library view style to list
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.LibraryViewStyleThumbnails">
            <summary>
            Set the library view style to thumbnails
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommand.LastCommandId">
            <summary>
            Id for the last command
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.DiagramCommandRange">
            <summary>
            Enumerates the diagram command ranges
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommandRange.File">
            <summary>
            File
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommandRange.Edit">
            <summary>
            Edit
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommandRange.View">
            <summary>
            View
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommandRange.Insert">
            <summary>
            Insert
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommandRange.Format">
            <summary>
            Format
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommandRange.Tools">
            <summary>
            Tools
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommandRange.Layout">
            <summary>
            Layout
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommandRange.Action">
            <summary>
            Action
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommandRange.Document">
            <summary>
            Document
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommandRange.Help">
            <summary>
            Help
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommandRange.Library">
            <summary>
            Library
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommandRange.Misc">
            <summary>
            Misc
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.Commands.DiagramCommandRange.SubmenuItem">
            <summary>
            Submenu item
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NAutocadExportCommand">
            <summary>
            The NAutocadExportCommand class represents the Autocad Export command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAutocadExportCommand.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAutocadExportCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAutocadExportCommand.Execute">
            <summary>
            Shows the image export dialog
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAutocadExportCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NPdfExportCommand">
            <summary>
            The NPdfExportCommand class represents the PDF Export command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NPdfExportCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NPdfExportCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NPdfExportCommand.Execute">
            <summary>
            Shows the image export dialog
            </summary>
            <remarks>
            If there are any selected nodes, this method will also add a 
            "Selected nodes" entry in the KnownBoundsTable of the NSvgExporter class instance.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NPdfExportCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSilverlightExportCommand">
            <summary>
            The NFSilverlightExportCommand class represents the Silverlight Export command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSilverlightExportCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSilverlightExportCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSilverlightExportCommand.Execute">
            <summary>
            Shows the image export dialog
            </summary>
            <remarks>
            If there are any selected nodes, this method will also add a 
            "Selected nodes" entry in the KnownBoundsTable of the NSvgExporter class instance.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSilverlightExportCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NExitCommand">
            <summary>
            The NExitCommand class represents the Exit command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NExitCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NExitCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NExitCommand.Execute">
            <summary>
            Exits the diagram designer
            </summary>
            <remarks>
            This method will first call the SaveDocumentIfModified method and 
            if it returned true will subsequently call the Exit method.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NExitCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NFlashExportCommand">
            <summary>
            The NFlashExportCommand class represents the Flash Export command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NFlashExportCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NFlashExportCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NFlashExportCommand.Execute">
            <summary>
            Shows the image export dialog
            </summary>
            <remarks>
            If there are any selected nodes, this method will also add a 
            "Selected nodes" entry in the KnownBoundsTable of the NSvgExporter class instance.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NFlashExportCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NImageExportCommand">
            <summary>
            The NImageExportCommand class represents the Image Export command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NImageExportCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NImageExportCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NImageExportCommand.Execute">
            <summary>
            Shows the image export dialog
            </summary>
            <remarks>
            If there are any selected nodes, this method will also add a 
            "Selected nodes" entry in the KnownBoundsTable of the NImageExporter class instance.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NImageExportCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NMapImportCommand">
            <summary>
            The NMapImportCommand class represents the Map Import command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NMapImportCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NMapImportCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NMapImportCommand.Execute">
            <summary>
            Shows the map import dialog
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NMapImportCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NNewDrawingCommand">
            <summary>
            The NNewDrawingCommand class represents the New Drawing command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NNewDrawingCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NNewDrawingCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NNewDrawingCommand.Execute">
            <summary>
            Opens a new empty drawing
            </summary>
            <remarks>
            If the current document is modified this method will first prompt the user to save it.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NNewDrawingCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NOpenDrawingCommand">
            <summary>
            The NOpenDrawingCommand class represents the Open Drawing command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NOpenDrawingCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NOpenDrawingCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NOpenDrawingCommand.Execute">
            <summary>
            Opens a new drawing
            </summary>
            <remarks>
            If the current document is modified this method will first prompt the user to save it.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NOpenDrawingCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NPageSetupCommand">
            <summary>
            The NPageSetupCommand class represents the Page Setup command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NPageSetupCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NPageSetupCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NPageSetupCommand.Execute">
            <summary>
            Shows the Page Setup dialog
            </summary>
            <remarks>
            The page settings are stored in the NDrawingDocument.Settings.PageSettings member.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NPageSetupCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NPrintCommand">
            <summary>
            The NPrintCommand class represents the Print command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NPrintCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NPrintCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NPrintCommand.Execute">
            <summary>
            Prints the current document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NPrintCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NPrintPreviewCommand">
            <summary>
            The NPrintPreviewCommand class represents the Print Preview command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NPrintPreviewCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NPrintPreviewCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NPrintPreviewCommand.Execute">
            <summary>
            Shows the Print Preview dialog
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NPrintPreviewCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSaveDrawingCommand">
            <summary>
            The NSaveDrawingCommand class represents the Save Drawing command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSaveDrawingCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSaveDrawingCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSaveDrawingCommand.Execute">
            <summary>
            Saves the currently edited document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSaveDrawingCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSvgExportCommand">
            <summary>
            The NSvgExportCommand class represents the Svg Export command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSvgExportCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSvgExportCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSvgExportCommand.Execute">
            <summary>
            Shows the image export dialog
            </summary>
            <remarks>
            If there are any selected nodes, this method will also add a 
            "Selected nodes" entry in the KnownBoundsTable of the NSvgExporter class instance.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSvgExportCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NAlignTextBottomCommand">
            <summary>
            The NAlignTextBottomCommand class represents the Align Text Bottom command
            </summary>
            <remarks>
            If there are any selected nodes this command method will alter their styles, otherwise it will alter the style of the document.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignTextBottomCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignTextBottomCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignTextBottomCommand.Checked">
            <summary>
            Determines whether the text style of the current anchor style is vertically aligned to bottom
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignTextBottomCommand.Execute">
            <summary>
            Vertically aligns to bottom the text style of the selected nodes or the document (if there are no selected nodes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignTextBottomCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NAlignTextCenterCommand">
            <summary>
            The NAlignTextCenterCommand class represents the Align Text Center command
            </summary>
            <remarks>
            If there are any selected nodes this command method will alter their styles, otherwise it will alter the style of the document.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignTextCenterCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignTextCenterCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignTextCenterCommand.Checked">
            <summary>
            Determines whether the text style of the current anchor style is horizontally aligned to center
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignTextCenterCommand.Execute">
            <summary>
            Horizontally aligns to center the text style of the selected nodes or the document (if there are no selected nodes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignTextCenterCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NAlignTextLeftCommand">
            <summary>
            The NAlignTextLeftCommand class represents the Align Text Left command
            </summary>
            <remarks>
            If there are any selected nodes this command method will alter their styles, otherwise it will alter the style of the document.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignTextLeftCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignTextLeftCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignTextLeftCommand.Checked">
            <summary>
            Determines whether the text style of the current anchor style is horizontally aligned to left
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignTextLeftCommand.Execute">
            <summary>
            Horizontally aligns to left the text style of the selected nodes or the document (if there are no selected nodes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignTextLeftCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NAlignTextMiddleCommand">
            <summary>
            The NAlignTextMiddleCommand class represents the Align Text Middle command
            </summary>
            <remarks>
            If there are any selected nodes this command method will alter their styles, otherwise it will alter the style of the document.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignTextMiddleCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignTextMiddleCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignTextMiddleCommand.Checked">
            <summary>
            Determines whether the text style of the current anchor style is vertically aligned to middle
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignTextMiddleCommand.Execute">
            <summary>
            Vertically aligns to middle the text style of the selected nodes or the document (if there are no selected nodes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignTextMiddleCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NAlignTextRightCommand">
            <summary>
            The NAlignTextRightCommand class represents the Align Text Right command
            </summary>
            <remarks>
            If there are any selected nodes this command method will alter their styles, otherwise it will alter the style of the document.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignTextRightCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignTextRightCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignTextRightCommand.Checked">
            <summary>
            Determines whether the text style of the current anchor style is horizontally aligned to right
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignTextRightCommand.Execute">
            <summary>
            Horizontally aligns to right the text style of the selected nodes or the document (if there are no selected nodes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignTextRightCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NAlignTextTopCommand">
            <summary>
            The NAlignTextTopCommand class represents the Align Text Top command
            </summary>
            <remarks>
            If there are any selected nodes this command method will alter their styles, otherwise it will alter the style of the document.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignTextTopCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignTextTopCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignTextTopCommand.Checked">
            <summary>
            Determines whether the text style of the current anchor style is vertically aligned to top
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignTextTopCommand.Execute">
            <summary>
            Vertically aligns to top the text style of the selected nodes or the document (if there are no selected nodes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignTextTopCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NChangeBridgeStyleCommand">
            <summary>
            The NChangeBridgeStyleCommand class represents the Change Bridge Style command
            </summary>
            <remarks>
            If there are any selected nodes this command method will alter their styles, otherwise it will alter the style of the document.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeBridgeStyleCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeBridgeStyleCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeBridgeStyleCommand.Execute">
            <summary>
            Show the bridge style editor and alters the bridge style of the selected nodes or the document (if there are no selected nodes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeBridgeStyleCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NChangeEndArrowheadStyleCommand">
            <summary>
            The NChangeEndArrowheadStyleCommand class represents the Change End Arrowhead Style command
            </summary>
            <remarks>
            If there are any selected nodes this command method will alter their styles, otherwise it will alter the style of the document.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeEndArrowheadStyleCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeEndArrowheadStyleCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeEndArrowheadStyleCommand.Execute">
            <summary>
            Show the arrowhead style editor and alters the end arrowhead style of the selected nodes or the document (if there are no selected nodes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeEndArrowheadStyleCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NChangeFillStyleCommand">
            <summary>
            The NChangeFillStyleCommand class represents the Change Fill Style command
            </summary>
            <remarks>
            If there are any selected nodes this command method will alter their styles, otherwise it will alter the style of the document.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeFillStyleCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeFillStyleCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeFillStyleCommand.Execute">
            <summary>
            Show the fill style editor and alters the fill style of the selected nodes or the document (if there are no selected nodes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeFillStyleCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NChangeInteractionStyleCommand">
            <summary>
            The NChangeInteractionStyleCommand class represents the Change Interaction Style command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeInteractionStyleCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeInteractionStyleCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document and 
            whether the selection anchor implements the INInteractionStyle interface
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeInteractionStyleCommand.Execute">
            <summary>
            Show the interaction style editor and alters the interaction style of the selected nodes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeInteractionStyleCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NChangeInteractivityStyleCommand">
            <summary>
            The NChangeInteractivityStyleCommand class represents the Change Interactivity Style command
            </summary>
            <remarks>
            If there are any selected nodes this command method will alter their styles, otherwise it will alter the style of the document.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeInteractivityStyleCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeInteractivityStyleCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeInteractivityStyleCommand.Execute">
            <summary>
            Show the interactivity style editor and alters the interactivity style of the selected nodes or the document (if there are no selected nodes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeInteractivityStyleCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NChangeProtectionCommand">
            <summary>
            The NChangeProtectionCommand class represents the Change Protection command
            </summary>
            <remarks>
            If there are any selected nodes this command method will alter their protection, otherwise it will alter the protection of the document
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeProtectionCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeProtectionCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeProtectionCommand.Execute">
            <summary>
            Show the permissions editor and alters the permissions of the selected nodes or the document (if there are no selected nodes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeProtectionCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NChangeShadowStyleCommand">
            <summary>
            The NChangeShadowStyleCommand class represents the Change Shadow Style command
            </summary>
            <remarks>
            If there are any selected nodes this command method will alter their styles, otherwise it will alter the style of the document.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeShadowStyleCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeShadowStyleCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeShadowStyleCommand.Execute">
            <summary>
            Show the shadow style editor and alters the shadow style of the selected nodes or the document (if there are no selected nodes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeShadowStyleCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NChangeStartArrowheadStyleCommand">
            <summary>
            The NChangeStartArrowheadStyleCommand class represents the Change Start Arrowhead Style command
            </summary>
            <remarks>
            If there are any selected nodes this command method will alter their styles, otherwise it will alter the style of the document.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeStartArrowheadStyleCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeStartArrowheadStyleCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeStartArrowheadStyleCommand.Execute">
            <summary>
            Show the arrowhead style editor and alters the start arrowhead style of the selected nodes or the document (if there are no selected nodes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeStartArrowheadStyleCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NChangeStrokeStyleCommand">
            <summary>
            The NChangeStrokeStyleCommand class represents the Change Stroke Style command
            </summary>
            <remarks>
            If there are any selected nodes this command method will alter their styles, otherwise it will alter the style of the document.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeStrokeStyleCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeStrokeStyleCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeStrokeStyleCommand.Execute">
            <summary>
            Show the stroke style editor and alters the stroke style of the selected nodes or the document (if there are no selected nodes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeStrokeStyleCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NChangeTextStyleCommand">
            <summary>
            The NChangeTextStyleCommand class represents the Change Text Style command
            </summary>
            <remarks>
            If there are any selected nodes this command method will alter their styles, otherwise it will alter the style of the document.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeTextStyleCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeTextStyleCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeTextStyleCommand.Execute">
            <summary>
            Show the text style editor and alters the text style of the selected nodes or the document (if there are no selected nodes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeTextStyleCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NMakeBoldTextCommand">
            <summary>
            The NMakeBoldTextCommand class represents the Make Bold Text command
            </summary>
            <remarks>
            If there are any selected nodes this command method will alter their styles, otherwise it will alter the style of the document.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NMakeBoldTextCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NMakeBoldTextCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NMakeBoldTextCommand.Checked">
            <summary>
            Determines whether the text style of the current anchor style is bold
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NMakeBoldTextCommand.Execute">
            <summary>
            Makes bold the text style of the selected nodes or the document (if there are no selected nodes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NMakeBoldTextCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NMakeItalicTextCommand">
            <summary>
            The NMakeItalicTextCommand class represents the Make Italic Text command
            </summary>
            <remarks>
            If there are any selected nodes this command method will alter their styles, otherwise it will alter the style of the document.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NMakeItalicTextCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NMakeItalicTextCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NMakeItalicTextCommand.Checked">
            <summary>
            Determines whether the text style of the current anchor style is italic
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NMakeItalicTextCommand.Execute">
            <summary>
            Makes italic the text style of the selected nodes or the document (if there are no selected nodes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NMakeItalicTextCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NMakeUnderlineTextCommand">
            <summary>
            The NMakeUnderlineTextCommand class represents the Make Underline Text command
            </summary>
            <remarks>
            If there are any selected nodes this command method will alter their styles, otherwise it will alter the style of the document.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NMakeUnderlineTextCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NMakeUnderlineTextCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NMakeUnderlineTextCommand.Checked">
            <summary>
            Determines whether the text style of the current anchor style is underlined
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NMakeUnderlineTextCommand.Execute">
            <summary>
            Makes underlined the text style of the selected nodes or the document (if there are no selected nodes)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NMakeUnderlineTextCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NAboutCommand">
            <summary>
            The NAboutCommand class represents the About command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAboutCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAboutCommand.Execute">
            <summary>
            Shows the About dialog
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAboutCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NInsertTemplateCommand">
            <summary>
            The NInsertTemplateCommand class represents the Insert Template command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NInsertTemplateCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NInsertTemplateCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NInsertTemplateCommand.Execute">
            <summary>
            Overriden to show the Template Wizard and insert a template in the currently edited document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NInsertTemplateCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.INDiagramButtonCommand">
            <summary>
            Implemented by diagram button commands
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.INDiagramButtonCommand.Execute">
            <summary>
            Executes the button command
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.INDiagramCheckButtonCommand">
            <summary>
            Implemented by diagram check button commands
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.INDiagramCheckButtonCommand.Checked">
            <summary>
            Gets the checked state of the command
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.INDiagramComboCommand">
            <summary>
            Implemented by diagram combo box commands
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.INDiagramComboCommand.Options">
            <summary>
            Gets/sets the combo box options
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.INDiagramComboCommand.GetEditText">
            <summary>
            Gets the text of the combo box edit part
            </summary>
            <returns>edit part text</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.INDiagramComboCommand.Execute(System.String)">
            <summary>
            Executes the combo command with the specified text option
            </summary>
            <param name="text">text option</param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.INDiagramMenuCommand">
            <summary>
            Implemented by diagram menu commands
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.INDiagramMenuCommand.Items">
            <summary>
            Gets/sets the ids of the commands displayed by the menu
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.INDiagramOptionMenuCommand">
            <summary>
            Implemented by diagram option menu commands
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.INDiagramOptionMenuCommand.GetSelectedItemImageInfo(Nevron.GraphicsCore.NCustomImageList@,System.Int32@)">
            <summary>
            Gets the selected option image info
            </summary>
            <param name="imageList">image list</param>
            <param name="imageIndex">image index</param>
            <returns>true if the image info was successfully retreived, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NAlignBottomsCommand">
            <summary>
            The NAlignBottomsCommand class represents the Align Bottoms command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignBottomsCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignBottomsCommand.Execute">
            <summary>
            Aligns the bottoms of the selected nodes to the selection anchor bottom side
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignBottomsCommand.IsEnabled">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignBottomsCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NAlignCentersCommand">
            <summary>
            The NAlignCentersCommand class represents the Align Centers command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignCentersCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignCentersCommand.Execute">
            <summary>
            Horizontally aligns the centers of the selected nodes to the selection anchor center 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignCentersCommand.IsEnabled">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignCentersCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NAlignLeftsCommand">
            <summary>
            The NAlignLeftsCommand class represents the Align Lefts command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignLeftsCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignLeftsCommand.Execute">
            <summary>
            Aligns the lefts of the selected nodes to the selection anchor left side
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignLeftsCommand.IsEnabled">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignLeftsCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NAlignMiddlesCommand">
            <summary>
            The NAlignMiddlesCommand class represents the Align Middles command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignMiddlesCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignMiddlesCommand.Execute">
            <summary>
            Vertically aligns the middles of the selected nodes to the selection anchor middle 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignMiddlesCommand.IsEnabled">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignMiddlesCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NAlignRightsCommand">
            <summary>
            The NAlignRightsCommand class represents the Align Rights command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignRightsCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignRightsCommand.Execute">
            <summary>
            Aligns the rights of the selected nodes to the selection anchor left side
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignRightsCommand.IsEnabled">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignRightsCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NAlignToGridCommand">
            <summary>
            The NAlignToGridCommand class represents the Align To Grid command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignToGridCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignToGridCommand.Execute">
            <summary>
            Aligns the locations of the selected nodes to the grid
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignToGridCommand.IsEnabled">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignToGridCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NAlignTopsCommand">
            <summary>
            The NAlignTopsCommand class represents the Align Tops command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignTopsCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignTopsCommand.Execute">
            <summary>
            Vertically aligns the tops of the selected nodes to the selection anchor top
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAlignTopsCommand.IsEnabled">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAlignTopsCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NCenterInDocumentHorizontallyCommand">
            <summary>
            The NCenterInDocumentHorizontallyCommand class represents the Center In Document Horizontally command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NCenterInDocumentHorizontallyCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NCenterInDocumentHorizontallyCommand.Execute">
            <summary>
            Horizontally aligns the center of the selected node to the center of the document 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NCenterInDocumentHorizontallyCommand.IsEnabled">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NCenterInDocumentHorizontallyCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NCenterInDocumentVerticallyCommand">
            <summary>
            The NCenterInDocumentVerticallyCommand class represents the Center In Document Vertically command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NCenterInDocumentVerticallyCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NCenterInDocumentVerticallyCommand.Execute">
            <summary>
            Vertically aligns the center of the selected node to the center of the document 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NCenterInDocumentVerticallyCommand.IsEnabled">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NCenterInDocumentVerticallyCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NDecreaseHorizontalSpacingCommand">
            <summary>
            The NDecreaseHorizontalSpacingCommand class represents the Decreate Horizontal Spacing command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDecreaseHorizontalSpacingCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDecreaseHorizontalSpacingCommand.Execute">
            <summary>
            Decreases the horizontal spacing between the selected nodes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDecreaseHorizontalSpacingCommand.IsEnabled">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDecreaseHorizontalSpacingCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NDecreaseVerticalSpacingCommand">
            <summary>
            The NDecreaseVerticalSpacingCommand class represents the Decreate Vertical Spacing command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDecreaseVerticalSpacingCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDecreaseVerticalSpacingCommand.Execute">
            <summary>
            Decreases the vertical spacing between the selected nodes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDecreaseVerticalSpacingCommand.IsEnabled">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDecreaseVerticalSpacingCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NIncreaseHorizontalSpacingCommand">
            <summary>
            The NIncreaseHorizontalSpacingCommand class represents the Increase Horizontal Spacing command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NIncreaseHorizontalSpacingCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NIncreaseHorizontalSpacingCommand.Execute">
            <summary>
            Increases the horizontal spacing between the selected nodes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NIncreaseHorizontalSpacingCommand.IsEnabled">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NIncreaseHorizontalSpacingCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NIncreaseVerticalSpacingCommand">
            <summary>
            The NIncreaseVerticalSpacingCommand class represents the Increase Vertical Spacing command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NIncreaseVerticalSpacingCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NIncreaseVerticalSpacingCommand.Execute">
            <summary>
            Increases the vertical spacing between the selected nodes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NIncreaseVerticalSpacingCommand.IsEnabled">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NIncreaseVerticalSpacingCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NMakeHorizontalSpacingEqualCommand">
            <summary>
            The NMakeHorizontalSpacingEqualCommand class represents the Make Horizontal Spacing Equal command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NMakeHorizontalSpacingEqualCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NMakeHorizontalSpacingEqualCommand.Execute">
            <summary>
            Makes the horizontal spacing between the selected nodes equal
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NMakeHorizontalSpacingEqualCommand.IsEnabled">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NMakeHorizontalSpacingEqualCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NMakeSameHeightCommand">
            <summary>
            The NMakeSameHeightCommand class represents the Make Same Height command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NMakeSameHeightCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NMakeSameHeightCommand.Execute">
            <summary>
            Makes the height of the selected nodes equal to the selection anchor height
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NMakeSameHeightCommand.IsEnabled">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NMakeSameHeightCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NMakeSameSizeCommand">
            <summary>
            The NMakeSameSizeCommand class represents the Make Same Size command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NMakeSameSizeCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NMakeSameSizeCommand.Execute">
            <summary>
            Makes the size of the selected nodes equal to the selection anchor size
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NMakeSameSizeCommand.IsEnabled">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NMakeSameSizeCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NMakeSameWidthCommand">
            <summary>
            The NMakeSameWidthCommand class represents the Make Same Width command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NMakeSameWidthCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NMakeSameWidthCommand.Execute">
            <summary>
            Makes the width of the selected nodes equal to the selection anchor width
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NMakeSameWidthCommand.IsEnabled">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NMakeSameWidthCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NMakeVerticalSpacingEqualCommand">
            <summary>
            The NMakeVerticalSpacingEqualCommand class represents the Make Vertical Spacing Equal command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NMakeVerticalSpacingEqualCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NMakeVerticalSpacingEqualCommand.Execute">
            <summary>
            Makes the vertical spacing between the selected nodes equal
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NMakeVerticalSpacingEqualCommand.IsEnabled">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NMakeVerticalSpacingEqualCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NRemoveHorizontalSpacingCommand">
            <summary>
            The NRemoveHorizontalSpacingCommand class represents the Remove Horizontal Spacing command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NRemoveHorizontalSpacingCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NRemoveHorizontalSpacingCommand.Execute">
            <summary>
            Removes the horizontal spacing betweet the selected nodes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NRemoveHorizontalSpacingCommand.IsEnabled">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NRemoveHorizontalSpacingCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NRemoveVerticalSpacingCommand">
            <summary>
            The NRemoveVerticalSpacingCommand class represents the Remove Vertical Spacing command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NRemoveVerticalSpacingCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NRemoveVerticalSpacingCommand.Execute">
            <summary>
            Removes the vertical spacing betweet the selected nodes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NRemoveVerticalSpacingCommand.IsEnabled">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NRemoveVerticalSpacingCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NShowLayoutDialogCommand">
            <summary>
            The NShowLayoutDialogCommand class represents the Show Layout Dialog command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NShowLayoutDialogCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NShowLayoutDialogCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander, view and document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NShowLayoutDialogCommand.Execute">
            <summary>
            Shows the tree layout dialog for the selected nodes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NShowLayoutDialogCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSizeToGridCommand">
            <summary>
            The NSizeToGridCommand class represents the Size To Grid command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSizeToGridCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSizeToGridCommand.Execute">
            <summary>
            Moves and resizes the selected nodes to occupy the nearest grid cells
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSizeToGridCommand.IsEnabled">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSizeToGridCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NCloseLibraryCommand">
            <summary>
            The NCloseLibraryCommand class represents the Close Library command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NCloseLibraryCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NCloseLibraryCommand.Enabled">
            <summary>
            Determines whether the command can be executed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NCloseLibraryCommand.Execute">
            <summary>
            Closes the library group for which the context menu was built or the expanded group if the command was not executed from a context menu
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NCloseLibraryCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleIconsAndDetailsCommand">
            <summary>
            The NLibraryViewStyleIconsCommand class represents the Library View Style - Icons and Details command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleIconsAndDetailsCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleIconsAndDetailsCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and library browser 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleIconsAndDetailsCommand.Checked">
            <summary>
            Determines whether the library browser view style is currently set to Icons and Details
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleIconsAndDetailsCommand.Execute">
            <summary>
            Sets the library browser view style to Icons and Details
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleIconsAndDetailsCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleIconsAndNamesCommand">
            <summary>
            The NLibraryViewStyleIconsCommand class represents the Library View Style - Icons and Details command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleIconsAndNamesCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleIconsAndNamesCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and library browser 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleIconsAndNamesCommand.Checked">
            <summary>
            Determines whether the library browser view style is currently set to Icons and Names
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleIconsAndNamesCommand.Execute">
            <summary>
            Sets the library browser view style to Icons and Names
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleIconsAndNamesCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleIconsOnlyCommand">
            <summary>
            The NLibraryViewStyleIconsOnlyCommand class represents the Library View Style - Icons Only command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleIconsOnlyCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleIconsOnlyCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and library browser 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleIconsOnlyCommand.Checked">
            <summary>
            Determines whether the library browser view style is currently set to Icons Only
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleIconsOnlyCommand.Execute">
            <summary>
            Sets the library browser view style to Icons Only
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleIconsOnlyCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleListCommand">
            <summary>
            The NLibraryViewStyleListCommand class represents the Library View Style - List command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleListCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleListCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and library browser 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleListCommand.Checked">
            <summary>
            Determines whether the library browser view style is currently set to List
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleListCommand.Execute">
            <summary>
            Sets the library browser view style to List
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleListCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleThumbnailsCommand">
            <summary>
            The NLibraryViewStyleThumbnailsCommand class represents the Library View Style - List command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleThumbnailsCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleThumbnailsCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and library browser 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleThumbnailsCommand.Checked">
            <summary>
            Determines whether the library browser view style is currently set to Thumbnails
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleThumbnailsCommand.Execute">
            <summary>
            Sets the library browser view style to Thumbnails
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NLibraryViewStyleThumbnailsCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NNewLibraryCommand">
            <summary>
            The NNewLibraryCommand class represents the New Library command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NNewLibraryCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NNewLibraryCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and library browser 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NNewLibraryCommand.Execute">
            <summary>
            Creates a new empty library group in the library browser
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NNewLibraryCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NOpenLibraryCommand">
            <summary>
            The NOpenLibraryCommand class represents the Open Library command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NOpenLibraryCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NOpenLibraryCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and library browser 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NOpenLibraryCommand.Execute">
            <summary>
            Opens a saved library group in the library browser
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NOpenLibraryCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSaveLibraryCommand">
            <summary>
            The NSaveLibraryCommand class represents the Save Library command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSaveLibraryCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSaveLibraryCommand.Enabled">
            <summary>
            Determines whether the command can be executed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSaveLibraryCommand.Execute">
            <summary>
            Saves the library group for which the context menu was built or the expanded group if the command was not executed from a context menu
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSaveLibraryCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSubmenuAlignCommand">
            <summary>
            The NSubmenuAlignCommand class represents a submenu with all align commands
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSubmenuAlignCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSubmenuAlignCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSubmenuCenterCommand">
            <summary>
            The NSubmenuCenterCommand class represents a submenu with all center commands
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSubmenuCenterCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSubmenuCenterCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSubmenuCompositionCommand">
            <summary>
            The NSubmenuCompositionCommand class represents a submenu with the Compose and Decompose commands
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSubmenuCompositionCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSubmenuCompositionCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSubmenuGroupingCommand">
            <summary>
            The NSubmenuGroupingCommand class represents a submenu with the Group and Ungroup commands
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSubmenuGroupingCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSubmenuGroupingCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSubmenuNudgeCommand">
            <summary>
            The NSubmenuNudgeCommand class represents a submenu with all nudge commands
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSubmenuNudgeCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSubmenuNudgeCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSubmenuOperationsCommand">
            <summary>
            The NSubmenuOperationsCommand class represents a submenu with miscelaneous commands
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSubmenuOperationsCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSubmenuOperationsCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSubmenuOrderCommand">
            <summary>
            The NSubmenuOrderCommand class represents a submenu with all Z Order commands 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSubmenuOrderCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSubmenuOrderCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSubmenuRotateOrFlipCommand">
            <summary>
            The NSubmenuOrderCommand class represents a submenu with rotate and flip
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSubmenuRotateOrFlipCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSubmenuRotateOrFlipCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSubmenuSizeCommand">
            <summary>
            The NSubmenuSizeCommand class represents a submenu with all size commands
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSubmenuSizeCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSubmenuSizeCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSubmenuSpacingCommand">
            <summary>
            The NSubmenuSpacingCommand class represents a submenu with all spacing commands
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSubmenuSpacingCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSubmenuSpacingCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NDiagramButtonCommand">
            <summary>
            The NDiagramButtonCommand abstract class perpresents a push button command
            </summary>
            <remarks>
            It implements the INDiagramButtonCommand interface, which has only one method - Execute(), 
            which is called when the button is pushed
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramButtonCommand.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeId">command range</param>
            <param name="id">command id</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramButtonCommand.#ctor(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeId">command range</param>
            <param name="id">command id</param>
            <param name="text">text</param>
            <param name="tooltipText">tooltip text</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramButtonCommand.#ctor(System.Int32,System.Int32,System.String,System.String,Nevron.UI.WinForm.Controls.NShortcut)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeId">command range</param>
            <param name="id">command id</param>
            <param name="text">text</param>
            <param name="tooltipText">tooltip text</param>
            <param name="shortcut">shortcut</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramButtonCommand.Execute">
            <summary>
            Executes the button command
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NDiagramCheckButtonCommand">
            <summary>
            The NDiagramButtonCommand abstract class perpresents a check button command
            </summary>
            <remarks>
            It implements the INDiagramCheckButtonCommand interface
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCheckButtonCommand.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeId">command range</param>
            <param name="id">command id</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCheckButtonCommand.#ctor(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeId">command range</param>
            <param name="id">command id</param>
            <param name="text">text</param>
            <param name="tooltipText">tooltip text</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCheckButtonCommand.#ctor(System.Int32,System.Int32,System.String,System.String,Nevron.UI.WinForm.Controls.NShortcut)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeId">command range</param>
            <param name="id">command id</param>
            <param name="text">text</param>
            <param name="tooltipText">tooltip text</param>
            <param name="shortcut">shortcut</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCheckButtonCommand.Checked">
            <summary>
            Determines whether check button is checked
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NDiagramComboCommand">
            <summary>
            The NDiagramComboCommand abstract class perpresents a combo box command
            </summary>
            <remarks>
            It implements the INDiagramComboCommand interface
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramComboCommand.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeId">command range</param>
            <param name="id">command id</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramComboCommand.#ctor(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeId">command range</param>
            <param name="id">command id</param>
            <param name="text">text</param>
            <param name="tooltipText">tooltip text</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramComboCommand.#ctor(System.Int32,System.Int32,System.String,System.String,Nevron.UI.WinForm.Controls.NShortcut)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeId">command range</param>
            <param name="id">command id</param>
            <param name="text">text</param>
            <param name="tooltipText">tooltip text</param>
            <param name="shortcut">shortcut</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramComboCommand.Options">
            <summary>
            Gets/sets the combo box options
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramComboCommand.GetEditText">
            <summary>
            Gets the text of the combo box edit part
            </summary>
            <returns>edit part text</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramComboCommand.Execute(System.String)">
            <summary>
            Executes the combo command with the specified text option
            </summary>
            <param name="text">text option</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramComboCommand.CreateUICommand">
            <summary>
            Creates a combo user interface command for the this diagram command
            </summary>
            <returns>combo user interface command</returns> 
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NDiagramCommand">
            <summary>
            The NDiagramCommand abstract class serves as base class for all command implementations in the diagram view 
            </summary>
            <remarks>
            Diagram commands are only implementing state and execution logic. 
            In this way they can be used from any type of UI. 
            Diagram commands can create Nevron UI command contexts (via the CreateCommandContext abstract method) 
            and in this way connect with the Nevron UI Command Bars.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommand.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeId">command range</param>
            <param name="id">command id</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommand.#ctor(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeId">command range</param>
            <param name="id">command id</param>
            <param name="text">text</param>
            <param name="tooltipText">tooltip text</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommand.#ctor(System.Int32,System.Int32,System.String,System.String,Nevron.UI.WinForm.Controls.NShortcut)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeId">command range</param>
            <param name="id">command id</param>
            <param name="text">text</param>
            <param name="tooltipText">tooltip text</param>
            <param name="shortcut">shortcut</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommand.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommand.CreateNonSerializedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommand.GetReferenceProvider">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommand.Commander">
            <summary>
            Obtains a reference to the diagram commander
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommand.Id">
            <summary>
            Gets/sets the command id
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommand.RangeId">
            <summary>
            Gets/sets the command range
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommand.Text">
            <summary>
            Gets/sets the text
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommand.TooltipText">
            <summary>
            Gets/sets the tooltip text
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommand.Shortcut">
            <summary>
            Gets/sets the command shortcut
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommand.Enabled">
            <summary>
            Determines whether the command is currently enabled
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommand.CreateUICommand">
            <summary>
            Creates a user interface command for the this diagram command
            </summary>
            <returns>user interface command</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommand.GetImageInfo(Nevron.GraphicsCore.NCustomImageList@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="imageList"></param>
            <param name="imageIndex"></param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager">
            <summary>
            The NDiagramCommandBarsManager is a command bars manager, which is 
            attached to a diagram commander and provides user interface diagram commands representation.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.CreateNonSerializedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.GetReferenceProvider">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.ProvideReference(System.Type)">
            <summary>
            
            </summary>
            <param name="parentType"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.View">
            <summary>
            Gets/sets the controlled view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.StatusBar">
            <summary>
            Gets/sets the controlled status bar
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.PropertyBrowser">
            <summary>
            Gets/sets the controlled property browser
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.LibraryBrowser">
            <summary>
            Gets/sets the controlled library browser
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.PanAndZoomControl">
            <summary>
            Gets/sets the controlled pan and zoom control
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.Commander">
            <summary>
            Gets/sets the commander
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.ContextMenuBuilder">
            <summary>
            Gets/sets context menu builder
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.MainMenuBuilder">
            <summary>
            Gets/sets context main menu builder
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.ToolbarsBuilder">
            <summary>
            Gets/sets toolbars builder
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.RefreshInterval">
            <summary>
            Gets/sets auto refresh interval (in miliseconds)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.AutoRefresh">
            <summary>
            Specifies if the commands state must automatically be updated
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.Contexts">
            <summary>
            Gets the collection of command contexts for the framework.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.Ranges">
            <summary>
            Gets the collection of command context ranges for the framework.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.OnKeyPreview(System.Windows.Forms.KeyEventArgs,System.Windows.Forms.Message@)">
            <summary>
            Called internally for key previewing 
            </summary>
            <param name="e"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.Recreate">
            <summary>
            Recreates the command bars, ranges and contexts using the current commander and builders
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.AttachToCommander">
            <summary>
            Attaches the manager to the current commander
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.DetachFromCommander">
            <summary>
            Detaches the manager from the current commander
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.AttachToView">
            <summary>
            Attaches the manager to the current view
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.DetachFromView">
            <summary>
            Detaches the manager from the current view
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.AttachToLibraryBrowser">
            <summary>
            Attaches the manager to the current library browser
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.DetachFromLibraryBrowser">
            <summary>
            Detaches the manager from the current library browser
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.OnCommandContextExecuted(Nevron.UI.WinForm.Controls.CommandContextEventArgs)">
            <summary>
            Executes the diagram command associated with the executed command context
            </summary>
            <param name="e"></param>
            <returns>true if the command context was successfully executed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandBarsManager.OnQueryCommandUIState(Nevron.UI.WinForm.Controls.NCommandUIState@)">
            <summary>
            Updates the state of the specified command from the diagram command associated with it
            </summary>
            <param name="state">command state to update</param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NDiagramCommandCollection">
            <summary>
            The NDiagramCommandCollection class represents a strongly typed collection containing NDiagramCommand instances
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandCollection.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandCollection.CreateNonSerializedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandCollection.GetReferenceProvider">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandCollection.ProvideReference(System.Type)">
            <summary>
            
            </summary>
            <param name="parentType"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommandCollection.Item(System.Int32)">
            <summary>
            Gets/sets the command at the specified index
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandCollection.Add(Nevron.Diagram.WinForm.Commands.NDiagramCommand)">
            <summary>
            Adds the specified command
            </summary>
            <param name="command">command to add</param>
            <returns>index of the command in the collection</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandCollection.IndexOf(Nevron.Diagram.WinForm.Commands.NDiagramCommand)">
            <summary>
            Determines the index of the command in the collection
            </summary>
            <param name="command">command</param>
            <returns>index of the command or -1 if it is not in the collection</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandCollection.Insert(System.Int32,Nevron.Diagram.WinForm.Commands.NDiagramCommand)">
            <summary>
            Inserts a the specified command at the specified index
            </summary>
            <param name="index">index</param>
            <param name="command">command</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandCollection.Remove(Nevron.Diagram.WinForm.Commands.NDiagramCommand)">
            <summary>
            Removes the specified command
            </summary>
            <param name="command">command to remove</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandCollection.Contains(Nevron.Diagram.WinForm.Commands.NDiagramCommand)">
            <summary>
            Determines whether the specified command is contained in this collection
            </summary>
            <param name="command">command</param>
            <returns>true if the command is contained in this collection, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Overriden to check the type of the inserted object
            </summary>
            <param name="index"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Overriden to check the type of the removed object
            </summary>
            <param name="index"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Overriden to check the type of the set object and call the OnCollectionChanged method
            </summary>
            <param name="index"></param>
            <param name="oldobj"></param>
            <param name="newobj"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandCollection.OnValidate(System.Object)">
            <summary>
            Overriden to check the type of the object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommandCollection.GetCommandFromId(System.Int32)">
            <summary>
            Gets the diagram command which corresponds to the specified id
            </summary>
            <param name="id">command id</param>
            <returns>diagram command</returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NDiagramCommander">
            <summary>
            The NDiagramCommander class is used to facilitate the diagram view command execution and updates
            </summary>
            <remarks>
            A reference to this class can be obtained from the Commander property of the NDiagramCommandBarsManager class. 
            The commander stores a collection with all currently available diagram commands, which is accessible from the Commands property.
            The NDiagramCommander class also serves as adoptor between the diagram commands and the Nevron (or other third party) user interface.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommander.DelegateExit">
            <summary>
            Get/sets the Exit delegate. This delegate is indirectly called from the Exit command
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommander.DelegateShowCustomizeDialog">
            <summary>
            Gets/sets ShowCustomizeDialog delegate. This delegate is indirectly called by the Customize command
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommander.DelegateGetPropertyBrowserHostVisibility">
            <summary>
            Get/sets the GetPropertyBrowserHostVisibility delegate. This delegate is indirectly called by the Toggle Property Browser Command.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommander.DelegateSetPropertyBrowserHostVisibility">
            <summary>
            Get/sets the SetPropertyBrowserHostVisibility delegate. This delegate is indirectly called by the Toggle Property Browser Command.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommander.DelegateGetLibraryBrowserHostVisibility">
            <summary>
            Get/sets the GetLibraryBrowserHostVisibility delegate. This delegate is indirectly called by the Toggle Library Browser Command.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommander.DelegateSetLibraryBrowserHostVisibility">
            <summary>
            Get/sets the SetLibraryBrowserHostVisibility delegate. This delegate is indirectly called by the Toggle Library Browser Command.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommander.DelegateGetPanAndZoomHostVisibility">
            <summary>
            Get/sets the GetPanAndZoomHostVisibility delegate. This delegate is indirectly called by the Toggle Pan and Zoom Command.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommander.DelegateSetPanAndZoomHostVisibility">
            <summary>
            Get/sets the SetPanAndZoomHostVisibility delegate. This delegate is indirectly called by the Toggle Pan and Zoom Command.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.CreateNonSerializedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.GetReferenceProvider">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.ProvideReference(System.Type)">
            <summary>
            
            </summary>
            <param name="parentType"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommander.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.CreateUICommand(Nevron.Diagram.WinForm.Commands.NDiagramCommand)">
            <summary>
            Creates a user inteface command for the specified diagram command
            </summary>
            <remarks>
            This implementation will create a NCommandContext instance
            </remarks>
            <returns>user interface command</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.CreateUndoRedoUICommand(Nevron.Diagram.WinForm.Commands.NDiagramCommand,System.Boolean)">
            <summary>
            Creates a undo/redo user inteface command for the specified diagram command
            </summary>
            <remarks>
            This implementation will create a NUndoRedoCommandContext instance
            </remarks>
            <returns>user interface command</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.CreateComboUICommand(Nevron.Diagram.WinForm.Commands.NDiagramCommand)">
            <summary>
            Creates a combo user inteface command for the specified diagram command
            </summary>
            <remarks>
            This implementation will create a NComboBoxCommandContext instance
            </remarks>
            <returns>user interface command</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.CreateMenuUICommand(Nevron.Diagram.WinForm.Commands.NDiagramCommand)">
            <summary>
            Creates a menu user inteface command for the specified diagram command
            </summary>
            <remarks>
            This implementation will create a NCommandContext instance with nested contexts
            </remarks>
            <returns>user interface command</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.GetFocusedView">
            <summary>
            Gets the currently focused view
            </summary>
            <remarks>
            This method will return either the view (if it is focused) or the expanded library browser group view (if it is focused)
            </remarks>
            <returns>focused view</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.GetAnchorStyleable">
            <summary>
            Gets the current anchor style
            </summary>
            <remarks>
            The current anchor style is the style of the selection anchor if there are any selected nodes, or the document style if there are no selected nodes.
            </remarks>
            <returns>anchor style if the operation succeeded, otherwise null</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.GetAnchorStyleableAndBatchFormat(Nevron.Diagram.INStyleable@,Nevron.Diagram.Batches.NBatchFormat@)">
            <summary>
            Gets the anchor style and an batch format you can use to alter the style of the selected nodes or the document 
            </summary>
            <param name="anchorStyleable">resulting anchor style</param>
            <param name="batchFormat">resulting batch format</param>
            <returns>true if the operation succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.GetAnchorProtectionAndBatchAction(Nevron.Diagram.NAbilities@,Nevron.Diagram.NAbilities@,Nevron.Diagram.Batches.NBatchAction@)">
            <summary>
            Gets the anchor protection and batch action you can use to alter the protection of the selected nodes or the document
            </summary>
            <param name="anchorProtection">resulting anchor protection</param>
            <param name="anchorAbilities">resulting anchor abilities</param>
            <param name="batchAction">resulting batch action</param>
            <returns>true if the operation succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.GetAnchorInteractionStyleAndBatchAction(Nevron.Diagram.NInteractionStyle@,Nevron.Diagram.Batches.NBatchAction@)">
            <summary>
            Gets the anchor interaction style and an batch action you can use to alter the interaction style of the selected nodes
            </summary>
            <param name="anchorInteractionStyle">resulting anchor interaction style</param>
            <param name="batchAction">resulting batch action</param>
            <returns>true if the operation succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.SaveDocumentIfModified">
            <summary>
            Saves the document edited by the view if it was modified
            </summary>
            <returns>false if the document was modified and the user clicked the Cancel button, otherwise true</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.Exit">
            <summary>
            Performs the Exit command
            </summary>
            <remarks>
            This method will simply call the DelegateExit delegate.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.ShowCustomizeDialog">
            <summary>
            Performs the Customize command
            </summary>
            <remarks>
            This method will simply call the DelegateShowCustomizeDialog delegate.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.ShowOptionsDialog">
            <summary>
            Performs the Options command
            </summary>
            <remarks>
            This implementation will show the default options dialog
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.GetPropertyBrowserHostVisibility">
            <summary>
            Gets the property browser host visibility by invoking the DelegateGetPropertyBrowserHostVisibility.
            Returns true if the delegate is set to null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.SetPropertyBrowserHostVisibility(System.Boolean)">
            <summary>
            Sets the property browser host visibility by invoking the DelegateSetPropertyBrowserHostVisibility.
            </summary>
            <param name="show"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.GetLibraryBrowserHostVisibility">
            <summary>
            Gets the library browser host visibility by invoking the DelegateGetLibraryBrowserHostVisibility.
            Returns true if the delegate is set to null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.SetLibraryBrowserHostVisibility(System.Boolean)">
            <summary>
            Sets the library browser host visibility by invoking the DelegateSetLibraryBrowserHostVisibility.
            </summary>
            <param name="show"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.GetPanAndZoomHostVisibility">
            <summary>
            Gets the pan and zoom host visibility by invoking the DelegateGetPanAndZoomHostVisibility.
            Returns true if the delegate is set to null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.SetPanAndZoomHostVisibility(System.Boolean)">
            <summary>
            Sets the pan and zoom host visibility by invoking the DelegateSetPanAndZoomHostVisibility.
            </summary>
            <param name="show"></param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommander.Commands">
            <summary>
            Gets/sets the diagram commands associated with the commander
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommander.View">
            <summary>
            Gets/sets the view controlled by the commander
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommander.StatusBar">
            <summary>
            Gets/sets the status bar controlled by the commander
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommander.PropertyBrowser">
            <summary>
            Gets/sets the property browser controlled by the commander
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommander.LibraryBrowser">
            <summary>
            Gets/sets the library browser controlled by the commander
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommander.PanAndZoomControl">
            <summary>
            Gets/sets the pan and zoom control controlled by the commander
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommander.Document">
            <summary>
            Obtains a reference to the document displayed by the view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommander.Controller">
            <summary>
            Obtains a reference to the view controller
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramCommander.Selection">
            <summary>
            Obtains a reference to the view controller selection
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.AttachToView">
            <summary>
            Attaches the commander to the current view
            </summary>
            <remarks>
            This implementation will subscribe the commander to the DisplayedDocumentChanging and DisplayedDocumentChanged events. 
            It will also call the AttachToDocument method.
            </remarks>  
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.DetachFromView">
            <summary>
            Detaches the commander from the current view
            </summary>
            <remarks>
            This implementation will unsubscribe the commander from the DisplayedDocumentChanging and DisplayedDocumentChanged events.
            It will also call the DetachFromDocument method.
            </remarks> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.AttachToDocument">
            <summary>
            Attaches the commander to the current view document
            </summary>
            <remarks>
            This implementation will subscribe the commander to the DocumentModified event
            </remarks> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.DetachFromDocument">
            <summary>
            Detaches the commander from the current view document
            </summary>
            <remarks>
            This implementation will unsubscribe the commander from the DocumentModified event
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.OnDisplayedDocumentChanging(Nevron.Diagram.NDocumentCancelEventArgs)">
            <summary>
            Handles the DisplayedDocumentChanging view event
            </summary>
            <remarks>
            This implementation will detach the commander from the document
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.OnDisplayedDocumentChanged(Nevron.Diagram.NDocumentEventArgs)">
            <summary>
            Handles the DisplayedDocumentChanged view event
            </summary>
            <remarks>
            This implementation will attach the commander to the document
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramCommander.OnDocumentModified(Nevron.Diagram.NDocumentEventArgs)">
            <summary>
            Handles the DocumentModified document event
            </summary>
            <remarks>
            This implementation will invalidate the cashed selection entities
            </remarks>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NDiagramMenuCommand">
            <summary>
            The NDiagramMenuCommand abstract class perpresents a menu command
            </summary>
            <remarks>
            It implements the INDiagramMenuCommand interface, which has only one property - Items, 
            through which you control the ids of the diagram commands displayed by the menu.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramMenuCommand.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeId">command range</param>
            <param name="id">command id</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramMenuCommand.#ctor(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeId">command range</param>
            <param name="id">command id</param>
            <param name="text">text</param>
            <param name="tooltipText">tooltip text</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramMenuCommand.#ctor(System.Int32,System.Int32,System.String,System.String,Nevron.UI.WinForm.Controls.NShortcut)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeId">command range</param>
            <param name="id">command id</param>
            <param name="text">text</param>
            <param name="tooltipText">tooltip text</param>
            <param name="shortcut">shortcut</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDiagramMenuCommand.Items">
            <summary>
            Gets/sets the ids of the commands displayed by the menu
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramMenuCommand.CreateUICommand">
            <summary>
            Creates a menu user interface command for the this diagram command
            </summary>
            <returns>menu user interface command</returns> 
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NDiagramOptionMenuCommand">
            <summary>
            The NDiagramOptionMenuCommand abstract class perpresents a menu command, from which you can select from several options
            </summary>
            <remarks>
            It implements the INDiagramOptionMenuCommand interface
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramOptionMenuCommand.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeId">command range</param>
            <param name="id">command id</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramOptionMenuCommand.#ctor(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeId">command range</param>
            <param name="id">command id</param>
            <param name="text">text</param>
            <param name="tooltipText">tooltip text</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramOptionMenuCommand.#ctor(System.Int32,System.Int32,System.String,System.String,Nevron.UI.WinForm.Controls.NShortcut)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeId">command range</param>
            <param name="id">command id</param>
            <param name="text">text</param>
            <param name="tooltipText">tooltip text</param>
            <param name="shortcut">shortcut</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDiagramOptionMenuCommand.GetSelectedItemImageInfo(Nevron.GraphicsCore.NCustomImageList@,System.Int32@)">
            <summary>
            Gets the selected option image info
            </summary>
            <param name="imageList">image list</param>
            <param name="imageIndex">image index</param>
            <returns>true if the image info was successfully retreived, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NBatchButtonCommand">
            <summary>
            The NBatchButtonCommand abstract class perpresents a putton command, whose enabled state is cashed and 
            is determines by one of the batches attached to the view controller selection.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NBatchButtonCommand.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeId">command range</param>
            <param name="id">command id</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NBatchButtonCommand.#ctor(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeId">command range</param>
            <param name="id">command id</param>
            <param name="text">text</param>
            <param name="tooltipText">tooltip text</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NBatchButtonCommand.#ctor(System.Int32,System.Int32,System.String,System.String,Nevron.UI.WinForm.Controls.NShortcut)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeId">command range</param>
            <param name="id">command id</param>
            <param name="text">text</param>
            <param name="tooltipText">tooltip text</param>
            <param name="shortcut">shortcut</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NBatchButtonCommand.Enabled">
            <summary>
            Determines whether the command is currently enabled
            </summary>
            <remarks>
            This method will compare the local time stamp with the time stamp of the selection. 
            If they are different it will call the IsEnabled method to update the cashed enabled state. 
            Otherwise it will simply return the cashed enabled state.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NBatchButtonCommand.TimeStamp">
            <summary>
            Gets/sets the cashed enabled state timestamp
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NBatchButtonCommand.CashedEnabled">
            <summary>
            Gets/sets the cashed enabled state
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NBatchButtonCommand.IsEnabled">
            <summary>
            Determines whether the command is currently enabled
            </summary>
            <remarks>
            This method is only called when the command local time stamp is different from the selection entities time stamp  
            </remarks>
            <returns>true if the command is enabled, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NUndoRedoCommandContext">
            <summary>
            The NUndoRedoCommandContext class represents the list box command context created by the Undo and Redo commands
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NUndoRedoCommandContext.#ctor(System.Boolean)">
            <summary>
            Initializer contructor
            </summary>
            <param name="undoContext">true if this is an undo command context, false if this is a redo command context</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NUndoRedoCommandContext.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NUndoRedoCommandContext.PopulateList(Nevron.UI.WinForm.Controls.NListBox)">
            <summary>
            Populates the specified list box with the available undo or redo commands
            </summary>
            <param name="list">list box</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NUndoRedoCommandContext.OnSelectionCommited(System.Int32)">
            <summary>
            Performs a multi - level undo or redo
            </summary>
            <param name="selectionCount">number of operations to undo or redo</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NUndoRedoCommandContext.QueryDescription(Nevron.UI.WinForm.Controls.NListBox)">
            <summary>
            Obtains a list box description string 
            </summary>
            <param name="list">list box</param>
            <returns>"Undo" or "Redo" string depending on whether this is an Undo command context</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NUndoRedoCommandContext.QueryListWidth(Nevron.UI.WinForm.Controls.NListBox)">
            <summary>
            Obtains the desired width of the list box
            </summary>
            <param name="list">list box</param>
            <returns>desired width</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NUndoRedoCommandContext.Document">
            <summary>
            Obtains a reference to the view document
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NUndoRedoCommandContext.View">
            <summary>
            Obtains a reference to the view
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep3FirstVerticalCommand">
            <summary>
            The NSetNewConnectorToStep3FirstVerticalCommand class represents the Set New Connector To Top to Bottom command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep3FirstVerticalCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep3FirstVerticalCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep3FirstVerticalCommand.Checked">
            <summary>
            Determines whether the type of the links created by the Create Graph Edge tool is currently set to HV First Vertical
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep3FirstVerticalCommand.Execute">
            <summary>
            Sets the type of the links created by the Create Graph Edge tool to HV First Vertical
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep3FirstVerticalCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NEnableCreateConnectorCommand">
            <summary>
            The NEnableCreateConnectorCommand class represents the Enable Create Graph Edge Tool command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreateConnectorCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreateConnectorCommand.GetSelectedItemImageInfo(Nevron.GraphicsCore.NCustomImageList@,System.Int32@)">
            <summary>
            Obtains image info for the currently selected type of link 
            </summary>
            <param name="imageList">resulting image list</param>
            <param name="imageIndex">resulting image index</param>
            <returns>true if the image information was successfully obtained, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreateConnectorCommand.Execute">
            <summary>
            Enables the Create Graph Edge tool
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateConnectorCommand.Checked">
            <summary>
            Determines whether the Create Graph Edge tool is enabled
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateConnectorCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateConnectorCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToBezierCommand">
            <summary>
            The NSetNewConnectorToBezierCommand class represents the Set New Connector To Bezier command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToBezierCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToBezierCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToBezierCommand.Checked">
            <summary>
            Determines whether the type of the links created by the Create Graph Edge tool is currently set to Bezier
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToBezierCommand.Execute">
            <summary>
            Sets the type of the links created by the Create Graph Edge tool to Bezier
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToBezierCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDoubleArrowCommand">
            <summary>
            The NSetNewConnectorToDoubleArrowCommand class represents the Set New Connector To Double Arrow command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDoubleArrowCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDoubleArrowCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDoubleArrowCommand.Checked">
            <summary>
            Determines whether the type of the links created by the Create Graph Edge tool is currently set to Double Arrow
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDoubleArrowCommand.Execute">
            <summary>
            Sets the type of the links created by the Create Graph Edge tool to Double Arrow
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDoubleArrowCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDynamicCurveCommand">
            <summary>
            The NSetNewConnectorToDynamicCurveCommand class represents the Set New Connector To Dynamic Curve command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDynamicCurveCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDynamicCurveCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDynamicCurveCommand.Checked">
            <summary>
            Determines whether the type of the links created by the Create Graph Edge tool is currently set to Curve
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDynamicCurveCommand.Execute">
            <summary>
            Sets the type of the links created by the Create Graph Edge tool to Curve
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDynamicCurveCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDynamicHVCommand">
            <summary>
            The NSetNewConnectorToDynamicHVCommand class represents the Set New Connector To Dynamic Curve command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDynamicHVCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDynamicHVCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDynamicHVCommand.Checked">
            <summary>
            Determines whether the type of the links created by the Create Graph Edge tool is currently set to Curve
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDynamicHVCommand.Execute">
            <summary>
            Sets the type of the links created by the Create Graph Edge tool to Curve
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDynamicHVCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDynamicPolylineCommand">
            <summary>
            The NSetNewConnectorToDynamicPolylineCommand class represents the Set New Connector To Dynamic Polyline command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDynamicPolylineCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDynamicPolylineCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDynamicPolylineCommand.Checked">
            <summary>
            Determines whether the type of the links created by the Create Graph Edge tool is currently set to Polyline
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDynamicPolylineCommand.Execute">
            <summary>
            Sets the type of the links created by the Create Graph Edge tool to Polyline
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToDynamicPolylineCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToLineCommand">
            <summary>
            The NSetNewConnectorToLineCommand class represents the Set New Connector To Line command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToLineCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToLineCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToLineCommand.Checked">
            <summary>
            Determines whether the type of the links created by the Create Graph Edge tool is currently set to Line
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToLineCommand.Execute">
            <summary>
            Sets the type of the links created by the Create Graph Edge tool to Line
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToLineCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToSingleArrowCommand">
            <summary>
            The NSetNewConnectorToSingleArrowCommand class represents the Set New Connector To Single Arrow command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToSingleArrowCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToSingleArrowCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToSingleArrowCommand.Checked">
            <summary>
            Determines whether the type of the links created by the Create Graph Edge tool is currently set to Single Arrow
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToSingleArrowCommand.Execute">
            <summary>
            Sets the type of the links created by the Create Graph Edge tool to Single Arrow
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToSingleArrowCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep2FirstHorizontalCommand">
            <summary>
            The NSetNewConnectorToStep2FirstHorizontalCommand class represents the Set New Connector To Side to Top/bottom command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep2FirstHorizontalCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep2FirstHorizontalCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep2FirstHorizontalCommand.Checked">
            <summary>
            Determines whether the type of the links created by the Create Graph Edge tool is currently set to HV First Horizontal
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep2FirstHorizontalCommand.Execute">
            <summary>
            Sets the type of the links created by the Create Graph Edge tool to HV First Horizontal
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep2FirstHorizontalCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep2FirstVerticalCommand">
            <summary>
            The NSetNewConnectorToStep2FirstVerticalCommand class represents the Set New Connector To Top/Bottom to Side command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep2FirstVerticalCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep2FirstVerticalCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep2FirstVerticalCommand.Checked">
            <summary>
            Determines whether the type of the links created by the Create Graph Edge tool is currently set to HV First Vertical
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep2FirstVerticalCommand.Execute">
            <summary>
            Sets the type of the links created by the Create Graph Edge tool to HV First Vertical
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep2FirstVerticalCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep3FirstHorizontalCommand">
            <summary>
            The NSetNewConnectorToStep3FirstHorizontalCommand class represents the Set New Connector To Side to Side command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep3FirstHorizontalCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep3FirstHorizontalCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep3FirstHorizontalCommand.Checked">
            <summary>
            Determines whether the type of the links created by the Create Graph Edge tool is currently set to HV First Horizontal
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep3FirstHorizontalCommand.Execute">
            <summary>
            Sets the type of the links created by the Create Graph Edge tool to HV First Horizontal
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToStep3FirstHorizontalCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToErmCommand">
            <summary>
            The NSetNewConnectorToErmCommand class represents the create Erm connector command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToErmCommand.#ctor">
            <summary>
            Default constuctor.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToErmCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToErmCommand.Checked">
            <summary>
            Determines whether the type of the links created by the Create Graph Edge tool is currently set to Erm
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToErmCommand.Execute">
            <summary>
            Sets the type of the links created by the Create Graph Edge tool to HV First Vertical
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetNewConnectorToErmCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NCustomizeCommand">
            <summary>
            The NCustomizeCommand class represents the Customize command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NCustomizeCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NCustomizeCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NCustomizeCommand.Execute">
            <summary>
            Simply calls the ShowCustomizeDialog method of the commander
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NCustomizeCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NEnableCreateBezierCurveToolCommand">
            <summary>
            The NEnableCreateBezierCurveToolCommand class represents the Enable Create Berizer Curve Tool command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreateBezierCurveToolCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateBezierCurveToolCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateBezierCurveToolCommand.Checked">
            <summary>
            Determines whether the Create Berizer Curve tool is enabled
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreateBezierCurveToolCommand.Execute">
            <summary>
            Enables the Create Berier Curve tool
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateBezierCurveToolCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NEnableCreateCircularArcToolCommand">
            <summary>
            The NEnableCreateCircularArcToolCommand class represents the Enable Create Circular Arc Tool command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreateCircularArcToolCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateCircularArcToolCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateCircularArcToolCommand.Checked">
            <summary>
            Determines whether the Create Circular Arc tool is enabled
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreateCircularArcToolCommand.Execute">
            <summary>
            Enables the Create Circular Arc tool
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateCircularArcToolCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NEnableCreateClosedCurveToolCommand">
            <summary>
            The NEnableCreateClosedCurveToolCommand class represents the Enable Create Closed Curve Tool command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreateClosedCurveToolCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateClosedCurveToolCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateClosedCurveToolCommand.Checked">
            <summary>
            Determines whether the Create Closed Curve tool is enabled
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreateClosedCurveToolCommand.Execute">
            <summary>
            Enables the Create Closed Curve tool
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateClosedCurveToolCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NEnableCreateCurveToolCommand">
            <summary>
            The NEnableCreateCurveToolCommand class represents the Enable Create Curve Tool command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreateCurveToolCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateCurveToolCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateCurveToolCommand.Checked">
            <summary>
            Determines whether the Create Curve tool is enabled
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreateCurveToolCommand.Execute">
            <summary>
            Enables the Create Curve tool
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateCurveToolCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NEnableCreateEllipseToolCommand">
            <summary>
            The NEnableCreateEllipseToolCommand class represents the Enable Create Ellipse Tool command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreateEllipseToolCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateEllipseToolCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateEllipseToolCommand.Checked">
            <summary>
            Determines whether the Create Ellipse tool is enabled
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreateEllipseToolCommand.Execute">
            <summary>
            Enables the Create Ellipse tool
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateEllipseToolCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NEnableCreateEllipticalArcToolCommand">
            <summary>
            The NEnableCreateEllipticalArcToolCommand class represents the Enable Create Elliptical Arc Tool command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreateEllipticalArcToolCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateEllipticalArcToolCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateEllipticalArcToolCommand.Checked">
            <summary>
            Determines whether the Create Elliptical Arc tool is enabled
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreateEllipticalArcToolCommand.Execute">
            <summary>
            Enables the Create Elliptical Arc tool
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateEllipticalArcToolCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NEnableCreateLineToolCommand">
            <summary>
            The NEnableCreateLineToolCommand class represents the Enable Create Line Tool command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreateLineToolCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateLineToolCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateLineToolCommand.Checked">
            <summary>
            Determines whether the Create Line tool is enabled
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreateLineToolCommand.Execute">
            <summary>
            Enables the Create Line tool
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateLineToolCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NEnableCreatePolygonToolCommand">
            <summary>
            The NEnableCreatePolygonToolCommand class represents the Enable Create Polygon Tool command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreatePolygonToolCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreatePolygonToolCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreatePolygonToolCommand.Checked">
            <summary>
            Determines whether the Create Polygon tool is enabled
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreatePolygonToolCommand.Execute">
            <summary>
            Enables the Create Polygon tool
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreatePolygonToolCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NEnableCreatePolylineToolCommand">
            <summary>
            The NEnableCreatePolylineToolCommand class represents the Enable Create Polyline Tool command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreatePolylineToolCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreatePolylineToolCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreatePolylineToolCommand.Checked">
            <summary>
            Determines whether the Create Polyline tool is enabled
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreatePolylineToolCommand.Execute">
            <summary>
            Enables the Create Polyline tool
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreatePolylineToolCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NEnableCreateRectangleToolCommand">
            <summary>
            The NEnableCreateRectangleToolCommand class represents the Enable Create Rectangle Tool command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreateRectangleToolCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateRectangleToolCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateRectangleToolCommand.Checked">
            <summary>
            Determines whether the Create Rectangle tool is enabled
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreateRectangleToolCommand.Execute">
            <summary>
            Enables the Create Rectangle tool
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateRectangleToolCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NEnableCreateTextToolCommand">
            <summary>
            The NEnableCreateTextToolCommand class represents the Enable Create Text Tool command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreateTextToolCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateTextToolCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateTextToolCommand.Checked">
            <summary>
            Determines whether the Create Text tool is enabled
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnableCreateTextToolCommand.Execute">
            <summary>
            Enables the Create Text tool
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnableCreateTextToolCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NEnablePanToolCommand">
            <summary>
            The NEnablePanToolCommand class represents the Enable Pan Tool command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnablePanToolCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnablePanToolCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnablePanToolCommand.Checked">
            <summary>
            Determines whether the Pan tool is enabled
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnablePanToolCommand.Execute">
            <summary>
            Enables the Pan tool
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnablePanToolCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NEnablePointerToolCommand">
            <summary>
            The NEnablePointerToolCommand class represents the Enable Pointer Tool command
            </summary>
            <remarks>
            Currently the Pointer tool is a combination of the following tools: 
            NCreateGuideline, NHandleTool, NMoveTool, NSelectorTool, NContextMenuTool, NKeyboardTool and NInplaceEditTool.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnablePointerToolCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnablePointerToolCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnablePointerToolCommand.Checked">
            <summary>
            Determines whether the Pointer tool is enabled
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NEnablePointerToolCommand.Execute">
            <summary>
            Enables the Pointer tool
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NEnablePointerToolCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NOptionsCommand">
            <summary>
            The NOptionsCommand class represents the Optoins command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NOptionsCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NOptionsCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NOptionsCommand.Execute">
            <summary>
            Simply calls the ShowOptionsDialog method the commander
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NOptionsCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NChangeRenderTechnologyCommand">
            <summary>
            The NChangeRenderTechnologyCommand class represents the Change Render Technology command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeRenderTechnologyCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeRenderTechnologyCommand.GetSelectedItemImageInfo(Nevron.GraphicsCore.NCustomImageList@,System.Int32@)">
            <summary>
            Obtains image info for the currently selected view layout
            </summary>
            <param name="imageList">resulting image list</param>
            <param name="imageIndex">resulting image index</param>
            <returns>true if the image information was successfully obtained, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeRenderTechnologyCommand.Execute">
            <summary>
            Sets the next view layout
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeRenderTechnologyCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeRenderTechnologyCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetGDIPlusRenderTechnologyCommand">
            <summary>
            The NSetViewLayoutToFitCommand class represents the Set Vew Layout To Fit command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetGDIPlusRenderTechnologyCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetGDIPlusRenderTechnologyCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetGDIPlusRenderTechnologyCommand.Checked">
            <summary>
            Determines whether the view layout is set to Fit
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetGDIPlusRenderTechnologyCommand.Execute">
            <summary>
            Sets the view layout to Fit 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetGDIPlusRenderTechnologyCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetOpenGLSoftwareRenderTechnologyCommand">
            <summary>
            The NSetOpenGLSoftwareRenderTechnologyCommand class represents the Set Vew Layout To Normal command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetOpenGLSoftwareRenderTechnologyCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetOpenGLSoftwareRenderTechnologyCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetOpenGLSoftwareRenderTechnologyCommand.Checked">
            <summary>
            Determines whether the view layout is set to Normal
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetOpenGLSoftwareRenderTechnologyCommand.Execute">
            <summary>
            Sets the view layout to Normal
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetOpenGLSoftwareRenderTechnologyCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetOpenGLHardwareRenderTechnologyCommand">
            <summary>
            The NSetOpenGLHardwareRenderTechnologyCommand class represents the Set Vew Layout To Stretch command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetOpenGLHardwareRenderTechnologyCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetOpenGLHardwareRenderTechnologyCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetOpenGLHardwareRenderTechnologyCommand.Checked">
            <summary>
            Determines whether the view layout is set to Stretch
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetOpenGLHardwareRenderTechnologyCommand.Execute">
            <summary>
            Sets the view layout to Stretch
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetOpenGLHardwareRenderTechnologyCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NChangeGridStyleCommand">
            <summary>
            The NChangeGridStyleCommand class represents the Change Grid Style command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeGridStyleCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeGridStyleCommand.GetSelectedItemImageInfo(Nevron.GraphicsCore.NCustomImageList@,System.Int32@)">
            <summary>
            Obtains image info for the currently selected grid style
            </summary>
            <param name="imageList">resulting image list</param>
            <param name="imageIndex">resulting image index</param>
            <returns>true if the image information was successfully obtained, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeGridStyleCommand.Execute">
            <summary>
            Sets the next grid style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeGridStyleCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeGridStyleCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetGridStyleToInterlacedCommand">
            <summary>
            The NSetGridStyleToInterlacedCommand class represents the Set Grid Style To Interlaced command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetGridStyleToInterlacedCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetGridStyleToInterlacedCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetGridStyleToInterlacedCommand.Checked">
            <summary>
            Determines whether the grid style is set to Interlaced
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetGridStyleToInterlacedCommand.Execute">
            <summary>
            Sets the grid style to Interlaced
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetGridStyleToInterlacedCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetGridStyleToInterlacedHorizontallyCommand">
            <summary>
            The NSetGridStyleToInterlacedHorizontallyCommand class represents the Set Grid Style To Interlaced Horizontally command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetGridStyleToInterlacedHorizontallyCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetGridStyleToInterlacedHorizontallyCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetGridStyleToInterlacedHorizontallyCommand.Checked">
            <summary>
            Determines whether the grid style is set to Interlaced Horizontally
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetGridStyleToInterlacedHorizontallyCommand.Execute">
            <summary>
            Sets the grid style to Interlaced Horizontally
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetGridStyleToInterlacedHorizontallyCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetGridStyleToInterlacedVerticallyCommand">
            <summary>
            The NSetGridStyleToInterlacedVerticallyCommand class represents the Set Grid Style To Interlaced Vertically command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetGridStyleToInterlacedVerticallyCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetGridStyleToInterlacedVerticallyCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetGridStyleToInterlacedVerticallyCommand.Checked">
            <summary>
            Determines whether the grid style is set to Interlaced Vertically
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetGridStyleToInterlacedVerticallyCommand.Execute">
            <summary>
            Sets the grid style to Interlaced Vertically
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetGridStyleToInterlacedVerticallyCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetGridStyleToMajorDotsCommand">
            <summary>
            The NSetGridStyleToMajorDotsCommand class represents the Set Grid Style To Major Dots command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetGridStyleToMajorDotsCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetGridStyleToMajorDotsCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetGridStyleToMajorDotsCommand.Checked">
            <summary>
            Determines whether the grid style is set to Major Dots
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetGridStyleToMajorDotsCommand.Execute">
            <summary>
            Sets the grid style to Major Dots
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetGridStyleToMajorDotsCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetGridStyleToMajorLinesCommand">
            <summary>
            The NSetGridStyleToMajorLinesCommand class represents the Set Grid Style To Major Lines command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetGridStyleToMajorLinesCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetGridStyleToMajorLinesCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetGridStyleToMajorLinesCommand.Checked">
            <summary>
            Determines whether the grid style is set to Major Lines
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetGridStyleToMajorLinesCommand.Execute">
            <summary>
            Sets the grid style to Major Lines
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetGridStyleToMajorLinesCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetGridStyleToMajorMinorLinesCommand">
            <summary>
            The NSetGridStyleToMajorMinorLinesCommand class represents the Set Grid Style To Major Minor Lines command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetGridStyleToMajorMinorLinesCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetGridStyleToMajorMinorLinesCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetGridStyleToMajorMinorLinesCommand.Checked">
            <summary>
            Determines whether the grid style is set to Major Minor Lines
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetGridStyleToMajorMinorLinesCommand.Execute">
            <summary>
            Sets the grid style to Major Minor Lines
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetGridStyleToMajorMinorLinesCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NToggleArrowheadsCommand">
            <summary>
            The NToggleArrowheadsCommand class represents the Toggle Arrowheads command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NToggleArrowheadsCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleArrowheadsCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleArrowheadsCommand.Checked">
            <summary>
            Determines whether the arrowheads are currently visible
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NToggleArrowheadsCommand.Execute">
            <summary>
            Toggles the visibility of the arrowheads
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleArrowheadsCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NToggleGridCommand">
            <summary>
            The NToggleGridCommand class represents the Toggle Grid command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NToggleGridCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleGridCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleGridCommand.Checked">
            <summary>
            Determines whether the grid is currently visible
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NToggleGridCommand.Execute">
            <summary>
            Toggles the grid visibility
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleGridCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NToggleGuidelinesCommand">
            <summary>
            The NToggleGuidelinesCommand class represents the Toggle Guidelines command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NToggleGuidelinesCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleGuidelinesCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleGuidelinesCommand.Checked">
            <summary>
            Determines whether the guidelines are currently visible
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NToggleGuidelinesCommand.Execute">
            <summary>
            Toggles the visibility of the guidelines
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleGuidelinesCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NToggleLibraryBrowserCommand">
            <summary>
            The NToggleLibraryBrowserCommand class represents the Toggle Library Browser command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NToggleLibraryBrowserCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleLibraryBrowserCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and library browser
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleLibraryBrowserCommand.Checked">
            <summary>
            Determines whether the library browser is currently visible
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NToggleLibraryBrowserCommand.Execute">
            <summary>
            Toggles the visibility of the library browser
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleLibraryBrowserCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NTogglePanAndZoomCommand">
            <summary>
            The NTogglePanAndZoomCommand class represents the Toggle Pan and Zoom command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NTogglePanAndZoomCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NTogglePanAndZoomCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NTogglePanAndZoomCommand.Checked">
            <summary>
            Determines whether the pan and zoom control is visible
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NTogglePanAndZoomCommand.Execute">
            <summary>
            Toggles the visibility of the status bar
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NTogglePanAndZoomCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NTogglePortsCommand">
            <summary>
            The NTogglePortsCommand class represents the Toggle Ports command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NTogglePortsCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NTogglePortsCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NTogglePortsCommand.Checked">
            <summary>
            Determines whether the connection points are currently visible
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NTogglePortsCommand.Execute">
            <summary>
            Toggles the visibility of the connection points
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NTogglePortsCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NTogglePropertyBrowserCommand">
            <summary>
            The NTogglePropertyBrowserCommand class represents the Toggle Property Browser command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NTogglePropertyBrowserCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NTogglePropertyBrowserCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and property browser
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NTogglePropertyBrowserCommand.Checked">
            <summary>
            Determines whether the property browser is currently visible
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NTogglePropertyBrowserCommand.Execute">
            <summary>
            Toggles the visibility of the property browser
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NTogglePropertyBrowserCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NToggleRulersCommand">
            <summary>
            The NToggleRulersCommand class represents the Toggle Rulers command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NToggleRulersCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleRulersCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleRulersCommand.Checked">
            <summary>
            Determines whether the rulers are currently visible
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NToggleRulersCommand.Execute">
            <summary>
            Toggles the visibility of the rulers
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleRulersCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NToggleShadowsCommand">
            <summary>
            The NToggleShadowsCommand class represents the Toggle Shadows command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NToggleShadowsCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleShadowsCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleShadowsCommand.Checked">
            <summary>
            Determines whether the shadows are currently visible
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NToggleShadowsCommand.Execute">
            <summary>
            Toggles the visibility of the shadows
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleShadowsCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NToggleSnapRotationCommand">
            <summary>
            The NToggleSnapRotationCommand class represents the Toggle Snap Rotation command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NToggleSnapRotationCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleSnapRotationCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleSnapRotationCommand.Checked">
            <summary>
            Determines whether the rotation is currently being snapped
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NToggleSnapRotationCommand.Execute">
            <summary>
            Toggles the rotation snapping
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleSnapRotationCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NToggleSnapToGridCommand">
            <summary>
            The NToggleSnapToGridCommand class represents the Toggle Snap To Grid command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NToggleSnapToGridCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleSnapToGridCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleSnapToGridCommand.Checked">
            <summary>
            Determines whether coordinates are currently being snapped to the grid
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NToggleSnapToGridCommand.Execute">
            <summary>
            Toggles the snapping of coordinates to the grid
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleSnapToGridCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NToggleSnapToGuidelinesCommand">
            <summary>
            The NToggleSnapToGuidelinesCommand class represents the Toggle Snap To Guidelines command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NToggleSnapToGuidelinesCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleSnapToGuidelinesCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleSnapToGuidelinesCommand.Checked">
            <summary>
            Determines whether coordinates are currently being snapped to the guidelines
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NToggleSnapToGuidelinesCommand.Execute">
            <summary>
            Toggles the snapping of coordinates to the guidelines
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleSnapToGuidelinesCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NToggleSnapToRulersCommand">
            <summary>
            The NToggleSnapToRulersCommand class represents the Toggle Snap To Rulers command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NToggleSnapToRulersCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleSnapToRulersCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleSnapToRulersCommand.Checked">
            <summary>
            Determines whether coordinates are currently being snapped to the rulers
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NToggleSnapToRulersCommand.Execute">
            <summary>
            Toggles the snapping of coordinates to the rulers
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleSnapToRulersCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NToggleStatusbarCommand">
            <summary>
            The NToggleStatusbarCommand class represents the Toggle Statusbar command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NToggleStatusbarCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleStatusbarCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleStatusbarCommand.Checked">
            <summary>
            Determines whether the status bar is visible
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NToggleStatusbarCommand.Execute">
            <summary>
            Toggles the visibility of the status bar
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NToggleStatusbarCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NZoomInCommand">
            <summary>
            The NZoomInCommand class represents the Zoom In command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NZoomInCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NZoomInCommand.Enabled">
            <summary>
            Determines whether the zoom in command can be executed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NZoomInCommand.Execute">
            <summary>
            Zooms in the view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NZoomInCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NZoomOutCommand">
            <summary>
            The NZoomOutCommand class represents the Zoom Out command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NZoomOutCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NZoomOutCommand.Enabled">
            <summary>
            Determines whether the zoom out command can be executed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NZoomOutCommand.Execute">
            <summary>
            Zooms out the view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NZoomOutCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NZoomPercentCommand">
            <summary>
            The NZoomPercentCommand class represents the Zoom Percent command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NZoomPercentCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NZoomPercentCommand.Enabled">
            <summary>
            Determines whether the zoom percent command can be executed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NZoomPercentCommand.Execute(System.String)">
            <summary>
            Zooms the view to the specified percent
            </summary>
            <param name="text">combo box text to execute</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NZoomPercentCommand.GetEditText">
            <summary>
            Obtains the current zoom percent
            </summary>
            <returns>combo box edit part text</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NZoomPercentCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NChangeViewLayoutCommand">
            <summary>
            The NChangeViewLayoutCommand class represents the Change Vew Layout command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeViewLayoutCommand.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeViewLayoutCommand.GetSelectedItemImageInfo(Nevron.GraphicsCore.NCustomImageList@,System.Int32@)">
            <summary>
            Obtains image info for the currently selected view layout
            </summary>
            <param name="imageList">resulting image list</param>
            <param name="imageIndex">resulting image index</param>
            <returns>true if the image information was successfully obtained, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NChangeViewLayoutCommand.Execute">
            <summary>
            Sets the next view layout
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeViewLayoutCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NChangeViewLayoutCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToFitCommand">
            <summary>
            The NSetViewLayoutToFitCommand class represents the Set Vew Layout To Fit command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToFitCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToFitCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToFitCommand.Checked">
            <summary>
            Determines whether the view layout is set to Fit
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToFitCommand.Execute">
            <summary>
            Sets the view layout to Fit 
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToFitCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToNormalCommand">
            <summary>
            The NSetViewLayoutToNormalCommand class represents the Set Vew Layout To Normal command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToNormalCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToNormalCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToNormalCommand.Checked">
            <summary>
            Determines whether the view layout is set to Normal
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToNormalCommand.Execute">
            <summary>
            Sets the view layout to Normal
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToNormalCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToStretchCommand">
            <summary>
            The NSetViewLayoutToStretchCommand class represents the Set Vew Layout To Stretch command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToStretchCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToStretchCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToStretchCommand.Checked">
            <summary>
            Determines whether the view layout is set to Stretch
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToStretchCommand.Execute">
            <summary>
            Sets the view layout to Stretch
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToStretchCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToStretchToHeightCommand">
            <summary>
            The NSetViewLayoutToStretchToHeightCommand class represents the Set Vew Layout To Stretch To Height command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToStretchToHeightCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToStretchToHeightCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToStretchToHeightCommand.Checked">
            <summary>
            Determines whether the view layout is set to Stretch To Height
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToStretchToHeightCommand.Execute">
            <summary>
            Sets the view layout to Stretch To Height
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToStretchToHeightCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToStretchToWidthCommand">
            <summary>
            The NSetViewLayoutToStretchToWidthCommand class represents the Set Vew Layout To Stretch To Width command
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToStretchToWidthCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToStretchToWidthCommand.Enabled">
            <summary>
            Overriden to determine whether there is a valid commander and view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToStretchToWidthCommand.Checked">
            <summary>
            Determines whether the view layout is set to Stretch To Height
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToStretchToWidthCommand.Execute">
            <summary>
            Sets the view layout to Stretch To Height
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NSetViewLayoutToStretchToWidthCommand.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NAboutDialog">
            <summary>
            The NAboutDialog class represents the About Dialog form
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAboutDialog.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NAboutDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NAboutDialog.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NDrawingDocumentOptionsCategory">
            <summary>
            The NDrawingDocumentOptionsCategory class represents the options of the document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDrawingDocumentOptionsCategory.#ctor(Nevron.Diagram.NDrawingDocument)">
            <summary>
            Initializer constructor
            </summary>
            <param name="document">document associated with the options</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDrawingDocumentOptionsCategory.Document">
            <summary>
            Gets/sets the document associated with the options
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDrawingDocumentOptionsCategory.MaxUndoLevels">
            <summary>
            Specifies the maximum number of actions recorded by history
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDrawingDocumentOptionsCategory.Update(System.Boolean)">
            <summary>
            Loads/stores the options from/to the document
            </summary>
            <param name="store">true to store the options, false to load them</param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NDrawingViewOptionsCategory">
            <summary>
            The NDrawingViewOptionsCategory class represents the options of the view
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDrawingViewOptionsCategory.#ctor(Nevron.Diagram.WinForm.NDrawingView)">
            <summary>
            Initializer constructor
            </summary>
            <param name="view">view associated with the options</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDrawingViewOptionsCategory.View">
            <summary>
            Gets/sets the view associated with the options
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDrawingViewOptionsCategory.AnchorMode">
            <summary>
            Controls the mode in which the selection anchor node is determines
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NDrawingViewOptionsCategory.SelectionMode">
            <summary>
            Controls the mode in which the selection operates
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NDrawingViewOptionsCategory.Update(System.Boolean)">
            <summary>
            Loads/stores the options from/to the desigenr
            </summary>
            <param name="store">true to store the options, false to load them</param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NOptionsCategory">
            <summary>
            The NOptionsCategory class serves as base class for all option categories displayed in the Options dialog
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NOptionsCategory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NOptionsCategory.Name">
            <summary>
            Gets/sets the category name
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NOptionsCategory.Update(System.Boolean)">
            <summary>
            Loads/stores the options 
            </summary>
            <param name="store">true to store the options, false to load them</param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.Commands.NOptionsCategoryCollection">
            <summary>
            The NOptionsCategoryCollection class represents a strongly typed collection containing NOptionsCategory instances
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NOptionsCategoryCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.Commands.NOptionsCategoryCollection.Item(System.Int32)">
            <summary>
            Typed indexer
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NOptionsCategoryCollection.Add(Nevron.Diagram.WinForm.Commands.NOptionsCategory)">
            <summary>
            Adds a new layout category to the collection
            </summary>
            <param name="category">category to add</param>
            <returns>index of the new category in the collection</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NOptionsCategoryCollection.IndexOf(Nevron.Diagram.WinForm.Commands.NOptionsCategory)">
            <summary>
            Obtains the index of the category in the collection
            </summary>
            <param name="category">category</param>
            <returns>category index</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NOptionsCategoryCollection.Insert(System.Int32,Nevron.Diagram.WinForm.Commands.NOptionsCategory)">
            <summary>
            Inserts the specified category at the specified index
            </summary>
            <param name="index">index at which to insert</param>
            <param name="category">category to insert</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NOptionsCategoryCollection.Remove(Nevron.Diagram.WinForm.Commands.NOptionsCategory)">
            <summary>
            Removes the specified category from the collection
            </summary>
            <param name="category">category to remove</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NOptionsCategoryCollection.Contains(Nevron.Diagram.WinForm.Commands.NOptionsCategory)">
            <summary>
            Determines whether the specified category is a member of this collection
            </summary>
            <param name="category">category for which to check</param>
            <returns>true if the category is a member of the collection, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NOptionsCategoryCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Overriden to check the object type
            </summary>
            <param name="index"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NOptionsCategoryCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Overriden to check the object type
            </summary>
            <param name="index"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NOptionsCategoryCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Overriden to check the object type
            </summary>
            <param name="index"></param>
            <param name="oldobj"></param>
            <param name="newobj"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NOptionsCategoryCollection.OnValidate(System.Object)">
            <summary>
            Overriden to check the object type
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.Commands.NOptionsCategoryCollection.Update(System.Boolean)">
            <summary>
            Calls the Update method of all contained option categories
            </summary>
            <param name="store">true to store the options, false to load them</param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NController">
            <summary>
            The NController class represents an extensible processor of mouse, keyboard and drag and drop events
            </summary>
            <remarks>
            A reference to an instance of this class can be obtained from the Controller property of the NView class. 
            The NController holds a collection of tools accessible from the Tools property.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.CreateNonSerializedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.ProcessMouseEnter(System.EventArgs)">
            <summary>
            Processes the mouse enter event
            </summary>
            <remarks>
            If there is an active tool the method will delegate to it. Otherwise it will call the 
            ProcessMouseEnter method of all enabled tools until the event is processed.
            </remarks>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.ProcessMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <remarks>
            If there is an active tool the method will delegate to it. Otherwise it will call the 
            ProcessMouseMove method of all enabled tools until the event is processed.
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.ProcessMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse down event
            </summary>
            <remarks>
            If there is an active tool the method will delegate to it. Otherwise it will call the 
            ProcessMouseDown method of all enabled tools until the event is processed. 
            The second operation can be performed twice depending on the value of the NeedsSecondMouseButtonPass flag.
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.ProcessMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse up event
            </summary>
            <remarks>
            If there is an active tool the method will delegate to it. Otherwise it will call the 
            ProcessMouseUp method of all enabled tools until the event is processed. 
            The second operation can be performed twice depending on the value of the NeedsSecondMouseButtonPass flag.
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.ProcessMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse wheel event
            </summary>
            <remarks>
            If there is an active tool the method will delegate to it. Otherwise it will call the 
            ProcessMouseWheel method of all enabled tools until the event is processed. 
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.ProcessMouseLeave(System.EventArgs)">
            <summary>
            Processes the mouse leave event
            </summary>
            <remarks>
            If there is an active tool the method will delegate to it. Otherwise it will call the 
            ProcessMouseLeave method of all enabled tools until the event is processed. 
            </remarks>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.ProcessClick(System.EventArgs)">
            <summary>
            Precesses the mouse click event
            </summary>
            <remarks>
            If there is an active tool the method will delegate to it. Otherwise it will call the 
            ProcessClick method of all enabled tools until the event is processed. 
            </remarks>
            <param name="e">event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.ProcessDoubleClick(System.EventArgs)">
            <summary>
            Precesses the mouse double click event
            </summary>
            <remarks>
            If there is an active tool the method will delegate to it. Otherwise it will call the 
            ProcessDoubleClick method of all enabled tools until the event is processed. 
            </remarks>
            <param name="e">event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.ProcessMouseHover(System.EventArgs)">
            <summary>
            Precesses the mouse hover event
            </summary>
            <remarks>
            If there is an active tool the method will delegate to it. Otherwise it will call the 
            ProcessMouseHover method of all enabled tools until the event is processed. 
            </remarks>
            <param name="e">event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.ProcessKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes the key down event
            </summary>
            <remarks>
            If there is an active tool the method will delegate to it. Otherwise it will call the 
            ProcessKeyDown method of all enabled tools until the event is processed.
            </remarks>
            <param name="e">key event args</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.ProcessKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Processes the key press event
            </summary>
            <remarks>
            If there is an active tool the method will delegate to it. Otherwise it will call the 
            ProcessKeyPress method of all enabled tools until the event is processed.
            </remarks>
            <param name="e">key press event args</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.ProcessKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes the key up event
            </summary>
            <remarks>
            If there is an active tool the method will delegate to it. Otherwise it will call the 
            ProcessKeyUp method of all enabled tools until the event is processed.
            </remarks>
            <param name="e">key event args</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Processes the is input key query
            </summary>
            <remarks>
            If there is an active tool the method will delegate to it. Otherwise it will call the 
            IsInputKey method of all enabled tools until true is returned.
            </remarks>
            <param name="keyData">query key</param>
            <returns>true if the key is an input key, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.IsInputChar(System.Char)">
            <summary>
            Processes the is input char query
            </summary>
            <remarks>
            If there is an active tool the method will delegate to it. Otherwise it will call the 
            IsInputChar method of all enabled tools until true is returned.
            </remarks>
            <param name="keyChar">query char</param>
            <returns>true if the key is an input char, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.ProcessDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            Processes the drag enter event
            </summary>
            <remarks>
            If there is an active tool the method will delegate to it. Otherwise it will call the 
            ProcessDragEnter method of all enabled tools until the event is processed.
            </remarks>
            <param name="e">event arguments received from a view</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.ProcessDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Processes the drag drop event
            </summary>
            <remarks>
            If there is an active tool the method will delegate to it. Otherwise it will call the 
            ProcessDragDrop method of all enabled tools until the event is processed.
            </remarks>
            <param name="e">event arguments received from a view</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.ProcessDragLeave(System.EventArgs)">
            <summary>
            Processes the drag leave event
            </summary>
            <remarks>
            If there is an active tool the method will delegate to it. Otherwise it will call the 
            ProcessDragLeave method of all enabled tools until the event is processed.
            </remarks>
            <param name="e">event arguments received from a view</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.ProcessDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Processes the drag over event
            </summary>
            <remarks>
            If there is an active tool the method will delegate to it. Otherwise it will call the 
            ProcessDragOver method of all enabled tools until the event is processed.
            </remarks>
            <param name="e">event arguments received from a view</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="P:Nevron.Diagram.WinForm.NController.Tools">
            <summary>
            Gets/sets the tools collection
            </summary>
            <remarks>
            The set accessor is provided to help you subclass the tools collection and assign it to the controller. 
            Do not use it to add/remove tools.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NController.ActiveTool">
            <summary>
            Obtains a reference to the currently active tool
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NController.View">
            <summary>
            Obtains a reference to the view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NController.IsSecondMouseButtonPass">
            <summary>
            Determines whether the controller is currently in a second activation pass
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NController.NeedsSecondMouseButtonPass">
            <summary>
            Determines the need of a second mouse button pass
            </summary>
            <remarks>
            This property is set to true if at least one of the tools NeedsSecondMouseButtonPass property is true
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NController.MouseInfo">
            <summary>
            Gets the current mouse info
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.OnToolActivated(Nevron.Diagram.WinForm.NTool)">
            <summary>
            Called when a tool has been activated
            </summary>
            <remarks>
            This method will capture the mouse in the view and fire the ToolActivated event. 
            It will also update the ActiveTool property.
            </remarks>
            <param name="tool">tool which was activated</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.OnToolDeactivated(Nevron.Diagram.WinForm.NTool)">
            <summary>
            Called when a tool has been deactivated
            </summary>
            <remarks>
            This method will release the mouse capture in the view and fire the ToolDeactivated event. 
            It will also set the ActiveTool property to null.
            </remarks>
            <param name="tool">tool which was deactivated</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.OnToolAborted(Nevron.Diagram.WinForm.NTool)">
            <summary>
            Called when a tool has been aborted
            </summary>
            <remarks>
            This method will release the mouse capture in the view and fire the ToolAborted event. 
            It will also set the ActiveTool property to null.
            </remarks>
            <param name="tool">tool which was deactivated</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.OnToolEnabled(Nevron.Diagram.WinForm.NTool)">
            <summary>
            Called when the specified tool has been enabled
            </summary>
            <remarks>
            This method will update the composite document and view filters and update the need for a second activation pass
            </remarks>
            <param name="tool">tool which was enabled</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.OnToolDisabled(Nevron.Diagram.WinForm.NTool)">
            <summary>
            Called when the specified tool has been disabled
            </summary>
            <remarks>
            This method will update the composite document and view filters and update the need for a second activation pass
            </remarks>
            <param name="tool">tool which was disabled</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.OnToolsCollectionChanged">
            <summary>
            Called when the tools collection has changed
            </summary>
            <remarks>
            This method will update the composite document and view filters and update the need for a second activation pass. 
            It will aslo fire the ToolsChanged event.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.UpdateToolsRequirements">
            <summary>
            Updates the tools hit test requirements and the need for a second processing pass
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.UpdateMouseInfo(System.Windows.Forms.MouseEventArgs,Nevron.Diagram.WinForm.MouseEvent)">
            <summary>
            Updates the current mouse info
            </summary>
            <param name="e">mouse event arguments</param>
            <param name="mouseEvent">mouse event</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NController.GetMouseEventFromButtonEvent(System.Boolean,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Obtains a known mouse event from the specified mouse event arguments
            </summary>
            <param name="buttonDown">true if this is a button down event, otherwise false</param>
            <param name="e">mouse event arguments</param>
            <returns>known mouse event</returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NMouseInfo">
            <summary>
            The NMouseInfo structure is used to store information about the 
            mouse event and mouse position in scene and device coordinates.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseInfo.Reset">
            <summary>
            Resets the mouse hit info
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NMouseInfo.MouseEvent">
            <summary>
            The event for which the info was acquired
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NMouseInfo.ScenePoint">
            <summary>
            Point in scene coordinates
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NMouseInfo.DevicePoint">
            <summary>
            Point in device coordinates
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NCreateBezierCurveTool">
            <summary>
            The NCreateBezierCurveTool creates new bezier curves
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateBezierCurveTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateBezierCurveTool.CreateElement(System.Boolean)">
            <summary>
            Overriden to call the CreateBezierCurve method of the ElementFactory
            </summary>
            <param name="preview">whether the node is for preview</param>
            <returns>new bezier curve</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateBezierCurveTool.RedefineElement(Nevron.Diagram.INDiagramElement,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Overriden to redefine a bezier curve by two points
            </summary>
            <param name="node">node to redefine</param>
            <param name="start">start point</param>
            <param name="end">end point</param>
            <returns>true if redefinition succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateBezierCurveTool.GetCurrentCursor">
            <summary>
            Overriden to return the NDWFR.CursorCreateBezierCurve cursor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NCreateCircularArcTool">
            <summary>
            The NCreateCircularArcTool creates new elliptical arcs
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateCircularArcTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateCircularArcTool.CreateElement(System.Boolean)">
            <summary>
            Overriden to call the CreateCircularArc method of the ElementFactory
            </summary>
            <param name="preview">whether the node is for preview</param>
            <returns>new elliptical arc</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateCircularArcTool.RedefineElement(Nevron.Diagram.INDiagramElement,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Overriden to redefine an elliptical arc by two points
            </summary>
            <param name="node">node to redefine</param>
            <param name="start">start point</param>
            <param name="end">end point</param>
            <returns>true if redefinition succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateCircularArcTool.GetCurrentCursor">
            <summary>
            Overriden to return the NDWFR.CursorCreateCircularArc cursor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NCreateElementByTwoPointsTool">
            <summary>
            The NCreateElementByTwoPointsTool abstract class serves as base class for all tools, 
            which create elements by two points
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateElementByTwoPointsTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateElementByTwoPointsTool.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateElementByTwoPointsTool.ProcessMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <remarks>
            Overriden to request a ready to activate cursor if not active. 
            If active it will redefine the preview node.
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateElementByTwoPointsTool.UpdateStatusBarInfo(Nevron.Diagram.WinForm.NStatusBarInfo)">
            <summary>
            Updates the specified status bar info
            </summary>
            <remarks>
            Overriden to populate the secondary info with the start and end points, 
            if the secondary info is not yet populated. 
            </remarks>
            <param name="info">status bar info</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateElementByTwoPointsTool.Activate">
            <summary>
            Activates the tool
            </summary>
            <remarks>
            Overriden to create the preview node
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateElementByTwoPointsTool.Deactivate">
            <summary>
            Deactivates the tool
            </summary>
            <remarks>
            Overriden to destroy the preview and create the real node in the document active layer. 
            The newly created node will be single selected.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateElementByTwoPointsTool.Abort">
            <summary>
            Aborts the tool if it is active
            </summary>
            <remarks>
            Overriden to destroy the preview
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateElementByTwoPointsTool.RedefineElement(Nevron.Diagram.INDiagramElement,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Must override to redefine the node by two points
            </summary>
            <param name="node">node to redefine</param>
            <param name="start">start point</param>
            <param name="end">end point</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateElementByTwoPointsTool.GetCurrentCursor">
            <summary>
            Must override to provide current tool cursor
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NCreateElementByTwoPointsTool.m_StartPoint">
            <summary>
            The start point of the create element by two points tool.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NCreateElementByTwoPointsTool.m_EndPoint">
            <summary>
            The end point of the create element by two points tool.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NCreateEllipseTool">
            <summary>
            The NCreateEllipseTool creates new ellipses
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateEllipseTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateEllipseTool.CreateElement(System.Boolean)">
            <summary>
            Overriden to call the CreateEllipse method of the ElementFactory
            </summary>
            <param name="preview">whether the node is for preview</param>
            <returns>new ellipse</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateEllipseTool.RedefineElement(Nevron.Diagram.INDiagramElement,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Overriden to redefine an ellipse by two points
            </summary>
            <param name="node">node to redefine</param>
            <param name="start">start point</param>
            <param name="end">end point</param>
            <returns>true if redefinition succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateEllipseTool.GetCurrentCursor">
            <summary>
            Overriden to return the NDWFR.CursorCreateEllipse cursor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NCreateEllipticalArcTool">
            <summary>
            The NCreateEllipticalArcTool creates new elliptical arcs
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateEllipticalArcTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateEllipticalArcTool.CreateElement(System.Boolean)">
            <summary>
            Overriden to call the CreateEllipticalArc method of the ElementFactory
            </summary>
            <param name="preview">whether the node is for preview</param>
            <returns>new elliptical arc</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateEllipticalArcTool.RedefineElement(Nevron.Diagram.INDiagramElement,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Overriden to redefine an elliptical arc by two points
            </summary>
            <param name="node">node to redefine</param>
            <param name="start">start point</param>
            <param name="end">end point</param>
            <returns>true if redefinition succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateEllipticalArcTool.GetCurrentCursor">
            <summary>
            Overriden to return the NDWFR.CursorCreateEllipticalArc cursor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NCreateLineTool">
            <summary>
            The NCreateLineTool creates new lines
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateLineTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateLineTool.CreateElement(System.Boolean)">
            <summary>
            Overriden to call the CreateLine method of the ElementFactory
            </summary>
            <param name="preview">whether the node is for preview</param>
            <returns>new line</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateLineTool.RedefineElement(Nevron.Diagram.INDiagramElement,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Overriden to redefine a line by two points
            </summary>
            <param name="node">node to redefine</param>
            <param name="start">start point</param>
            <param name="end">end point</param>
            <returns>true if redefinition succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateLineTool.GetCurrentCursor">
            <summary>
            Overriden to return the NDWFR.CursorCreateLine cursor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NCreateRectangleTool">
            <summary>
            The NCreateLineTool creates new rectangles
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateRectangleTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateRectangleTool.CreateElement(System.Boolean)">
            <summary>
            Overriden to call the CreateRectangle method of the ElementFactory
            </summary>
            <param name="preview">whether the node is for preview</param>
            <returns>new rectangle</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateRectangleTool.RedefineElement(Nevron.Diagram.INDiagramElement,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Overriden to redefine a rectangle by two points
            </summary>
            <param name="node">node to redefine</param>
            <param name="start">start point</param>
            <param name="end">end point</param>
            <returns>true if redefinition succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateRectangleTool.GetCurrentCursor">
            <summary>
            Overriden to return the NDWFR.CursorCreateRectangle cursor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NCreateShapeTool">
            <summary>
            The NCreateShapeTool creates new shapes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateShapeTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateShapeTool.#ctor(Nevron.Diagram.NShape)">
            <summary>
            Initializer constructor
            </summary>
            <param name="shape"></param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NCreateShapeTool.Shape">
            <summary>
            Gets/set the shape which must be created
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateShapeTool.CreateElement(System.Boolean)">
            <summary>
            Overriden to clone the Shape with new id
            </summary>
            <param name="preview">whether the node is for preview</param>
            <returns>new shape</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateShapeTool.RedefineElement(Nevron.Diagram.INDiagramElement,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Overriden to redefine a shape by two points
            </summary>
            <param name="node">node to redefine</param>
            <param name="start">start point</param>
            <param name="end">end point</param>
            <returns>true if redefinition succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateShapeTool.GetCurrentCursor">
            <summary>
            Overriden to return the NDWFR.CursorCreateRectangle cursor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NCreateTextTool">
            <summary>
            The NCreateTextTool creates new texts
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateTextTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateTextTool.CreateElement(System.Boolean)">
            <summary>
            Overriden to call the CreateText method of the ElementFactory
            </summary>
            <param name="preview">whether the node is for preview</param>
            <returns>new text</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateTextTool.RedefineElement(Nevron.Diagram.INDiagramElement,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Overriden to redefine a text by two points
            </summary>
            <param name="node">node to redefine</param>
            <param name="start">start point</param>
            <param name="end">end point</param>
            <returns>true if redefinition succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateTextTool.GetCurrentCursor">
            <summary>
            Overriden to return the NDWFR.CursorCreateText cursor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NCreateConnectorTool">
            <summary>
            The NCreateConnectorTool creates new connectors
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateConnectorTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateConnectorTool.ProcessMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NCreateConnectorTool.ConnectorType">
            <summary>
            Specifies the type of connector, which must be created
            </summary>
            <remarks>
            By default set to Line
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NCreateConnectorTool.AllowCreateDisconnected">
            <summary>
            Gets/sets whether partially disconnected connectors can be created
            </summary>
            <remarks>
            By default set to true
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NCreateConnectorTool.AllowCreateReflexive">
            <summary>
            Gets/sets whether reflexive connectors can be created
            </summary>
            <remarks>
            By default set to true
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NCreateConnectorTool.SnapStartPlugToShape">
            <summary>
            Specifies whether to attempt shape snapping if by default the start plug was not snapped to port
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NCreateConnectorTool.SnapEndPlugToShape">
            <summary>
            Specifies whether to attempt shape snapping if by default the end plug was not snapped to port
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateConnectorTool.Activate">
            <summary>
            Activates the tool
            </summary>
            <remarks>
            Overriden to store the FromPort and FromShape parameters as well as to create a connector preview
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateConnectorTool.Deactivate">
            <summary>
            Deactivates the tool
            </summary>
            <remarks>
            Overriden to create a new connector
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateConnectorTool.Abort">
            <summary>
            Aborts the tool if it is active
            </summary>
            <remarks>
            Overriden to destroy the preview
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateConnectorTool.CreateElement(System.Boolean)">
            <summary>
            Overriden to create a connector from the specified type and with the specified style
            </summary>
            <param name="preview">whether the node is for preview</param>
            <returns>new connector</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateConnectorTool.RedefineConnector(Nevron.Diagram.NShape,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Redefines the specified connector geometry to connect the specified start and end points
            </summary>
            <param name="connector"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateConnectorTool.HighlightPorts(Nevron.Diagram.NPort,Nevron.Diagram.NPort)">
            <summary>
            Highlights the specified ports
            </summary>
            <param name="port1">port 1</param>
            <param name="port2">port 2</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateConnectorTool.CanCreateConnector">
            <summary>
            Determines whether a connector can currently be created
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateConnectorTool.GetFromShape">
            <summary>
            Gets the from shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateConnectorTool.GetToShape">
            <summary>
            Gets the to shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateConnectorTool.IsMouseInFromShape">
            <summary>
            Determines whether the mouse is in the from shape 
            </summary>
            <returns>true if the mouse is in the from shape or the from shape does not exist, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateConnectorTool.SnapStartPlug(Nevron.Diagram.WinForm.NMouseInfo)">
            <summary>
            Called to snap the start plug. 
            The default implementation simply calls SnapShapePlug method of the snap manager. 
            Override this method to support custom start plug snapping.
            </summary>
            <param name="mouseInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateConnectorTool.SnapEndPlug(Nevron.Diagram.WinForm.NMouseInfo)">
            <summary>
            Called to snap the end plug. 
            The default implementation simply calls SnapShapePlug method of the snap manager. 
            Override this method to support custom end plug snapping.
            </summary>
            <param name="mouseInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateConnectorTool.ValidateFromPort(Nevron.Diagram.NPort)">
            <summary>
            Validates the port to which the connector start plug is going to be connected
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateConnectorTool.ValidateToPort(Nevron.Diagram.NPort)">
            <summary>
            Validates the port to which the connector end plug is going to be connected
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NCreateConnectorTool.HasLeftFromShape">
            <summary>
            Determines whether the mouse has left the from shape (if there was a from shape)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NCreateConnectorTool.StartSnapRes">
            <summary>
            Gets/sets the current snap result for the start connector plug
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NCreateConnectorTool.EndSnapRes">
            <summary>
            Gets/sets the current snap result for the end connector plug
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NCreateElementTool">
            <summary>
            The NCreateElementTool abstract class represents a mouse tool, which servers as base class for all tools which can create elements in drawing views
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateElementTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateElementTool.#ctor(System.String)">
            <summary>
            Initalizer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NCreateElementTool.SelectNewElement">
            <summary>
            Specifies whether the newly created element must be selected
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateElementTool.CanActivate">
            <summary>
            Determines whether the tool can activate
            </summary>
            <remarks>
            Overriden to check whether the tool is connected to a document and 
            if the tool requires an active layer, whether the document can provide it
            </remarks>
            <returns>true if the tool can activate, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateElementTool.Activate">
            <summary>
            Overriden to start a drag operation in the view
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateElementTool.Deactivate">
            <summary>
            Overriden to end a drag operation in the view
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateElementTool.Abort">
            <summary>
            Overriden to end a drag operation in the view
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateElementTool.CreateElement(System.Boolean)">
            <summary>
            Must override to create the node which is going to be added to the document
            </summary>
            <param name="preview">whether the node is for preview or not</param>
            <returns>valid new node</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NCreateElementTool.Element">
            <summary>
            Obtains a reference to the real element which is going to be added to the document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NCreateElementTool.Preview">
            <summary>
            Obtains a reference to the preview element
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NCreateElementTool.RequiresTargetLayer">
            <summary>
            Determines whether the tool requires an active document layer
            </summary>
            <remarks>
            This implementation returns true
            </remarks>
            <returns>true if active document layer is required, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NCreateElementTool.TargetLayer">
            <summary>
            Gets the target layer of this tool
            </summary>
            <remarks>
            This implementation returns the document active layer
            </remarks>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NCreateElementTool.m_Element">
            <summary>
            The created element.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NCreateElementTool.m_Preview">
            <summary>
            The element's preview.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NCreateGuidelineTool">
            <summary>
            The NCreateGuidelineTool creates new horizontal and vertical guidelines
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateGuidelineTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateGuidelineTool.ProcessMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <remarks>
            Overriden to update the preview guideline coordinate if the tool is active. 
            If the tool is not active it will request a guideline cursor if the mouse is 
            over the rulers and the Guidelines property of the view is true.
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateGuidelineTool.CanActivate">
            <summary>
            Determines whether the tool can activate
            </summary>
            <remarks>
            Overriden to check whether the guidelines are globally visible and whether one of the rulers is hit
            </remarks>
            <returns>true if the tool can activate, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateGuidelineTool.Activate">
            <summary>
            Activates the tool
            </summary>
            <remarks>
            Overriden to initialize the CreateHorizontal property and to create a guideline preview
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateGuidelineTool.Deactivate">
            <summary>
            Deactivates the tool
            </summary>
            <remarks>
            Overriden to destroy the guideline preview and create a new gudieline in the document
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateGuidelineTool.CreateElement(System.Boolean)">
            <summary>
            Overriden to create a horizonal or vertical guideline
            </summary>
            <param name="preview"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NCreateGuidelineTool.RequiresTargetLayer">
            <summary>
            Overriden to return false
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NCreateGuidelineTool.OperatesInWindowArea">
            <summary>
            Overriden to return false
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateGuidelineTool.IsHorizontalRulerHit">
            <summary>
            Determines whether the mouse is currently over the horizontal ruler
            </summary>
            <returns>true if the mouse is currently over the horizontal ruler, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateGuidelineTool.IsVerticalRulerHit">
            <summary>
            Determines whether the mouse is currently over the vertical ruler
            </summary>
            <returns>true if the mouse is currently over the vertical ruler, otherwise false</returns>/returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NCreateGuidelineTool.CreateHorizontal">
            <summary>
            Determines whether the tool will create a horizontal or vertical guideline
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NCreateClosedCurveTool">
            <summary>
            The NCreateClosedCurveTool creates new closed curves
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateClosedCurveTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateClosedCurveTool.CreateElement(System.Boolean)">
            <summary>
            Overriden to call the CreateClosedCurve method of the ElementFactory
            </summary>
            <param name="preview">whether the node is for preview</param>
            <returns>new closed curve</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateClosedCurveTool.GetCurrentCursor">
            <summary>
            Overriden to return the NDWFR.CursorCreateClosedCurve cursor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NCreateCurveTool">
            <summary>
            The NCreateCurveTool creates new curves
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateCurveTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateCurveTool.CreateElement(System.Boolean)">
            <summary>
            Overriden to call the CreateCurve method of the ElementFactory
            </summary>
            <param name="preview">whether the node is for preview</param>
            <returns>new curve</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreateCurveTool.GetCurrentCursor">
            <summary>
            Overriden to return the NDWFR.CursorCreateCurve cursor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NCreatePolygonTool">
            <summary>
            The NCreatePolygonTool creates new polygons
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreatePolygonTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreatePolygonTool.CanDeactivate">
            <summary>
            Determines whether the tool can deactivate
            </summary>
            <remarks>
            Overriden to return false if less than three points were accumulated
            </remarks>
            <returns>true if the tool can deactivate, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreatePolygonTool.CreateElement(System.Boolean)">
            <summary>
            Overriden to call the CreatePolygon method of the ElementFactory
            </summary>
            <param name="preview">whether the node is for preview</param>
            <returns>new polygon</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreatePolygonTool.GetCurrentCursor">
            <summary>
            Overriden to return the NDWFR.CursorCreatePolygon cursor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NCreatePolylineTool">
            <summary>
            The NCreatePolylineTool creates new polylines
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreatePolylineTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreatePolylineTool.CreateElement(System.Boolean)">
            <summary>
            Overriden to call the CreatePolyline method of the ElementFactory
            </summary>
            <param name="preview">whether the node is for preview</param>
            <returns>new polyline</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreatePolylineTool.GetCurrentCursor">
            <summary>
            Overriden to return the NDWFR.CursorCreatePolygon cursor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NCreatePolypathTool">
            <summary>
            The NCreatePolypathTool abstract class serves as base class for all tools, which create nodes with variable points count
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreatePolypathTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreatePolypathTool.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreatePolypathTool.CreateNonSerializedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreatePolypathTool.ProcessMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <remarks>
            Overriden to request a ready to activate cursor if the tool is not active. 
            If the tool is active the implementation will update the last preview point.
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreatePolypathTool.ProcessMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse down event
            </summary>
            <remarks>
            Overriden to add a new point if a new point can be added at this event
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreatePolypathTool.ProcessMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse up event
            </summary>
            <remarks>
            Overriden to add a new point if a new point can be added at this event
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NCreatePolypathTool.AddPointMouseEvent">
            <summary>
            Gets/sets the add new point mouse event
            </summary>
            <remarks>
            By default set to LeftButtonDown
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreatePolypathTool.Activate">
            <summary>
            Activates the tool
            </summary>
            <remarks>
            Overriden to create the preview. Initially the preview is 
            created with 2 points. Since not all polypaths allow 2 points 
            it can initially be represented as a polyline until the minimal 
            allowed point count is reached.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreatePolypathTool.Deactivate">
            <summary>
            Deactivates the tool
            </summary>
            <remarks>
            Overriden to destroy the preview, create the real element and add it to the document active layer. 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreatePolypathTool.Abort">
            <summary>
            Aborts the tool if it is active
            </summary>
            <remarks>
            Overriden to destroy the preview
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NCreatePolypathTool.Points">
            <summary>
            Obtains a reference to the accumulated points
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreatePolypathTool.CanAddNewPoint">
            <summary>
            Determines whether a new point can be added
            </summary>
            <remarks>
            This method will return true if the current mouse event is the AddPointMouseEvent and the tool is active.
            </remarks>
            <returns>true if a new point can be added, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreatePolypathTool.AddNewPoint">
            <summary>
            Adds a new point
            </summary>
            <remarks>
            This method will add a new point to the preview and store it the Points array.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreatePolypathTool.VerifyAddPointMouseEvent(Nevron.Diagram.WinForm.MouseEvent)">
            <summary>
            Verifies the specified new add point mouse event and throws an exception if it is not valid
            </summary>
            <remarks>
            Will throw an exception if the mouse event is MouseMove, Unrecognized or equal to the EndMouseEvent
            </remarks>
            <param name="mouseEvent">add point mouse event</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreatePolypathTool.RedefineElement(Nevron.Diagram.INDiagramElement,System.Collections.ArrayList)">
            <summary>
            Redefines the element points
            </summary>
            <param name="element"></param>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreatePolypathTool.GetCurrentCursor">
            <summary>
            Must override to provide current tool cursor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NCreatePolypathTool.VerifyNewEndMouseEvent(Nevron.Diagram.WinForm.MouseEvent)">
            <summary>
            Verifies the specified new end mouse event and throws an exception if it is not valid
            </summary>
            <remarks>
            Overriden to throw an exception if the end mouse event is equal to the add point mouse event
            </remarks>
            <param name="mouseEvent">end mouse event</param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NDragDropEventDelegatorTool">
            <summary>
            The NDragDropEventDelegatorTool class represents a tool, which is used to delegate drag and drop events to the document nodes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragDropEventDelegatorTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragDropEventDelegatorTool.ProcessDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Processes the drag drop event
            </summary>
            <remarks>
            Overriden to call the current handler OnDragDrop method in case there is a current handler
            </remarks>
            <param name="e">event arguments received from a view</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragDropEventDelegatorTool.ProcessDragLeave(System.EventArgs)">
            <summary>
            Processes the drag leave event
            </summary>
            <remarks>
            Overriden to call the current handler OnDragLeave method in case there is a current handler
            </remarks>
            <param name="e">event arguments received from a view</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragDropEventDelegatorTool.ProcessDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Processes the drag over event
            </summary>
            <remarks>
            Overriden to update the current handler and call the OnDragOver method in case there is a valid new current handler
            </remarks>
            <param name="e">event arguments received from a view</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragDropEventDelegatorTool.UpdateCurrentHandler(System.Windows.Forms.DragEventArgs)">
            <summary>
            Updates the current drag drop event handler
            </summary>
            <remarks>
            This method will perform the following actions:
            <para>
            1. Determine the new event handler. This is either the document node hit by the scene point or 
            the document itself if there is no hit node (the scene point must be inside the document bounds and the view viewport).
            </para>
            <para>
            2. If the new handler is different from the current handle and the 
            current handle is valid it will call the OnDragLeave method of the current handler.
            </para>
            <para>
            3. If the new handler is different from the current handle and the 
            new handle is valid it will call the OnDragEnter method of the new handler.
            </para>
            <para>
            4. Update the current handler to be the new handler
            </para>
            </remarks>
            <param name="e">drag event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragDropEventDelegatorTool.CreateDragEventArguments(Nevron.Dom.INNode,Nevron.GraphicsCore.NPointF,System.Windows.Forms.DragEventArgs)">
            <summary>
            Creates new drag event arguments
            </summary>
            <param name="hitNode">node which was hit</param> 
            <param name="scenePoint">point in scene coordinates</param>
            <param name="e">original drag event arguments</param>
            <returns>extended drag event arguments</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDragDropEventDelegatorTool.CurrentHandler">
            <summary>
            Obtains a reference to the current drag drop event handler
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NKeyboardEventDelegatorTool">
            <summary>
            The NKeyboardEventDelegatorTool is used to delegate drawing view keyboard events to the drawing document nodes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardEventDelegatorTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardEventDelegatorTool.ProcessKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes the key down event
            </summary>
            <param name="e">key event args</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardEventDelegatorTool.ProcessKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Processes the key press event
            </summary>
            <param name="e">key press event args</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardEventDelegatorTool.ProcessKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes the key up event
            </summary>
            <param name="e">key event args</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardEventDelegatorTool.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Processes the is input key query
            </summary>
            <param name="keyData">query key</param>
            <returns>true if the key is an input key, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardEventDelegatorTool.IsInputChar(System.Char)">
            <summary>
            Processes the is input char query
            </summary>
            <param name="keyChar">query char</param>
            <returns>true if the key is an input char, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NMouseEventDelegatorTool">
            <summary>
            The NMouseEventDelegatorTool class represents a tool, which is used to delegate mouse events to drawing document nodes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseEventDelegatorTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseEventDelegatorTool.ProcessMouseEnter(System.EventArgs)">
            <summary>
            Processes the mouse enter event
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseEventDelegatorTool.ProcessMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseEventDelegatorTool.ProcessMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse down event
            </summary>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseEventDelegatorTool.ProcessMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse up event
            </summary>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseEventDelegatorTool.ProcessMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse wheel event
            </summary>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseEventDelegatorTool.ProcessMouseLeave(System.EventArgs)">
            <summary>
            Processes the mouse leave event
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseEventDelegatorTool.ProcessClick(System.EventArgs)">
            <summary>
            Precesses the mouse click event
            </summary>
            <param name="e">event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseEventDelegatorTool.ProcessDoubleClick(System.EventArgs)">
            <summary>
            Precesses the mouse double click event
            </summary>
            <param name="e">event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseEventDelegatorTool.ProcessMouseHover(System.EventArgs)">
            <summary>
            Precesses the mouse hover event
            </summary>
            <param name="e">event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseEventDelegatorTool.UpdateCurrentHandler(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Updates the current mouse event handler
            </summary>
            <remarks>
            This method will perform the following actions:
            <para>
            1. Determine the new event handler. This is either the document node hit by the scene point or 
            the document itself if there is no hit node (the scene point must be inside the document bounds and the view viewport).
            </para>
            <para>
            2. If the new handler is different from the current handle and the 
            current handle is valid it will call the OnMouseLeave method of the current handler.
            </para>
            <para>
            3. If the new handler is different from the current handle and the 
            new handle is valid it will call the OnMouseEnter method of the new handler.
            </para>
            <para>
            4. Update the current handler to be the new handler
            </para>
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseEventDelegatorTool.CreateMouseEventArguments(Nevron.Dom.INNode,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Creates new mouse event arguments
            </summary>
            <param name="hitNode">node which was hit</param> 
            <param name="e">original mouse event arguments</param>
            <returns>extended mouse event arguments</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NMouseEventDelegatorTool.CurrentHandler">
            <summary>
            Obtains a reference to the current mouse event handler
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NContextMenuTool">
            <summary>
            The NContextMenuTool class is used to display context menus in drawing views
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NContextMenuTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NContextMenuTool.CreateNonSerializedObjects">
            <summary>
            Overriden to create the context menu editable filter
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NContextMenuTool.ProcessMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse down event
            </summary>
            <remarks>
            Overriden to call the ShowContextMenu method if the current mouse event is the 
            ShowMenuMouseEvent and the controller is second activation pass.
            </remarks> 
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NContextMenuTool.ProcessMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse up event
            </summary>
            <remarks>
            Overriden to call the ShowContextMenu method if the current mouse event is the 
            ShowMenuMouseEvent and the controller is second activation pass.
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NContextMenuTool.ShowMenuMouseEvent">
            <summary>
            Gets/sets the show menu mouse event
            </summary>
            <remarks>
            By default set to RightButtonUp
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NContextMenuTool.ContextMenuEditableFilter">
            <summary>
            Gets/sets the context menu editable filter
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NContextMenuTool.NeedsSecondMouseButtonPass">
            <summary>
            Overriden to return true
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NContextMenuTool.ShowContextMenu">
            <summary>
            Shows the context menu
            </summary>
            <remarks>
            This method will perform the following actions:
            <para>
            1. Get the last document hit which satisfies the ContextMenuEditableFilter (if any)
            </para>
            <para>
            2. Call the DetermineContextMenuElement method with the result of the previous step to determine the actual element for which the menu must be shown
            </para>
            <para>
            3. Call the BuildContextMenu of the view, and if a valid menu was constructed show it
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NContextMenuTool.DetermineContextMenuElement(Nevron.Dom.INElement)">
            <summary>
            Determines the element for which a context menu must be show
            </summary>
            <remarks>
            This method will perform the following steps:
            <para>
            1. If the passed element is null it will return the document. 
            </para>
            <para>
            2. If the passed element is selected it will return the passed element
            </para>
            <para>
            3. If the passed element is not selected it will try to return the first selected ancestor of the element
            </para>
            4. If the passed element is not selected and none of its ancestor is selected it will select the first layer child in the path (or the element) and return it.
            </remarks>
            <param name="element">hit element (can be null)</param>
            <returns>element for which to show the menu</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NContextMenuTool.VerifyNewShowMenuMouseEvent(Nevron.Diagram.WinForm.MouseEvent)">
            <summary>
            Verifies the specified new show menu mouse event and throws an exception if it is not valid
            </summary>
            <param name="mouseEvent">show menu mouse event</param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NDragDropTargetTool">
            <summary>
            The NDragDropTargetTool class represents a tool, 
            which is used to extend the drawing view as a drag drop target
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragDropTargetTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragDropTargetTool.ProcessDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Processes the drag over event 
            </summary>
            <remarks>
            If the mouse left the view window this method will destroy the preview.
            Otherwise it will create it (if not created) and translate it.
            Then it will update the drag drop effect
            </remarks>
            <param name="e"></param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragDropTargetTool.ProcessDragLeave(System.EventArgs)">
            <summary>
            Processes the drag leave event 
            </summary>
            <remarks>
            Overriden to destroy the possibly created data object preview
            </remarks>
            <param name="e"></param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragDropTargetTool.ProcessDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Processes the drag drop event 
            </summary>
            <remarks>
            Overriden to the drag drop data object in the document active layer
            </remarks>
            <param name="e"></param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragDropTargetTool.StartMove(System.Windows.Forms.IDataObject)">
            <summary>
            Starts to move a preview of the objects contained in the specified data object
            </summary>
            <param name="dataObject"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragDropTargetTool.Move">
            <summary>
            Moves the preview
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragDropTargetTool.EndMove(System.Boolean)">
            <summary>
            Ends the preview move and optionally commits the result
            </summary>
            <param name="commit"></param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDragDropTargetTool.IsPreviewCreated">
            <summary>
            Determines whether the preview is created
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NDrawingDragDropTool">
            <summary>
            The NDrawingDragDropTool class serves as base class for all drag and drop tools of drawing views
            </summary>
            <remarks>
            Tools, which derive from this class can use the references to a NDrawingView and NDrawingDocument 
            instances cashed by this tool type.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingDragDropTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingDragDropTool.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingDragDropTool.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to cashe references to NDrawingView and NDrawingDocument instances
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingDragDropTool.View">
            <summary>
            Obtains a reference to the drawing view to which this tool is connected
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingDragDropTool.Document">
            <summary>
            Obtains a reference to the drawing document to which this tool is connected
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NDrawingDragTool">
            <summary>
            The NDrawingDragTool class serves as base class for drag tools of drawing views
            </summary>
            <remarks>
            Tools, which derive from this class can use the references to a NDrawingView and NDrawingDocument 
            instances cashed by this tool type. It also implements the INStatusBarInfo interface, which is used 
            by the drawing view to propagate status bar update requests to the currently active tool.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingDragTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingDragTool.#ctor(System.String)">
            <summary>
            Initalizer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingDragTool.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to cashe references to NDrawingView and NDrawingDocument instances
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingDragTool.UpdateStatusBarInfo(Nevron.Diagram.WinForm.NStatusBarInfo)">
            <summary>
            Updates the specified status bar info
            </summary>
            <remarks>
            If the primary info is still empty it will populate it with the tool name. 
            Note that this method is called only when the tool is active.
            </remarks>
            <param name="info">status bar info</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingDragTool.View">
            <summary>
            Obtains a reference to the drawing view to which this tool is connected
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingDragTool.Document">
            <summary>
            Obtains a reference to the drawing document to which this tool is connected
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NDrawingMouseAndKeyboardTool">
            <summary>
            The NDrawingMouseAndKeyboardTool class serves as base class for all mouse and keyboard tools of drawing views
            </summary>
            <remarks>
            Tools, which derive from this class can use the references to a NDrawingView and NDrawingDocument 
            instances cashed by this tool type.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMouseAndKeyboardTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMouseAndKeyboardTool.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMouseAndKeyboardTool.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to cashe references to NDrawingView and NDrawingDocument instances
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingMouseAndKeyboardTool.View">
            <summary>
            Obtains a reference to the drawing view to which this tool is connected
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingMouseAndKeyboardTool.Document">
            <summary>
            Obtains a reference to the drawing document to which this tool is connected
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NHandleTool">
            <summary>
            The NHandleTool class is used to drag handles in drawing views
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandleTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandleTool.CreateNonSerializedObjects">
            <summary>
            Overriden to initialize the handles filter
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandleTool.ProcessMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <remarks>
            Overriden to call the Drag handle method if the tool is active.
            If the tool is not active it will try to obtain the last hit handle and request its cursor and tooltip.
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandleTool.UpdateStatusBarInfo(Nevron.Diagram.WinForm.NStatusBarInfo)">
            <summary>
            Updates the specified status bar info
            </summary>
            <param name="info">status bar info</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandleTool.CanActivate">
            <summary>
            Determines whether the tool can activate
            </summary>
            <remarks>
            Overriden to return false if the mouse is not over a handle
            </remarks>
            <returns>true if the tool can activate, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandleTool.Activate">
            <summary>
            Activates the tool
            </summary>
            <remarks>
            Overriden to store a reference to the last hit handle, which can be obtained from the DraggedHandle property.
            Also calls the BeginDragging method of the handle.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandleTool.Deactivate">
            <summary>
            Deactivates the tool
            </summary>
            <remarks>
            Overriden to call the EndDragging method of the dragged handle and reset the reference to it.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandleTool.Abort">
            <summary>
            Overriden to call the CancelDragging method of the dragged handle and reset the reference to it.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NHandleTool.HandlesFilter">
            <summary>
            Gets/sets the handles filter
            </summary>
            <remarks>
            By default set to NInstanceOfTypeFilter(typeof(NHandle))
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NHandleTool.DraggedHandle">
            <summary>
            Obtains a reference to the currently dragged handle
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandleTool.SnapDraggedHandle">
            <summary>
            Snaps the currently dragged handle
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NInplaceEditTool">
            <summary>
             The NInplaceEditTool class is used for the inplace editing of document nodes in drawing views
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NInplaceEditTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NInplaceEditTool.CreateNonSerializedObjects">
            <summary>
            Overriden to create the inplace editable filter
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NInplaceEditTool.ProcessMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse down event
            </summary>
            <overriden>
            Overriden to call the Activate method if the tool can activate
            </overriden>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NInplaceEditTool.ProcessMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse up event
            </summary>
            <overriden>
            Overriden to call the Activate method if the tool can activate
            </overriden>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NInplaceEditTool.InplaceEditMouseEvent">
            <summary>
            Gets/sets the inplace edit mouse event. By default set to LeftButtonDoubleClick
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NInplaceEditTool.InplaceEditableFilter">
            <summary>
            Gets/sets the inplace editable filter. By default set to permission(InplaceEdit)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NInplaceEditTool.VerifyNewInplaceEditMouseEvent(Nevron.Diagram.WinForm.MouseEvent)">
            <summary>
            Verifies the specified new inplace edit mouse event and throws an exception if it is not valid
            </summary>
            <param name="mouseEvent">inplace edit mouse event</param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NKeyboardTool">
            <summary>
            The NKeyboardTool class is used to process single key actions in drawing views
            </summary>
            <remarks>
            Currently the tool is configured to perform the following actions:
            <list type="bullet">
            <item>
            	<term>Delete nodes</term>
            	<description>
            	Deletes all selected nodes when the DeleteKey is down
            	</description>
            </item>
            <item>
            	<term>Nudge nodes</term>
            	<description>
            	Perform a nudge operation in the respective direciton when the NudgeResizeLeftKey, 
            	NudgeResizeRightKey, NudgeResizeTopKey or NudgeResizeBottomKey is down and the 
            	NudgeResizeModifierKey is not down.
            	</description>
            </item>
            <item>
            	<term>Resize nodes</term>
            	<description>
            	Perform a resize operation in the respective direciton when the NudgeResizeLeftKey, 
            	NudgeResizeRightKey, NudgeResizeTopKey or NudgeResizeBottomKey is down and the 
            	NudgeResizeModifierKey is down.
            	</description>
            </item>
            <item>
            	<term>Zoom in and out</term>
            	<description>
            	Perform a Zoom in or Zoom out operation when the ZoomInKey or ZoomOutKey is down
            	</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardTool.ProcessKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes the key down event
            </summary>
            <remarks>
            Overriden to perform the action corresponding to the down key
            </remarks>
            <param name="e">key event args</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardTool.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Processes the is input key query
            </summary>
            <remarks>
            Overriden to return true if the keyData is equal to one of the action keys
            </remarks>
            <param name="keyData">query key</param>
            <returns>true if the key is an input key, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NKeyboardTool.DeleteKey">
            <summary>
            Gets/sets the delete key
            </summary>
            <remarks>
            By default set to Keys.Delete
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NKeyboardTool.ZoomInKey">
            <summary>
            Gets/sets the Zoom in key
            </summary>
            <remarks>
            By default set to Keys.Oemplus
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NKeyboardTool.ZoomOutKey">
            <summary>
            Gets/sets the Zoom out key
            </summary>
            <remarks>
            By default set to Keys.OemMinus
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NKeyboardTool.NudgeResizeLeftKey">
            <summary>
            Gets/sets the nudge/resize left key
            </summary>
            <remarks>
            By default set to Keys.Left
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NKeyboardTool.NudgeResizeTopKey">
            <summary>
            Gets/sets the nudge/resize top key
            </summary>
            <remarks>
            By default set to Keys.Up
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NKeyboardTool.NudgeResizeRightKey">
            <summary>
            Gets/sets the nudge/resize right key
            </summary>
            <remarks>
            By default set to Keys.Right
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NKeyboardTool.NudgeResizeBottomKey">
            <summary>
            Gets/sets the nudge/resize bottom key
            </summary>
            <remarks>
            By default set to Keys.Down
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NKeyboardTool.NudgeResizeModifierKey">
            <summary>
            Gets/sets the nudge/resize modifier key
            </summary>
            <remarks>
            By default set to Keys.Control
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardTool.VerifyNewDeleteKey(System.Windows.Forms.Keys)">
            <summary>
            Verifies the specified new delete key and throws an exception if it is not valid
            </summary>
            <param name="key">new delete key</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardTool.VerifyNewZoomInKey(System.Windows.Forms.Keys)">
            <summary>
            Verifies the specified new zoom in key and throws an exception if it is not valid
            </summary>
            <param name="key">new zoom in key</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardTool.VerifyNewZoomOutKey(System.Windows.Forms.Keys)">
            <summary>
            Verifies the specified new zoom out key and throws an exception if it is not valid
            </summary>
            <param name="key">new zoom out key</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardTool.VerifyNewNudgeResizeLeftKey(System.Windows.Forms.Keys)">
            <summary>
            Verifies the specified new nudge/resize left key and throws an exception if it is not valid
            </summary>
            <param name="key">new nudge/resize left key</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardTool.VerifyNewNudgeResizeTopKey(System.Windows.Forms.Keys)">
            <summary>
            Verifies the specified new nudge/resize top key and throws an exception if it is not valid
            </summary>
            <param name="key">new nudge/resize top key</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardTool.VerifyNewNudgeResizeRightKey(System.Windows.Forms.Keys)">
            <summary>
            Verifies the specified new nudge/resize right key and throws an exception if it is not valid
            </summary>
            <param name="key">new nudge/resize right key</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardTool.VerifyNewNudgeResizeBottomKey(System.Windows.Forms.Keys)">
            <summary>
            Verifies the specified new nudge/resize bottom key and throws an exception if it is not valid
            </summary>
            <param name="key">new nudge/resize bottom key</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardTool.VerifyNewNudgeResizeModifierKey(System.Windows.Forms.Keys)">
            <summary>
            Verifies the specified new nudge/resize modifier key and throws an exception if it is not valid
            </summary>
            <param name="key">new nudge/resize modifier key</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardTool.NudgeOrResizeLeft">
            <summary>
            Nudges to the left or decreases the width of the selected nodes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardTool.NudgeOrResizeRight">
            <summary>
            Nudges to the right or increase the width of the selected nodes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardTool.NudgeOrResizeTop">
            <summary>
            Nudges to the top or decrease the height of the selected nodes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardTool.NudgeOrResizeBottom">
            <summary>
            Nudges to the bottom or increase the height of the selected nodes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardTool.Delete">
            <summary>
            Deletes the selected nodes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardTool.ZoomIn">
            <summary>
            Zooms the view in
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NKeyboardTool.ZoomOut">
            <summary>
            Zooms the view out
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NMoveTool">
            <summary>
            The NMoveTool class represents a mouse tool, which is used to translate selected nodes inside drawing views or drag and drop them in another view
            </summary>
            <remarks>
            The NMoveTool can operate in three modes:
            <list type="bullet">
            <item>
            	<term>Move</term>
            	<description>
            	In this mode the move tool will only move selected document nodes
            	</description>
            </item>
            <item>
            	<term>Drag Drop</term>
            	<description>
            	In this mode the move tool will only drag and drop selected document nodes to another view 
            	</description>
            </item>
            <item>
            	<term>Move and Drag Drop</term>
            	<description>
            	In this mode the move tool will move the selected document nodes until the mouse leaves the window, then it will perform drag and drop
            	</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMoveTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMoveTool.#ctor(Nevron.Diagram.WinForm.MoveToolMode,System.Boolean)">
            <summary>
            Initializer contructor
            </summary>
            <param name="mode">move tool mode</param>
            <param name="allowDuplication">indicates whether Duplication is allowed</param> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMoveTool.CreateNonSerializedObjects">
            <summary>
            Overriden to create the moveable filter
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMoveTool.ProcessMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <remarks>
            In MoveToolMode.Move it will simply call the Move method. 
            In MoveToolMode.DragDrop or MoveToolMode.MoveAndDragDrop it will call either Move or DoDragDrop depending on the mouse position. 
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMoveTool.UpdateStatusBarInfo(Nevron.Diagram.WinForm.NStatusBarInfo)">
            <summary>
            Updates the specified status bar info
            </summary>
            <remarks>
            Overriden to update the secondary info with the bounds of the moved batch, 
            if the batch is valid and the secondary info is not yet populated.
            </remarks>
            <param name="info">status bar info</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NMoveTool.Mode">
            <summary>
            Controls the mode in which the move tool operates
            </summary>
            <remarks>
            By default set to MoveAndDragDrop
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NMoveTool.AllowDuplication">
            <summary>
            Specifies whether it is allowed to create duplicates of the moved elements, when the Control key is pressed
            </summary>
            <remarks>
            By default set to true
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NMoveTool.DuplicationNeededOffset">
            <summary>
            Gets/sets the needed offset the mouse must make from its start position in order for an element duplication to be created. By default set to 2 pixels
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NMoveTool.MoveNeededOffset">
            <summary>
            Gets/sets the needed offset the mouse must make from its start position in order for an element to be considered as moved and a preview to be generated. By default set to 1 pixel
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NMoveTool.MoveableFilter">
            <summary>
            Gets/sets the handles filter
            </summary>
            <remarks>
            By default set to the following expression:
            permissions(AllowXMove) or permissions(AllowYMove)
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMoveTool.CanActivate">
            <summary>
            Determines whether the tool can activate
            </summary>
            <remarks>
            Overriden to check whether there are any moveable selected nodes under the specified point
            </remarks>
            <returns>true if the tool can activate, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMoveTool.Activate">
            <summary>
            Activates the tool
            </summary>
            <remarks>
            Overriden to call the StartMove method
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMoveTool.Deactivate">
            <summary>
            Deactivates the tool
            </summary>
            <remarks>
            Overriden to call the EndMove(true) method in MoveToolMode.Move and MoveToolMode.MoveAndDragDrop modes, 
            and the EndMove(false) method in MoveToolMode.DragDrop.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMoveTool.Abort">
            <summary>
            Aborts the tool if it is active
            </summary>
            <remarks>
            Overriden to call the EndMove(false) method
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NMoveTool.NeedsSecondMouseButtonPass">
            <summary>
            Overriden to return true
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMoveTool.RequestReadyToActivateCursor(System.Windows.Forms.Cursor)">
            <summary>
            Called when the tool is inactive but is ready to be activated and requests a cursor for visual feedback
            </summary>
            <remarks>
            Overriden to request the cursor if the view window contains the mouse and there are any 
            moveable selected nodes under the current mouse point.
            </remarks>
            <param name="cursor">requested cursor</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMoveTool.StartMove">
            <summary>
            Starts to move a preview of the objects contained in the specified data object
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMoveTool.Move">
            <summary>
            Moves the preview
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMoveTool.EndMove(System.Boolean)">
            <summary>
            Ends the preview move and optionally commits the result
            </summary>
            <param name="commit"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMoveTool.DoDragDrop">
            <summary>
            Starts a drag and drop operation with the currently selected nodes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NMoveTool.MoveCursor">
            <summary>
            Gets/sets the move cursor which corresponds to the batch allow move X and Y permissions
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMoveTool.CanDuplicate">
            <summary>
            Determines whether the move tool is currently capable of commiting a moved elements duplicate
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NPanTool">
            <summary>
            The NPanTool class is used for the interactive scrolling of drawing views
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPanTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPanTool.CreateNonSerializedObjects">
            <summary>
            Creates any non serialized objects, which the holder posseses
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPanTool.ProcessMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <remarks>
            When not active this implementation will call the RequestReadyToActivateCursor with the HandOpened cursor. 
            When active the tool will scroll the view and request the HandClosed cursor.
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NPanTool.HandOpened">
            <summary>
            Gets/sets the opened hand cursor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NPanTool.HandClosed">
            <summary>
            Gets/sets the closed hand cursor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPanTool.CanActivate">
            <summary>
            Determines whether the tool can activate
            </summary>
            <remarks>
            Overriden to check whether the view layout is not set to Fit or Stretch.
            </remarks>
            <returns>true if the tool can activate, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPanTool.Activate">
            <summary>
            Activates the tool
            </summary>
            <remarks>
            Overriden to store the start viewport origin
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPanTool.Abort">
            <summary>
            Aborts the tool if it is active
            </summary>
            <remarks>
            Overriden to restore the start viewport origin
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NPanTool.StartViewportOrigin">
            <summary>
            Returns the viewport origin of the view when the tool was activated
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NSelectorTool">
            <summary>
            The NSelectorTool class is used to interactively select document nodes in drawing views
            </summary>
            <remarks>
            The NSelectorTool can operate in three modes:
            <list type="bullet">
            <item>
            	<term>Click Select</term>
            	<description>
            	In this mode the selector will only select a single object when the user clicks on it (actually on StartMouseEvent)
            	</description>
            </item>
            <item>
            	<term>Region Select</term>
            	<description>
            	In this mode the selector will only select the nodes which are hit by the rectangle which the user dragged.
            	</description>
            </item>
            <item>
            	<term>Click and region select</term>
            	<description>
            	In this mode if the user clicked on a node the selector will single select it, otherwise it will perform a Region Select.
            	</description>
            </item>
            </list>
            The NSelectorTool tool also adds support for drill down selection. 
            Drill down selection occurs on EndMouseEvent. Drill down selection iterates on the 
            selectable path of the clicked node from the active layer.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.#ctor(Nevron.Diagram.WinForm.SelectorToolMode,System.Boolean,System.Boolean)">
            <summary>
            Initializer contructor
            </summary>
            <param name="mode">selector tool mode</param>
            <param name="allowDrillDown">whether drill down selection is allowed</param>
            <param name="highlightRegionTargets">whether region selection targets should be highlighted</param> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.ProcessMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse down event
            </summary>
            <remarks>
            Overriden to perform click select if it can be performed and 
            perform drill down select if it can be performed.
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.ProcessMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <remarks>
            Overriden to update the selector region if the tool is active and the mode RegionSelect or ClickAndRegionSelect
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.ProcessMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse down event
            </summary>
            <remarks>
            Overriden to perform click select if it can be performed and 
            perform drill down select if it can be performed.
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.UpdateStatusBarInfo(Nevron.Diagram.WinForm.NStatusBarInfo)">
            <summary>
            Updates the specified status bar info
            </summary>
            <remarks>
            Overriden to populate the secondary info with the selector rect bounds if it is valid 
            and the secondary info is not yet populated.
            </remarks>
            <param name="info">status bar info</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelectorTool.Mode">
            <summary>
            Controls the mode in which the selector tool operates
            </summary>
            <remarks>
            By default set to ClickAndRegionSelect
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelectorTool.AllowDrillDown">
            <summary>
            Specifies whether drill down selection is allowed
            </summary>
            <remarks>
            By default set to true
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelectorTool.HighlightRegionTargets">
            <summary>
            Specifies whether the selector tool must highlight the selection targets, when it performs regional selection 
            </summary>
            <remarks>
            By default set to true
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.CanActivate">
            <summary>
            Determines whether the tool can activate
            </summary>
            <remarks>
            Overriden to prohibit tool activation if mode is set to ClickSelect
            </remarks>
            <returns>true if the tool can activate, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.Activate">
            <summary>
            Activates the tool
            </summary>
            <remarks>
            Overriden to create the selector region
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.Deactivate">
            <summary>
            Deactivates the tool
            </summary>
            <remarks>
            Overriden to perform region select and destroy the selector region
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.Abort">
            <summary>
            Aborts the tool if it is active
            </summary>
            <remarks>
            Overriden to destroy the selector region
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelectorTool.NeedsSecondMouseButtonPass">
            <summary>
            Overriden to return true
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.CanClickSelect">
            <summary>
            Determines whether click select can be performed
            </summary>
            <returns>true if click select can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.ClickSelect">
            <summary>
            Performs a click select
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.CanDrillDownSelect">
            <summary>
            Determines whether drill down select can be performed
            </summary>
            <returns>true if drill down select can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.DrillDownSelect">
            <summary>
            Performs a drill down select
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.RegionSelect">
            <summary>
            Performs a region select
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.CreateSelectorRegion">
            <summary>
            Creates the selector region.
            This implementation will currently create a selector rectangle and add it to the preview layer
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.DestroySelectorRegion">
            <summary>
            Destroys the selector region.
            This implementation will destory the selector rectangle from the preview layer.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.UpdateSelectorRegion">
            <summary>
            Updates teh selector region
            </summary>
            <remarks>
            This implementation will update the selector rectangle with the current and start mouse hit infos 
            and highlight the nodes hit by it
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.GetSelectableNodesFromRect(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Returns a list from the selectable nodes hit by the specified rect
            </summary>
            <param name="rect">rect in device coordinates</param>
            <returns>selectable nodes hit by the rectangle</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.GetSelectableNodesFromPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Returns a list from the selectable nodes hit by the specified point
            </summary>
            <param name="rect">rect in device coordinates</param>
            <returns>selectable nodes hit by the rectangle</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.GetSelectionPath(Nevron.Dom.INNode)">
            <summary>
            For a given node, gets the path of selectable ancestors in its ancestors chain include the node itself
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.GetSelectedNodeInSelectionPath(Nevron.Dom.NNodeList)">
            <summary>
            Gets the one and only (if any) selected node in a selection path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.GetSelectedDrilledNodes(Nevron.Dom.INNode,Nevron.Dom.INNode,Nevron.Dom.NNodeList@,System.Collections.Generic.List{Nevron.Dom.NNodeList}@)">
            <summary>
            For a given first level node gets the selected nodes to which the user has drilled excluding the specified excluded node
            </summary>
            <param name="firstNode"></param>
            <param name="excludedNode"></param>
            <param name="drilledNodes"></param>
            <param name="drilledNodesPaths"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelectorTool.GetDeeptestDrillDownCounterpart(Nevron.Dom.NNodeList,Nevron.Dom.NNodeList,System.Collections.Generic.List{Nevron.Dom.NNodeList})">
            <summary>
            For a click
            </summary>
            <param name="clickedPath"></param>
            <param name="drilledNodes"></param>
            <param name="drilledNodesPaths"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool">
            <summary>
            The NMouseWheelScrollAndZoomTool class is used to perform mouse wheel scolling and zooming of drawing views
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.CreateNonSerializedObjects">
            <summary>
            Overriden to create the context menu editable filter
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.ProcessMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.ProcessMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden to perform the mouse wheel zoom and scroll
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.CanDeactivate">
            <summary>
            Overriden to block deactivation, if the DeactiveDelay period has not expired
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.CanActivate">
            <summary>
            Overriden to block activation, if the ActivateDelay period has not expired
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.Activate">
            <summary>
            Overriden to start the anchor scrolling feature
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.Deactivate">
            <summary>
            Overriden to stop the anchor scrolling feature
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.Abort">
            <summary>
            Overriden to stop the anchor scrolling feature
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.ScrollByDefault">
            <summary>
            When set to true the tool will scroll the view by default, otherwise it will zoom it. Use the ToggleScrollZoomModifierKey to switch to the other action). By default true.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.AllowAnchorScrolling">
            <summary>
            Specifies whether anchor anchor scrolling is allowed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.AllowWheelScrolling">
            <summary>
            Specifies whether wheel scrolling is allowed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.AllowWheelZooming">
            <summary>
            Specifies whether wheel zooming is allowed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.Time">
            <summary>
            Controls the speed of the anchor scrolling. Measured in milliseconds. By default set to 100.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.DeactiveDelay">
            <summary>
            Controls the delay which must ellapse, before the tool can be deactivated (in milliseconds). By default set to 500.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.ActivateDelay">
            <summary>
            Controls the delay which must ellapse, before the tool can be activated again (in milliseconds). By default set to 500.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.UnitScrollDistance">
            <summary>
            Controls the distance between the start and current mouse position for which the tool must perform a single unit scroll. Measured in pixels.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.NoScrollDistance">
            <summary>
            Controls the distance between the start and current mouse position below which no scolling is performed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.ToggleScrollZoomModifierKey">
            <summary>
            Gets/sets the modifier key, which when pressed, toggles wheel zooming and scrolling. Whether zooming or scrolling is performed by default is specified by the ScrollByDefault property.
            By default set to Control.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.DefaultScrollVertical">
            <summary>
            Gets/sets whether to perform vertical or horizontal scrolling when the mouse wheel is rotated. By default set to true (e.g. scroll vertically)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.FlipScrollDirectionModifierKey">
            <summary>
            Gets/sets the modifier key, which flips the wheel scroll direction. By default the tool will scroll either horizontally or vertically as specified by the DefaultScrollVertical property. By default set to Shift.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.ZoomToMouseCursor">
            <summary>
            Gets/sets whether to zoom to the the mouse cursor center. 
            When set to true, the zooming will preserve the current mouse position projection in viewport coordinates.
            When set to false, the zooming will preserve the current viewport center.
            By default set to true;
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.StartAnchorScrolling">
            <summary>
            Starts the anchor scrollings
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.StopAnchorScrolling">
            <summary>
            Stops the anchor scrolling
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.OnScrollTimerTick(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.DoWheelZoom(System.Int32)">
            <summary>
            Performs wheel zooming, if allowed
            </summary>
            <param name="delta"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.DoWheelScroll(System.Int32)">
            <summary>
            Performs wheel scrolling
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.VerifyNewToggleScrollZoomModifierKey(System.Windows.Forms.Keys)">
            <summary>
            Verifies the specified new zoom modifier key and throws an exception if it is not valid
            </summary>
            <param name="key">new zoom modifier key</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseWheelScrollAndZoomTool.VerifyNewFlipScrollDirectionModifierKey(System.Windows.Forms.Keys)">
            <summary>
            Verifies the specified new horizontal scroll modifier key and throws an exception if it is not valid
            </summary>
            <param name="key">new horizontal scroll modifier </param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NLibraryContextMenuTool">
            <summary>
            The NLibraryContextMenuTool class is used to display context menus in library views
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryContextMenuTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryContextMenuTool.CreateNonSerializedObjects">
            <summary>
            Overriden to initialize the context menu editable filter
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryContextMenuTool.ProcessMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse down event
            </summary>
            <remarks>
            Overriden to call the ShowContextMenu method if the current mouse event is the 
            ShowMenuMouseEvent and the controller is in second mouse button processing pass.
            </remarks> 
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryContextMenuTool.ProcessMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse up event
            </summary>
            <remarks>
            Overriden to call the ShowContextMenu method if the current mouse event is the 
            ShowMenuMouseEvent and the controller is in second mouse button processing pass.
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryContextMenuTool.ShowMenuMouseEvent">
            <summary>
            Gets/sets the show menu mouse event
            </summary>
            <remarks>
            By default set to RightButtonUp
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryContextMenuTool.ContextMenuEditableFilter">
            <summary>
            Gets/sets the context menu editable filter
            </summary>
            <remarks>
            By default set to represent the following expression
            <para>
            typeof(INContextMenuEditable) AND permissions(AllowContextMenuEdit) AND permissions(AllowSelect)
            </para>
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryContextMenuTool.NeedsSecondMouseButtonPass">
            <summary>
            Overriden to return true
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryContextMenuTool.ShowContextMenu">
            <summary>
            Shows the context menu
            </summary>
            <remarks>
            This method will perform the following actions:
            <para>
            1. Get the last document hit which satisfies the ContextMenuEditableFilter (if any)
            </para>
            <para>
            2. Call the DetermineContextMenuNode method with the result of the previous step to determine the actual node for which the menu must be shown
            </para>
            <para>
            3. Call the BuildContextMenu of the view, and if a valid menu was constructed show it
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryContextMenuTool.DetermineContextMenuNode(Nevron.Dom.INNode)">
            <summary>
            Determines the node for which a context menu must be show
            </summary>
            <remarks>
            This method will perform the following steps:
            <para>
            1. If the passed node is null it will return the document. 
            </para>
            2. If the passed node is not selected it will single select it
            </remarks>
            <param name="node">hit node (can be null)</param>
            <returns>node for which to show the menu</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryContextMenuTool.VerifyNewShowMenuMouseEvent(Nevron.Diagram.WinForm.MouseEvent)">
            <summary>
            Verifies the specified new show menu mouse event and throws an exception if it is not valid
            </summary>
            <param name="mouseEvent">show menu mouse event</param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NLibraryDragDropTool">
            <summary>
            The NLibraryDragDropTool class serves as base class for all drag and drop tools of library views
            </summary>
            <remarks>
            Tools, which derive from this class can use the references to a NLibraryView and NLibraryDocument 
            instances cashed by this tool type.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryDragDropTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryDragDropTool.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryDragDropTool.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to cashe references to NLibraryView and NLibraryDocument instances
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryDragDropTool.View">
            <summary>
            Obtains a reference to the drawing view to which this tool is connected
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryDragDropTool.Document">
            <summary>
            Obtains a reference to the drawing document to which this tool is connected
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NLibraryDragTool">
            <summary>
            The NLibraryDragTool class serves as base class for drag tools of library views
            </summary>
            <remarks>
            Tools, which derive from this class can use the references to a NLibraryView and NLibraryDocument 
            instances cashed by this tool type.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryDragTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryDragTool.#ctor(System.String)">
            <summary>
            Initalizer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryDragTool.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to cashe references to NLibraryView and NLibraryDocument instances
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryDragTool.View">
            <summary>
            Obtains a reference to the drawing view to which this tool is connected
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryDragTool.Document">
            <summary>
            Obtains a reference to the drawing document to which this tool is connected
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NLibraryDropTargetTool">
            <summary>
            The NLibraryDropTargetTool class represents a tool, which is used to extend the library view as a drag drop target
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryDropTargetTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryDropTargetTool.ProcessDragLeave(System.EventArgs)">
            <summary>
            Processes the drag leave event 
            </summary>
            <remarks>
            Overriden to destroy the possibly created data object preview
            </remarks>
            <param name="e"></param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryDropTargetTool.ProcessDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Processes the drag over event 
            </summary>
            <remarks>
            Overriden to update the drag drop effect
            </remarks>
            <param name="e"></param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryDropTargetTool.ProcessDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Processes the drag drop event 
            </summary>
            <remarks>
            Overriden to drop the data object in the library
            </remarks>
            <param name="e"></param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryDropTargetTool.StartMove(System.Windows.Forms.IDataObject)">
            <summary>
            Creates a preview the specified data object 
            </summary>
            <param name="dataObject">data object to preview</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryDropTargetTool.Move">
            <summary>
            Translates the preview
            </summary>
            <returns>true if translation was successfull, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryDropTargetTool.EndMove">
            <summary>
            Ends the preview move and optionally commits the result
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryDropTargetTool.IsPreviewCreated">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NLibraryKeyboardTool">
            <summary>
            The NLibraryKeyboardTool class is used to process single key actions in library views
            </summary>
            <remarks>
            Currently the tool is configured to perform the following actions:
            <list type="bullet">
            <item>
            	<term>Delete nodes</term>
            	<description>
            	Deletes all selected nodes when the DeleteKey is down
            	</description>
            </item>
            <item>
            	<term>Select items</term>
            	<description>
            	Select the item in the respective direciton when the SelectFocusPreviosKey, 
            	SelectFocusNextKey, SelectFocusPreviousInColKey or SelectFocusNextInColKey is down and 
            	the SelectFocusModifierKey is not down.
            	</description>
            </item>
            <item>
            	<term>Focus items</term>
            	<description>
            	Focus the item in the respective direciton when the SelectFocusPreviosKey, 
            	SelectFocusNextKey, SelectFocusPreviousInColKey or SelectFocusNextInColKey is down and 
            	the SelectFocusModifierKey is down.
            	</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryKeyboardTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryKeyboardTool.ProcessKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes the key down event
            </summary>
            <remarks>
            Overriden to perform the action corresponding to the down key
            </remarks>
            <param name="e">key event args</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryKeyboardTool.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Processes the is input key query
            </summary>
            <remarks>
            Overriden to return true if the keyData is equal to one of the action keys
            </remarks>
            <param name="keyData">query key</param>
            <returns>true if the key is an input key, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryKeyboardTool.DeleteKey">
            <summary>
            Gets/sets the delete key
            </summary>
            <remarks>
            By default set to Keys.Delete
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryKeyboardTool.SelectFocusPreviosKey">
            <summary>
            Gets/sets the select previous key
            </summary>
            <remarks>
            By default set to Keys.Left
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryKeyboardTool.SelectFocusPreviousInColKey">
            <summary>
            Gets/sets the select previous in col key
            </summary>
            <remarks>
            By default set to Keys.Up
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryKeyboardTool.SelectFocusNextKey">
            <summary>
            Gets/sets the select next key
            </summary>
            <remarks>
            By default set to Keys.Right
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryKeyboardTool.SelectFocusNextInColKey">
            <summary>
            Gets/sets the select next in col key
            </summary>
            <remarks>
            By default set to Keys.Down
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryKeyboardTool.SelectFocusModifierKey">
            <summary>
            Gets/sets the select/focus modifier key
            </summary>
            <remarks>
            By default set to Keys.Shift
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryKeyboardTool.VerifyNewDeleteKey(System.Windows.Forms.Keys)">
            <summary>
            Verifies the specified new delete key and throws an exception if it is not valid
            </summary>
            <param name="key">new delete key</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryKeyboardTool.VerifyNewSelectFocusPreviosKey(System.Windows.Forms.Keys)">
            <summary>
            Verifies the specified new select previous key and throws an exception if it is not valid
            </summary>
            <param name="key">new select previous key</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryKeyboardTool.VerifyNewSelectFocusPreviousInColKey(System.Windows.Forms.Keys)">
            <summary>
            Verifies the specified new select previous in col key and throws an exception if it is not valid
            </summary>
            <param name="key">new select previous in col key</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryKeyboardTool.VerifyNewSelectFocusNextKey(System.Windows.Forms.Keys)">
            <summary>
            Verifies the specified new select next key and throws an exception if it is not valid
            </summary>
            <param name="key">new select next in row key</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryKeyboardTool.VerifyNewSelectFocusNextInColKey(System.Windows.Forms.Keys)">
            <summary>
            Verifies the specified new select next in col key and throws an exception if it is not valid
            </summary>
            <param name="key">new select next in col key</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryKeyboardTool.VerifyNewSelectFocusModifierKey(System.Windows.Forms.Keys)">
            <summary>
            Verifies the specified new select/focus modifier key and throws an exception if it is not valid
            </summary>
            <param name="key">new select/focus modifier key</param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NLibraryMouseAndKeyboardTool">
            <summary>
            The NLibraryMouseAndKeyboardTool class serves as base class for all mouse and keyboard tools of library views
            </summary>
            <remarks>
            Tools, which derive from this class can use the references to a NLibraryView and NLibraryDocument 
            instances cashed by this tool type.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMouseAndKeyboardTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMouseAndKeyboardTool.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMouseAndKeyboardTool.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to cashe references to NLibraryView and NLibraryDocument instances
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryMouseAndKeyboardTool.View">
            <summary>
            Obtains a reference to the drawing view to which this tool is connected
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryMouseAndKeyboardTool.Document">
            <summary>
            Obtains a reference to the drawing document to which this tool is connected
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NLibraryMoveTool">
            <summary>
            The NLibraryMoveTool class represents a mouse tool, which is used to translate selected nodes inside drawing views or drag and drop them in another view
            </summary>
            <remarks>
            The NLibraryMoveTool can operate in three modes:
            <list type="bullet">
            <item>
            	<term>Move</term>
            	<description>
            	In this mode the move tool will only move selected document nodes
            	</description>
            </item>
            <item>
            	<term>Drag Drop</term>
            	<description>
            	In this mode the move tool will only drag and drop selected document nodes to another view 
            	</description>
            </item>
            <item>
            	<term>Move and Drag Drop</term>
            	<description>
            	In this mode the move tool will move the selected document nodes until the mouse leaves the window, then it will perform drag and drop
            	</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMoveTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMoveTool.#ctor(Nevron.Diagram.WinForm.MoveToolMode,System.Boolean)">
            <summary>
            Initializer contructor
            </summary>
            <param name="mode">move tool mode</param>
            <param name="allowDuplication">indicates whether Duplication is allowed</param> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMoveTool.ProcessMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <remarks>
            In MoveToolMode.Translate it will simply call the Translate method. 
            In MoveToolMode.DragDrop or MoveToolMode.TranslateAndDragDrop it will call either Translate or DoDragDrop depending on the mouse position. 
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryMoveTool.Mode">
            <summary>
            Controls the mode in which the move tool operates
            </summary>
            <remarks>
            By default set to MoveAndDragDrop
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryMoveTool.AllowDuplication">
            <summary>
            Specifies whether it is allowed to create duplicates of the moved elements, when the Control key is pressed
            </summary>
            <remarks>
            By default set to true
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMoveTool.CanActivate">
            <summary>
            Determines whether the tool can activate
            </summary>
            <remarks>
            Overriden to check whether there are any moveable selected nodes under the specified point
            </remarks>
            <returns>true if the tool can activate, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMoveTool.Activate">
            <summary>
            Activates the tool
            </summary>
            <remarks>
            Overriden to call the StartTranslate method
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMoveTool.Deactivate">
            <summary>
            Deactivates the tool
            </summary>
            <remarks>
            Overriden to call the EndMove(true) method in MoveToolMode.Translate and MoveToolMode.TranslateAndDragDrop modes, 
            and the EndMove(false) method in MoveToolMode.DragDrop.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMoveTool.Abort">
            <summary>
            Aborts the tool if it is active
            </summary>
            <remarks>
            Overriden to call the EndMove(false) method
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryMoveTool.NeedsSecondMouseButtonPass">
            <summary>
            Overriden to return true
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMoveTool.RequestReadyToActivateCursor(System.Windows.Forms.Cursor)">
            <summary>
            Called when the tool is inactive but is ready to be activated and requests a cursor for visual feedback
            </summary>
            <remarks>
            Overriden to request the cursor if the view window contains the mouse and there are any 
            moveable selected nodes under the current mouse point.
            </remarks>
            <param name="cursor">requested cursor</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMoveTool.StartMove">
            <summary>
            Starts entity translation in the preview layer with the currnetly selected nodes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMoveTool.Move">
            <summary>
            Translates the selected entity preview
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMoveTool.EndMove(System.Boolean)">
            <summary>
            Ends the selected entity preview
            </summary>
            <param name="saveChanges">true if changes must be saved to document nodes, otherwise false</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMoveTool.DoDragDrop">
            <summary>
            Starts a drag and drop operation with the currently selected nodes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryMoveTool.MoveCursor">
            <summary>
            Gets/sets the move cursor which corresponds to the entity allow move X and Y permissions
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NLibrarySelectorTool">
            <summary>
            The NLibrarySelectorTool class is used to interactively select document nodes in library views
            </summary>
            <remarks>
            The NLibrarySelectorTool can operate in three modes:
            <list type="bullet">
            <item>
            	<term>Click Select</term>
            	<description>
            	In this mode the selector will only select a single object when the user clicks on it (actually on StartMouseEvent)
            	</description>
            </item>
            <item>
            	<term>Region Select</term>
            	<description>
            	In this mode the selector will only select the nodes which are hit by the rectangle which the user dragged.
            	</description>
            </item>
            <item>
            	<term>Click and region select</term>
            	<description>
            	In this mode if the user clicked on a node the selector will single select it, otherwise it will perform a Region Select.
            	</description>
            </item>
            </list>
            The NLibrarySelectorTool tool also adds support for drill down selection. 
            Drill down selection occurs on EndMouseEvent. Drill down selection iterates on the 
            selectable path of the clicked node from the active layer.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibrarySelectorTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibrarySelectorTool.#ctor(Nevron.Diagram.WinForm.SelectorToolMode,System.Boolean)">
            <summary>
            Initializer contructor
            </summary>
            <param name="mode">selector tool mode</param>
            <param name="highlightRegionTargets">whether region selection targets should be highlighted</param> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibrarySelectorTool.ProcessMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse down event
            </summary>
            <remarks>
            Overriden to perform click select if it can be performed
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibrarySelectorTool.ProcessMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <remarks>
            Overriden to update the selector region if the tool is active and the mode RegionSelect or ClickAndRegionSelect
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibrarySelectorTool.ProcessMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse down event
            </summary>
            <remarks>
            Overriden to perform click select if it can be performed
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibrarySelectorTool.Mode">
            <summary>
            Controls the mode in which the selector tool operates
            </summary>
            <remarks>
            By default set to ClickAndRegionSelect
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibrarySelectorTool.HighlightRegionTargets">
            <summary>
            Specifies whether the selector tool must highlight the selection targets, when it performs regional selection 
            </summary>
            <remarks>
            By default set to true
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibrarySelectorTool.CanActivate">
            <summary>
            Determines whether the tool can activate
            </summary>
            <remarks>
            Overriden to prohibit tool activation if mode is set to ClickSelect
            </remarks>
            <returns>true if the tool can activate, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibrarySelectorTool.Activate">
            <summary>
            Activates the tool
            </summary>
            <remarks>
            Overriden to create the selector region
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibrarySelectorTool.Deactivate">
            <summary>
            Deactivates the tool
            </summary>
            <remarks>
            Overriden to perform region select and destroy the selector region
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibrarySelectorTool.Abort">
            <summary>
            Aborts the tool if it is active
            </summary>
            <remarks>
            Overriden to destroy the selector region
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibrarySelectorTool.NeedsSecondMouseButtonPass">
            <summary>
            Overriden to return true
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibrarySelectorTool.CanClickSelect">
            <summary>
            Determines whether click select can be performed
            </summary>
            <returns>true if click select can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibrarySelectorTool.ClickSelect">
            <summary>
            Performs a click select
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibrarySelectorTool.RegionSelect">
            <summary>
            Performs a region select
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibrarySelectorTool.CreateSelectorRegion">
            <summary>
            Creates the selector region
            </summary>
            <remarks>
            This implementation will currently create a selector rectangle and add it to the preview layer
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibrarySelectorTool.DestroySelectorRegion">
            <summary>
            Destroys the selector region
            </summary>
            <remarks>
            This implementation will destory the selector rectangle
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibrarySelectorTool.UpdateSelectorRegion">
            <summary>
            Updates teh selector region
            </summary>
            <remarks>
            This implementation will update the selector rectangle with the current and start mouse hit infos 
            and higight the nodes hit by it
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibrarySelectorTool.GetSelectableNodesFromPoint">
            <summary>
            Returns a list from the selectable nodes under the current hit point
            </summary>
            <returns>selectable nodes hit by the current point</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibrarySelectorTool.GetSelectableNodesFromRect(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Returns a list from the selectable nodes hit by the specified rect
            </summary>
            <param name="rect">rect in device coordinates</param>
            <returns>selectable elements hit by the rectangle</returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NLibraryTooltipsTool">
            <summary>
            The NLibraryTooltipsTool class is used to display tooltips for library view items
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryTooltipsTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryTooltipsTool.ProcessMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <remarks>
            Overriden to request a tooltip for the hit library view item
            </remarks>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NLibraryMouseWheelScrollTool">
            <summary>
            The NLibraryMouseWheelScrollTool class is used to perform mouse wheel scolling and zooming of drawing views
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMouseWheelScrollTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMouseWheelScrollTool.CreateNonSerializedObjects">
            <summary>
            Overriden to create the context menu editable filter
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMouseWheelScrollTool.ProcessMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMouseWheelScrollTool.ProcessMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden to perform the mouse wheel zoom and scroll
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMouseWheelScrollTool.CanDeactivate">
            <summary>
            Overriden to block deactivation, if the DeactiveDelay period has not expired
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMouseWheelScrollTool.CanActivate">
            <summary>
            Overriden to block activation, if the ActivateDelay period has not expired
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMouseWheelScrollTool.Activate">
            <summary>
            Overriden to start the anchor scrolling feature
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMouseWheelScrollTool.Deactivate">
            <summary>
            Overriden to stop the anchor scrolling feature
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMouseWheelScrollTool.Abort">
            <summary>
            Overriden to stop the anchor scrolling feature
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryMouseWheelScrollTool.AllowAnchorScrolling">
            <summary>
            Specifies whether anchor anchor scrolling is allowed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryMouseWheelScrollTool.AllowWheelScrolling">
            <summary>
            Specifies whether wheel scrolling is allowed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryMouseWheelScrollTool.Time">
            <summary>
            Controls the speed of the anchor scrolling. Measured in milliseconds. By default set to 100.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryMouseWheelScrollTool.DeactiveDelay">
            <summary>
            Controls the delay which must ellapse, before the tool can be deactivated (in milliseconds). By default set to 500.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryMouseWheelScrollTool.ActivateDelay">
            <summary>
            Controls the delay which must ellapse, before the tool can be activated again (in milliseconds). By default set to 500.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryMouseWheelScrollTool.UnitScrollDistance">
            <summary>
            Controls the distance between the start and current mouse position for which the tool must perform a single unit scroll. Measured in pixels.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryMouseWheelScrollTool.NoScrollDistance">
            <summary>
            Controls the distance between the start and current mouse position below which no scolling is performed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryMouseWheelScrollTool.DefaultScrollVertical">
            <summary>
            Gets/sets whether to perform vertical or horizontal scrolling when the mouse wheel is rotated. By default set to true (e.g. scroll vertically)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryMouseWheelScrollTool.FlipScrollDirectionModifierKey">
            <summary>
            Gets/sets the modifier key, which flips the wheel scroll direction. By default the tool will scroll either horizontally or vertically as specified by the DefaultScrollVertical property. By default set to Shift.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMouseWheelScrollTool.StartAnchorScrolling">
            <summary>
            Starts the anchor scrollings
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMouseWheelScrollTool.StopAnchorScrolling">
            <summary>
            Stops the anchor scrolling
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMouseWheelScrollTool.OnScrollTimerTick(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMouseWheelScrollTool.VerifyNewFlipScrollDirectionModifierKey(System.Windows.Forms.Keys)">
            <summary>
            Verifies the specified new horizontal scroll modifier key and throws an exception if it is not valid
            </summary>
            <param name="key">new horizontal scroll modifier </param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NDragDropTool">
            <summary>
            The NDragDropTool abstract class serves as base class for all tools, which can process drag and drop events
            </summary>
            <remarks>
            The NDragDropTool class implements the INDragDropEventProcessor interface, 
            which the controller uses to dispatch drag and drop events to tools.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragDropTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragDropTool.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragDropTool.ProcessDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            Processes the drag enter event
            </summary>
            <param name="e">event arguments received from a view</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragDropTool.ProcessDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Processes the drag drop event
            </summary>
            <param name="e">event arguments received from a view</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragDropTool.ProcessDragLeave(System.EventArgs)">
            <summary>
            Processes the drag leave event
            </summary>
            <param name="e">event arguments received from a view</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragDropTool.ProcessDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Processes the drag over event
            </summary>
            <param name="e">event arguments received from a view</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="T:Nevron.Diagram.WinForm.NDragTool">
            <summary>
            The NDragTool abstract class serves as base class for all tools, 
            which perform some drag operations in views 
            </summary>
            <remarks>
            NDragTool derivates are typically activated and deactivated on mouse down and up events. 
            The NDragTool class exposes the StartMouseEvent and EndMouseEvent properties, which help you control 
            the drag tool start and end events (by default set to LeftButtonDown and LeftButtonUp respectively). 
            The AbortKey property controls the key, which aborts the tool and is by default set to the Escape key.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragTool.#ctor">
            <summary>
            Default consructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragTool.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragTool.CreateNonSerializedObjects">
            <summary>
            Creates any non serialized objects, which the holder posseses
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragTool.ProcessKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes the key down event
            </summary>
            <remarks>
            Overriden to call the Abort method if the tool is active and the AbortKey was pressed
            </remarks>
            <param name="e">key event args</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragTool.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Processes the is input key query
            </summary>
            <remarks>
            Overriden to return true if the tool is active and the keyData is the AbortKey
            </remarks>
            <param name="keyData">query key</param>
            <returns>true if the key is an input key, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragTool.ProcessMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse down event
            </summary>
            <remarks>
            Overriden to call the Activate method if the tool can activate, or call the Deactivate method 
            if the tool can deactivate.
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragTool.ProcessMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse up event
            </summary>
            <remarks>
            Overriden to call the Activate method if the tool can activate, or call the Deactivate method 
            if the tool can deactivate.
            </remarks>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDragTool.StartMouseEvent">
            <summary>
            Gets/sets the tool start (activation) event
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDragTool.EndMouseEvent">
            <summary>
            Gets/sets the tool end (deactivation) event
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDragTool.AbortKey">
            <summary>
            Gets/sets the tool abort key
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragTool.CanActivate">
            <summary>
            Determines whether the tool can activate
            </summary>
            <remarks>
            Overriden to perform the following steps:
            <para>
            1. Returns false if the OperatesInWindowArea flag is raised and the mouse is outside the view window
            </para>
            <para>
            2. Returns true if the current mouse event is the start event
            </para>
            </remarks>
            <returns>true if the tool can activate, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragTool.CanDeactivate">
            <summary>
            Determines whether the tool can deactivate
            </summary>
            <remarks>
            Overriden to return true if the current mouse event is the end event
            </remarks>
            <returns>true if the tool can deactivate, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragTool.Activate">
            <summary>
            Activates the tool
            </summary>
            <remarks>
            Overriden to store the start mouse info 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragTool.Deactivate">
            <summary>
            Deactivates the tool
            </summary>
            <remarks>
            Overriden to reset the start mouse info 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragTool.Abort">
            <summary>
            Aborts the tool if it is active
            </summary>
            <remarks>
            Overriden to reset the start mouse info 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragTool.RequestReadyToActivateCursor(System.Windows.Forms.Cursor)">
            <summary>
            Called when the tool is inactive but is ready to be activated and requests a cursor for visual feedback
            </summary>
            <param name="cursor">requested cursor</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragTool.VerifyNewStartMouseEvent(Nevron.Diagram.WinForm.MouseEvent)">
            <summary>
            Verifies the specified new start mouse event and throws an exception if it is not valid
            </summary>
            <param name="mouseEvent">start mouse event</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragTool.VerifyNewEndMouseEvent(Nevron.Diagram.WinForm.MouseEvent)">
            <summary>
            Verifies the specified new end mouse event and throws an exception if it is not valid
            </summary>
            <param name="mouseEvent">end mouse event</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDragTool.VerifyNewAbortKey(System.Windows.Forms.Keys)">
            <summary>
            Verifies the specified new about key and throws an exception if it is not valid
            </summary>
            <param name="key">new abort key</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDragTool.StartMouseInfo">
            <summary>
            Obtains the mouse info when the tool was activated
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDragTool.OperatesInWindowArea">
            <summary>
            Determines whether the tool operates in the view window area
            </summary>
            <returns>true if the tool operates in the view window area, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NMouseAndKeyboardTool">
            <summary>
            The NMouseAndKeyboardTool abstract class serves as base class for all tools, which can process mouse and keyboard events
            </summary>
            <remarks>
            The NMouseAndKeyboardTool class implements the INMouseEventProcessor and INKeyboardEventProcessor interfaces, 
            which the controller uses to dispatch mouse and keyboard events to tools. It also exposes a 
            virtual NeedsSecondMouseButtonPass property, which specifies whether the tools requires the mouse button event processing 
            to be implemented in two passes, allowing for high and low priority tool activation.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseAndKeyboardTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseAndKeyboardTool.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseAndKeyboardTool.ProcessMouseEnter(System.EventArgs)">
            <summary>
            Processes the mouse enter event
            </summary>
            <param name="e">event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseAndKeyboardTool.ProcessMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <param name="e">mouse event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseAndKeyboardTool.ProcessMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse down event
            </summary>
            <param name="e">mouse event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseAndKeyboardTool.ProcessMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse up event
            </summary>
            <param name="e">mouse event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseAndKeyboardTool.ProcessMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse wheel event
            </summary>
            <param name="e">mouse event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseAndKeyboardTool.ProcessMouseLeave(System.EventArgs)">
            <summary>
            Processes the mouse leave event
            </summary>
            <param name="e">event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseAndKeyboardTool.ProcessClick(System.EventArgs)">
            <summary>
            Precesses the mouse click event
            </summary>
            <param name="e">event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseAndKeyboardTool.ProcessDoubleClick(System.EventArgs)">
            <summary>
            Precesses the mouse double click event
            </summary>
            <param name="e">event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseAndKeyboardTool.ProcessMouseHover(System.EventArgs)">
            <summary>
            Precesses the mouse hover event
            </summary>
            <param name="e">event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseAndKeyboardTool.ProcessKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes the key down event
            </summary>
            <param name="e">key event args</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseAndKeyboardTool.ProcessKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Processes the key press event
            </summary>
            <param name="e">key press event args</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseAndKeyboardTool.ProcessKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes the key up event
            </summary>
            <param name="e">key event args</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseAndKeyboardTool.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Processes the is input key query
            </summary>
            <param name="keyData">query key</param>
            <returns>true if the key is an input key, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NMouseAndKeyboardTool.IsInputChar(System.Char)">
            <summary>
            Processes the is input char query
            </summary>
            <param name="keyChar">query char</param>
            <returns>true if the key is an input char, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NMouseAndKeyboardTool.NeedsSecondMouseButtonPass">
            <summary>
            Determines whether the tool needs a second mouse button event processing pass
            </summary>
            <remarks>
            This implementation returns false
            </remarks>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NTool">
            <summary>
            The NTool abstract class serves as base class for all tools
            </summary>
            <remarks>
            In essence tools are user event processors, which interpret the events 
            dispatched to them by the controller to perform tool specific actions.
            <para>
            Tools can operate in two states - active and inactive. When a tool is active it will 
            receive all user events. The transition between these 
            states is performed by the Activate and Deactivate methods. 
            You must call the CanActivate method prior to calling the Activate method and the 
            CanDeactivate method prior to calling the Deactivate method. The actual work 
            performed by tools, which can activate is performed by the Deactivate method. 
            If a tool is active you can always abort it by calling the Abort method.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTool.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTool.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Updates the references stored by the object
            </summary>
            <remarks>
            The object can query the specified provider for references 
            </remarks>
            <param name="provider">provider from which to obtain references</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTool.CreateNonSerializedObjects">
            <summary>
            Creates any non serialized objects, which the holder posseses
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTool.GetReferenceProvider">
            <summary>
            Obtains the reference provider to which the object is currently attached
            </summary>
            <returns>reference provider</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTool.CanActivate">
            <summary>
            Determines whether the tool can activate
            </summary>
            <returns>true if the tool can activate, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTool.CanDeactivate">
            <summary>
            Determines whether the tool can deactivate
            </summary>
            <returns>true if the tool can deactivate, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTool.Activate">
            <summary>
            Activates the tool
            </summary>
            <remarks>
            This method will call the OnToolActivated method of the controller
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTool.Deactivate">
            <summary>
            Deactivates the tool
            </summary>
            <remarks>
            This method will call the OnToolDeactivated method of the controller
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTool.Abort">
            <summary>
            Aborts the tool if it is active
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTool.Enabled">
            <summary>
            Gets/sets whether the tool is enabled
            </summary>
            <remarks>
            When the tool is enabled it will receive user events from the controller. 
            When the tool is disabled the controller will not delegate any events to the tool and the tool can not be activated.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTool.Name">
            <summary>
            Gets/sets the name of the tool, which is unique in the tools collection of the controller
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTool.IsActive">
            <summary>
            Determines whether the tool is currently in active state
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTool.Controller">
            <summary>
            Obtains a reference to the controller
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTool.Collection">
            <summary>
            Obtains a reference to the tools collection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NTool.m_bIsActive">
            <summary>
            Indicates whether this tool is active.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NToolCollection">
            <summary>
            The NToolCollection class is a strongly typed collection, containging NTool instances
            </summary>
            <remarks>
            A reference to this class can be obtained from the NController Tools property.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.CreateNonSerializedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.GetReferenceProvider">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.ProvideReference(System.Type)">
            <summary>
            
            </summary>
            <param name="parentType"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NToolCollection.Item(System.Int32)">
            <summary>
            Gets/sets the tool at the specified index
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.Add(Nevron.Diagram.WinForm.NTool)">
            <summary>
            Adds the specified tool
            </summary>
            <param name="tool">tool to add</param>
            <returns>index of the tool in the collection</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.IndexOf(Nevron.Diagram.WinForm.NTool)">
            <summary>
            Determines the index of the tool in the collection
            </summary>
            <param name="tool">tool</param>
            <returns>index of the tool or -1 if it is not in the collection</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.Insert(System.Int32,Nevron.Diagram.WinForm.NTool)">
            <summary>
            Inserts a the specified tool at the specified index
            </summary>
            <param name="index">index</param>
            <param name="tool">tool</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.Remove(Nevron.Diagram.WinForm.NTool)">
            <summary>
            Removes the specified tool
            </summary>
            <param name="tool">tool to remove</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.Contains(Nevron.Diagram.WinForm.NTool)">
            <summary>
            Determines whether the specified tool is contained in this collection
            </summary>
            <param name="tool">tool</param>
            <returns>true if the tool is contained in this collection, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.OnClear">
            <summary>
            Overriden to call the OnCollectionChanged method
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Overriden to check the type of the inserted object
            </summary>
            <param name="index"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Overriden to call the OnCollectionChanged method
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Overriden to check the type of the removed object
            </summary>
            <param name="index"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Overriden to call the OnCollectionChanged method
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Overriden to check the type of the set object and call the OnCollectionChanged method
            </summary>
            <param name="index"></param>
            <param name="oldobj"></param>
            <param name="newobj"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.OnValidate(System.Object)">
            <summary>
            Overriden to check the type of the object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.GetToolByName(System.String)">
            <summary>
            Obtains a reference to the tool with the specified name
            </summary>
            <param name="toolName">tool name</param>
            <returns>tool reference if a tool with this name was found, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.IsToolEnabled(System.String)">
            <summary>
            Determines whether the tool with the specified name is enabled
            </summary>
            <param name="toolName">tool name</param>
            <returns>true if the tool was found and it is enabled, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.SingleEnableTools(System.String[],System.Boolean)">
            <summary>
            Enables the tools with the specified names and makes all other tools disabled
            </summary>
            <param name="toolNames">names of the tools to enable</param>
            <param name="disableAmbient">whether ambient tools should also be disabled</param> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.SingleEnableTool(System.String,System.Boolean)">
            <summary>
            Enables the tool with the specified name and makes all other tools disabled
            </summary>
            <param name="toolName">name of the tool to enable</param>
            <param name="disableAmbient">whether ambient tools should also be disabled</param> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.SingleEnableTools(System.String[])">
            <summary>
            Enables the tools with the specified names and makes all other non ambient tools disabled
            </summary>
            <param name="toolNames">names of the tools to enable</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.SingleEnableTool(System.String)">
            <summary>
            Enables the tool with the specified name and makes all other non ambient tools disabled
            </summary>
            <param name="toolName">name of the tool to enable</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.EnableTools(System.String[])">
            <summary>
            Enables the tools with the specified names
            </summary>
            <param name="toolNames">names of the tools to enable</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.DisableTools(System.String[])">
            <summary>
            Disables the tools with the specified names
            </summary>
            <param name="toolNames">names of the tools to enable</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.EnableAllTools">
            <summary>
            Enables all tools
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.DisableAllTools">
            <summary>
            Disables all tools
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NToolCollection.Controller">
            <summary>
            Obtains a reference to the controller
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NToolCollection.AmbientToolNames">
            <summary>
            Gets/sets the ambient tool names 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.OnCollectionChanged">
            <summary>
            Called when the collection items have changed
            </summary>
            <remarks>
            This method will call the OnToolsCollectionChanged method of the controller
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NToolCollection.IsAmbient(System.String)">
            <summary>
            Determines whether the specified tool name is an ambient tool name
            </summary>
            <param name="toolName"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NPropertyBrowser">
            <summary>
            The NPropertyBrowser class represents the Property Browser, which can be used for the editing of the document, view, selection anchor or active layer properties.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPropertyBrowser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NPropertyBrowser.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NPropertyBrowser.View">
            <summary>
            Gets/sets the view associated with the property browser
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NPropertyBrowser.ObjectSelectorPanel">
            <summary>
            Obtains a reference to the object selector panel
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NPropertyBrowser.PropertyGrid">
            <summary>
            Obtains a reference to the browser property grid
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NPropertyBrowser.Mode">
            <summary>
            Gets/sets the mode of the property browser
            </summary>
            <remarks>
            By default set to SelectionAnchor.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NPropertyBrowser.RefreshInterval">
            <summary>
            Gets/sets the auto refresh interval (in miliseconds)
            </summary>
            <remarks>
            By default set to 300.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NPropertyBrowser.AutoRefresh">
            <summary>
            Gets/sets whether the property browser is automatically refreshed
            </summary>
            <remarks>
            By default set to true.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPropertyBrowser.UpdatePropertyGrid(System.Boolean)">
            <summary>
            Updates the property grid selected object
            </summary>
            <remarks>
            If the complete property is set to true the property grid will be rebuild entirely. 
            Otherwise the property grid will be updated if the object for which it is currently showing properties has changed.
            </remarks>
            <param name="complete">whether to perform complete update</param> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPropertyBrowser.OnPropertyValueChanged(System.Object,System.Windows.Forms.PropertyValueChangedEventArgs)">
            <summary>
            Overriden to refresh the document views or the view depending on the current property browser mode
            </summary>
            <param name="s"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPropertyBrowser.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NDiagramStatusBar">
            <summary>
            The NDiagramStatusBar class represents the Status bar, which can be used to display the current state of the view to which it is connected
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramStatusBar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDiagramStatusBar.View">
            <summary>
            Gets/sets the view associated with the statusbar
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDiagramStatusBar.RefreshInterval">
            <summary>
            Gets/sets the auto refresh interval (in miliseconds)
            </summary>
            <remarks>
            By default set to 200.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDiagramStatusBar.AutoRefresh">
            <summary>
            Gets/sets whether the statusbar is automatically refreshed
            </summary>
            <remarks>
            By default set to true.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDiagramStatusBar.PrimaryPanel">
            <summary>
            Obtains a reference to the primary status bar panel
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDiagramStatusBar.SecondaryPanel">
            <summary>
            Obtains a reference to the secondary status bar panel
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDiagramStatusBar.MousePositionPanel">
            <summary>
            Obtains a reference to the mouse position status bar panel (displays the position of the mouse in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDiagramStatusBar.MeasurementUnitPanel">
            <summary>
            Obtains a reference to the measurement unit status bar panel (displays the current scene measurement unit)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDiagramStatusBar.ControlPanel">
            <summary>
            Obtains a reference to the control status bar panel (displays the state of the Control button)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDiagramStatusBar.ShiftPanel">
            <summary>
            Obtains a reference to the shift status bar panel (displays the state of the Shift button)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramStatusBar.UpdateStatusBar">
            <summary>
            Updates the status bar
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NTransparentControl">
            <summary>
            Represents a transparent control
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTransparentControl.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NViewMessageControl">
            <summary>
            Control for view messages
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewMessageControl.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewMessageControl.RemoveFromParent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewMessageControl.OnLostFocus(System.EventArgs)">
            <summary>
            Overriden to destroy the control
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.BuildContextMenu">
            <summary>
            Delegate used to build a context menu for the specified object
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.GridStyle">
            <summary>
            Defines the possible styles in which the document grid can be displayed
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.GridStyle.MajorLines">
            <summary>
            Draws a grid of major lines.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.GridStyle.MajorDots">
            <summary>
            Draws a grid of major dots.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.GridStyle.MajorMinorLines">
            <summary>
            Draws a grid of major-minor lines.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.GridStyle.Interlaced">
            <summary>
            Horizontal and Vertical stripes are displayed on each odd row and col
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.GridStyle.InterlacedHorizontally">
            <summary>
            Horizontal stripes are displayed on each odd row
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.GridStyle.InterlacedVertically">
            <summary>
            Vertical stripes are displayed on each odd col
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.HandleType">
            <summary>
            Defines the possible handle types
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.HandleType.Bounds">
            <summary>
            Handle for scene (axis parallel) bounds
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.HandleType.RotatedBounds">
            <summary>
            Handle for rotated bounds
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.HandleType.Rotator">
            <summary>
            Handle for rotator
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.HandleType.Pin">
            <summary>
            Handle for pin point
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.HandleType.GeometryBasePoint">
            <summary>
            Handle for geometry base point
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.HandleType.GeometryControlPoint">
            <summary>
            Handle for geometry control point
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.HandleType.GeometryMidPoint">
            <summary>
            Handle for geometry segment middle point
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.HandleType.ShapeStartPlug">
            <summary>
            Handle for shape start plug
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.HandleType.ShapeEndPlug">
            <summary>
            Handle for shape end plug
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.HandleType.ShapePort">
            <summary>
            Handle for shape port
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.HandleType.ShapeControlPoint">
            <summary>
            Handle for shape control point
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.HandleShape">
            <summary>
            Enumerates the currently available handle shapes 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.HandleShape.Rectangle">
            <summary>
            Rectangle
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.HandleShape.RectanglePlus">
            <summary>
            Rectangle with a plus inside
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.HandleShape.RectangleX">
            <summary>
            Rectangle with a X inside
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.HandleShape.Diamond">
            <summary>
            Diamond
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.HandleShape.Ellipse">
            <summary>
            Ellipse
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.HandleShape.EllipsePlus">
            <summary>
            Ellipse with a plus inside
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.HandleShape.EllipseX">
            <summary>
            Ellipse with a X inside
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.MouseEvent">
            <summary>
            Enumerates the mouse events
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.MouseEvent.Unrecognized">
            <summary>
            Unrecognized mouse event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.MouseEvent.LeftButtonDown">
            <summary>
            Left button down
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.MouseEvent.LeftButtonDoubleClick">
            <summary>
            Left button double click
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.MouseEvent.LeftButtonUp">
            <summary>
            Left button up
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.MouseEvent.RightButtonDown">
            <summary>
            Right buttom down
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.MouseEvent.RightButtonDoubleClick">
            <summary>
            Right buttom double click
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.MouseEvent.RightButtonUp">
            <summary>
            Right buttom up
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.MouseEvent.MiddleButtonDown">
            <summary>
            Middle buttom down
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.MouseEvent.MiddleButtonDoubleClick">
            <summary>
            Middle buttom double click
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.MouseEvent.MiddleButtonUp">
            <summary>
            Middle buttom up
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.MouseEvent.MouseMove">
            <summary>
            Mouse move
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.MouseEvent.Any">
            <summary>
            Any mouse event
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.SelectionAnchorMode">
            <summary>
            Defines the modes in which the selection anchor is determined
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.SelectionAnchorMode.First">
            <summary>
            The first selected node is the anchor node
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.SelectionAnchorMode.Last">
            <summary>
            The last selected node is the anchor node
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.DiagramSelectionMode">
            <summary>
            Defines the modes in which the selection can operate
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.DiagramSelectionMode.Disabled">
            <summary>
            Disables selection
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.DiagramSelectionMode.Single">
            <summary>
            Only a single node can be selected at a time
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.DiagramSelectionMode.Multiple">
            <summary>
            Multiple nodes can be selected
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.MoveToolMode">
            <summary>
            Defines the modes in which the move tool can operate
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.MoveToolMode.Move">
            <summary>
            Selected nodes are only moved inside the view
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.MoveToolMode.DragDrop">
            <summary>
            Selected nodes are only drag dropped if the mouse leaves the view bounds
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.MoveToolMode.MoveAndDragDrop">
            <summary>
            Selected nodes are moved if the mouse is inside the view bounds and drag dropped 
            if the mouse leaves them.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.SelectorToolMode">
            <summary>
            Defines the modes in which the selector tool can operate
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.SelectorToolMode.ClickSelect">
            <summary>
            Nodes are selected only on click events
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.SelectorToolMode.RegionSelect">
            <summary>
            Nodes are selected only by region (drag select)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.SelectorToolMode.ClickAndRegionSelect">
            <summary>
            Nodes are selected on click events and by region (drag select)
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.AutoStepMode">
            <summary>
            Defines the possible settings for an automatic step mode
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.AutoStepMode.Fine">
            <summary>
            Small step
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.AutoStepMode.Normal">
            <summary>
            Normal step
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.AutoStepMode.Coarse">
            <summary>
            Large step
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.AutoStepMode.Fixed">
            <summary>
            User defined step
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.LibraryViewStyle">
            <summary>
            Defines the library browser view styles
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.LibraryViewStyle.IconsAndDetails">
            <summary>
            Displays the library items as icons with details (normal icon, name and details)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.LibraryViewStyle.IconsAndNames">
            <summary>
            Displays the library items as icon with name (normal icon and name)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.LibraryViewStyle.IconsOnly">
            <summary>
            Displays the library items icon only (normal icon only)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.LibraryViewStyle.List">
            <summary>
            Displays the library items as list (small icon and name)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.LibraryViewStyle.Thumbnails">
            <summary>
            Displays the library items as thumbnails (large icon and name)
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.SnapResultType">
            <summary>
            Enumerates the possible snap results
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.SnapResultType.ShapePlugs">
            <summary>
            Shape plugs snap result
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.SnapResultType.ShapeOutwardPort">
            <summary>
            Shape outward port snap result
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.SnapResultType.Bounds">
            <summary>
            Bounds snap result
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.SnapResultType.Point">
            <summary>
            Point snap result
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.PropertyBrowserMode">
            <summary>
            Defines the modes of the property browser
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.PropertyBrowserMode.SelectionAnchor">
            <summary>
            Displays the properties of the selection anchor node
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.PropertyBrowserMode.Document">
            <summary>
            Displays the properties of the document
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.PropertyBrowserMode.ActiveLayer">
            <summary>
            Displays the properties of the document active layer
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.PropertyBrowserMode.View">
            <summary>
            Displays the properties of the view
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.AutoScrollerMode">
            <summary>
            Enumerates the modes in which the autoscroller can operate
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.AutoScrollerMode.Disabled">
            <summary>
            Autoscrolling is not performed
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.AutoScrollerMode.MouseInScrollMargins">
            <summary>
            Starts/stops autoscrolling when the mouse has entered/left scrollable margins of the view
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.AutoScrollerMode.DragAreaInScrollMargins">
            <summary>
            Starts/stops autoscrolling when the drag area interests with the scrollable margins of the view.
            If the drag area is larger that the window fallbacks to MouseInScrollMargins mode.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.SnappedPointType">
            <summary>
            Enumerates the points that can be snapped
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.INDragDropEventProcessor">
            <summary>
            Implemented by objects, which can process drag-drop events
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.INDragDropEventProcessor.ProcessDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            Called when a dragged object entered the object
            </summary>
            <param name="e">event arguments received from a view</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.INDragDropEventProcessor.ProcessDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Called when a dragged object is dropped in the object
            </summary>
            <param name="e">event arguments received from a view</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.INDragDropEventProcessor.ProcessDragLeave(System.EventArgs)">
            <summary>
            Called when a dragged object leaves the object
            </summary>
            <param name="e">event arguments received from a view</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.INDragDropEventProcessor.ProcessDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Called when a dragged object is moved over the object
            </summary>
            <param name="e">event arguments received from a view</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="T:Nevron.Diagram.WinForm.INKeyboardEventProcessor">
            <summary>
            Implemented by objects, which can process keyboard events
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.INKeyboardEventProcessor.ProcessKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes the key down event
            </summary>
            <param name="e">key event args</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.INKeyboardEventProcessor.ProcessKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Processes the key press event
            </summary>
            <param name="e">key press event args</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.INKeyboardEventProcessor.ProcessKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes the key up event
            </summary>
            <param name="e">key event args</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.INKeyboardEventProcessor.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Processes the is input key query
            </summary>
            <param name="keyData">query key</param>
            <returns>true if the key is an input key, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.INKeyboardEventProcessor.IsInputChar(System.Char)">
            <summary>
            Processes the is input char query
            </summary>
            <param name="keyChar">query char</param>
            <returns>true if the key is an input char, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.INMouseEventProcessor">
            <summary>
            Implemented by objects, which can process mouse events
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.INMouseEventProcessor.ProcessMouseEnter(System.EventArgs)">
            <summary>
            Processes the mouse enter event
            </summary>
            <param name="e">event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.INMouseEventProcessor.ProcessMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <param name="e">mouse event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.INMouseEventProcessor.ProcessMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse down event
            </summary>
            <param name="e">mouse event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.INMouseEventProcessor.ProcessMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse up event
            </summary>
            <param name="e">mouse event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.INMouseEventProcessor.ProcessMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse wheel event
            </summary>
            <param name="e">mouse event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.INMouseEventProcessor.ProcessMouseLeave(System.EventArgs)">
            <summary>
            Processes the mouse leave event
            </summary>
            <param name="e">event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.INMouseEventProcessor.ProcessClick(System.EventArgs)">
            <summary>
            Precesses the mouse click event
            </summary>
            <param name="e">event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.INMouseEventProcessor.ProcessDoubleClick(System.EventArgs)">
            <summary>
            Precesses the mouse double click event
            </summary>
            <param name="e">event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.INMouseEventProcessor.ProcessMouseHover(System.EventArgs)">
            <summary>
            Precesses the mouse hover event
            </summary>
            <param name="e">event arguments</param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="T:Nevron.Diagram.WinForm.INStatusBarInfo">
            <summary>
            Implemented by objects, which can provide status bar information
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.INStatusBarInfo.UpdateStatusBarInfo(Nevron.Diagram.WinForm.NStatusBarInfo)">
            <summary>
            Updates the specified status bar info
            </summary>
            <param name="info">status bar info</param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NLibraryBrowser">
            <summary>
            The NLibraryBrowser class represents a navigation pane, which can be used for the creation, 
            editing and reuse of libraries
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryBrowser.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryBrowser.DelegateBuildContextMenu">
            <summary>
            Build context menu delegate 
            </summary>
            <remarks>
            This delegate is called from the BuildContextMenu method and can be used to hook the creation of context menus.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryBrowser.ViewStyle">
            <summary>
            Gets/sets the view style
            </summary>
            <remarks>
            By default set to Icons
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryBrowser.ContextMenuGroup">
            <summary>
            Gets/sets the library group, for which a context menu is currently being displayed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryBrowser.ExpandedGroup">
            <summary>
            Gets the currently expanded library group 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.NewEmptyLibraryGroup(System.String)">
            <summary>
            Creates a new empty library group with the specified title and adds it in the library browser
            </summary>
            <param name="title">library title</param>
            <returns>new library group</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.NewConnectorShapesLibraryGroup(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Creates a new library group with the predefined connector shapes and adds it in the library browser
            </summary>
            <param name="measurementUnit">measurement unit of the library</param>
            <param name="itemSize">items size</param>
            <returns>library group with connector shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.NewBasicShapesLibraryGroup(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Creates a new library group with the predefined basic shapes and adds it in the library browser
            </summary>
            <param name="measurementUnit">measurement unit of the library</param>
            <param name="itemSize">items size</param>
            <returns>library group with basic shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.NewFlowchartingShapesLibraryGroup(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Creates a new library group with the predefined flowcharting shapes and adds it in the library browser
            </summary>
            <param name="measurementUnit">measurement unit of the library</param>
            <param name="itemSize">items size</param>
            <returns>library group with flowcharting shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.NewSymbolShapesLibraryGroup(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Creates a new library group with the predefined symbol shapes and adds it in the library browser
            </summary>
            <param name="measurementUnit">measurement unit of the library</param>
            <param name="itemSize">items size</param>
            <returns>library group with symbol shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.NewNetworkShapesLibraryGroup(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Creates a new library group with the predefined network shapes and adds it in the library browser
            </summary>
            <param name="measurementUnit">measurement unit of the library</param>
            <param name="itemSize">items size</param>
            <returns>library group with network shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.NewTrafficSignsShapesLibraryGroup(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Creates a new library group with the predefined traffic signs shapes and adds it in the library browser
            </summary>
            <param name="measurementUnit">measurement unit of the library</param>
            <param name="itemSize">items size</param>
            <returns>library group with traffic signs shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.NewBrainstormingShapesLibraryGroup(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Creates a new library group with the predefined brainstorming shapes and adds it in the library browser
            </summary>
            <param name="measurementUnit">measurement unit of the library</param>
            <param name="itemSize">items size</param>
            <returns>library group with brainstorming shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.NewElectricalSymbolsShapesLibraryGroup(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Creates a new library group with the predefined electrical symbols shapes and adds it in the library browser
            </summary>
            <param name="measurementUnit">measurement unit of the library</param>
            <param name="itemSize">items size</param>
            <returns>library group with electrical symbols shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.NewSimpleNetworkShapesLibraryGroup(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Creates a new library group with the predefined simple network shapes and adds it in the library browser
            </summary>
            <param name="measurementUnit">measurement unit of the library</param>
            <param name="itemSize">items size</param>
            <returns>library group with electrical symbols shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.NewFloorPlanShapesLibraryGroup(Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Creates a new library group with the predefined floor plan shapes and adds it in the library browser
            </summary>
            <param name="measurementUnit">measurement unit of the library</param>
            <returns>library group with floor plan shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.NewFlagsShapesLibraryGroup(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Creates a new library group with the predefined flags shapes and adds it in the library browser
            </summary>
            <param name="measurementUnit">measurement unit of the library</param>
            <param name="itemSize">items size</param>
            <returns>library group with flags shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.NewTravelShapesLibraryGroup(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Creates a new library group with the predefined travel shapes and adds it in the library browser
            </summary>
            <param name="measurementUnit">measurement unit of the library</param>
            <param name="itemSize">items size</param>
            <returns>library group with flags shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.NewWeatherShapesLibraryGroup(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Creates a new library group with the predefined weather shapes and adds it in the library browser
            </summary>
            <param name="measurementUnit">measurement unit of the library</param>
            <param name="itemSize">items size</param>
            <returns>library group with weather shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.NewFoodShapesLibraryGroup(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Creates a new library group with the predefined food shapes and adds it in the library browser
            </summary>
            <param name="measurementUnit">measurement unit of the library</param>
            <param name="itemSize">items size</param>
            <returns>library group with food shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.NewBusinessProcessShapesLibraryGroup(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Creates a new library group with the predefined business process shapes and adds it in the library browser
            </summary>
            <param name="measurementUnit">measurement unit of the library</param>
            <param name="itemSize">items size</param>
            <returns>library group with bisiness process shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.NewFilesAndFoldersShapesLibraryGroup(Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Creates a new library group with the predefined files and folders shapes and adds it in the library browser
            </summary>
            <param name="measurementUnit">measurement unit of the library</param>
            <param name="itemSize">items size</param>
            <returns>library group with files and folders shapes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.OpenLibraryGroup">
            <summary>
            Opens a library from file (prompts the user to select it) and adds a new library group for it in the browser
            </summary>
            <returns>library group associated with the loaded library</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.OpenLibraryGroup(System.String)">
            <summary>
            Opens a library from the specified file and adds a new library group for it in the browser
            </summary>
            <returns>library group associated with the loaded library</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.OpenLibraryGroup(Nevron.Diagram.NLibraryDocument)">
            <summary>
            Creates a new library group associated with the specified library and adds it in the library browser
            </summary>
            <param name="library">library for which to create group</param>
            <returns>created library group associated with the library</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.CloseLibraryGroup(Nevron.Diagram.WinForm.NLibraryGroup)">
            <summary>
            Closes the specified library group 
            </summary>
            <remarks>
            If the library associated with the group is modified this method will prompt the user to save it first
            </remarks>
            <param name="group">group to close</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.BuildContextMenu(System.Object)">
            <summary>
            Builds a context menu for the specified object
            </summary>
            <remarks>
            This method simply calls the DelegateBuildContextMenu delegate
            </remarks>
            <param name="obj">object for which to build context menu</param>
            <returns>context menu</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.UpdateViewStyle">
            <summary>
            Updates the view style of all contained library groups
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryBrowser.OnContextMenuRequested(Nevron.UI.WinForm.Controls.NNavigationPaneBand,System.Drawing.Point)">
            <summary>
            Overriden to show a context meny for the specified band
            </summary>
            <param name="band"></param>
            <param name="screen"></param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NLibraryGroup">
            <summary>
            The NLibraryGroup class represents a band, which hosts and displays a library document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryGroup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryGroup.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <remarks>
            This implementation will cashe a reference to the node parent, event sink service and smart paint service
            </remarks>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryGroup.CreateNonSerializedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryGroup.GetReferenceProvider">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryGroup.ProvideReference(System.Type)">
            <summary>
            
            </summary>
            <param name="parentType"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryGroup.Browser">
            <summary>
            Obtains a reference to the library browser in which this group resides
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryGroup.View">
            <summary>
            Obtains a reference to the library view used to view and edit the library
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryGroup.Document">
            <summary>
            Gets/sets the library document associated with the group
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryGroup.SaveLibrary">
            <summary>
            Saves the currently displayed library (prompts the user to select a file name)
            </summary>
            <returns>true if the library was successfully saved, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryGroup.SaveLibrary(System.String)">
            <summary>
            Saves the currently displayed library in the specified file
            </summary>
            <param name="fileName">file in which to save the library</param> 
            <returns>true if the library was successfully saved, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryGroup.ShowContextMenu(System.Drawing.Point)">
            <summary>
            Shows a context menu for this library group
            </summary>
            <param name="screen">point in screen coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryGroup.AttachToDocument">
            <summary>
            Attaches the group to the current document
            </summary>
            <remarks>
            This implementation subscribes the group for the document Info attribute change event
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryGroup.DetachFromDocument">
            <summary>
            Detaches the view from the current document
            </summary>
            <remarks>
            This implementation unsubscribes the group from the document Info attribute change event
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryGroup.OnDocumentAttributePropertyChanged(Nevron.Dom.NNodeAttributePropertyEventArgs)">
            <summary>
            Handles the document attribute property changed event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryGroup.OnDocumentAttributeChanged(Nevron.Dom.NNodeAttributeEventArgs)">
            <summary>
            Handles the document attribute changed event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryGroup.Dispose(System.Boolean)">
            <summary>
            Override to detach the group from the document
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NDiagramWinFormLoadAssemblyType">
            <summary>
            Used to explicitly load the Nevron.Diagram.WinForm.dll assembly.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramWinFormLoadAssemblyType.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NDWFLicenseProvider">
            <summary>
            License provider for instances declared in the Nevron.Diagram.WinForm.dll assembly
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDWFLicenseProvider.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NPanAndZoomControl">
            <summary>
            The NPanAndZoomControl control is a control, which can be used for the interactive 
            zooming and panning of a view
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPanAndZoomControl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NPanAndZoomControl.MasterView">
            <summary>
            Gets/sets the master view, which this control is monitoring
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NPanAndZoomControl.ViewportPreview">
            <summary>
            Obtains a reference to the viewport preview view, hosted by this control
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NPanAndZoomControl.ShowZoomNavigator">
            <summary>
            Determines whether the zoom navigator controls are visible
            </summary>
            <remarks>
            By default set to true
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NPanAndZoomControl.LargeZoomChangeFactor">
            <summary>
            Controls how many times is the large zoom change step of the trackbar bigger than its small scroll change
            </summary>
            <remarks>
            By default set to 10
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPanAndZoomControl.UpdateFromMasterView">
            <summary>
            Updates the control from the master view to which the control is attached
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPanAndZoomControl.UpdateMasterView">
            <summary>
            Updates the master view (zooms and pans it) from the current state of the internally maintained master view viewport band.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPanAndZoomControl.AttachToMasterView">
            <summary>
            Attaches the control the current master view
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPanAndZoomControl.DetachFromMasterView">
            <summary>
            Detaches the control the current master view
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPanAndZoomControl.AttachToMasterViewDocument">
            <summary>
            Attaches the control the current master view document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPanAndZoomControl.DetachFromMasterViewDocument">
            <summary>
            Detaches the control the current master view document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPanAndZoomControl.OnMasterViewDisplayedDocumentChanging(Nevron.Diagram.NDocumentCancelEventArgs)">
            <summary>
            Handles the DisplayedDocumentChanging view event
            </summary>
            <remarks>
            This implementation will detach the commander from the document
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPanAndZoomControl.OnMasterViewDisplayedDocumentChanged(Nevron.Diagram.NDocumentEventArgs)">
            <summary>
            Handles the DisplayedDocumentChanged view event
            </summary>
            <remarks>
            This implementation will attach the commander to the document
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPanAndZoomControl.OnMasterViewTransformationsChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the master view TransformastionsChanged event
            </summary>
            <remarks>
            This implementation simply updates the control from the master view
            </remarks>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPanAndZoomControl.OnMasterViewResized(System.Object,System.EventArgs)">
            <summary>
            Handles the master view Resize event
            </summary>
            <remarks>
            This implementation simply updates the control from the master view
            </remarks>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPanAndZoomControl.OnZoomOutButtonClick(System.Object,System.EventArgs)">
            <summary>
            Handles the zoom out button click event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPanAndZoomControl.OnZoomInButtonClick(System.Object,System.EventArgs)">
            <summary>
            Handles the zoom in button click event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPanAndZoomControl.OnZoomTrackbarValueChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the zoom trackbar value changed event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPanAndZoomControl.Dispose(System.Boolean)">
            <summary>
            Overriden to detach the control from the master view
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NViewportBand">
            <summary>
            The NViewportBand class is a view node, which is hosted in the NViewportPreview view
            and displays a band for the current position of the NPanAndZoomControl master view viewport
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewportBand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewportBand.Visible">
            <summary>
            Controls the visibility of the band
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewportBand.Invalidate">
            <summary>
            Invalidates the band
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewportBand.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the band in the specified context
            </summary>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewportBand.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the band can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the layer can be painted, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewportBand.Bounds">
            <summary>
            Gets/sets the bounds of the node (in scene coordinates)
            </summary>
            <remarks>
            Overriden to return cashed scene bounds
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewportBand.Center">
            <summary>
            Gets/sets the node center (in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewportBand.Location">
            <summary>
            Gets/sets the node location (top left corner of the bounds, in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewportBand.Width">
            <summary>
            Gets/sets the node width (in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewportBand.Height">
            <summary>
            Gets/sets the node height (in scene coordinates)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewportBand.HitTestInterior(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NMatrix2DF)">
            <summary>
            Hit tests the band interior
            </summary>
            <param name="point"></param>
            <param name="sceneToDevice"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewportBand.HitTestResizeParts(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NMatrix2DF,Nevron.GraphicsCore.CompassDirection@)">
            <summary>
            Hit test the band parts
            </summary>
            <param name="point"></param>
            <param name="sceneToDevice"></param>
            <param name="part"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewportBand.StartResize">
            <summary>
            Starts the viewport resize
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewportBand.EndResize">
            <summary>
            Ends the viewport resize
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewportBand.ResizeBounds">
            <summary>
            Gets/sets the current resize bounds (valid only if the band is in resize mode)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewportBand.IsResizing">
            <summary>
            Determines whether the band is in resize mode
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewportBand.CornersFillStyle">
            <summary>
            Gets/sets the fill style of the viewport band corners
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewportBand.RubberBandFillStyle">
            <summary>
            Gets/sets the fill style of the rubber band
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewportBand.OutlineStrokeStyle">
            <summary>
            Gets/sets the stroke style used for the corners and rubber band outline
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewportBand.ResizePreviewStrokeStyle">
            <summary>
            Gets/sets the stroke style of the resize preview
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewportBand.CornersSize">
            <summary>
            Gets/sets the corners size (in pixels)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewportBand.RubberBandWidth">
            <summary>
            Gets/sets the rubber band width (in pixels)
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NViewportBandTool">
            <summary>
            The NViewportBandTool class represents a mouse tool, which is used for the interactive 
            panning and resize of the viewport band in the pan and zoom control
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewportBandTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewportBandTool.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to store a reference to the pan and zoom control
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewportBandTool.ProcessMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <param name="e">mouse event arguments</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewportBandTool.PanAndZoomControl">
            <summary>
            Obtains a reference to the pan and zoom control
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewportBandTool.CanActivate">
            <summary>
            Determines whether the tool can activate
            </summary>
            <remarks>
            Overriden to check whether the view layout is not set to Fit or Stretch.
            </remarks>
            <returns>true if the tool can activate, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewportBandTool.Activate">
            <summary>
            Activates the tool
            </summary>
            <remarks>
            Overriden to store the start viewport origin
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewportBandTool.Deactivate">
            <summary>
            Deactivates the tool
            </summary>
            <remarks>
            Overriden to call UpdateMasterView method of the pan and zoom control
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewportBandTool.Abort">
            <summary>
            Aborts the tool if it is active
            </summary>
            <remarks>
            Overriden to restore the start viewport origin of the viewport band
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewportBandTool.StartViewportOrigin">
            <summary>
            Returns the viewport origin of the view when the tool was activated
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewportBandTool.ViewportBand">
            <summary>
            Obtains a reference to the viewport band panned by this tool
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewportBandTool.HitTestViewportBandInterior">
            <summary>
            Determines whether the mouse hits the viewport band interior
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewportBandTool.HitTestViewportBandResizePart(Nevron.GraphicsCore.CompassDirection@)">
            <summary>
            Determines whether the mouse hits the viewport band interior
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewportBandTool.PanViewport(System.Single,System.Single)">
            <summary>
            Pans the viewport with the specified offset from the start viewport origin
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewportBandTool.ResizeViewport(System.Single,System.Single)">
            <summary>
            Resizes the viewport with the specified amount from the start viewport
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NViewportPreview">
            <summary>
            The NViewportPreview class is a view, which is used by the NPanAndZoomControl as 
            a preview and editor for the current master view viewport
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewportPreview.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewportPreview.ProvideReference(System.Type)">
            <summary>
            Overriden to provide a reference to the overview in which the preview is hosted
            </summary>
            <param name="parentType"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewportPreview.Reset">
            <summary>
            Resets the preview to its default settings
            </summary>
            <remarks>
            Overriden to call the ResetLibraryView method
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewportPreview.Band">
            <summary>
            Obtains a reference to the viewport band
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewportPreview.PanAndZoomControl">
            <summary>
            Gets/sets the overview to which the preview belonds
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewportPreview.ResetPreview">
            <summary>
            Called from the overriden Reset method to reset the state of the NViewportPreview
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NDWFR">
            <summary>
            Namespace class for resources used by the Nevron.Diagram.WinForm assembly
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDWFR.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolCreateEllipticalArc">
            <summary>
            Name for the NCreateEllipticalArcTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolCreateCircularArc">
            <summary>
            Name for the NCreateCircularArcTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolCreateBezierCurve">
            <summary>
            Name for the NCreateBezierCurveTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolCreateBridgeablePolyline">
            <summary>
            Name for the NCreateBridgeablePolylineTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolCreateBridgeableHVPolyline">
            <summary>
            Name for the NCreateHVPolylineTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolCreateClosedCurve">
            <summary>
            Name for the NCreateClosedCurveTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolCreateCurve">
            <summary>
            Name for the NCreateCurveTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolCreateDoubleArrow">
            <summary>
            Name for the NCreateDoubleArrowTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolCreateEllipse">
            <summary>
            Name for the NCreateEllipseTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolCreateConnector">
            <summary>
            Name for the NCreateConnectorTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolCreateShape">
            <summary>
            Name for the NCreateShapeTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolCreateGuideline">
            <summary>
            Name for the NCreateGuidelineTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolCreateLine">
            <summary>
            Name for the NCreateLineTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolCreateBridgeableLine">
            <summary>
            Name for the NCreateBridgeableLineTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolCreatePolygon">
            <summary>
            Name for the NCreatePolygonTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolCreatePolyline">
            <summary>
            Name for the NCreatePolylineTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolCreateRectangle">
            <summary>
            Name for the NCreateRectangleTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolCreateSingleArrow">
            <summary>
            Name for the NCreateSingleArrowTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolHandle">
            <summary>
            Name for the NHandleTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolContextMenu">
            <summary>
            Name for the NContextMenuTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolMouseWheelScrollAndZoom">
            <summary>
            Name for the NMouseWheelScrollAndZoom tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolKeyboard">
            <summary>
            Name for the NKeyboardTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolMouseEventDelegator">
            <summary>
            Name for the NMouseEventDelegatorTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolDragDropEventDelegator">
            <summary>
            Name for the NDragDropEventDelegatorTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolKeyboardEventDelegator">
            <summary>
            Name for the NMouseEventDelegatorTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolSelector">
            <summary>
            Name for the NSelectorTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolMove">
            <summary>
            Name for the NMoveTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolDragDropTarget">
            <summary>
            Name for the NDragDropTargetTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolPan">
            <summary>
            Name for the NPanTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolCreateText">
            <summary>
            Name for the NCreateTextTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolInplaceEdit">
            <summary>
            Name for the NInplaceEditTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolViewportPan">
            <summary>
            Name for the NViewportBandTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolLibrarySelector">
            <summary>
            Name for the NLibrarySelectorTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolLibraryKeyboard">
            <summary>
            Name for the NLibraryKeyboardTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolLibraryMove">
            <summary>
            Name for the NLibraryMoveTool tool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolLibraryContextMenu">
            <summary>
            Name for the NLibraryContextMenuTool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolLibraryDropTarget">
            <summary>
            Name for the NLibraryDropTargetTool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolLibraryTooltips">
            <summary>
            Name for the NLibraryTooltipsTool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ToolLibraryMouseWheelScroll">
            <summary>
            Name for the NLibraryMouseWheelScrollTool
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.AttributeSelection">
            <summary>
            Name for the selection attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.AttributeController">
            <summary>
            Name for the controller attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.AttributeAutoScroller">
            <summary>
            Name for the autoscoller attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.AttributeInteractivityManager">
            <summary>
            Name for the interactivity manager attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.AttributePreviewManager">
            <summary>
            Name for the preview manager attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.AttributeTrackersManager">
            <summary>
            Name for the trackers manager attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.AttributeTrackersAppearance">
            <summary>
            Name for the trackers appearance attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.AttributeDocumentShadow">
            <summary>
            Name for the document shadow attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.AttributeItemLayout">
            <summary>
            Name for the item layout attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.AttributeItemAppearance">
            <summary>
            Name for the item appearance attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.AttributeBoundsHandlesStyle">
            <summary>
            Name for the bounds handles style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.AttributeRotatedBoundsHandlesStyle">
            <summary>
            Name for the rotated bounds handles style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.AttributeRotatorHandlesStyle">
            <summary>
            Name for the rotator handles style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.AttributePinHandlesStyle">
            <summary>
            Name for the pin handles style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.AttributeGeometryBasePointHandlesStyle">
            <summary>
            Name for the geometry base point handles style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.AttributeGeometryControlPointHandlesStyle">
            <summary>
            Name for the geometry control point handles style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.AttributeGeometryMidPointHandlesStyle">
            <summary>
            Name for the geometry mid point handles style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.AttributeShapeStartPlugHandlesStyle">
            <summary>
            Name for the shape start plug handles style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.AttributeShapeEndPlugHandlesStyle">
            <summary>
            Name for the shape end plug handles style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.AttributeShapePortHandlesStyle">
            <summary>
            Name for the shape port handles style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.AttributeShapeControlPointHandlesStyle">
            <summary>
            Name for the shape control point handles style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.AttributeRubberBandStrokeStyle">
            <summary>
            Name for the rubber band stroke style attribute
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.TooltipBoundsHandle">
            <summary>
            Tooltip for bounds handles
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.TooltipPinHandle">
            <summary>
            Tooltip for pin handles
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.TooltipRotatorHandle">
            <summary>
            Tooltip for rotator handles
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.TooltipSnapToGeometryPoint">
            <summary>
            Tooltip for rotator handles
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.TooltipSnapToPort">
            <summary>
            Tooltip for rotator handles
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.TooltipConnectToPort">
            <summary>
            Tooltip connect to port
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.CursorCreateCircularArc">
            <summary>
            Create circular acr cursor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.CursorCreateEllipticalArc">
            <summary>
            Create elliptical arc cursor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.CursorCreateBezierCurve">
            <summary>
            Create bezier curve cursor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.CursorCreateClosedCurve">
            <summary>
            Create closed curve cursor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.CursorCreateCurve">
            <summary>
            Create curve cursor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.CursorCreateEllipse">
            <summary>
            Create ellipse cursor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.CursorCreateLine">
            <summary>
            Create line cursor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.CursorCreatePolygon">
            <summary>
            Create polygon cursor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.CursorCreatePolyline">
            <summary>
            Create polyline cursor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.CursorCreateRectangle">
            <summary>
            Create rectangle cursor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.CursorCreateText">
            <summary>
            Create text cursor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.CursorCreateConnector">
            <summary>
            Create graph edge cursor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.CursorHandOpened">
            <summary>
            Opened hand cursor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.CursorHandClosed">
            <summary>
            Closed hand cursor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.CursorRotating">
            <summary>
            Rotating cursor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.CursorRotate">
            <summary>
            Rotate cursor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.CursorCanMove">
            <summary>
            Can move cursor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.CursorConnectPlug">
            <summary>
            Connect plug cursor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.CursorDisconnectPlug">
            <summary>
            Disconnect plug cursor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.CursorMovePin">
            <summary>
            Move pin cursor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.CursorMoveCopy">
            <summary>
            Move copy cursor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.CursorPanAll">
            <summary>
            Pan all cursor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.BitmapZoomInButton">
            <summary>
            Image for the zoom in button
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.BitmapZoomOutButton">
            <summary>
            Image for the zoom out button
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.BitmapPanAllTransparent">
            <summary>
            Pan all transparent bitmap
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.BitmapRefreshPropertyBrowserButton">
            <summary>
            Image for the refresh button of the property browser
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDWFR.GetMoveCursor(System.Boolean,System.Boolean)">
            <summary>
            Gets a move cursor based on the specified move permissions
            </summary>
            <param name="canMoveX">whether X move is allowed</param>
            <param name="canMoveY">whether Y move is allowed</param>
            <returns>move cursor</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDWFR.GetResizeCursor(System.Single)">
            <summary>
            Gets a resize cursor for the specified angle
            </summary>
            <param name="angle">angle (in degrees)</param>
            <returns>resize cursor for the specified angle</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDWFR.GetResizeCursor(Nevron.GraphicsCore.CompassDirection)">
            <summary>
            Gets a resize cursor for the specified compass direction
            </summary>
            <param name="direction">compass direction</param>
            <returns>resize cursor for the specified compass direction</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDWFR.GetPanCursor(Nevron.GraphicsCore.CompassDirection)">
            <summary>
            
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ServiceDrawingViewSmartPaint">
            <summary>
            Name for the drawing view smart paint service
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ServiceViewEventSink">
            <summary>
            Name for the view event sink service
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ServiceViewSmartPaint">
            <summary>
            Name for the view smart paint service
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.DefaultMasterPrompt">
            <summary>
            Default prompt string for masters
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ImageListPropertyBrowser">
            <summary>
            Property browser image list
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ImageListFile">
            <summary>
            File image list 
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ImageListEdit">
            <summary>
            Edit image list
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ImageListView">
            <summary>
            View image list
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ImageListTools">
            <summary>
            Tools image list
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ImageListLayout">
            <summary>
            Layout image list
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ImageListAction">
            <summary>
            Action image list
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ImageListFormat">
            <summary>
            Format image list
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ImageListDocument">
            <summary>
            Document image list
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ImageListInsert">
            <summary>
            Insert image list
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ImageListHelp">
            <summary>
            Help image list
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ImageListLibrary">
            <summary>
            Library image list
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ImageListMisc">
            <summary>
            Misc image list
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NDWFR.ImageListDockingPanels">
            <summary>
            Docking panels image list
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDWFR.GetCommandImageInfo(Nevron.Diagram.WinForm.Commands.DiagramCommand,Nevron.GraphicsCore.NCustomImageList@,System.Int32@)">
            <summary>
            Gets image info for the specified diagram command
            </summary>
            <param name="command">diagram command</param>
            <param name="imageList">resulting image list</param>
            <param name="imageIndex">resulting image index</param>
            <returns>true if image info was successfully acquired, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NDrawingViewSmartPaintService">
            <summary>
            The NDrawingViewSmartPaintService represents the smart paint service, used by views
            </summary>
            <remarks>
            An instance of this class can be obtained from the SmartPaintService property of the NDrawingView class
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingViewSmartPaintService.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingViewSmartPaintService.#ctor(System.String,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name">name of the service</param>
            <param name="started">whether the service is initially started</param> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingViewSmartPaintService.InvalidateDocumentSceneRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Invalidates a rectangle specified in scene coordinates, which has the specified dirty inflate in world coordinates
            </summary>
            <remarks>
            Called by the document nodes
            </remarks>
            <param name="sceneRect">rectangle in scene coordinates</param>
            <param name="worldInflate">inflate in world coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingViewSmartPaintService.InvalidateDocumentWorldRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Invalidates a rectangle specified in world coordinates, which has the specified dirty inflate in world coordinates
            </summary>
            <remarks>
            Called by the document nodes
            </remarks>
            <param name="worldRect">rectangle in world coordinates</param>
            <param name="worldInflate">inflate in world coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingViewSmartPaintService.InvalidateDocumentScenePoint(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Invalidates a point defined with center in scene coordinates and size in device coordinates
            </summary>
            <remarks>
            Called by document nodes
            </remarks>
            <param name="scenePoint">point in scene coordinates</param>
            <param name="deviceSize">point size in device coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingViewSmartPaintService.InvalidateDocumentInfiniteLine(System.Single,System.Boolean,System.Single)">
            <summary>
            Invalidates an infinite horizontal or vertical line with coordinate specified in scene coordinates and width specified in world coordinates
            </summary>
            <remarks>
            Called by document nodes
            </remarks>
            <param name="sceneCoordinate">coordinate in scene coordinates</param>
            <param name="horizontal">true if the line is horizontal, false if the line is vertical</param>
            <param name="worldInflate">inflate in world coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingViewSmartPaintService.InvalidateDocumentNodeInstance(Nevron.Dom.INNode)">
            <summary>
            Called by the document smart paint service to invalidate all view instances of the node
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingViewSmartPaintService.View">
            <summary>
            Obtains a reference to the view to which this service is connected
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingViewSmartPaintService.Reset">
            <summary>
            Resets the state of the smart paint service
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingViewSmartPaintService.AccumulateInvalidArea(Nevron.GraphicsCore.NRectangleF@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="area"></param>
            <param name="emptyArea"></param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NLibraryViewSmartPaintService">
            <summary>
            The NLibraryViewSmartPaintService represents the smart paint service, used by views
            </summary>
            <remarks>
            An instance of this class can be obtained from the SmartPaintService property of the NLibraryView class.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewSmartPaintService.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewSmartPaintService.#ctor(System.String,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name">name of the service</param>
            <param name="started">whether the service is initially started</param> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewSmartPaintService.InvalidateDocumentSceneRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Invalidates a rectangle specified in scene coordinates, which has the specified dirty inflate in world coordinates
            </summary>
            <remarks>
            Called by the document nodes
            </remarks>
            <param name="sceneRect">rectangle in scene coordinates</param>
            <param name="worldInflate">inflate in world coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewSmartPaintService.InvalidateDocumentWorldRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Invalidates a rectangle specified in world coordinates, which has the specified dirty inflate in world coordinates
            </summary>
            <remarks>
            Called by the document nodes
            </remarks>
            <param name="worldRect">rectangle in world coordinates</param>
            <param name="worldInflate">inflate in world coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewSmartPaintService.InvalidateDocumentScenePoint(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Invalidates a point defined with center in scene coordinates and size in device coordinates
            </summary>
            <remarks>
            Called by document nodes
            </remarks>
            <param name="scenePoint">point in scene coordinates</param>
            <param name="deviceSize">point size in device coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewSmartPaintService.InvalidateDocumentInfiniteLine(System.Single,System.Boolean,System.Single)">
            <summary>
            Invalidates an infinite horizontal or vertical line with coordinate specified in scene coordinates and width specified in world coordinates
            </summary>
            <remarks>
            Called by document nodes
            </remarks>
            <param name="sceneCoordinate">coordinate in scene coordinates</param>
            <param name="horizontal">true if the line is horizontal, false if the line is vertical</param>
            <param name="worldInflate">inflate in world coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewSmartPaintService.InvalidateDocumentNodeInstance(Nevron.Dom.INNode)">
            <summary>
            Called by the document smart paint service to invalidate all view instances of the node
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewSmartPaintService.View">
            <summary>
            Obtains a reference to the library view to which this service is connected
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NViewEventSinkService">
            <summary>
            The NViewEventSinkService class represents the event sink service used by views
            </summary>
            <remarks>
            An instance of this class can be obtained from the EventSinkService property of the NView class.
            NViewEventSinkService enhances its base NDiagramEventSinkService with the following events:
            <list type="bullet">
            <item>
            	<term>Displayed document changing/changed events</term>
            	<description>
            	The DisplayedDocumentChanging/DisplayedDocumentChanged event pair is fired before and after the document displayed by the view has been changed.
            	</description>
            </item>
            <item>
            	<term>Transformations</term>
            	<description>
            	The TransformationsChanged event is fired when the view transformations have been changed
            	</description>
            </item>
            <item>
            	<term>Selection</term>
            	<description>
            	The (NodeSelecting - NodeSelected) events pair is fired before and after a node has been selected.
            	The (NodeDeselecting - NodeDeselected) events pair is fired before and after a node has been deselected.
            	The (MultiSelectionStarted - MultiSelectionEnded) events pair is fired before and after multiple nodes are about to be selected or deselected.
            	</description>
            </item>
            <item>
            	<term>Tools</term>
            	<description>
            	The ToolActivated/ToolDeactivated or ToolAborted events are fired when a tool has been activated and deactivated or aborted
            	The ToolsChanged event is fired when the controller collection of tools has changed
            	The ToolEnabled-ToolDisabled events are fired when a tool has been enabled or disabled
            	</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewEventSinkService.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewEventSinkService.#ctor(System.String,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name">name of the service</param>
            <param name="started">whether the service is initially started</param> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewEventSinkService.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Updates the references stored by the object
            </summary>
            <remarks>
            Overriden to store a reference to an instance of the NDrawingView class
            </remarks>
            <param name="provider">provider from which to obtain references</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewEventSinkService.View">
            <summary>
            Obtains a reference to the view to which this service is connected
            </summary>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NViewEventSinkService.DisplayedDocumentChanging">
            <summary>
            Fired when the document displayed by the view is about to be changed
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NViewEventSinkService.DisplayedDocumentChanged">
            <summary>
            Fired when the document displayed by the view has changed
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NViewEventSinkService.TransformationsChanged">
            <summary>
            Fired when the transformations of the view have changed
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NViewEventSinkService.NodeSelecting">
            <summary>
            Fired when a node is about to be selected
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NViewEventSinkService.NodeSelected">
            <summary>
            Fired when a node has been selected
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NViewEventSinkService.NodeDeselecting">
            <summary>
            Fired when a node is about to be deselected
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NViewEventSinkService.NodeDeselected">
            <summary>
            Fired when a node has been deselected
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NViewEventSinkService.MultiSelectionStarted">
            <summary>
            Fired when multiple nodes are going to be selected or deselected
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NViewEventSinkService.MultiSelectionEnded">
            <summary>
            Fired when multiple nodes have been selected or deselected
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NViewEventSinkService.ToolsChanged">
            <summary>
            Fired when the controller collection of tools has changed
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NViewEventSinkService.ToolEnabled">
            <summary>
            Fired when a tool has been enabled
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NViewEventSinkService.ToolDisabled">
            <summary>
            Fired when a tool has been disabled
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NViewEventSinkService.ToolActivated">
            <summary>
            Fired when a tool has been activated
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NViewEventSinkService.ToolDeactivated">
            <summary>
            Fired when a tool has been deactivated
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NViewEventSinkService.ToolAborted">
            <summary>
            Fired when a tool has been aborted
            </summary>
            <remarks>
            You cannot install an event listener for this event
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewEventSinkService.FireDisplayedDocumentChanging(Nevron.Diagram.NDocument)">
            <summary>
            Fires the DisplayedDocumentChanging event for the specified node
            </summary>
            <param name="document">document which is going to be displayed</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewEventSinkService.FireDisplayedDocumentChanged(Nevron.Diagram.NDocument)">
            <summary>
            Fires the DisplayedDocumentChanged event for the specified node
            </summary>
            <param name="document">document which is currently being displayed</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewEventSinkService.FireTransformationsChanged">
            <summary>
            Fires the TransformationsChanged event for the view to which the service is connected
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewEventSinkService.FireNodeSelecting(Nevron.Dom.INNode)">
            <summary>
            Fires the NodeSelecting event for the specified node
            </summary>
            <param name="node">node which is about to be selected</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewEventSinkService.FireNodeSelected(Nevron.Dom.INNode)">
            <summary>
            Fires the NodeSelected event for the specified node
            </summary>
            <param name="node">node which has been selected</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewEventSinkService.FireNodeDeselecting(Nevron.Dom.INNode)">
            <summary>
            Fires the NodeDeselecting event for the specified node
            </summary>
            <param name="node">node which is about to be deselected</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewEventSinkService.FireNodeDeselected(Nevron.Dom.INNode)">
            <summary>
            Fires the NodeDeselected event for the specified node
            </summary>
            <param name="node">node which has been deselected</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewEventSinkService.FireMultiSelectionStarted">
            <summary>
            Fires the MultiSelectionStarted event for the view to which the service is connected
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewEventSinkService.FireMultiSelectionEnded">
            <summary>
            Fires the MultiSelectionEnded event for the view to which the service is connected
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewEventSinkService.FireToolsChanged">
            <summary>
            Fires the ToolsChanged event for the view to which the service is connected
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewEventSinkService.FireToolEnabled(Nevron.Diagram.WinForm.NTool)">
            <summary>
            Fires the ToolEnabled event for the specified tool
            </summary>
            <param name="tool">tool which was enabled</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewEventSinkService.FireToolDisabled(Nevron.Diagram.WinForm.NTool)">
            <summary>
            Fires the ToolDisabled event for the specified tool
            </summary>
            <param name="tool">tool which was disabled</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewEventSinkService.FireToolActivated(Nevron.Diagram.WinForm.NTool)">
            <summary>
            Fires the ToolActivated event for the specified tool
            </summary>
            <param name="tool">tool which was activated</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewEventSinkService.FireToolDeactivated(Nevron.Diagram.WinForm.NTool)">
            <summary>
            Fires the ToolDeactivated event for the specified tool
            </summary>
            <param name="tool">tool which was deactivated</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewEventSinkService.FireToolAborted(Nevron.Diagram.WinForm.NTool)">
            <summary>
            Fires the ToolAborted event for the specified tool
            </summary>
            <param name="tool">tool which was aborted</param>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NViewEventSinkService.keyDisplayedDocumentChanging">
            <summary>
            Key for the DisplayedDocumentChanging event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NViewEventSinkService.keyDisplayedDocumentChanged">
            <summary>
            Key for the DisplayedDocumentChanged event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NViewEventSinkService.keyTransformationsChanged">
            <summary>
            Key for the TransformationsChanged event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NViewEventSinkService.keyNodeSelecting">
            <summary>
            Key for the NodeSelecting event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NViewEventSinkService.keyNodeSelected">
            <summary>
            Key for the NodeSelected event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NViewEventSinkService.keyNodeDeselecting">
            <summary>
            Key for the NodeDeselecting event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NViewEventSinkService.keyNodeDeselected">
            <summary>
            Key for the NodeDeselected event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NViewEventSinkService.keyMultiSelectionStarted">
            <summary>
            Key for the MultiSelectionStarted event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NViewEventSinkService.keyMultiSelectionEnded">
            <summary>
            Key for the MultiSelectionEnded event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NViewEventSinkService.keyToolsChanged">
            <summary>
            Key for the ToolsChanged event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NViewEventSinkService.keyToolEnabled">
            <summary>
            Key for the ToolEnabled event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NViewEventSinkService.keyToolDisabled">
            <summary>
            Key for the ToolDisabled event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NViewEventSinkService.keyToolActivated">
            <summary>
            Key for the ToolActivated event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NViewEventSinkService.keyToolDeactivated">
            <summary>
            Key for the ToolDeactivated event
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NViewEventSinkService.keyToolAborted">
            <summary>
            Key for the ToolAborted event
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NViewSmartPaintService">
            <summary>
            The NViewSmartPaintService represents the smart paint service, used by views
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewSmartPaintService.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewSmartPaintService.#ctor(System.String,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name">name of the service</param>
            <param name="started">whether the service is initially started</param> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewSmartPaintService.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Updates the references stored by the object
            </summary>
            <remarks>
            Overriden to store a reference to an instance of the NView class
            </remarks>
            <param name="provider">provider from which to obtain references</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewSmartPaintService.AmbientDeviceInflate">
            <summary>
            Gets/sets the ambient inflate applied to the invalidated device rectangle (in pixels)
            </summary>
            <remarks>
            By default set to 5
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewSmartPaintService.InvalidateSceneRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Invalidates a rectangle specified in scene coordinates, which has the specified dirty inflate in world coordinates
            </summary>
            <param name="sceneRect">rectangle in scene coordinates</param>
            <param name="worldInflate">inflate in world coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewSmartPaintService.InvalidateWorldRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Invalidates a rectangle specified in world coordinates, which has the specified dirty inflate in world coordinates
            </summary>
            <param name="worldRect">rectangle in world coordinates</param>
            <param name="worldInflate">inflate in world coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewSmartPaintService.InvalidateScenePoint(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Invalidates a point defined with center in scene coordinates and size in device coordinates
            </summary>
            <param name="scenePoint">point in scene coordinates</param>
            <param name="deviceSize">point size in device coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewSmartPaintService.InvalidateSceneInfiniteLine(System.Single,System.Boolean,System.Single)">
            <summary>
            Invalidates an infinite horizontal or vertical line with coordinate specified in scene coordinates and width specified in world coordinates
            </summary>
            <param name="sceneCoordinate">coordinate in scene coordinates</param>
            <param name="horizontal">true if the line is horizontal, false if the line is vertical</param>
            <param name="worldInflate">inflate in world coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewSmartPaintService.InvalidateNodeInstance(Nevron.Dom.INNode)">
            <summary>
            Invalidates the instance of the specified node 
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewSmartPaintService.Invalidate">
            <summary>
            Invalidates the entire view area
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewSmartPaintService.SmartRefresh">
            <summary>
            Requests a repaint of the accumulated invalid region
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewSmartPaintService.InvalidateDeviceRect(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Invalidates the specified rectangle (in device coordinates) 
            </summary>
            <param name="deviceRect">rectangle in device coordinates</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewSmartPaintService.Reset">
            <summary>
            Resets the state of the smart paint service
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewSmartPaintService.OnStop">
            <summary>
            Overriden to reset the view smart paint service state
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewSmartPaintService.AccumulateInvalidArea(Nevron.GraphicsCore.NRectangleF@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="area"></param>
            <param name="emptyArea"></param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NBoundsTracker">
            <summary>
            The NBoundsTracker class serves as base class for rotated and scene bounds trackers
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NBoundsTracker.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NBoundsTracker.CanChangeAspectRatio">
            <summary>
            Determines whether the aspect ratio can be changed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NBoundsTracker.CanResizeX">
            <summary>
            Determines whether the X resize is allowed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NBoundsTracker.CanResizeY">
            <summary>
            Determines whether the Y resize is allowed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NBoundsTracker.GetHandleForDirection(Nevron.GraphicsCore.CompassDirection)">
            <summary>
            Obtains a reference to the handle, which corresponds to the specified compass direction
            </summary>
            <param name="direction">direction</param>
            <returns>handle</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NBoundsTracker.GetOppositeHandle(Nevron.Diagram.WinForm.NBoundsHandle)">
            <summary>
            Obtains a reference to the handle, which is opposite to the specified handle
            </summary>
            <param name="handle">handle</param>
            <returns>opposite handle</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NBoundsTracker.UpdateResizePermissions">
            <summary>
            Updates the resize permissions of the trackers and the handles
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NPinPointTracker">
            <summary>
            The NPinPointTracker is used to edit the pin position of the shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPinPointTracker.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPinPointTracker.UpdateShapeFromTracker">
            <summary>
            Updates the node from the tracker
            </summary>
            <remarks>
            Overriden to update the node pin alignment 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPinPointTracker.Drag(Nevron.Diagram.WinForm.NHandle)">
            <summary>
            Called when the specified handle has been dragged
            </summary>
            <param name="handle">dragged handle</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPinPointTracker.CreateHandles">
            <summary>
            Overriden to create the pin handle
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NRotatedBoundsTracker">
            <summary>
            The NRotatedBoundsTracker is used to edit the rotated bounds of a node
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRotatedBoundsTracker.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRotatedBoundsTracker.UpdateShapeFromTracker">
            <summary>
            Updates the shape from the tracker
            </summary>
            <remarks>
            Overriden to resize the shape
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRotatedBoundsTracker.StartDragging(Nevron.Diagram.WinForm.NHandle)">
            <summary>
            Called by handles when the specified handle begins to be dragged
            </summary>
            <remarks>
            Overriden to store the location of the model pin point
            </remarks>
            <param name="handle">handle which is beginning to be dragged</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRotatedBoundsTracker.Drag(Nevron.Diagram.WinForm.NHandle)">
            <summary>
            Called when the specified handle has been dragged
            </summary>
            <remarks>
            Overriden to scale the preview
            </remarks>
            <param name="handle">dragged handle</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NRotatedBoundsTracker.ModelScalePinPoint">
            <summary>
            Gets the point around which the shape is scaled (in model coordinates of the shape)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRotatedBoundsTracker.CreateHandles">
            <summary>
            Overriden to create the rotated bounds handles
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRotatedBoundsTracker.CreateVisualAids">
            <summary>
            Overriden to create the rotated bounds rubber band
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NRotationTracker">
            <summary>
            The NRotationTracker is used to edit the rotation of a node
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRotationTracker.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRotationTracker.UpdateShapeFromTracker">
            <summary>
            Updates the shape from the tracker
            </summary>
            <remarks>
            Overriden to update the shape transform from the preview shape transform
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRotationTracker.StartDragging(Nevron.Diagram.WinForm.NHandle)">
            <summary>
            Called by handles when the specified handle begins to be dragged
            </summary>
            <remarks>
            Overriden to store the initial shape transform
            </remarks>
            <param name="handle">handle which is beginning to be dragged</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRotationTracker.Drag(Nevron.Diagram.WinForm.NHandle)">
            <summary>
            Called when the specified handle has been dragged to the specified point
            </summary>
            <remarks>
            Overriden to rotate the preview
            </remarks>
            <param name="handle">dragged handle</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRotationTracker.CreateHandles">
            <summary>
            Overriden to create the rotator handle
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRotationTracker.CreateVisualAids">
            <summary>
            Overriden to create the snap guide line
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRotationTracker.GetShapeRotation">
            <summary>
            Gets the shape rotation (in radians)
            </summary>
            <returns>shape rotation (in radians)</returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NSceneBoundsTracker">
            <summary>
            The NSceneBoundsTracker is used to edit the scene bounds of a node
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSceneBoundsTracker.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSceneBoundsTracker.UpdateShapeFromTracker">
            <summary>
            Updates the shape from the tracker
            </summary>
            <remarks>
            Overriden to resize the shape
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSceneBoundsTracker.Drag(Nevron.Diagram.WinForm.NHandle)">
            <summary>
            Called when the specified handle has been dragged
            </summary>
            <remarks>
            Overriden to resize the preview
            </remarks>
            <param name="handle">dragged handle</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSceneBoundsTracker.CanTrackShape(Nevron.Diagram.NShape)">
            <summary>
            Determines whether the specified shape can be tracked by this tracker
            </summary>
            <param name="shape">shape</param>
            <returns>true if the shape can be tracked otherwise, false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSceneBoundsTracker.CreateHandles">
            <summary>
            Overriden to create the bounds handles
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSceneBoundsTracker.CreateVisualAids">
            <summary>
            Overriden to create the bounds rubber band
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NGeometryPointTracker">
            <summary>
            The NGeometryPointTracker is used to edit geometry base and control points 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NGeometryPointTracker.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NGeometryPointTracker.UpdateShapeFromTracker">
            <summary>
            Updates the node from the tracker
            </summary>
            <remarks>
            Overriden to update the shape geometry point from the preview
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NGeometryPointTracker.Drag(Nevron.Diagram.WinForm.NHandle)">
            <summary>
            Called when the specified handle has been dragged
            </summary>
            <param name="handle">dragged handle</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NGeometryPointTracker.CanTrackShape(Nevron.Diagram.NShape)">
            <summary>
            Overriden to accept only shapes which implement the INPoints interface
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NGeometryPointTracker.CreateHandles">
            <summary>
            Overriden to create the shape points handles
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NGeometrySegmentsTracker">
            <summary>
            The NGeometrySegmentsTracker is used to edit the mid points of the shape segments
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NGeometrySegmentsTracker.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NGeometrySegmentsTracker.UpdateShapeFromTracker">
            <summary>
            Updates the node from the tracker
            </summary>
            <remarks>
            Overriden to insert a new point in the node at the dragged mid point index
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NGeometrySegmentsTracker.StartDragging(Nevron.Diagram.WinForm.NHandle)">
            <summary>
            Called by handles when the specified handle begins to be dragged
            </summary>
            <remarks>
            Overriden to store the dragged handle point index
            </remarks>
            <param name="handle">handle which is beginning to be dragged</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NGeometrySegmentsTracker.Drag(Nevron.Diagram.WinForm.NHandle)">
            <summary>
            Called when the specified handle has been dragged to the specified point
            </summary>
            <remarks>
            Overriden to modify the preview
            </remarks>
            <param name="handle">dragged handle</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NGeometrySegmentsTracker.CanTrackShape(Nevron.Diagram.NShape)">
            <summary>
            Overriden to accept only shapes, which implement the INSegments interface
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NGeometrySegmentsTracker.CreateHandles">
            <summary>
            Overriden to create handles for the segments mid points
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NBoundsHandle">
            <summary>
            The NBoundsHandle class represents a handle, which is used by scene (axis parallel) or rotated bounds trackers
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NBoundsHandle.#ctor(Nevron.Diagram.WinForm.HandleType)">
            <summary>
            Initializer constructor
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NBoundsHandle.#ctor(Nevron.Diagram.WinForm.HandleType,Nevron.GraphicsCore.CompassDirection)">
            <summary>
            Initializer constructor
            </summary>
            <param name="type">handle type</param>
            <param name="direction">bounds corner compass direction</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NBoundsHandle.Direction">
            <summary>
            Gets/sets the bounds handle corner direction
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NBoundsHandle.ComputeNewBounds(System.Single,System.Single,Nevron.GraphicsCore.NRectangleF,System.Boolean)">
            <summary>
            Computes new bounds for an expected change of this handle
            </summary>
            <param name="xChange">x change</param>
            <param name="yChange">y change</param>
            <param name="originalBounds">original bounds</param>
            <param name="canChangeAspectRatio">whether the bounds aspect ratio can be broken</param>
            <returns>new bounds</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NBoundsHandle.ComputeNewScale(System.Single,System.Single,Nevron.GraphicsCore.NRectangleF,System.Boolean,System.Single@,System.Single@)">
            <summary>
            Computes the scales and pin for scaling the original bounds to accomodate the X and Y change
            </summary>
            <param name="xChange">x change</param>
            <param name="yChange">y change</param>
            <param name="originalBounds">original bounds</param>
            <param name="canChangeAspectRatio">whether the bounds aspect ratio can be broken</param>
            <param name="scaleX">result X scale</param>
            <param name="scaleY">result Y scale</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NBoundsHandle.GetNewBoundsNorthWest(System.Single,System.Single,Nevron.GraphicsCore.NRectangleF,System.Boolean)">
            <summary>
            Gets new bounds for a north west direction change
            </summary>
            <param name="xChange">x change</param>
            <param name="yChange">y change</param>
            <param name="originalBounds">original bounds</param>
            <param name="canChangeAspectRatio">whether aspect ratio can be changed</param> 
            <returns>new bounds</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NBoundsHandle.GetNewBoundsSouthWest(System.Single,System.Single,Nevron.GraphicsCore.NRectangleF,System.Boolean)">
            <summary>
            Gets new bounds for a south west direction change
            </summary>
            <param name="xChange">x change</param>
            <param name="yChange">y change</param>
            <param name="originalBounds">original bounds</param>
            <param name="canChangeAspectRatio">whether aspect ratio can be changed</param> 
            <returns>new bounds</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NBoundsHandle.GetNewBoundsNorthEast(System.Single,System.Single,Nevron.GraphicsCore.NRectangleF,System.Boolean)">
            <summary>
            Gets new bounds for a north east direction change
            </summary>
            <param name="xChange">x change</param>
            <param name="yChange">y change</param>
            <param name="originalBounds">original bounds</param>
            <param name="canChangeAspectRatio">whether aspect ratio can be changed</param> 
            <returns>new bounds</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NBoundsHandle.GetNewBoundsSouthEast(System.Single,System.Single,Nevron.GraphicsCore.NRectangleF,System.Boolean)">
            <summary>
            Gets new bounds for a south east direction change
            </summary>
            <param name="xChange">x change</param>
            <param name="yChange">y change</param>
            <param name="originalBounds">original bounds</param>
            <param name="canChangeAspectRatio">whether aspect ratio can be changed</param> 
            <returns>new bounds</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NBoundsHandle.GetNewBoundsNorth(System.Single,Nevron.GraphicsCore.NRectangleF,System.Boolean)">
            <summary>
            Gets new bounds for a north direction change (optionally preserves the aspect ratio)
            </summary>
            <param name="yChange">y change</param>
            <param name="originalBounds">original bounds</param>
            <param name="canChangeAspectRatio">whether the bounds aspect ratio can be broken</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NBoundsHandle.GetNewBoundsEast(System.Single,Nevron.GraphicsCore.NRectangleF,System.Boolean)">
            <summary>
            Gets new bounds for an east direction change (optionally preserves the aspect ratio)
            </summary>
            <param name="xChange">x change</param>
            <param name="originalBounds">original bounds</param>
            <param name="canChangeAspectRatio">whether the bounds aspect ratio can be broken</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NBoundsHandle.GetNewBoundsSouth(System.Single,Nevron.GraphicsCore.NRectangleF,System.Boolean)">
            <summary>
            Gets new bounds for a south direction change (optionally preserves the aspect ratio)
            </summary>
            <param name="yChange">y change</param>
            <param name="originalBounds">original bounds</param>
            <param name="canChangeAspectRatio">whether the bounds aspect ratio can be broken</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NBoundsHandle.GetNewBoundsWest(System.Single,Nevron.GraphicsCore.NRectangleF,System.Boolean)">
            <summary>
            Gets new bounds for a west direction change (optionally preserves the aspect ratio)
            </summary>
            <param name="xChange">x change</param>
            <param name="originalBounds">original bounds</param>
            <param name="canChangeAspectRatio">whether the bounds aspect ratio can be broken</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NHandle">
            <summary>
            The NHandle class represents a draggable point, belonging to a tracker
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandle.#ctor(Nevron.Diagram.WinForm.HandleType)">
            <summary>
            Initializer constructor
            </summary>
            <param name="type">handle type</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandle.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <remarks>
            Overriden to cashe references to the tracker 
            </remarks>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandle.HitTest(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the handle by point with the specified context
            </summary>
            <param name="point">point in scene coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the handle was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandle.HitTest(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the handle by rectangle with the specified context
            </summary>
            <remarks>
            This implementation always returns false.
            </remarks>
            <param name="rectangle">rectangle in scene coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the handle was hit, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NHandle.Visible">
            <summary>
            Controls the visibility of the handle
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandle.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the handle
            </summary>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandle.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the handle can be painted
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the node can be painted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandle.Invalidate">
            <summary>
            Invalidates the handle
            </summary>
            <remarks>
            This implementation will invalidate all contained handles
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NHandle.Enabled">
            <summary>
            Specifies whether the handle is enabled
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NHandle.Cursor">
            <summary>
            Gets/sets the handle cursor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NHandle.Tooltip">
            <summary>
            Gets/sets the handle tooltip
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NHandle.Location">
            <summary>
            Gets/sets the handle location (in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NHandle.Type">
            <summary>
            Gets/sets the handle type
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NHandle.LastSnapResult">
            <summary>
            Gets/sets the result of the last snapping
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NHandle.Tracker">
            <summary>
            Obtains a reference to tracker to which this handle belongs
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandle.StartDragging">
            <summary>
            Begins the handle dragging
            </summary>
            <remarks>
            This method will call the OnHandleBeginDragging method of the owner tracker
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandle.Drag(Nevron.GraphicsCore.NPointF)">
            <summary>
            Drags the handle to the specified scene point
            </summary>
            <remarks>
            This method will call the OnHandleDrag method of the owner tracker
            </remarks>
            <param name="point">point to drag to handle to (in scene coordinates)</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandle.EndDragging(System.Boolean)">
            <summary>
            Ends the handle dragging
            </summary>
            <param name="updateShape"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandle.GetHandleStyle">
            <summary>
            Obtains a reference to the handle style, with which this handle must be displayed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandle.PaintHandleShape(Nevron.GraphicsCore.IN2DDevice,Nevron.Diagram.WinForm.HandleShape,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF,Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle)">
            <summary>
            Paints the handle shape
            </summary>
            <param name="device">graphics in which to paint</param>
            <param name="shape">handle shape</param>
            <param name="location">handle location (in device coordinates)</param>
            <param name="size">handle size (in device coordinates)</param>
            <param name="fillStyle">brush to use for the handle filling</param>
            <param name="strokeStyle">pen to use for the handle outline</param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NHandleCollection">
            <summary>
            The NHandleCollection is a strongly typed view collection containing NHandle instances
            </summary>
            <remarks>
            NHandleCollection enhances its base NViewNodeCollection with the following features:
            <list type="bullet">
            <item>
            	<term>Painting</term>
            	<description>
            	NHandleCollection implements the INPaintable interface and paints all contained handles (for speed optimization). 
            	If however a handle implements the INPaintable interface it will delegate the painting to it. 
            	Note that by default handles to not implement the INPaintable interface.
            	</description>
            </item>
            <item>
            	<term>Local Trasformation</term>
            	<description>
            	NHandleCollection implements the INTransformable interface, which means that the NHandleCollection class 
            	stores a local transformation. The NTracker class to which the collection belongs initializes 
            	this transformation with the transformation of the tracked node. In this way the scene transform of handles is 
            	the same as the tracked node scene transform, which is very convenient.
            	</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandleCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NHandleCollection.Visible">
            <summary>
            Controls the visibility of the collection
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandleCollection.Invalidate">
            <summary>
            Invalidates the node
            </summary>
            <remarks>
            This implementation will invalidate all contained handles
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandleCollection.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the collection in the specified context
            </summary>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandleCollection.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the collection can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the node can be painted, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NHandleStyle">
            <summary>
            The NHandleStyle class is used to control the shape, size and appearance of handles
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandleStyle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandleStyle.#ctor(Nevron.Diagram.WinForm.HandleShape,Nevron.GraphicsCore.NSizeF,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializer constructor
            </summary>
            <param name="shape">handle shape</param>
            <param name="size">handle size (in device coordinates)</param>
            <param name="fillColor">fill color</param>
            <param name="borderColor">border color</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandleStyle.#ctor(Nevron.Diagram.WinForm.NHandleStyle)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHandleStyle.Dispose">
            <summary>
            Disposes the cashed pen and brush
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NHandleStyle.FillColor">
            <summary>
            Gets/sets the fill color
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NHandleStyle.BorderColor">
            <summary>
            Gets/sets the border color
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NHandleStyle.Shape">
            <summary>
            Gets/sets the handle shape
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NHandleStyle.Size">
            <summary>
            Gets/sets the handle size (in device coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NHandleStyle.StrokeStyle">
            <summary>
            Gets a cashed pen for the current border color
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NHandleStyle.FillStyle">
            <summary>
            Gets a cashed solid brush for the current fill color
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NPointHandle">
            <summary>
            The NPointHandle class represents a handle, which is used to represent a single point info
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPointHandle.#ctor(Nevron.Diagram.NPointInfo)">
            <summary>
            Initializer constructor
            </summary>
            <param name="info">information about the point for which the handle is created</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NPointHandle.PointInfo">
            <summary>
            Obtains a reference to the point info for which the handle was created
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPointHandle.Drag(Nevron.GraphicsCore.NPointF)">
            <summary>
            Drags the handle to the specified scene point
            </summary>
            <param name="point">point to drag to handle to (in scene coordinates)</param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NTracker">
            <summary>
            The NTracker class represents a shape editor with handles 
            and serves as base class for all types of trackers
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to cashe a reference to the drawing view hosting the tracker and update the references of all contained nodes
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.GetEnumerator">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <returns>node enumerator</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTracker.Visible">
            <summary>
            Controls the visibility of the tracker
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.Invalidate">
            <summary>
            Invalidates the tracker
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the tracker in the specified context
            </summary>
            <remarks>
            If the tracker is in dragging mode the handles will be hidden if the ShowHandlesWhenDragging proprty is false.
            </remarks>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the tracker can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the node can be painted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.IndexOfChild(Nevron.Dom.INNode)">
            <summary>
            Gets the index of the specified node in the container
            </summary>
            <param name="node">the node to locate</param>
            <returns>index of the node</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.GetChildAt(System.Int32)">
            <summary>
            Gets the child node at the specified index
            </summary>
            <param name="index">index</param>
            <returns>node at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.SetChildIndex(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Sets a new index of the specified child node
            </summary>
            <param name="node">node whose index to change</param>
            <param name="index">new index</param>
            <returns>previous node index</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.IsChild(Nevron.Dom.INNode)">
            <summary>
            Determines whether the specified node is a child node for this container
            </summary>
            <param name="node">node to check</param>
            <returns>true if it is a child node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.ChildrenCount(Nevron.Filters.INFilter)">
            <summary>
            Returns the number of child nodes which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <returns>children count, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.Children(Nevron.Filters.INFilter)">
            <summary>
            Obtains the child nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.AccumulateChildren(Nevron.Filters.INFilter,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the children contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="list">list to which to append the child nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.IsDescendant(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Queries whether the specified node is a descendant of this node
            </summary>
            <param name="node">node to look for</param>
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>true if the node is a descendant node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.DescendantsCount(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Returns the number of descendant nodes, which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>count of descendants, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.Descendants(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Obtains the descentant nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.AccumulateDescendants(Nevron.Filters.INFilter,System.Int32,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the descendants contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <param name="list">list to which to append the descendant nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.GetEnumerator(Nevron.Filters.INFilter)">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.IsShapeConstrained(Nevron.Diagram.NShape)">
            <summary>
            Determines whether the shape bounds are constrained
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.GetShapeConstrainBounds(Nevron.Diagram.NShape)">
            <summary>
            Get the constrain bounds for the specified shape
            </summary>
            <param name="shape">shape for which to get constrain bounds</param>
            <returns>shape constrain bounds</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTracker.Transform">
            <summary>
            Gets/sets transformation, which transforms the node to the parent coordinate system
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTracker.SceneTransform">
            <summary>
            Gets the transformation, which transforms the node to the scene coordinate system
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTracker.WorldTransform">
            <summary>
            Gets the transformation, which transforms the node to the world coordinate system
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTracker.ParentSceneTransform">
            <summary>
            Gets the transformation, which transforms the parent transformable node to the scene coordinate system
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.UpdateTrackerFromShape">
            <summary>
            Updates the tracker from the shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.UpdateShapeFromTracker">
            <summary>
            Updates the shape from the tracker
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.StartDragging(Nevron.Diagram.WinForm.NHandle)">
            <summary>
            Called by handles when the specified handle begins to be dragged
            </summary>
            <param name="handle">handle which is beginning to be dragged</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.Drag(Nevron.Diagram.WinForm.NHandle)">
            <summary>
            Called when the specified handle has been dragged
            </summary>
            <param name="handle">dragged handle</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.EndDragging(Nevron.Diagram.WinForm.NHandle,System.Boolean)">
            <summary>
            Called when the dragging of the specified handle has ended
            </summary>
            <param name="handle">handle whose dragging ended</param>
            <param name="updateShape">whether the shape must be updated</param> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.CanTrackShape(Nevron.Diagram.NShape)">
            <summary>
            Determines whether the specified shape can be tracked by this tracker
            </summary>
            <param name="shape">shape</param>
            <returns>true if the shape can be tracked otherwise, false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTracker.Handles">
            <summary>
            Obtains a reference to the handles collection
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTracker.VisualAids">
            <summary>
            Obtains a reference to the visual aids collection
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTracker.Shape">
            <summary>
            Gets/sets the shape tracked by the tracker
            </summary>	
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTracker.Preview">
            <summary>
            Obtains a reference to the shape preview
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTracker.View">
            <summary>
            Obtains a reference to the view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTracker.ShowHandlesWhenDragging">
            <summary>
            Determines whether the handles must be hidden when the tracker is in dragging mode
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTracker.IsUpdatingShape">
            <summary>
            Determines whether the tracker is currently updating the shape, which it tracks
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTracker.IsDraggingHandle">
            <summary>
            Determines whether the tracker is currently processing handle drag events
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTracker.DraggedHandle">
            <summary>
            Reference to the dragged handle
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTracker.DraggedHandleInitialCursor">
            <summary>
            Dragged handle initial cursor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTracker.DraggedHandleInitialLocation">
            <summary>
            Dragged handle initial location
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.StartTransaction(System.String)">
            <summary>
            Starts a new transaction
            </summary>
            <remarks>
            Safely calls the StartTransaction method of the document
            </remarks>
            <param name="description">transaction description</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.Commit">
            <summary>
            Commits the current transaction
            </summary>
            <remarks>
            Safely calls the Commit method of the document
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.Rollback">
            <summary>
            Rolls back the current transaction
            </summary>
            <remarks>
            Safely calls the Rollback method of the document
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.OnTransformChanging(Nevron.GraphicsCore.NMatrix2DF)">
            <summary>
            Called when the transformation of the node is about to change
            </summary>
            <remarks>
            The implementation will first check whether the change is accepted by all ancestor transform observers.
            It will then fire a NodeTransformChanging event if the node is connected to an event sink service.
            </remarks>
            <returns>true if change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.OnTransformChanged">
            <summary>
            Called when the transformation of the node has changed
            </summary>
            <remarks>
            This implementation will first invalidate the scene cashe. 
            The implementation will then notify all ancestor transform observers about the change.
            Finally implementation will fire a NodeTransformChanged event if the node is connected to an event sink service and invalidate the scene cashe
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.InvalidateSceneCashe">
            <summary>
            Invalidates the scene cashe
            </summary>
            <remarks>
            This implementation will invalidate the cashed scene transform
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.CreateHandles">
            <summary>
            Called to create the tracker handles
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTracker.CreateVisualAids">
            <summary>
            Called to create the visual aids the tracker may display
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NVisualAidsCollection">
            <summary>
            The NVisualAidsCollection is collection of diagram nodes, which trackers populate with visual aids
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NVisualAidsCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NVisualAidsCollection.Visible">
            <summary>
            Controls the visibility of the collection
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NVisualAidsCollection.Invalidate">
            <summary>
            Invalidates the node
            </summary>
            <remarks>
            This implementation will invalidate all contained handles
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NVisualAidsCollection.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the collection in the specified context
            </summary>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NVisualAidsCollection.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the collection can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the node can be painted, otherwise false</returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NControlPointsTracker">
            <summary>
            The NControlPointsTracker is used to edit the control points of the shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NControlPointsTracker.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NControlPointsTracker.UpdateShapeFromTracker">
            <summary>
            Updates the shape from the tracker
            </summary>
            <remarks>
            Overriden to update the location of the dragged control point
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NControlPointsTracker.Drag(Nevron.Diagram.WinForm.NHandle)">
            <summary>
            Called when the specified handle has been dragged
            </summary>
            <param name="handle">dragged handle</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NControlPointsTracker.CanTrackShape(Nevron.Diagram.NShape)">
            <summary>
            Determines whether the specified shape can be tracked by this tracker
            </summary>
            <param name="shape">shape</param>
            <returns>true if the shape can be tracked otherwise, false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NControlPointsTracker.CreateHandles">
            <summary>
            Overriden to create the control point handles
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NPlugsTracker">
            <summary>
             The NPlugsTracker is used to edit the plugs of a shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPlugsTracker.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPlugsTracker.UpdateShapeFromTracker">
            <summary>
            Updates the shape from the tracker
            </summary>
            <remarks>
            Overriden to update the plug location and reconnect it
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPlugsTracker.Drag(Nevron.Diagram.WinForm.NHandle)">
            <summary>
            Called when the specified handle has been dragged to the specified point
            </summary>
            Overriden to update the preview and highlight the port for connection below the point
            <param name="handle">dragged handle</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPlugsTracker.EndDragging(Nevron.Diagram.WinForm.NHandle,System.Boolean)">
            <summary>
            Called when the dragging of the specified handle has ended
            </summary>
            <remarks>
            Overriden to remove the highlights
            </remarks>
            <param name="handle">handle whose dragging ended</param>
            <param name="updateShape">whether the shape must be updated</param> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPlugsTracker.CanTrackShape(Nevron.Diagram.NShape)">
            <summary>
            Determines whether the specified shape can be tracked by this tracker
            </summary>
            <param name="shape">shape</param>
            <returns>true if the shape can be tracked otherwise, false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPlugsTracker.CreateHandles">
            <summary>
            Overriden to create handles for the start and end plugs of the shape
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NPortsTracker">
            <summary>
            The NPortsTracker is used to edit the ports of the shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPortsTracker.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPortsTracker.UpdateShapeFromTracker">
            <summary>
            Updates the shape from the tracker
            </summary>
            <remarks>
            Overriden to update the location of the dragged control point
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPortsTracker.Drag(Nevron.Diagram.WinForm.NHandle)">
            <summary>
            Called when the specified handle has been dragged
            </summary>
            <param name="handle">dragged handle</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPortsTracker.CanTrackShape(Nevron.Diagram.NShape)">
            <summary>
            Determines whether the specified shape can be tracked by this tracker
            </summary>
            <param name="shape">shape</param>
            <returns>true if the shape can be tracked otherwise, false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NPortsTracker.CreateHandles">
            <summary>
            Overriden to create the control point handles
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NAutoScroller">
            <summary>
            The NAutoScroller attribute is used to provide each NView instance with autoscroll capabilities
            </summary>
            <remarks>
            A reference to this class can be obtained from the AutoScroller property of the NView class. 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NAutoScroller.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NAutoScroller.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to cashe a reference to the view
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NAutoScroller.CreateNonSerializedObjects">
            <summary>
            Overriden to create the timers
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NAutoScroller.Dispose">
            <summary>
            Disposes the timers
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NAutoScroller.Mode">
            <summary>
            Gets/sets the mode in which the auto scroller operates. By default set to MouseInScrollMargins.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NAutoScroller.Margins">
            <summary>
            Controls the margins of the auto scroll area
            </summary>
            <remarks>
            The specified value must contain only positive margins and is measured in pixels. 
            By default all margins are set to 16
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NAutoScroller.Delay">
            <summary>
            Controls the auto scroll delay
            </summary>
            <remarks>
            The delay is measured in milliseconds. It controls the delay before autoscrolling starts. By default set to 500.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NAutoScroller.Time">
            <summary>
            Controls the auto scroll time
            </summary>
            <remarks>
            The time is measured in milliseconds. It controls the speed of the autoscrolling. By default set to 100.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NAutoScroller.IsScrolling">
            <summary>
            Determines whether the autoscrolling is currently being performed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NAutoScroller.View">
            <summary>
            Obtains a reference to the view 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NAutoScroller.OnDraggingStarted">
            <summary>
            Called by the view when a drag operation has started in it
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NAutoScroller.OnDragging(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Called when single or multiple objects with the specified bounds area dragged in the view.
            </summary>
            <remarks>
            This method is called when autoscrolling must be performed.
            The method will perform the following steps:
            <para>
            1. Stop autoscrolling if the mouse has left the scrollable area
            </para>
            <para>
            2. Stop autoscrolling if currently scrolling and the scroll direction has changed
            </para>
            <para>
            3. Start autoscrolling in the current scroll direction
            </para>
            </remarks>
            <param name="dragArea">area of the dragged objects (in scene coordinates)</param> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NAutoScroller.OnDraggingEnded">
            <summary>
            Called by the view when a drag operation has ended
            </summary>
            <remarks>
            This implementation stops the auto scrolling.
            </remarks> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NAutoScroller.Start(Nevron.GraphicsCore.CompassDirection)">
            <summary>
            Starts autoscrolling in the specified direction
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NAutoScroller.Stop">
            <summary>
            Stops the autoscrolling
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NAutoScroller.ComputeDirection(Nevron.Diagram.WinForm.NAutoScroller.NAutoScollData,Nevron.GraphicsCore.CompassDirection@)">
            <summary>
            Computes the direction in which the autoscroller must scroll. 
            Returns true if a valid direction is computed. Returns false if the autoscolling must be stopped.
            </summary>
            <param name="data"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NAutoScroller.OnScrollTimerTick(System.Object,System.EventArgs)">
            <summary>
            Handles the scroll timer tick event
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NAutoScroller.OnDelayTimerTick(System.Object,System.EventArgs)">
            <summary>
            Handles the delay timer tick event
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NAutoScroller.NAutoScollData">
            <summary>
            Data needed for autoscroll behavior
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NAutoScroller.NAutoScollData.#ctor(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Initializer constructor
            </summary>
            <param name="mousePos"></param>
            <param name="dragArea"></param>
            <param name="window"></param>
            <param name="innerArea"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NAutoScroller.NAutoScollData.GetMouseXCode">
            <summary>
            Gets the mouse X position code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NAutoScroller.NAutoScollData.GetMouseYCode">
            <summary>
            Gets the mouse Y position code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NAutoScroller.NAutoScollData.GetDragAreaXCode">
            <summary>
            Gets the drag area X position code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NAutoScroller.NAutoScollData.GetDragAreaYCode">
            <summary>
            Gets the mouse Y position code
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NAutoScroller.NAutoScollData.MousePos">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NAutoScroller.NAutoScollData.DragArea">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NAutoScroller.NAutoScollData.Window">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NAutoScroller.NAutoScollData.InnerArea">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NAutoScroller.AutoScrollCode">
            <summary>
            Describes the eight possible scrolling area codes as a mask
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NAutoScroller.AutoScrollCode.None">
            <summary>
            None (Center)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NAutoScroller.AutoScrollCode.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NAutoScroller.AutoScrollCode.Rigth">
            <summary>
            Rigth
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NAutoScroller.AutoScrollCode.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NAutoScroller.AutoScrollCode.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NInteractivityManager">
            <summary>
            The NInteractivityManager attribute is used to provide each NView instance with cursor and tooltip management abilities
            </summary>
            <remarks>
            A reference to this class can be obtained from the InteractivityManager property of the NView class
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NInteractivityManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NInteractivityManager.Clone">
            <summary>
            Creates an identical copy of this attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NInteractivityManager.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to cashe a reference to the view
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NInteractivityManager.CreateNonSerializedObjects">
            <summary>
            Overriden to reset the runtime state
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NInteractivityManager.RequestCursor(System.Windows.Forms.Cursor)">
            <summary>
            Requests the specified cursor
            </summary>
            <param name="cursor">requested cursor</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NInteractivityManager.RequestTooltip(System.String)">
            <summary>
            Requests the specified tooltip
            </summary>
            <param name="tooltip">requested tooltip</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NInteractivityManager.ToolTip">
            <summary>
            Obtains the tooltip, which is used to display tooltips in the view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NInteractivityManager.DefaultCursor">
            <summary>
            Gets/sets the default cursor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NInteractivityManager.View">
            <summary>
            Obtains a reference to the view 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NInteractivityManager.StartCursorAndTooltipRequests">
            <summary>
            Called to mark the start of cursor requests
            </summary>
            <remarks>
            Pair this method with EndCursorRequests.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NInteractivityManager.EndCursorAndTooltipRequests">
            <summary>
            Called to mark the end of cursor requests
            </summary>
            <remarks>
            Pair this method with StartCursorRequests. The first requested cursor after 
            the StartCursorRequests call, will become the new cursor of the view.
            </remarks>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NSelection">
            <summary>
            The NSelection attribute is used to provide each NView instance with selection capabilities
            </summary>
            <remarks>
            A reference to this class can be obtained from the Selection property of the NView class. 
            The selection is used to store the current set of manipulated document elements.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to cashe a reference to the view
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.CreateNonSerializedObjects">
            <summary>
            Overriden to reset the entities and the internally kept selection list
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.SingleSelect(Nevron.Dom.INNode)">
            <summary>
            Makes the specified node the one and only selected node
            </summary>
            <param name="node">node to single select</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.SingleSelect(Nevron.Dom.NNodeList)">
            <summary>
            Makes the specified nodes the only selected nodes
            </summary>
            <param name="nodes">nodes to select</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.MultiSelect(Nevron.Dom.INNode)">
            <summary>
            Appends the specified node to the selection list, without removing the currently selected nodes
            </summary>
            <param name="node">node to select</param>
            <returns>true if the node was successfully selected, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.MultiSelect(Nevron.Dom.NNodeList)">
            <summary>
            Appends the specified nodes to the selection list, without removing the currently selected nodes
            </summary>
            <param name="nodes">nodes to select</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.Toggle(Nevron.Dom.INNode)">
            <summary>
            Toggles the node selection state
            </summary>
            <param name="node">node to toggle</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.DeselectAll">
            <summary>
            Deselects all currently selected nodes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.Deselect(Nevron.Dom.INNode)">
            <summary>
            Deselects the specified node if it selected
            </summary>
            <param name="node">node to deselect</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.Deselect(Nevron.Dom.NNodeList)">
            <summary>
            Deselects the specified nodes
            </summary>
            <param name="nodes">nodes to deselect</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.Contains(Nevron.Dom.INNode)">
            <summary>
            Determines whether the specified node is selected
            </summary>
            <param name="node">node to check</param>
            <returns>true if the node is selected, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.ContainsAny(Nevron.Dom.NNodeList)">
            <summary>
            Determines whether any of the specified nodes is selected
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.ClickSelect(Nevron.Dom.INNode)">
            <summary>
            Performs a click node selection
            </summary>
            <remarks>
            This method takes into account the current Control and Shift key states and performs the following actions:
            <para>
            1. If the control key is pressed it will toggle the node selection state
            </para>
            <para>
            2. If the shift key is pressed it will milti select the node
            </para>
            <para>
            3. If no key modifier is pressed and the node is not already selected it will single select it
            </para>
            </remarks>
            <param name="node">node to select</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.RegionSelect(Nevron.Dom.NNodeList)">
            <summary>
            Performs a region nodes selection
            </summary>
            <remarks>
            This method takes into account the current Control and Shift key states and performs the following actions:
            <para>
            1. If the control key is pressed it will toggle the nodes selection state
            </para>
            <para>
            2. If the shift key is pressed it will multi select the specified nodes
            </para>
            <para>
            3. If no key modifier is pressed it will clear the selection and multi select the specified nodes
            </para>
            </remarks>
            <param name="nodes">nodes to select</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.InitDrillDown(Nevron.Dom.INNode)">
            <summary>
            Initializes the drill down node. 
            This method is called by the ClickSelect method of the Selector tool to store a possible drill down node
            </summary>
            <param name="node">node for drill down</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.ResetDrillDown">
            <summary>
            Resets the drill down node.
            This method is called by the controller DoMouseMove method of the view to clear the drill node node each time the mouse is moved
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.DrillDown">
            <summary>
            Click selects the drill down node. 
            This method is called by the DrillDownSelect method of the Selector tool
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.InvalidateBatches">
            <summary>
            Invalidates the cashed batches
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelection.Mode">
            <summary>
            Controls the mode in which the selection operates
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelection.AnchorMode">
            <summary>
            Controls the mode in which the selection anchor node is determined
            </summary>
            <remarks>
            By default set to Last
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelection.EnableToggleClickSelect">
            <summary>
            Specifies whether toggling of node selection is enabled when the user click selects a node
            This operation is performed when the user clicks on a node and the Ctrl key is down.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelection.EnableAppendClickSelect">
            <summary>
            Specifies whether appending the node to the selection is enabled when the user click selects a node.
            This operation is performed when the user clicks on a node and the Shift key is down.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelection.Nodes">
            <summary>
            Gets a list of the currently selected nodes.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelection.NodesCount">
            <summary>
            Obtains the count of selected nodes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelection.LastNode">
            <summary>
            Gets the last selected node
            </summary>
            <remarks>
            Returns null if the selection is empty
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelection.FirstNode">
            <summary>
            Gets the first selected node
            </summary>
            <remarks>
            Returns null if the selection is empty
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelection.AnchorNode">
            <summary>
            Gets the anchor selected node
            </summary>
            <remarks>
            Based on the AnchorMode property this is either the first or the last selected node. 
            Returns null if the selection is empty.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelection.BatchDelete">
            <summary>
            Obtains a new batch delete, built from the currently selected nodes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelection.BatchFormat">
            <summary>
            Obtains a new batch format, built from the currently selected nodes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelection.BatchLayout">
            <summary>
            Obtains a new batch layout, built from the currently selected nodes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelection.BatchTranslate">
            <summary>
            Obtains a new batch translate, built from the currently selected nodes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelection.BatchTransform">
            <summary>
            Obtains a new batch transform, built from the currently selected nodes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelection.BatchGroup">
            <summary>
            Obtains a new group operations batch, built from the currently selected nodes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelection.BatchUngroup">
            <summary>
            Obtains a new ungroup operations batch, built from the currently selected nodes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelection.BatchCompose">
            <summary>
            Obtains a new compose operations batch, built from the currently selected nodes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelection.BatchDecompose">
            <summary>
            Obtains a new decompose operations batch, built from the currently selected nodes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelection.BatchAction">
            <summary>
            Obtains a new action operations batch, built from the currently selected nodes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelection.BatchReorder">
            <summary>
            Obtains a new reorder operations batch, built from the currently selected nodes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelection.BatchTimeStamp">
            <summary>
            Obtains the date time at which the entities were last updated
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelection.View">
            <summary>
            Obtains a reference to the view
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.OnNodeSelecting(Nevron.Dom.INNode)">
            <summary>
            Called when the specified node is about to be selected
            </summary>
            <remarks>
            This implementation calls the NView OnNodeSelecting method
            </remarks>
            <param name="node">node which is going to be selected</param>
            <returns>true if the node can be selected, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.OnNodeSelected(Nevron.Dom.INNode)">
            <summary>
            Called when the specified node has been selected
            </summary>
            <remarks>
            This implementation calls the NView OnNodeSelected method and invalidates the cashed selection entities
            </remarks>
            <param name="node">node which has been selected</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.OnNodeDeselecting(Nevron.Dom.INNode)">
            <summary>
            Called when the specified node is going to be deselected
            </summary>
            <remarks>
            This implementation calls the NView OnNodeDeselecting method
            </remarks>
            <param name="node">node which is going to be deselected</param>
            <returns>true if the node can be deselected, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.OnNodeDeselected(Nevron.Dom.INNode)">
            <summary>
            Called when the specified node has been deselected
            </summary>
            <remarks>
            This method will perform the following actions:
            <remarks>
            This implementation calls the NView OnNodeDeselected method and invalidates the cashed selection entities
            </remarks>
            </remarks>
            <param name="node">node which has been deselected</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.OnMultiSelectionStarted">
            <summary>
            Called to start a multi selection session
            </summary>
            <remarks>
            This implementation calls the NView OnMultiSelectionStarted method if the multi selection is not nested
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.OnMultiSelectionEnded">
            <summary>
            Called to end a multi selection session
            </summary>
            <remarks>
            This implementation calls the NView OnMultiSelectionEnded method if the multi selection is not nested
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSelection.IsMultiSelecting">
            <summary>
            Determines whether the selection is currently in multi select session
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.CreateBatchDelete(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new NBatchDelete for the purpose of applying it to the currently selected nodes
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.CreateBatchFormat(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new NBatchFormat for the purpose of applying it to the currently selected nodes
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.CreateBatchLayout(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new NBatchLayout for the purpose of applying it to the currently selected nodes
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.CreateBatchTransform(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new NBatchTransform for the purpose of applying it to the currently selected nodes
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.CreateBatchTranslate(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new NBatchTranslate for the purpose of applying it to the currently selected nodes
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.CreateBatchGroup(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new NBatchGroup for the purpose of applying it to the currently selected nodes
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.CreateBatchUngroup(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new NBatchUngroup for the purpose of applying it to the currently selected nodes
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.CreateBatchCompose(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new NBatchCompose for the purpose of applying it to the currently selected nodes
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.CreateBatchDecompose(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new NBatchDecompose for the purpose of applying it to the currently selected nodes
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.CreateBatchAction(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new NBatchAction for the purpose of applying it to the currently selected nodes
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSelection.CreateBatchReorder(Nevron.Diagram.NDocument)">
            <summary>
            Creates a new NBatchReorder for the purpose of applying it to the currently selected nodes
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NDiagramElementFactory">
            <summary>
            An instance of the NDiagramElementFactory class is used to provide each drawing view with the ability to create diagram elements
            </summary>
            <remarks>
            A reference to this class can be obtained from the ElementFactory property of the NDrawingView class 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramElementFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramElementFactory.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to cashe a reference to a NDrawingView instance
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDiagramElementFactory.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDiagramElementFactory.View">
            <summary>
            Gets the view associated with the factory
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramElementFactory.CreateEllipticalArc(System.Boolean)">
            <summary>
            Creates a new instance of the NEllipticalArcShape class
            </summary>
            <param name="preview">true if the node is needed for preview, false if the node is going to be added to the document</param>
            <returns>new elliptical arc</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramElementFactory.CreateCircularArc(System.Boolean)">
            <summary>
            Creates a new instance of the NCircularArcShape class
            </summary>
            <param name="preview">true if the node is needed for preview, false if the node is going to be added to the document</param>
            <returns>new circular arc</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramElementFactory.CreateBezierCurve(System.Boolean)">
            <summary>
            Creates a new instance of the NBezierCurveShape class
            </summary>
            <param name="preview">true if the node is needed for preview, false if the node is going to be added to the document</param>
            <returns>new bezier curve</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramElementFactory.CreateClosedCurve(System.Boolean)">
            <summary>
            Creates a new instance of the NClosedCurveShape class
            </summary>
            <param name="preview">true if the node is needed for preview, false if the node is going to be added to the document</param>
            <returns>new closed curve</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramElementFactory.CreateCurve(System.Boolean)">
            <summary>
            Creates a new instance of the NCurveShape class
            </summary>
            <param name="preview">true if the node is needed for preview, false if the node is going to be added to the document</param>
            <returns>new curve</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramElementFactory.CreateEllipse(System.Boolean)">
            <summary>
            Creates a new instance of the NEllipseShape class
            </summary>
            <param name="preview">true if the node is needed for preview, false if the node is going to be added to the document</param>
            <returns>new ellipse</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramElementFactory.CreateLine(System.Boolean)">
            <summary>
            Creates a new instance of the NLineShape class
            </summary>
            <param name="preview">true if the node is needed for preview, false if the node is going to be added to the document</param>
            <returns>new line</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramElementFactory.CreatePolygon(System.Boolean)">
            <summary>
            Creates a new instance of the NPolygonShape class
            </summary>
            <param name="preview">true if the node is needed for preview, false if the node is going to be added to the document</param>
            <returns>new polygon</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramElementFactory.CreatePolyline(System.Boolean)">
            <summary>
            Creates a new instance of the NPolylineShape class
            </summary>
            <param name="preview">true if the node is needed for preview, false if the node is going to be added to the document</param>
            <returns>new polyline</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramElementFactory.CreateRectangle(System.Boolean)">
            <summary>
            Creates a new instance of the NRectangleShape class
            </summary>
            <param name="preview">true if the node is needed for preview, false if the node is going to be added to the document</param>
            <returns>new rectangle</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramElementFactory.CreateHorizontalGuideline(System.Boolean)">
            <summary>
            Creates a new instance of the NHorizontalGuideline class
            </summary>
            <param name="preview">true if the node is needed for preview, false if the node is going to be added to the document</param>
            <returns>new horizontal guideline</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramElementFactory.CreateVerticalGuideline(System.Boolean)">
            <summary>
            Creates a new instance of the NVerticalGuideline class
            </summary>
            <param name="preview">true if the node is needed for preview, false if the node is going to be added to the document</param>
            <returns>new vertical guideline</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramElementFactory.CreateStep2Connector(System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of the NStep2Connector class
            </summary>
            <param name="preview">true if the node is needed for preview, false if the node is going to be added to the document</param>
            <param name="firstVertical">whether the first step is vertical</param>
            <returns>new NStep2Connector instance</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramElementFactory.CreateStep3Connector(System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of the NStep3Connector class
            </summary>
            <param name="preview">true if the node is needed for preview, false if the node is going to be added to the document</param>
            <param name="firstVertical">whether the first step is vertical</param>
            <returns>new NStep3Connector instance</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramElementFactory.CreateBezierConnector(System.Boolean)">
            <summary>
            Creates a new instance of the NBezierCurveShape class
            </summary>
            <param name="preview">true if the node is needed for preview, false if the node is going to be added to the document</param>
            <returns>new NBezierCurveShape instance</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramElementFactory.CreateLineConnector(System.Boolean)">
            <summary>
            Creates a new instance of the NLineShape class
            </summary>
            <param name="preview">true if the node is needed for preview, false if the node is going to be added to the document</param>
            <returns>new NLineShape instance</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramElementFactory.CreateArrowConnector(System.Boolean,Nevron.Diagram.ArrowType)">
            <summary>
            Creates a new instance of the NArrowShape class
            </summary>
            <param name="preview">true if the node is needed for preview, false if the node is going to be added to the document</param>
            <param name="type">arrow edge type</param>
            <returns>new NArrowShape instance</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramElementFactory.CreateRoutableConnector(System.Boolean,Nevron.Diagram.RoutableConnectorType)">
            <summary>
            Creates a new instance of the NRoutableConnector class
            </summary>
            <param name="preview">true if the node is needed for preview, false if the node is going to be added to the document</param>
            <param name="type">routeable edge type</param>
            <returns>new NRoutableConnector instance</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramElementFactory.CreateErmConnector(System.Boolean)">
            <summary>
            Creates a new instance of the NErmConnector class
            </summary>
            <param name="preview">true if the node is needed for preview, false if the node is going to be added to the document</param>
            <returns>new NErmConnector instance</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDiagramElementFactory.CreateText(System.Boolean)">
            <summary>
            Creates a new instance of the NText class
            </summary>
            <param name="preview">true if the node is needed for preview, false if the node is going to be added to the document</param>
            <returns>new text</returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NTrackersAppearance">
            <summary>
            An instance of the NTrackersAppearance class is used to control the appearance of the trackers displayed by every view
            </summary>
            <remarks>
            An instance of this class can be obtained from the TrackersAppearance property of the NDrawingView class.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTrackersAppearance.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersAppearance.Attributes">
            <summary>
            Gets the list of child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTrackersAppearance.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTrackersAppearance.GetAttributeByName(System.String)">
            <summary>
            Gets a child or descendant attribute by its name
            </summary>
            <param name="attributeName">child name or full attribute name</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTrackersAppearance.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
            <summary>
            Sets a child or descendant attribute by its name
            </summary>
            <param name="attributeName">attribute name</param>
            <param name="attribute">attribute to set</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTrackersAppearance.GetStyleForType(Nevron.Diagram.WinForm.HandleType)">
            <summary>
            Obtains the handle style for the specified handle type
            </summary>
            <param name="type">handle type</param>
            <returns>handle style</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersAppearance.BoundsHandlesStyle">
            <summary>
            Controls the appearance of the bounds handles
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersAppearance.RotatedBoundsHandlesStyle">
            <summary>
            Controls the appearance of the rotated bounds handles
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersAppearance.RotatorHandlesStyle">
            <summary>
            Controls the appearance of the rotator handles
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersAppearance.PinHandlesStyle">
            <summary>
            Controls the appearance of the pin handles
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersAppearance.GeometryBasePointHandlesStyle">
            <summary>
            Controls the appearance of geometry base point handles
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersAppearance.GeometryControlPointHandlesStyle">
            <summary>
            Controls the appearance of geometry control point handles
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersAppearance.GeometryMidPointHandlesStyle">
            <summary>
            Controls the appearance of geometry mid point handles
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersAppearance.ShapeStartPlugHandlesStyle">
            <summary>
            Controls the appearance of shape start plug handles
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersAppearance.ShapeEndPlugHandlesStyle">
            <summary>
            Controls the appearance of shape end plug handles
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersAppearance.ShapePortHandlesStyle">
            <summary>
            Controls the appearance of shape port handles
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersAppearance.ShapeControlPointHandlesStyle">
            <summary>
            Controls the appearance of shape control point handles
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersAppearance.DisabledHandlesColor">
            <summary>
            Specifies the color of the disabled handles
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersAppearance.RotatorHandleDistance">
            <summary>
            Controls the distance of the rotator handle from the node rotated bounds
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersAppearance.RubberBandStrokeStyle">
            <summary>
            Gets/sets the stroke style of the rubber band displayed by bounds and rotated bounds trackers
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NTrackersManager">
            <summary>
            An instance of this class is used to manage the shape trackers created in each drawing view
            </summary>
            <remarks>
            A reference to this class can be obtained from the TrackersManager property of the NDrawingView class. 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTrackersManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTrackersManager.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <remarks>
            Overriden to cashe references to the view and the content layer
            </remarks>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTrackersManager.CreateTrackersForShape(Nevron.Diagram.NShape)">
            <summary>
            Creates the trackers for the specified shape
            </summary>
            <param name="shape">shape for which to create trackers</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTrackersManager.DestroyTrackersForShape(Nevron.Diagram.NShape)">
            <summary>
            Destroys the trackers of the specified shape
            </summary>
            <param name="shape">shape whose trackers to destroy</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTrackersManager.UpdateTrackersForShape(Nevron.Diagram.NShape)">
            <summary>
            Updates the trackers of the specified shape
            </summary>
            <remarks>
            This method will call the UpdateTrackerFromShape method of all trackers whose node property equals with the specified node
            </remarks>
            <param name="shape">shape whose trackers to update</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTrackersManager.RecreateTrackersForShape(Nevron.Diagram.NShape)">
            <summary>
            Recreates the trackers for the specified shape
            </summary>
            <param name="shape">shape whose trackers to recreate</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTrackersManager.GetTrackersForShape(Nevron.Diagram.NShape)">
            <summary>
            Obtains a list of the trackers for the specified shape
            </summary>
            <param name="shape">shape for which to get trackers</param>
            <returns>trackers of the specified shape</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTrackersManager.UpdateAllTrackers">
            <summary>
            Updates all hosted trackers from their nodes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTrackersManager.CreateSceneBoundsTracker(Nevron.Diagram.NShape)">
            <summary>
            Called from the CreateTrackersForShape method, when a new instance of the NSceneBoundsTracker class 
            is needed for the specified shape
            </summary>
            <remarks>
            This can be overriden in order to return a subclassed NSceneBoundsTracker instance
            </remarks>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTrackersManager.CreateRotatedBoundsTracker(Nevron.Diagram.NShape)">
            <summary>
            Called from the CreateTrackersForShape method, when a new instance of the NRotatedBoundsTracker class 
            is needed for the specified shape
            </summary>
            <remarks>
            This can be overriden in order to return a subclassed NRotatedBoundsTracker instance
            </remarks>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTrackersManager.CreateRotationTracker(Nevron.Diagram.NShape)">
            <summary>
            Called from the CreateTrackersForShape method, when a new instance of the NRotationTracker class 
            is needed for the specified shape
            </summary>
            <remarks>
            This can be overriden in order to return a subclassed NRotationTracker instance
            </remarks>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTrackersManager.CreatePinPointTracker(Nevron.Diagram.NShape)">
            <summary>
            Called from the CreateTrackersForShape method, when a new instance of the NPinPointTracker class 
            is needed for the specified shape
            </summary>
            <remarks>
            This can be overriden in order to return a subclassed NPinPointTracker instance
            </remarks>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTrackersManager.CreateGeometryPointTracker(Nevron.Diagram.NShape)">
            <summary>
            Called from the CreateTrackersForShape method, when a new instance of the NGeometryPointTracker class 
            is needed for the specified shape
            </summary>
            <remarks>
            This can be overriden in order to return a subclassed NGeometryPointTracker instance
            </remarks>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTrackersManager.CreateGeometrySegmentsTracker(Nevron.Diagram.NShape)">
            <summary>
            Called from the CreateTrackersForShape method, when a new instance of the NGeometrySegmentsTracker class 
            is needed for the specified shape
            </summary>
            <remarks>
            This can be overriden in order to return a subclassed NGeometrySegmentsTracker instance
            </remarks>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTrackersManager.CreateControlPointsTracker(Nevron.Diagram.NShape)">
            <summary>
            Called from the CreateTrackersForShape method, when a new instance of the NControlPointsTracker class 
            is needed for the specified shape
            </summary>
            <remarks>
            This can be overriden in order to return a subclassed NControlPointsTracker instance
            </remarks>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTrackersManager.CreatePlugsTracker(Nevron.Diagram.NShape)">
            <summary>
            Called from the CreateTrackersForShape method, when a new instance of the NPlugsTracker class 
            is needed for the specified shape
            </summary>
            <remarks>
            This can be overriden in order to return a subclassed NPlugsTracker instance
            </remarks>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTrackersManager.CreateCustomTrackers(Nevron.Diagram.NShape)">
            <summary>
            Called from the CreateTrackersForShape method, in order to provide derived classes with the ability to 
            create custom trackers for the specified shape
            </summary>
            <remarks>
            This implementation returns null
            </remarks>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersManager.Enabled">
            <summary>
            Gets/sets whether trackers manager is enabled. 
            Setting this property to false will globally disable the creating of all types of trackers.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersManager.HideDisabledHandles">
            <summary>
            Gets/sets whether disabled handles should be hidden
            </summary>
            <remarks>
            By default set to false
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersManager.ShowBoundsTrackers">
            <summary>
            Gets/sets whether bounds trackers should at all be displayed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersManager.ShowRotatatedBoundsTrackers">
            <summary>
            Gets/sets whether rotated bounds trackers should at all be displayed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersManager.ShowRotationTrackers">
            <summary>
            Gets/sets whether rotation trackers should at all be displayed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersManager.ShowPinPointTrackers">
            <summary>
            Gets/sets whether pin point trackers should at all be displayed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersManager.ShowGeometryPointsTrackers">
            <summary>
            Gets/sets whether geometry points trackers should at all be displayed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersManager.ShowGeometryMidPointsTrackers">
            <summary>
            Gets/sets whether geometry mid points trackers should at all be displayed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersManager.ShowShapeControlPointsTrackers">
            <summary>
            Gets/sets whether shape control points trackers should at all be displayed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersManager.ShowShapePlugsTrackers">
            <summary>
            Gets/sets whether shape plugs trackers should at all be displayed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersManager.View">
            <summary>
            Obtains a reference to the drawing view to which this manager belongs
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NTrackersManager.ContentLayer">
            <summary>
            Obtains a reference to the view content layer
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NGrid">
            <summary>
            The NGrid is a view component, which renders a grid in the View Background Paint Pass.
            </summary>
            <remarks>
            NGrid enhances its base NViewComponent with the following features:
            <list type="bullet">
            <item>
            	<term>Painting</term>
            	<description>The grid can be painted so it implements the INPaintable interface</description>
            </item>
            <item>
            	<term>Coordinate snapping</term>
            	<description>NGrid implements the INXCoordinateSnapper and INYCoordinateSnapper to indicate its ability to snap X and Y coordinates. 
            	You can also specify whether the grid should snap cooridnates to major and/or minor lines.
            	</description>
            </item>
            <item>
            	<term>Origin and cell size</term>
            	<description>The origin of the grid is controlled by the Origin property (specified in grid measurement units). 
            	The cell size is controlled by the CellSizeMode property. When the CellSizeMode is set to 
            	Fixed you can use the FixedCellSize property to specify the desired cell size, which will not 
            	change when the view transformation changes.</description>
            </item>
            <item>
            	<term>Grid style</term>
            	<description>The grid can be displayed in sereral styles. The grid style is controlled by the 
            	GridStyle property</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NGrid.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NGrid.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NGrid.Visible">
            <summary>
            Controls the visibility of the grid
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NGrid.Invalidate">
            <summary>
            Invalidates the node
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NGrid.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the grid in the specified context during the Background Paint Pass
            </summary>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NGrid.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the grid can be painted during the Background Paint Pass
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the node can be painted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NGrid.SnapX(System.Single,Nevron.Diagram.NSnapContext,System.Single@)">
            <summary>
            Tries to snap the specified X coordinate
            </summary>
            <param name="x">x coordinate to snap</param>
            <param name="context">snap context</param>
            <param name="snappedX">snapped X coordinate</param>
            <returns>true if successfully snapped, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NGrid.SnapY(System.Single,Nevron.Diagram.NSnapContext,System.Single@)">
            <summary>
            Tries to snap the specified Y coordinate
            </summary>
            <param name="y">y coordinate to snap</param>
            <param name="context">snap context</param>
            <param name="snappedY">snapped Y coordinate</param>
            <returns>true if successfully snapped, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NGrid.GridStyle">
            <summary>
            Controls the grid style
            </summary>
            <remarks>
            By default set to MajorLines
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NGrid.CellSizeMode">
            <summary>
            Controls the mode in which the cell size is determined
            </summary>
            <remarks>
            By default set to Normal. If set to Fixed the FixedCellSize property 
            defines a constant cell size, which is independent from the view transformations.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NGrid.FixedCellSize">
            <summary>
            Specifies the cell size when the CellSizeMode is set to Fixed (in grid measurement units)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NGrid.MajorLinesStrokeStyle">
            <summary>
            Controls the appearance of the major grid lines
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NGrid.MinorLinesStrokeStyle">
            <summary>
            Controls the appearance of the minor grid lines
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NGrid.HorizontalStripesFillStyle">
            <summary>
            Controls the filling of the horizontal stripes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NGrid.VerticalStripesFillStyle">
            <summary>
            Controls the filling of the vertical stripes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NGrid.ShowOrigin">
            <summary>
            Controls the visibility of the grid origin
            </summary>
            <remarks>
            By default set to false.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NGrid.Origin">
            <summary>
            Controls the position of the grid origin (in grid measurement units)
            </summary>
            <remarks>
            The grid origin is the point from which grid lines originate.
            By default it is set to (0, 0)
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NGrid.ClipWithDocumentBounds">
            <summary>
            Specifies whether the grid must be displayed inside the document bounds only
            </summary>
            <remarks>
            By default set to true
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NGrid.GetUsedCellSize">
            <summary>
            Returns the used cell size
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NGrid.KdlE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NHorizontalRuler">
            <summary>
            The NHorizontalRuler class represents the horizontal ruler of the view
            </summary>
            <remarks>
            It implements the INXCoordinateSnapper interface in order to participate in the snapping of X coordinates.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHorizontalRuler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHorizontalRuler.SnapX(System.Single,Nevron.Diagram.NSnapContext,System.Single@)">
            <summary>
            Tries to snap the specified X coordinate
            </summary>
            <param name="x">x coordinate to snap</param>
            <param name="context">snap context</param>
            <param name="snappedX">snapped X coordinate</param>
            <returns>true if successfully snapped, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHorizontalRuler.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHorizontalRuler.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the ruler in the specified context
            </summary>
            <remarks>
            Overriden to paint the highlighted coordinate and range
            </remarks>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHorizontalRuler.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the ruler can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the ruler can be painted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHorizontalRuler.ClampToRulerPaintArea(System.Single)">
            <summary>
            Clamps the specified coordinate to the ruler paint area
            </summary>
            <param name="coordinate">coordinate to clamp</param>
            <returns>clamped coordinate</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHorizontalRuler.IsInRulerPaintArea(System.Single)">
            <summary>
            Determines whether the specified coordinate is inside the ruler paint area
            </summary>
            <param name="coordinate">coordinate to check for</param>
            <returns>true if the coordinate is inside the paint area, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHorizontalRuler.InvalidateHighlightedCoordinate">
            <summary>
            Directly invalidates only the area of the currently highlighted coordinate
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NHorizontalRuler.InvalidateHighlightedRange">
            <summary>
            Directly invalidates only the area of the currently highlighted range
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NRuler">
            <summary>
            The NRuler abstract class is a a view component, which is used as base class for horizontal and vertical rulers
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRuler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NRuler.FormatValueDelegate">
            <summary>
            Deletate for formatting the text values of the ruler.
            When assigned the ruler will call the delegate instead of using the default TextFormat.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRuler.CreateNonSerializedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRuler.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the ruler in the specified context
            </summary>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRuler.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the node can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the node can be painted, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NRuler.Visible">
            <summary>
            Controls the visibility of the ruler
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRuler.Invalidate">
            <summary>
            Invalidates the ruler
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NRuler.Size">
            <summary>
            Controls the size of the ruler (in pixels)
            </summary>
            <remarks>
            By default set to 20
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NRuler.Padding">
            <summary>
            Controls the padding of the ruler (in pixels)
            </summary>
            <remarks>
            The padding is the distance between the ruler and the window area. By default set to 0
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NRuler.Origin">
            <summary>
            Contorls the ruler origin (in ruler measurement unit)
            </summary>
            <remarks>
            The ruler origin is the value from which ticks originate.
            By default it is set to 0.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NRuler.MajorTicksStepMode">
            <summary>
            Controls the mode in which the major ticks step is determined
            </summary>
            <remarks>
            By default set to Normal. If set to Fixed the FixedMajorTicksStep property 
            defines a constant major ticks step, which is independent from the view transformations.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NRuler.FixedMajorTicksStep">
            <summary>
            Specifies the major ticks step when the MajorTicksStepMode is set to Fixed (in ruler measurement units)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NRuler.MajorTicksColor">
            <summary>
            Controls the color of the major ticks
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NRuler.MinorTicksCount">
            <summary>
            Controls the count of minor ticks between two major ones
            </summary>
            <remarks>
            By default set to 5 
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NRuler.MinorTicksLength">
            <summary>
            Controls the length of the minor ticks (in pixels)
            </summary>
            <remarks>
            By default set to 5
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NRuler.MinorTicksColor">
            <summary>
            Contorls the color of the minor ticks
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NRuler.TextFontStyle">
            <summary>
            Gets/sets the font style of the ruler texts
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NRuler.TextColor">
            <summary>
            Contorls the color of the ruler texts
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NRuler.TextFormat">
            <summary>
            Controls the ruler texts format string.
            Not taken into account when the FormatValueDelegate is assigned.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NRuler.BackColor">
            <summary>
            Controls the ruler back color
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NRuler.FrameColor">
            <summary>
            Controls the ruler frame color
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NRuler.HighlightCoordinateColor">
            <summary>
            Controls the color of the coordinate highlight tick
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NRuler.HighlightRangeColor">
            <summary>
            Controls the color of the range highlight filling
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NRuler.IsUpdatingHighlights">
            <summary>
            Determines whether the ruler is currenly in an update highlighting session
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRuler.StartHighlightsUpdate">
            <summary>
            Starts a highlights update session
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRuler.EndHighlightsUpdate">
            <summary>
            Ends a highlights update session
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRuler.HighlightCoordinate(System.Single)">
            <summary>
            Highlights the specified coordinate (in pixels)
            </summary>
            <param name="coordinate">coordinate</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRuler.HighlightRange(System.Single,System.Single)">
            <summary>
            Highlights the specified range (in pixels)
            </summary>
            <param name="from">range start</param>
            <param name="to">range end</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRuler.InvalidateHighlightedCoordinate">
            <summary>
            Directly invalidates only the area of the currently highlighted coordinate
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRuler.InvalidateHighlightedRange">
            <summary>
            Directly invalidates only the area of the currently highlighted range
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRuler.ClampToRulerPaintArea(System.Single)">
            <summary>
            Clamps the specified coordinate to the ruler paint area
            </summary>
            <param name="coordinate">coordinate to clamp</param>
            <returns>clamped coordinate</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRuler.IsInRulerPaintArea(System.Single)">
            <summary>
            Determines whether the specified coordinate is inside the ruler paint area
            </summary>
            <param name="coordinate">coordinate to check for</param>
            <returns>true if the coordinate is inside the paint area, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRuler.GetUsedMajorTickStep">
            <summary>
            Returns the tick step which is actually used by the ruler
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRuler.EhlE.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="GhlE"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NRuler.EhlE.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NRuler.defaultFontName">
            <summary>
            Specifies the default font name with which the rulers are initialized
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NRuler.defaultFontSize">
            <summary>
            Specifies the default font size with which the rulers are initialized
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NVerticalRuler">
            <summary>
            The NVerticalRuler class represents the vertical ruler of the view
            </summary>
            <remarks>
            It implements the INYCoordinateSnapper interface in order to participate in the snapping of Y coordinates.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NVerticalRuler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NVerticalRuler.SnapY(System.Single,Nevron.Diagram.NSnapContext,System.Single@)">
            <summary>
            Tries to snap the specified Y coordinate
            </summary>
            <param name="y">y coordinate to snap</param>
            <param name="context">snap context</param>
            <param name="snappedY">snapped Y coordinate</param>
            <returns>true if successfully snapped, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NVerticalRuler.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NVerticalRuler.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the ruler in the specified context
            </summary>
            <remarks>
            Overriden to paint the highlighted coordinate and range
            </remarks>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NVerticalRuler.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the ruler can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the ruler can be painted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NVerticalRuler.ClampToRulerPaintArea(System.Single)">
            <summary>
            Clamps the specified coordinate to the ruler paint area
            </summary>
            <param name="coordinate">coordinate to clamp</param>
            <returns>clamped coordinate</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NVerticalRuler.IsInRulerPaintArea(System.Single)">
            <summary>
            Determines whether the specified coordinate is inside the ruler paint area
            </summary>
            <param name="coordinate">coordinate to check for</param>
            <returns>true if the coordinate is inside the paint area, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NVerticalRuler.InvalidateHighlightedCoordinate">
            <summary>
            Directly invalidates only the area of the currently highlighted coordinate
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NVerticalRuler.InvalidateHighlightedRange">
            <summary>
            Directly invalidates only the area of the currently highlighted range
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NVerticalRuler.GetMaxTextSize(Nevron.GraphicsCore.IN2DDevice)">
            <summary>
            
            </summary>
            <param name="grx"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NViewComponent">
            <summary>
            The NViewComponent abstract class represents a special node residing in view scenes, 
            which has a scene independent logical measurement unit.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewComponent.#ctor">
            <summary>
            Default construcotr
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewComponent.Clone">
            <summary>
            Creates an identical copy of this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewComponent.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Binds the object to its parent object
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewComponent.CreateNonSerializedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewComponent.GetReferenceProvider">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewComponent.ProvideReference(System.Type)">
            <summary>
            Called to provide a reference to the object of the specified type
            </summary>
            <param name="referenceType">type of object for which to obtain a reference</param>
            <returns>reference to an object of the specified type, or null if such reference cannot be provided</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewComponent.RootNode">
            <summary>
            Obtains the root node in the scene tree hierachy
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewComponent.ParentNode">
            <summary>
            Obtains the node parent in the scene tree hierachy
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewComponent.MeasurementUnit">
            <summary>
            Gets/sets the measurement unit of the node
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewComponent.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewComponent.SmartPaintService">
            <summary>
            Obtains the view smart paint service, to which the node is currently connected
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewComponent.EventSinkService">
            <summary>
            Obtains the view event sink service, to which the node is currently connected
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewComponent.View">
            <summary>
            Obtains a reference to the view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewComponent.AutoSynchronizeMeasurementUnit">
            <summary>
            Specifies whether the measurement unit of the view component must be automatically sychronized with the document measurement unit
            </summary>
            <remarks>
            By default set to true
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewComponent.MeasurementUnitScale">
            <summary>
            Gets/sets a custom scale factor to be applied to the ruler measurement unit.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewComponent.ConvertViewToComponent(System.Single)">
            <summary>
            Converts a view units to component units
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewComponent.ConvertComponentToView(System.Single)">
            <summary>
            Converts component units to view units
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewComponent.ConvertViewToComponent(Nevron.GraphicsCore.NSizeF)">
            <summary>
            Converts a view units to component units
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewComponent.ConvertComponentToView(Nevron.GraphicsCore.NSizeF)">
            <summary>
            Converts component units to view units
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewComponent.ConvertViewToComponent(Nevron.GraphicsCore.NPointF)">
            <summary>
            Converts a view units to component units
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewComponent.ConvertComponentToView(Nevron.GraphicsCore.NPointF)">
            <summary>
            Converts component units to view units
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewComponent.ComputeAutoStep(Nevron.Diagram.WinForm.AutoStepMode)">
            <summary>
            Computes an automatic step for the specified step mode
            </summary>
            <returns>auto step measured in the component measurement unit</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewComponent.OnPropertyChanging(System.String,System.Object)">
            <summary>
            General property changing handler, which fires the NodePropertyChanging event
            </summary>
            <param name="propertyName">name of the property which is chaning</param>
            <param name="newValue">new property value</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewComponent.OnPropertyChanged(System.String)">
            <summary>
            General property changed handler, which fires the NodePropertyChanged event
            </summary>
            <param name="propertyName">name of the property which has chaned</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewComponent.PauseEventSinkService">
            <summary>
            Safely pauses the event sink service
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewComponent.ResumeEventSinkService">
            <summary>
            Safely resumes the event sink service
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewComponent.MeasureStyleLengthXInPixels(Nevron.GraphicsCore.NLength,System.Single@)">
            <summary>
            Measures the specified X style length in pixels
            </summary>
            <param name="length">length to measure</param>
            <param name="pixelsLength">result lenght in pixels</param>
            <returns>true if the measurement succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewComponent.MeasureStyleLengthYInPixels(Nevron.GraphicsCore.NLength,System.Single@)">
            <summary>
            Measures the specified Y style length in pixels
            </summary>
            <param name="length">length to measure</param>
            <param name="pixelsLength">result lenght in pixels</param>
            <returns>true if the measurement succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewComponent.SynchronizeMeasurmentUnit">
            <summary>
            Called when the document measurement unit has changed in order to 
            synchronize the local measurement unit of the view component
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NDrawingView">
            <summary>
            The NDrawingView class represents a view, which is used to display and edit a single NDrawingDocument instance
            </summary>
            <remarks>
            The drawing view content layer is populated with trackers, which are the primary means for modifying 
            different aspects of the shapes contained in the drawing document. Each tracker contains a set of handles, 
            which the user can drag. The appearance of the trackers and the different types of handles is controlled by 
            the NTrackersAppearance attribute, accessible from the TrackersAppearance property.
            <para>
            The drawing view exposes three useful components, which can help you to better position and align the 
            document elements edited in the drawing view. These are - grid, horizontal ruler and vertical ruler. 
            Common for them all is that their measurement unit can be different from the measurement unit of the document.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.CreateNonSerializedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.Attributes">
            <summary>
            Gets the list of child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.OnAttributePropertyChanging(System.String,System.String,System.Object)">
            <summary>
            Called by child or descendants attributes when an attribute property is changing
            </summary>
            <param name="attributeFullName">full attribute name</param>
            <param name="attributeProperty">attribute property</param>
            <param name="newValue">new property value</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.OnAttributePropertyChanged(System.String,System.String)">
            <summary>
            Called by child or descendants attributes when an attribute property has changed
            </summary>
            <param name="attributeFullName">full attribute name</param>
            <param name="attributeProperty">attribute property</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.OnAttributeChanged(System.String)">
            <summary>
            Called by child or descendants attributes when an attribute has changed
            </summary>
            <param name="attributeFullName">full attribute name</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.UpdateView">
            <summary>
            Informs the view that it needs to update itself
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.GetViewBridge(Nevron.Diagram.ViewBridgeType)">
            <summary>
            Gets a reference for the specified view bridge
            </summary>
            <param name="bridgeType">view bridge type to get</param>
            <returns>reference to view bridge, or null if the view cannot provide it</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.Style">
            <summary>
            Gets/sets the style of the node
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ComposeStyle">
            <summary>
            Composes a new style, which contains cloning of the composes styles
            </summary>
            <returns>new composed style</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ComposeStrokeStyle">
            <summary>
            Composes the stroke style
            </summary>
            <returns>reference to the composed stroke style</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ComposeShadowStyle">
            <summary>
            Composes the shadow style
            </summary>
            <returns>reference to the composed shadow style</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ComposeFillStyle">
            <summary>
            Composes the fill style
            </summary>
            <returns>reference to the composed fill style</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ComposeTextStyle">
            <summary>
            Composes the text style
            </summary>
            <returns>reference to the composed text style</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ComposeBridgeStyle">
            <summary>
            Composes the bridge style
            </summary>
            <returns>reference to the composed bridge style</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ComposeStartArrowheadStyle">
            <summary>
            Composes the start arrowhead style
            </summary>
            <returns>reference to the composed start arrowhead style</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ComposeEndArrowheadStyle">
            <summary>
            Composes the end arrowhead style
            </summary>
            <returns>reference to the composed end arrowhead style</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ComposeInteractivityStyle">
            <summary>
            Composes the interactivity style
            </summary>
            <returns>reference to the interactivity style</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ComposeAnimationsStyle">
            <summary>
            Composes the animations style
            </summary>
            <returns>reference to the animations style</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.SceneScaleToWorldX">
            <summary>
            Obtains the current X scaling of scene units to world units for the view
            </summary>
            <remarks>
            This implementation will always return the current DocumentWorldScaleToPixelsX value, since the view world is always measured in pixels
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.SceneScaleToWorldY">
            <summary>
            Obtains the current X scaling of scene units to world units for the view
            </summary>
            <remarks>
            This implementation will always return the current DocumentWorldScaleToPixelsY value, since the view world is always measured in pixels
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.WorldMeasurementUnit">
            <summary>
            Gets the current world measurement unit for the view
            </summary>
            <remarks>
            This implementation will always return NGraphicsUnit.Pixel, since the view world is always measured in pixels
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.SceneToWorld">
            <summary>
            Obtains the current scene to world transform
            </summary>
            <remarks>
            This implementation will always return SceneToDevice, since the view world is the document device coordinate system
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.MeasurementUnit">
            <summary>
            Gets/sets the measurement unit of the view
            </summary>
            <remarks>
            The set accessor will throw an InvalidOperationException if the passed measurement unit 
            is different from the document measurement unit.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ConvertMeasurementUnit(Nevron.GraphicsCore.NMeasurementUnitConverter,Nevron.GraphicsCore.NMeasurementUnit,Nevron.GraphicsCore.NMeasurementUnit)">
            <summary>
            Called when the measurement unit of the measurements stored in this node 
            have changed and all measurements must be converted to the new unit
            </summary>
            <param name="converter">measurement unit converter to use</param>
            <param name="from">from measurement unit</param>
            <param name="to">to measurement unit</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.MeasurementContext">
            <summary>
            Obtains a rendering context which can be used for measurements
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.MeasurementUnitConverter">
            <summary>
            Obtains a measurement unit converter
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.UpdateStatusBarInfo(Nevron.Diagram.WinForm.NStatusBarInfo)">
            <summary>
            Updates the specified status bar info
            </summary>
            <remarks>
            If there is a valid document the method will update the MeasurementUnit 
            field with the current document measurement unit. It will then delegate the 
            call to the controller (if the view is in design mode).
            </remarks>
            <param name="info">status bar info</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.GlobalVisibility">
            <summary>
            Controls the global visilbity of elements and effects
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.ViewLayout">
            <summary>
            Gets/sets the view layout
            </summary>
            <remarks>
            By default set to Normal.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.ScaleX">
            <summary>
            Gets/sets the X scale of the world to view transformation
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.ScaleY">
            <summary>
            Gets/sets the Y scale of the world to view transformation
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.FlipY">
            <summary>
            Gets/sets whether the Y coordinates displayed in the view must be flipped
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.FlipX">
            <summary>
            Gets/sets whether the X coordinates displayed in the view must be flipped
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.WindowOrigin">
            <summary>
            Gets the window origin
            </summary>
            <remarks>
            The window origin is the point in device coordinates, to which the viewport origin is mapped. 
            This implementation takes into account the visibility and the padding of the rulers.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.SceneScaleToDeviceX">
            <summary>
            Obtains the current X scaling of scene units to pixels (scene to device X scale) for the document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.SceneScaleToDeviceY">
            <summary>
            Obtains the current Y scaling of scene units to pixels (scene to device Y scale) for the document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.SmartPaintService">
            <summary>
            Obtains a reference to the view smart paint service
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.Document">
            <summary>
            Gets/sets the document displayed by this view
            </summary>
            <remarks>
            The set accessor of this property will fire the DisplayedDocumentChanging - DisplayedDocumentChanged events pair
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.DocumentPadding">
            <summary>
            Controls the document padding (in document measurment units)
            </summary>
            <remarks>
            The document padding defines a constant inflate of the document bounds
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.DocumentWorldToView">
            <summary>
            Obtains a reference to the world to view transformation for the document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.DocumentWorldToDevice">
            <summary>
            Obtains a reference to the world to device transformation for the document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.DocumentSceneToWorld">
            <summary>
            Obtains the current scene to world transformation for the document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.DocumentWorldScaleToPixelsX">
            <summary>
            Obtains the current X scaling of world units to pixels (world to device X scale) for the document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.DocumentWorldScaleToPixelsY">
            <summary>
            Obtains the current Y scaling of world units to pixels (world to device Y scale) for the document
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.DocumentShadow">
            <summary>
            Gets/sets the document shadow
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.PreviewManager">
            <summary>
            Gets/sets the view preview manager
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.TrackersManager">
            <summary>
            Gets/sets the trackers manager
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.SnapManager">
            <summary>
            Gets/sets the snap manager
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.ElementFactory">
            <summary>
            Gets/sets the node factory
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.TrackersAppearance">
            <summary>
            Gets/sets the trackers appearance
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.InteractiveAppearance">
            <summary>
            Gets/sets the interactive appearance
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.Grid">
            <summary>
            Gets/sets the view grid
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.HorizontalRuler">
            <summary>
            Gets/sets the horizontal ruler
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.VerticalRuler">
            <summary>
            Gets/sets the vertical ruler
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.HighlightedPoints">
            <summary>
            Gets/sets the points, which must be highlighted
            </summary>
            <remarks>
            During painting the view displays a red box around these points
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingView.HighlightedPointsSize">
            <summary>
            Gets/sets the size of the box displayed around the highlighted points (in pixels)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.Reset">
            <summary>
            Resets the view to its original settings
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.UpdateViewLayout">
            <summary>
            Updates the view layout (based on the current ViewLayout property)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.UpdateTransformations">
            <summary>
            Updates the view transformations
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.DoPaint(Nevron.Diagram.WinForm.NViewPaintContext)">
            <summary>
            Performs the merged painting of the view and and the document
            </summary>
            <remarks>
            Overriden to perform a fast repaint of the rulers highlights 
            </remarks>
            <param name="viewPaintContext"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.DoMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the mouse move event
            </summary>
            <remarks>
            Overriden to update the mouse projection on the rulers
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.DoMouseLeave(System.EventArgs)">
            <summary>
            Handles the mouse up event
            </summary>
            <remarks>
            Overriden to hide ruler highlights
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.DoDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Handles the drag move event
            </summary>
            <remarks>
            Overriden to update the mouse projection on the rulers
            </remarks>
            <param name="drgevent"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.DoDragLeave(System.EventArgs)">
            <summary>
            Handles the drag leave event
            </summary>
            <remarks>
            Overriden to hide ruler highlights
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.OnNodeSelecting(Nevron.Dom.INNode)">
            <summary>
            Called by the selection when the specified node is about to be selected
            </summary>
            <remarks>
            Overriden to invalidate the trackers of the current selection anchor
            </remarks>
            <param name="node">node which is going to be selected</param>
            <returns>true if the node can be selected, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.OnNodeSelected(Nevron.Dom.INNode)">
            <summary>
            Called by the selection the specified node has been selected
            </summary>
            <remarks>
            Overriden to create trackers for the selected node
            </remarks>
            <param name="node">node which has been selected</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.OnNodeDeselected(Nevron.Dom.INNode)">
            <summary>
            Called by the selection when the specified node has been deselected
            </summary>
            <remarks>
            Overriden to destroy the trackers for the deselected node and invalidate the trackers of the anchor element
            </remarks>
            <param name="node">node which has been deselected</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ProvideViewHitTestContext">
            <summary>
            Provides a valid hit test context, which can be used for view hit tests
            </summary>
            <returns>view hit test context</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.HitTestSelection(Nevron.GraphicsCore.NPointF,Nevron.Filters.INFilter)">
            <summary>
            Hit test by point only the selected elements which satisfy the specified filter
            </summary>
            <param name="point"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.HitTestSelection(Nevron.GraphicsCore.NRectangleF,Nevron.Filters.INFilter)">
            <summary>
            Hit test by rect only the selected elements which satisfy the specified filter
            </summary>
            <param name="rect"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.Cut(Nevron.Dom.NNodeList)">
            <summary>
            Cuts the specified elements from the document and places them on the clipboard
            </summary>
            <param name="elements"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.Copy(Nevron.Dom.NNodeList)">
            <summary>
            Copies the specified elements to the clipboard
            </summary>
            <param name="elements"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.Paste">
            <summary>
            Pastes the current clipboard content in the document
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.DoDragDrop(Nevron.Dom.NNodeList,System.Windows.Forms.DragDropEffects@)">
            <summary>
            Starts a drag and drop operation with the specified elements
            </summary>
            <param name="elements"></param>
            <param name="effects"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.OnDragging(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Called when a dragging operaiton is performed in the specified scene area
            </summary>
            <remarks>
            Overriden to update the drag area and mouse cursor projections on the rulers
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.OnDraggingEnded">
            <summary>
            Called when a dragging operation has ended
            </summary>
            <remarks>
            Overriden to clear the range highlights of the rulers
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.DisposePaintContexts">
            <summary>
            Disposes the cached paint contexts that this view uses.
            You only need to call this method in order to clear 
            the cached GDI+ resources that the view uses.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.Zoom(System.Single)">
            <summary>
            Applies equal X and Y scales of the view and preserves the current viewport center
            </summary>
            <param name="zoom">zoom factor</param>
            <retruns>true if zoomed successfully, otherwise false</retruns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.Zoom(System.Single,Nevron.GraphicsCore.NPointF)">
            <summary>
            Applies equal X and Y scales of the view and makes the specified point the new viewport center.
            </summary>
            <param name="zoom">zoom factor</param>
            <param name="viewportCenter">new viewport center</param>
            <retruns>true if zoomed successfully, otherwise false</retruns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.Zoom(System.Single,Nevron.GraphicsCore.NPointF,System.Boolean)">
            <summary>
            Applies equal X and Y scales of the view.
            If center is true, makes the specified point the new viewport center.
            Otherwise preserves the viewportPin projection in the window
            </summary>
            <param name="zoom">zoom factor</param>
            <param name="viewportPin">new viewport center</param>
            <param name="center">whether to center the viewport around the pin, or scale around it</param>
            <retruns>true if zoomed successfully, otherwise false</retruns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ZoomIn">
            <summary>
            Zooms in the view with the Document.Settings.ZoomStep and preserves the current viewport center
            </summary>
            <retruns>true if zoom in successfully, otherwise false</retruns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ZoomIn(Nevron.GraphicsCore.NPointF)">
            <summary>
            Zooms in the view with the Document.Settings.ZoomStep.
            Makes the specified point the new viewport center.
            </summary>
            <param name="viewportCenter">new viewport center</param>
            <retruns>true if zoomed successfully, otherwise false</retruns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ZoomIn(Nevron.GraphicsCore.NPointF,System.Boolean)">
            <summary>
            Zooms in the view with the Document.Settings.ZoomStep.
            If center is true, makes the specified point the new viewport center.
            Otherwise preserves the viewportPin projection in the window.
            </summary>
            <param name="viewportPin">new viewport center</param>
            <param name="center">whether to center the viewport around the pin, or scale around it</param>
            <retruns>true if zoomed successfully, otherwise false</retruns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ZoomOut">
            <summary>
            Zooms out the view with the Document.Settings.ZoomStep and preserves the current viewport center
            </summary>
            <retruns>true if zoom in successfully, otherwise false</retruns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ZoomOut(Nevron.GraphicsCore.NPointF)">
            <summary>
            Zooms outs the view with the Document.Settings.ZoomStep.
            Makes the specified point the new viewport center.
            </summary>
            <param name="viewportCenter">new viewport center</param>
            <retruns>true if zoomed successfully, otherwise false</retruns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ZoomOut(Nevron.GraphicsCore.NPointF,System.Boolean)">
            <summary>
            Zooms out the view with the Document.Settings.ZoomStep.
            If center is true, makes the specified point the new viewport center.
            Otherwise preserves the viewportPin projection in the window.
            </summary>
            <param name="viewportPin">new viewport center</param>
            <param name="center">whether to center the viewport around the pin, or scale around it</param>
            <retruns>true if zoomed successfully, otherwise false</retruns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.StretchToWidth">
            <summary>
            Proportionally scales the document so that its height is equal to the window height (preserves the document aspect ratio)
            </summary>
            <remarks>
            This method is automatically called when the ViewLayout is set to StretchToWidth
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.StretchToWidth(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Proportionally scales the specified scene bounds so that its height is equal to the window height (preserves the aspect ratio)
            </summary>
            <param name="sceneBounds">bounds in scene coordinates</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.StretchToHeight">
            <summary>
            Proportionally scales the document so that its height is equal to the window height (preserves the document aspect ratio)
            </summary>
            <remarks>
            This method is automatically called when the ViewLayout is set to StretchToHeight
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.StretchToHeight(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Proportionally scales the specified scene bounds so that its height is equal to the window height (preserves the aspect ratio)
            </summary>
            <param name="sceneBounds">bounds in scene coordinates</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.Stretch">
            <summary>
            Stretches the document to fill the entire window (breaks the document aspect ratio)
            </summary>
            <remarks>
            This method is automatically called when the ViewLayout is set to Stretch
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.Stretch(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Stretches the specified scene bounds to fill the entire window (breaks the aspect ratio)
            </summary>
            <param name="sceneBounds">bounds in scene coordinates</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.Fit">
            <summary>
            Fits the document inside the window (preserves the document aspect ratio)
            </summary>
            <remarks>
            This method is automatically called when the ViewLayout is set to Fit
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.Fit(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Fits the specified scene bounds inside the window (preserves the aspect ratio)
            </summary>
            <param name="sceneBounds">bounds in scene coordinates</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.IsValidScaleFactor(System.Single)">
            <summary>
            Determines whether the specified scale factor is valid
            </summary>
            <remarks>
            This method takes into account the document settings MinZoomFactor and MaxZoomFactor properties.
            </remarks>
            <param name="scaleFactor">scale factor</param>
            <returns>true if the scale factor is valid, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ProvideDocumentHitTestContext">
            <summary>
            Provides a valid hit test context, which can be used for document hit tests
            </summary>
            <returns>document hit test context</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.HitTestDocument(Nevron.GraphicsCore.NPointF,Nevron.Filters.INFilter)">
            <summary>
            Hit tests the document scene by point
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="filter">filter to use</param>
            <returns>list of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.HitTestDocument(Nevron.GraphicsCore.NRectangleF,Nevron.Filters.INFilter)">
            <summary>
            Hit tests the document scene by rect
            </summary>
            <param name="rect">rect in device coordinates</param>
            <param name="filter">filter to use</param>
            <returns>list of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.LastDocumentHit(Nevron.GraphicsCore.NPointF,Nevron.Filters.INFilter)">
            <summary>
            Obtains the last hit document node by point
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="filter">filter to use</param>
            <returns>last hit node, or null if no node was hit</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.HitTestActiveDocumentContent(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter)">
            <summary>
            Hit tests the children of the active document content by point
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to drill the active container</param> 
            <param name="filter">filter to use</param>
            <returns>list of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.HitTestActiveDocumentContent(Nevron.GraphicsCore.NRectangleF,System.Int32,Nevron.Filters.INFilter)">
            <summary>
            Hit tests the children of the active document content by rect
            </summary>
            <param name="rect">rect in device coordinates</param>
            <param name="depth">depth in which to drill the active container</param> 
            <param name="filter">filter to use</param>
            <returns>list of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.LastActiveDocumentContentHit(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter)">
            <summary>
            Obtains the last hit document node from the active document content 
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to drill the active container</param> 
            <param name="filter">filter to use</param>
            <returns>last hit node, or null if no node was hit</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.GetLogicalRect(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Takes the FlipX and FlipY settings to produce a logically formated rectangle.
            </summary>
            <param name="rect">actual rect</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.GetLogicalPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Takes the FlipX and FlipY settings to produce a logically formated point.
            </summary>
            <param name="point">actual point</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.StartInplaceEditing(Nevron.Diagram.INInplaceEditable)">
            <summary>
            Starts the inplace editing of the specified diagram element
            </summary>
            <param name="element">element whose implace editing must be started</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.EndInplaceEditing(Nevron.Diagram.INInplaceEditable,System.Boolean)">
            <summary>
            Ends the inplace editing of the specified diagram element
            </summary>
            <param name="element">element whose implace editing must stop</param>
            <param name="commit">whether to commit changes</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ResetDrawingView">
            <summary>
            Called from the Reset method to reset only the fields declared in NDrawingView
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.OnReset">
            <summary>
            Called when the view has been reset
            </summary>
            <remarks>
            This implementation will adopt the document measurement unit if the view is connected to a document. 
            It will also call the UpdateTransformations and UpdateViewLayout methods 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.PaintHighlightedPoints(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints a rectangular border around the currently highlighted points
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ClearDesignState">
            <summary>
            Clears the design time state
            </summary>
            <remarks>
            This method will clear the selection, destroy all trackers and will also remove any highlights.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.OnDocumentActiveLayerChanged(Nevron.Diagram.NDocumentEventArgs)">
            <summary>
            Handles the DocumentActiveLayer changed document event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.AttachToDocument">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.DetachFromDocument">
            <summary>
            Overriden to clear the highlighted nodes collection
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.OnDocumentNodeSubtreeRemoved(Nevron.Dom.NNodeList)">
            <summary>
            Called when a node is removed and receives as argument the nodes in the removed node subtree
            </summary>
            <remarks>
            Overriden to destroy any inplace editing controls of the nodes
            </remarks>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.OnDocumentNodePropertyChanged(Nevron.Dom.NNodePropertyEventArgs)">
            <summary>
            Handles the NodePropertyChanged document event
            </summary>
            <remarks>
            Overriden to deselect nodes which are no longer visible or are inside collapsed aggregates
            </remarks>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.CreateServices">
            <summary>
            Called to create the services and add them in the service manager
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.CreateTools">
            <summary>
            Called to create the tools aplicable for this view and add them in the controller tools collection
            </summary>
            <remarks>
            Overriden to add all tools, which are applicable for drawing views and enable the tools with the following names:
            NDWFR.ToolCreateGuideline, 
            NDWFR.ToolHandle, 
            NDWFR.ToolMove, 
            NDWFR.ToolSelector, 
            NDWFR.ToolContextMenu, 
            NDWFR.ToolKeyboard, 
            NDWFR.ToolInplaceEdit,
            NDWFR.ToolMouseEventDelegator 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ComputeSceneBounds">
            <summary>
            Computes the bounds of the scene
            </summary>
            <remarks>
            Overriden to return the bounds of the drawing document and pad them with the DocumentPadding property value
            </remarks>
            <returns>padded document bounds in scene coordinates</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.MustShowHorzScrollbar(Nevron.GraphicsCore.NSizeF)">
            <summary>
            Determines the need for a horizontal scrollbar based on a proposed viewport size
            </summary>
            <param name="viewportSize">viewport size</param>
            <returns>true if the horizontal scrollbar must be shown, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.MustShowVertScrollbar(Nevron.GraphicsCore.NSizeF)">
            <summary>
            Determines the need for a vertical scrollbar based on a proposed viewport size
            </summary>
            <param name="viewportSize">viewport size</param>
            <returns>true if the vertical scrollbar must be shown, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.OnTransformationsChanged">
            <summary>
            Called when the view transformations have changed
            </summary>
            <remarks>
            Ovrriden to transform all inplace edit controls
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.OnControlParentChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the handle of a view control has been destroyed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.NeedsWindowBackgroundPaint(Nevron.Diagram.WinForm.NViewPaintContext)">
            <summary>
            Determines the need for a window background paint
            </summary>
            <remarks>
            This implementation returns true if the document shadow of the view is not none
            </remarks>
            <param name="paintContext">paint event arguments</param> 
            <returns>true if some window background paint is needed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.NeedsDocumentBackgroundPaint(Nevron.Diagram.WinForm.NViewPaintContext)">
            <summary>
            Determines the need for a document background paint pass
            </summary>
            <remarks>
            Overriden to return true if the view is connected to a document, the graphics clip 
            rect intersects with the window
            </remarks>
            <param name="e">paint event arguments</param> 
            <returns>true if document background paint pass is needed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.NeedsDocumentForegroundPaint(Nevron.Diagram.WinForm.NViewPaintContext)">
            <summary>
            Determines the need for a document content paint pass
            </summary>
            <remarks>
            Overriden to return true if the view is connected to a document, the graphics clip 
            rect intersects with the window
            </remarks>
            <param name="context"></param> 
            <returns>true if document content paint pass is needed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.NeedsViewBackgroundPaint(Nevron.Diagram.WinForm.NViewPaintContext)">
            <summary>
            Determines the need for a view background paint pass
            </summary>
            <remarks>
            Overriden to return true if the graphics clip rect intersects with the window, 
            the grid is visible
            </remarks>
            <param name="context">paint event arguments</param> 
            <returns>true if view background paint pass is needed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.NeedsViewForegroundPaint(Nevron.Diagram.WinForm.NViewPaintContext)">
            <summary>
            Determines the need for a view content paint pass
            </summary>
            <remarks>
            Overriden to return true
            </remarks>
            <param name="context">paint event arguments</param> 
            <returns>true if view content paint pass is needed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.PaintWindowBackground(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the window background area
            </summary>
            <remarks>
            Overriden to fill the window background area with the WindowBackColor and draw the document shadow.
            </remarks>
            <param name="context">paint context</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.PaintDocumentBackground(Nevron.Diagram.NPaintContext)">
            <summary>
            Performs the document Background Paint Pass
            </summary>
            <remarks>
            Overriden to call the PaintBackground method of the drawing document
            </remarks>
            <param name="context">context in which to paint</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.PaintDocumentForeground(Nevron.Diagram.NPaintContext)">
            <summary>
            Performs the document Foreground Paint Pass
            </summary>
            <remarks>
            Overriden to call the Paint method of the drawing document
            </remarks>
            <param name="context">context in which to paint</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.PaintViewBackground(Nevron.Diagram.NPaintContext)">
            <summary>
            Performs the view Background Paint Pass
            </summary>
            <remarks>
            Overriden to call the Paint method of the grid
            </remarks>
            <param name="context">context in which to paint</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.PaintViewForeground(Nevron.Diagram.NPaintContext)">
            <summary>
            Performs the view Foreground Paint Pass
            </summary>
            <remarks>
            Overriden to paint the view nodes and the rulers
            </remarks>
            <param name="context">context in which to paint</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.PaintEmptyInDesignMode(Nevron.Diagram.WinForm.NViewPaintContext)">
            <summary>
            Performs the painting of a view, which is not connected to a document in design mode
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ProvideViewPaintContext(Nevron.Diagram.WinForm.NViewPaintContext,Nevron.Diagram.PaintPass)">
            <summary>
            Provides a view paint context for the specified paint pass
            </summary>
            <param name="device"></param>
            <param name="pass"></param>
            <param name="clipBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingView.ProvideDocumentPaintContext(Nevron.Diagram.WinForm.NViewPaintContext,Nevron.Diagram.PaintPass)">
            <summary>
            Provides a document paint context for the specified paint pass
            </summary>
            <param name="e">paint event arguments</param> 
            <param name="pass">paint pass</param> 
            <returns>paint context</returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NStatusBarInfo">
            <summary>
            An instance of this class is used by the status bar info update mechanizm to provide the status bar with information
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NStatusBarInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NStatusBarInfo.Primary">
            <summary>
            String for the primary status bar pane
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NStatusBarInfo.Secondary">
            <summary>
            String for the secondary status bar pane
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NStatusBarInfo.MousePosition">
            <summary>
            String for the mouse position status bar pane
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NStatusBarInfo.MeasurementUnit">
            <summary>
            String for the measurement unit status bar pane
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NConnectShapeMovePreview">
            <summary>
            The NConnectShapeMovePreview class is a drawing nodes preview, 
            which is created when a single shape is selected and moved.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NConnectShapeMovePreview.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NConnectShapeMovePreview.StartMove(Nevron.Dom.NNodeList)">
            <summary>
            Starts the move preview 
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NConnectShapeMovePreview.Move(System.Single,System.Single)">
            <summary>
            Translates the preview with the specified amounts
            </summary>
            <param name="dx">x translate</param>
            <param name="dy">y translate</param>
            <returns>true if successfully translated, false if translation was not allowed due to constrains</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NConnectShapeMovePreview.EndMove(System.Boolean,System.Boolean)">
            <summary>
            Ends the preview move
            </summary>
            <param name="commit">whether to commit the move effect</param>
            <param name="duplicate">whether to duplicate the initial elements</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NConnectShapeMovePreview.RecreatePreviewShape(Nevron.GraphicsCore.NMatrix2DF)">
            <summary>
            Recreates the preview to reflect a new absolute offset
            </summary>
            <param name="newSceneTransform"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NConnectShapeMovePreview.PreviewSnapShapePlugs(Nevron.Diagram.WinForm.NSnapShapePlugsResult)">
            <summary>
            Updates the preview to reflect a shape1D plugs snap
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NConnectShapeMovePreview.PreviewSnapShapeOutwardPort(Nevron.Diagram.WinForm.NSnapShapeOutwardPortResult)">
            <summary>
            Updates the preview to reflect a shape 2D outward port snap
            </summary>
            <param name="snapRes"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NConnectShapeMovePreview.PreviewSnapBounds(Nevron.Diagram.WinForm.NSnapBoundsResult)">
            <summary>
            Updates the preview to reflect a bounds snap
            </summary>
            <param name="snapRes"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NConnectShapeMovePreview.SnapAndConnectShapePlugs">
            <summary>
            Snaps and connects the current shape plugs
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NConnectShapeMovePreview.SnapAndConnectShapeOutwardPort">
            <summary>
            Snaps and connects the shape outward port
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NConnectShapeMovePreview.SnapBounds">
            <summary>
            Effectively ends a bounds snap result
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NConnectShapeMovePreview.Shape">
            <summary>
            Gets the moved shape
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NConnectShapeMovePreview.Preview">
            <summary>
            Gets the shape preview
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NDrawingMovePreview">
            <summary>
            The NDrawingMovePreview class is a view transformable node, 
            which is used for the preview of nodes movement inside drawing views
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to cashe a reference to the view hosting the preview and update the references of all contained nodes
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.GetEnumerator">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <returns>node enumerator</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingMovePreview.Visible">
            <summary>
            Controls the visibility of the preview
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the tracker in the specified context
            </summary>
            <remarks>
            If the tracker is in tracking mode the handles will be hidden if the ShowHandlesWhenTracking proprty is false.
            </remarks>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the tracker can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the node can be painted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.Invalidate">
            <summary>
            Invalidates the tracker
            </summary>
            <remarks>
            If the tracker is in tracking mode this method will invalidate the preview. Otherwise it will invalidate the handles.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.IndexOfChild(Nevron.Dom.INNode)">
            <summary>
            Gets the index of the specified node in the container
            </summary>
            <param name="node">the node to locate</param>
            <returns>index of the node</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.GetChildAt(System.Int32)">
            <summary>
            Gets the child node at the specified index
            </summary>
            <param name="index">index</param>
            <returns>node at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.SetChildIndex(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Sets a new index of the specified child node
            </summary>
            <param name="node">node whose index to change</param>
            <param name="index">new index</param>
            <returns>previous node index</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.IsChild(Nevron.Dom.INNode)">
            <summary>
            Determines whether the specified node is a child node for this container
            </summary>
            <param name="node">node to check</param>
            <returns>true if it is a child node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.ChildrenCount(Nevron.Filters.INFilter)">
            <summary>
            Returns the number of child nodes which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <returns>children count, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.Children(Nevron.Filters.INFilter)">
            <summary>
            Obtains the child nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.AccumulateChildren(Nevron.Filters.INFilter,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the children contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="list">list to which to append the child nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.IsDescendant(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Queries whether the specified node is a descendant of this node
            </summary>
            <param name="node">node to look for</param>
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>true if the node is a descendant node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.DescendantsCount(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Returns the number of descendant nodes, which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>count of descendants, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.Descendants(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Obtains the descentant nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.AccumulateDescendants(Nevron.Filters.INFilter,System.Int32,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the descendants contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <param name="list">list to which to append the descendant nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.GetEnumerator(Nevron.Filters.INFilter)">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.AddChild(Nevron.Dom.INNode)">
            <summary>
            Adds a child node
            </summary>
            <param name="node">node to add</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.InsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Inserts a child node at the specified index
            </summary>
            <param name="index">index at which to insert the child node</param>
            <param name="node">node to insert</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Queries whether the specified node can be inserted at the specified index
            </summary>
            <param name="index">index at which the child node will be inserted</param>
            <param name="node">child node to insert</param>
            <returns>true if the node can be inserted at the specified index, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.RemoveChild(Nevron.Dom.INNode)">
            <summary>
            Removes the specified child node from the container children
            </summary>
            <param name="node">child node to remove</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.RemoveChildAt(System.Int32)">
            <summary>
            Removes the child node at the specified index
            </summary>
            <param name="index">index of child node to remove</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.RemoveAllChildren">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.CanRemoveChild(Nevron.Dom.INNode)">
            <summary>
            Queries whether the specified child node can be removed
            </summary>
            <param name="node">child node to remove</param>
            <returns>true if the node can be removed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.StartMove(Nevron.Dom.NNodeList)">
            <summary>
            Starts the move preview 
            </summary>
            <param name="elements">elements with which to initilize the preview</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.Move(System.Single,System.Single)">
            <summary>
            Moves the preview with the specified amounts
            </summary>
            <param name="dx">x translate</param>
            <param name="dy">y translate</param>
            <returns>true if successfully translated, false if translation was not allowed due to constrains</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingMovePreview.EndMove(System.Boolean,System.Boolean)">
            <summary>
            Ends the preview move
            </summary>
            <param name="commit">whether to commit the move effect</param>
            <param name="duplicate">whether to duplicate the initial elements</param>
            <returns></returns> 
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingMovePreview.View">
            <summary>
            Obtains a reference to the view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingMovePreview.CurrentBounds">
            <summary>
            Gets/sets the current bounds of the preview (updated during move)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingMovePreview.StartBounds">
            <summary>
            Gets/sets the start bounds of the preview (determined during initialization)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingMovePreview.Elements">
            <summary>
            Elements being previewed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingMovePreview.IsBoundsConstrained">
            <summary>
            Gets/sets whether the preview is bounds constrained
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingMovePreview.ConstrainBounds">
            <summary>
            Gets/sets the preview constrain bounds in case it is bounds constrained
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingMovePreview.AllowMoveX">
            <summary>
            Gets/sets whether X movement is allowed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingMovePreview.AllowMoveY">
            <summary>
            Gets/sets whether Y movement is allowed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingMovePreview.DiscardMovePermissions">
            <summary>
            Indicates whether the move permissions should be discarded 
            when finally positioning the elements
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingMovePreview.Connections">
            <summary>
            Gets/sets the optional connections, which are injected when duplicating elements
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NDrawingPreviewManager">
            <summary>
            The NDrawingPreviewManager class is used to manage the node previews created in each drawing view
            </summary>
            <remarks>
            A reference to this class can be obtained from the PreviewManager property of the NDrawingView class. 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingPreviewManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingPreviewManager.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to cashe a reference to a NDrawingView instance
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingPreviewManager.ChangeNodePreviewStyle(Nevron.Dom.INNode,Nevron.Dom.INNode)">
            <summary>
            Called when the style of the specified preview node must be changed
            </summary>
            <remarks>
            If the PreviewWithOriginalStyle property is set to true the preview node (and its descendants) 
            will adopt the node (and the node descendants) composed style. 
            Otherwise the fill style, stroke style and shadow style of the preview node (and its descendants) 
            will be set to null, thus forcing the preview node (and its descendants) 
            to use inherited style (from the view scene tree).
            </remarks>
            <param name="node">node for which the preview was created</param>
            <param name="preview">preview node</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingPreviewManager.StartMovePreview(Nevron.Dom.NNodeList)">
            <summary>
            Starts the preview move
            </summary>
            <param name="elements">elements whose movement is to be previewed</param>
            <returns>drawing nodes preview</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingPreviewManager.MovePreview(System.Single,System.Single)">
            <summary>
            Moves the preview
            </summary>
            <param name="dx">X translation</param>
            <param name="dy">Y translation</param>
            <returns>true if the preview was successfully moved, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingPreviewManager.EndMovePreview(System.Boolean,System.Boolean)">
            <summary>
            Ends the move of the preview
            </summary>
            <param name="commit">whether to commit the move effect</param>
            <param name="duplicate">whether to duplicate the initial elements</param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingPreviewManager.Preview">
            <summary>
            Obtains a reference to the currently previewed nodes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingPreviewManager.View">
            <summary>
            Gets the view associated with the manager
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingPreviewManager.PreviewWithOriginalStyle">
            <summary>
            Specifies whether node previews should be displayed with the original node style
            </summary>
            <remarks>
            When set to true the preview will use the composed style of the node in its document context. 
            Otherwise the fill style, stroke style and shadow style of the preview will be set to null (thus forcing the node to use the default view style).
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingPreviewManager.ReconnectOnMove">
            <summary>
            Specifies whether shape reconnection must be attempted when single shapes are moved. 
            When set to false the preview manager will always perform try to perform shape translation.
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NDrawingPreviewManager.MaxPreviewNodesCount">
            <summary>
            Specifies the maximum number of nodes which can be previewed by entity previews
            </summary>
            <remarks>
            By default set to 20
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingPreviewManager.CreateDrawingNodesPreview(Nevron.Dom.NNodeList)">
            <summary>
            Called by the StartMovePreview method to create an instance of the NDrawingMovePreview, 
            which must be used for the preview of the specified elements
            </summary>
            <remarks>
            This can be overriden in order to return a subclassed NDrawingMovePreview instance
            </remarks>
            <param name="elements"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingPreviewManager.ScaleStrokeStyle(Nevron.GraphicsCore.NStrokeStyle)">
            <summary>
            Scales the width of a stroke style
            </summary>
            <param name="strokeStyle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NDrawingPreviewManager.ScaleTextStyle(Nevron.GraphicsCore.NTextStyle)">
            <summary>
            Scales the fond size of a text style
            </summary>
            <param name="textStyle"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NTranslateNodesMovePreview">
            <summary>
            The NTranslateNodesMovePreview class is a drawing nodes preview, 
            which is created when multiple selected nodes are moved, 
            or when a connect shape preview cannot be created.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTranslateNodesMovePreview.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTranslateNodesMovePreview.StartMove(Nevron.Dom.NNodeList)">
            <summary>
            Starts the move preview 
            </summary>
            <param name="elements">elements with which to initilize the preview</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTranslateNodesMovePreview.Move(System.Single,System.Single)">
            <summary>
            Translates the preview with the specified amounts
            </summary>
            <param name="dx">x translate</param>
            <param name="dy">y translate</param>
            <returns>true if successfully translated, false if translation was not allowed due to constrains</returns> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NTranslateNodesMovePreview.EndMove(System.Boolean,System.Boolean)">
            <summary>
            Ends the preview move
            </summary>
            <param name="commit">whether to commit the move effect</param>
            <param name="duplicate">whether to duplicate the initial elements</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NSnapBoundsResult">
            <summary>
            The NSnapBoundsResult is the result of bounds snapping, which can be decouples 
            (e.g. the left, right, middle snap target can be different from the top, right, bottom 
            snap target)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapBoundsResult.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapBoundsResult.#ctor(Nevron.GraphicsCore.NRectangleF,Nevron.HorzAlign,Nevron.Diagram.WinForm.NSnapTarget,Nevron.VertAlign,Nevron.Diagram.WinForm.NSnapTarget)">
            <summary>
            Initializer constructor
            </summary>
            <param name="snappedBounds"></param>
            <param name="horzAlign"></param>
            <param name="xSnappedTo"></param>
            <param name="vertAlign"></param>
            <param name="ySnappedTo"></param>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NSnapBoundsResult.SnappedBounds">
            <summary>
            The snapped bounds
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NSnapBoundsResult.HorzAlign">
            <summary>
            The horizontal bounds alignment relative the XSnappedTo target (valid if XSnappedTo is not null)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NSnapBoundsResult.XSnappedTo">
            <summary>
            The snap target to which the X coordinate was snapped
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NSnapBoundsResult.VertAlign">
            <summary>
            The horizontal bounds alignment relative the YSnappedTo target (valid if YSnappedTo is not null)
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NSnapBoundsResult.YSnappedTo">
            <summary>
            The snap target to which the Y coordinate was snapped
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NSnapManager">
            <summary>
            An instance of the NSnapManager class is used to provide each drawing view with the abilitiy to snap bounds, points and angles
            </summary>
            <remarks>
            An instance of this class can be obtained from the SnapManager property of the NDrawingView class
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapManager.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSnapManager.SnapTo">
            <summary>
            Gets/sets the targets to which object bounds and points should be snapped.
            For point snapping the targets to which the point should snap are computed by intersecting the SnapTo targets with the individual SnapTo setting for the specific point type.
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSnapManager.SnapStrength">
            <summary>
            Gets/sets the snapping strengh of the objects to which it is possible to snap
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSnapManager.SnapRotation">
            <summary>
            Specifies whether rotation angles must be snapped
            </summary>
            <remarks>
            By default set to true
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSnapManager.RotationDeviation">
            <summary>
            Controls the deviation, under which the snapping of the rotation angles occurs. Measured in degrees.
            </summary>
            <remarks>
            By default set to 5
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSnapManager.RotationStep">
            <summary>
            Controls the step to which rotation angles are snapped. Measured in degress.
            </summary>
            <remarks>
            360 must be divisible to the specified value. By default set to 45.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSnapManager.SnapPinPointsTo">
            <summary>
            Gets/sets the targets to which pin points should snap when interactively modified
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSnapManager.SnapRotatorsTo">
            <summary>
            Gets/sets the targets to which rotators should snap when interactively modified
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSnapManager.SnapGeometryBasePointsTo">
            <summary>
            Gets/sets the targets to which geometry base points should snap when interactively modified
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSnapManager.SnapGeometryControlPointsTo">
            <summary>
            Gets/sets the targets to which geometry control points should snap when interactively modified
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSnapManager.SnapGeometryMidPointsTo">
            <summary>
            Gets/sets the targets to which control points should snap when interactively modified
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSnapManager.SnapShapePlugsTo">
            <summary>
            Gets/sets the targets to which shape plugs should snap when interactively modified
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSnapManager.SnapShapePortsTo">
            <summary>
            Gets/sets the targets to which shape ports should snap when interactively modified
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NSnapManager.SnapShapeControlPointsTo">
            <summary>
            Gets/sets the targets to which shape control points should snap when interactively modified
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapManager.SnapShape(Nevron.Diagram.NShape,Nevron.Diagram.NShape)">
            <summary>
            Snaps a shape
            </summary>
            <param name="preview"></param>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapManager.SnapBounds(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Snaps the specified bounds in accordance with the SnapTo settings
            </summary>
            <param name="bounds">bounds to snap</param>
            <returns>snap bounds result</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapManager.SnapBoundsPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Snaps a rotated bounds or scene bounds point
            </summary>
            <remarks>
            This method can only snap the point to Guidelines, Grid and Rulers. 
            The targets are controlled by the SnapTo setting.
            </remarks>
            <param name="point">point to snap</param>
            <returns>snap point result</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapManager.SnapPinPoint(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NShape)">
            <summary>
            Snaps a pin point 
            </summary>
            <remarks>
            This method can snap the point to Ports, Geometry Points, Guidelines, Grid and Rulers. 
            The targets are controlled by the intersected SnapTo and SnapPinPointsTo settings.
            </remarks>
            <param name="point">point to snap</param>
            <param name="shape">shape whose ports and geometry points are excluded from the snap</param> 
            <returns>snap point result</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapManager.SnapRotatorPoint(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NShape)">
            <summary>
            Snaps a rotator point 
            </summary>
            <remarks>
            This method can snap the point to Ports, Geometry Points, Guidelines, Grid and Rulers. 
            The targets are controlled by the intersected SnapTo and SnapRotatorsTo settings.
            </remarks>
            <param name="point">point to snap</param>
            <param name="shape">shape whose ports and geometry points are excluded from the snap</param> 
            <returns>snap point result</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapManager.SnapGeometryBasePoint(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NShape)">
            <summary>
            Snaps a geometry base point
            </summary>
            <remarks>
            This method can snap the point to Ports, Geometry Points, Guidelines, Grid and Rulers. 
            The targets are controlled by the intersected SnapTo and SnapGeometryBasePointsTo settings.
            </remarks>
            <param name="point">point to snap</param>
            <param name="shape">shape whose ports and geometry points are excluded from the snap</param> 
            <returns>snap point result</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapManager.SnapGeometryControlPoint(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NShape)">
            <summary>
            Snaps a geometry control point 
            </summary>
            <remarks>
            This method can snap the point to Ports, Geometry Points, Guidelines, Grid and Rulers. 
            The targets are controlled by the intersected SnapTo and SnapGeometryControlPointsTo settings.
            </remarks>
            <param name="point">point to snap</param>
            <param name="shape">shape whose ports and geometry points are excluded from the snap</param> 
            <returns>snap point result</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapManager.SnapGeometryMidPoint(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NShape)">
            <summary>
            Snaps a geometry mid point 
            </summary>
            <remarks>
            This method can snap the point to Ports, Geometry Points, Guidelines, Grid and Rulers. 
            The targets are controlled by the intersected SnapTo and SnapGeometryMidPointsTo settings.
            </remarks>
            <param name="point">point to snap</param>
            <param name="shape">shape whose ports and geometry points are excluded from the snap</param> 
            <returns>snap point result</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapManager.SnapShapeStartPlug(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NShape)">
            <summary>
            Snaps a shape start plug 
            </summary>
            <remarks>
            This method can snap the point to Ports, Geometry Points, Guidelines, Grid and Rulers. 
            The targets are controlled by the intersected SnapTo and SnapShapePlugsTo settings.
            </remarks>
            <param name="point">point to snap</param>
            <param name="shape">shape whose ports and geometry points are excluded from the snap</param> 
            <returns>snap point result</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapManager.SnapShapeEndPlug(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NShape)">
            <summary>
            Snaps a shape end plug 
            </summary>
            <remarks>
            This method can snap the point to Ports, Geometry Points, Guidelines, Grid and Rulers. 
            The targets are controlled by the intersected SnapTo and SnapShapePlugsTo settings.
            </remarks>
            <param name="point">point to snap</param>
            <param name="shape">shape whose ports and geometry points are excluded from the snap</param> 
            <returns>snap point result</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapManager.SnapShapePort(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NShape)">
            <summary>
            Snaps a shape port 
            </summary>
            <remarks>
            This method can snap the point to Ports, Geometry Points, Guidelines, Grid and Rulers. 
            The targets are controlled by the intersected SnapTo and SnapShapePortsTo settings.
            </remarks>
            <param name="point">point to snap</param>
            <param name="shape">shape whose ports and geometry points are excluded from the snap</param> 
            <returns>snap point result</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapManager.SnapShapeControlPoint(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NShape)">
            <summary>
            Snaps a shape control point 
            </summary>
            <remarks>
            This method can snap the point to Ports, Geometry Points, Guidelines, Grid and Rulers. 
            The targets are controlled by the intersected SnapTo and SnapShapeControlPointsTo settings.
            </remarks>
            <param name="point">point to snap</param>
            <param name="shape">shape whose ports and geometry points are excluded from the snap</param> 
            <returns>snap point result</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapManager.SnapRotationAngle(System.Single,System.Single@)">
            <summary>
            Snaps the specified rotation angle
            </summary>
            <param name="rotation">rotation to snap (in degrees)</param>
            <param name="snappedRotation">snapped rotation (in degrees)</param>
            <returns>true if snapping was successfull, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapManager.SnapPoint(Nevron.Diagram.WinForm.SnappedPointType,Nevron.GraphicsCore.NPointF,Nevron.Diagram.NShape,System.Boolean,System.Boolean,Nevron.Diagram.SnapTargetsMask)">
            <summary>
            Snaps the point to ports, geometry points, guidelines, grid and rulers
            </summary>
            <param name="point">point to snap</param>
            <param name="shape">shape whose ports and geometry points to exclude</param> 
            <param name="skipInward">whether inward ports should be ignored</param> 
            <param name="skipOutward">whether outward ports should be ignored</param> 
            <param name="snapTo">objects to which to snap</param> 
            <returns>snap point result</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapManager.SnapPoint(Nevron.GraphicsCore.NPointF,Nevron.Diagram.SnapTargetsMask)">
            <summary>
            Snaps the point to guidelines, grid and rulers
            </summary>
            <param name="point">point to snap</param>
            <param name="snapTo">objects to which to snap</param> 
            <returns>snap point result</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapManager.SnapXCoordinate(System.Single,Nevron.Diagram.SnapTargetsMask,System.Single@)">
            <summary>
            Tries to snap the specified X coordinate. X coordinates can only be snapped to guidelines, rulers and grid
            </summary>
            <param name="x">x coordinate to snap</param>
            <param name="snapTo">objects to which to snap</param> 
            <param name="snappedX">snapped X coordinate</param>
            <returns>the target to which the coordinate was snapped, or null if the coordinate was not snapped</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapManager.SnapYCoordinate(System.Single,Nevron.Diagram.SnapTargetsMask,System.Single@)">
            <summary>
            Tries to snap the specified Y coordinate. Y coordinates can only be snapped to guidelines, rulers and grid
            </summary>
            <param name="y">y coordinate to snap</param>
            <param name="snapTo">objects to which to snap</param> 
            <param name="snappedY">snapped Y coordinate</param>
            <returns>the target to which the coordinate was snapped, or null if the coordinate was not snapped</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapManager.ProvideSnapContext">
            <summary>
            Provides an up to date snapping context for X and Y coordinate snappers
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NSnapPointResult">
            <summary>
            The NSnapPointResult class represents the result of point snapping 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapPointResult.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapPointResult.#ctor(Nevron.GraphicsCore.NPointF)">
            <summary>
            Initializer constructor
            </summary>
            <param name="snappedPoint"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapPointResult.GetValidInwardPort(Nevron.Diagram.NConnectionPoint)">
            <summary>
            Gets a valid inward port, to which the specified connection point can be connected
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NSnapPointResult.SnappedPoint">
            <summary>
            The snapped coordinate
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NSnapPointResult.XSnappedTo">
            <summary>
            The snap target to which the X coordinate was snapped
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NSnapPointResult.YSnappedTo">
            <summary>
            The snap target to which the Y coordinate was snapped
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NSnapResult">
            <summary>
            Snap result is the base class for all snap results
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapResult.#ctor(Nevron.Diagram.WinForm.SnapResultType)">
            <summary>
            Initializer constructor
            </summary>
            <param name="type"></param>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NSnapResult.Type">
            <summary>
            Gets the snap result type
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NSnapShapeOutwardPortResult">
            <summary>
            The NSnapShapeOutwardPortResult is a snap result, which is returned 
            when a shape outward port was successfully snapped to another shape inward port
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapShapeOutwardPortResult.#ctor(System.Int32,Nevron.Diagram.WinForm.NSnapPointResult)">
            <summary>
            Initializer constructor
            </summary>
            <param name="outwardPortIndex"></param>
            <param name="outwardPortSnapRes"></param>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NSnapShapeOutwardPortResult.OutwardPortIndex">
            <summary>
            Outward port index
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NSnapShapeOutwardPortResult.OutwardPortSnapRes">
            <summary>
            Outward port snap result
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NSnapShapePlugsResult">
            <summary>
            The NSnapShapePlugsResult is a snap result, which is returned 
            when a 1D shape plugs have been successfully snapped to other shapes inward ports
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapShapePlugsResult.#ctor(Nevron.Diagram.WinForm.NSnapPointResult,Nevron.Diagram.WinForm.NSnapPointResult)">
            <summary>
            Initializer constructor
            </summary>
            <param name="startSnapRes"></param>
            <param name="endSnapRes"></param>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NSnapShapePlugsResult.StartSnapRes">
            <summary>
            The result of the start plug snapping
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NSnapShapePlugsResult.EndSnapRes">
            <summary>
            The result of the end plug snapping
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NSnapTarget">
            <summary>
            The NSnapTarget class represents a single snapping target
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapTarget.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NSnapTarget.#ctor(Nevron.Diagram.SnapTargetsMask,System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="type">target type associated with the object</param>
            <param name="obj">object instance representing the target</param>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NSnapTarget.Type">
            <summary>
            Target type associated with the object
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NSnapTarget.Object">
            <summary>
            Object instance representing the target
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NLibraryPreviewManager">
            <summary>
            The NLibraryPreviewManager class is used to manage the node previews created in each drawing view
            </summary>
            <remarks>
            A reference to this class can be obtained from the PreviewManager property of the NLibraryView class. 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryPreviewManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryPreviewManager.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to cashe a reference to a NLibraryView instance
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryPreviewManager.GenerateNodePreview(Nevron.Dom.INNode)">
            <summary>
            Creates a preview of the specified node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryPreviewManager.StartMovePreview(Nevron.Dom.NNodeList)">
            <summary>
            Creates a preview of the specified elements
            </summary>
            <param name="elements"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryPreviewManager.MovePreview(System.Single,System.Single)">
            <summary>
            Translates the current preview
            </summary>
            <param name="transX">X translation</param>
            <param name="transY">Y translation</param>
            <returns>true if the preview was successfully moved, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryPreviewManager.EndMovePreview(System.Single@,System.Single@)">
            <summary>
            Destroys the current preview
            </summary>
            <param name="lastPreviewTransX">last known X translation</param>
            <param name="lastPreviewTransY">last known Y translation</param>
            <returns>true if the current preview existed and was sucessfully destroyed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryPreviewManager.EndMovePreview">
            <summary>
            Destroys the current preview
            </summary>
            <returns>true if the current preview existed and was sucessfully destroyed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryPreviewManager.Preview">
            <summary>
            Obtains a reference to the currently previewed nodes
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryPreviewManager.View">
            <summary>
            Gets the view associated with the manager
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryPreviewManager.CreateLibraryNodesPreview(Nevron.Dom.NNodeList)">
            <summary>
            Called by the StartMovePreview method to create an instance of the NLibraryMovePreview, 
            which must be used for the preview of the specified elements
            </summary>
            <remarks>
            This can be overriden in order to return a subclassed NLibraryMovePreview instance
            </remarks>
            <param name="elements"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NLibraryViewItemAppearance">
            <summary>
            An instance of this class is associated with each NLibraryView and is used to control the appearance of the library items
            </summary>
            <remarks>
            An instance of this class can be obtained from the ItemAppearance property.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewItemAppearance.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewItemAppearance.#ctor(Nevron.Diagram.WinForm.NLibraryViewItemAppearance)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItemAppearance.IconsNameSmallFontStyle">
            <summary>
            Gets/sets the font of the library item name, when displayed in IconsAndNames style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItemAppearance.IconsNameLargeFontStyle">
            <summary>
            Gets/sets the font of the library item name, when displayed in IconsAndDetails style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItemAppearance.PromptFontStyle">
            <summary>
            Gets/sets the font of the library item prompt, when displayed in IconsAndDetails style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItemAppearance.ListNameFontStyle">
            <summary>
            Gets/sets the font of the library item name, when displayed in List style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItemAppearance.ThumbnailsNameFontStyle">
            <summary>
            Gets/sets the font of the library item name, when displayed in Thumbnails style
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NLibraryViewItemLayout">
            <summary>
            An instance of this class is associated with each NLibraryView and is used to control the layout of the library view items
            </summary>
            <remarks>
            An instance of this class can be obtained from the ItemLayout property. 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewItemLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewItemLayout.#ctor(Nevron.Diagram.WinForm.NLibraryViewItemLayout)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItemLayout.ListSpacing">
            <summary>
            Gets/sets the spacing between the items in List view style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItemLayout.IconSpacing">
            <summary>
            Gets/sets the spacing between the items in all Icon view styles
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItemLayout.ThumbnailSpacing">
            <summary>
            Gets/sets the spacing between the items in Thumbnail view style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItemLayout.ListImageSize">
            <summary>
            Gets/sets the list image size (used in List view style)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItemLayout.IconImageSize">
            <summary>
            Gets/sets the icon image size (used in all Icon view styles)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItemLayout.ThumbnailImageSize">
            <summary>
            Gets/sets the thumbnail image size (used in Thumnails style)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItemLayout.IconsOnlySize">
            <summary>
            Gets/sets the size of the items in IconsOnly style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItemLayout.IconsAndNamesSize">
            <summary>
            Gets/sets the size of the items in IconsAndNames style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItemLayout.IconsAndDetailsSize">
            <summary>
            Gets/sets the size of the items in IconsAndDetails style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItemLayout.ListSize">
            <summary>
            Gets/sets the size of the items in List style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItemLayout.ThumbnailsSize">
            <summary>
            Gets/sets the size of the items in Thumbnails style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItemLayout.IconImagePadding">
            <summary>
            Gets/sets the padding of the image in all Icon view styles
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItemLayout.ListImagePadding">
            <summary>
            Gets/sets the padding of the image in List view style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItemLayout.ThumbnailImagePadding">
            <summary>
            Gets/sets the padding of the image in Thumbnails view style
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewItemLayout.GetItemSizeForViewStyle(Nevron.Diagram.WinForm.LibraryViewStyle)">
            <summary>
            Obtains the size of the library item instances for the specified view style
            </summary>
            <param name="viewStyle">view style</param>
            <returns>library item instance size</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewItemLayout.GetItemSpacingForViewStyle(Nevron.Diagram.WinForm.LibraryViewStyle)">
            <summary>
            Obtains the spacing between the library item instances for the specified view style
            </summary>
            <param name="viewStyle">view style</param>
            <returns>library item instance spacing</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewItemLayout.GetImageSizeForViewStyle(Nevron.Diagram.WinForm.LibraryViewStyle)">
            <summary>
            Obtains the image size for the specified view style
            </summary>
            <param name="viewStyle">view style</param>
            <returns>library item image size</returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NLibraryView">
            <summary>
            The NLibraryView class represents a view, which is used to display and edit a single NLibraryDocument instance
            </summary>
            <remarks>
            The library view content layer is populated with items, each one of which represents a master from the library document. 
            In this way the library view provides a visual representation of a library document in the context of WinForms.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryView.Attributes">
            <summary>
            Gets the list of child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.OnAttributePropertyChanged(System.String,System.String)">
            <summary>
            Called by child or descendants attributes when an attribute property has changed
            </summary>
            <param name="attributeFullName">full attribute name</param>
            <param name="attributeProperty">attribute property</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.OnAttributeChanged(System.String)">
            <summary>
            Called by child or descendants attributes when an attribute has changed
            </summary>
            <param name="attributeFullName">full attribute name</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.UpdateView">
            <summary>
            Informs the view that it needs to update itself
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.GetViewBridge(Nevron.Diagram.ViewBridgeType)">
            <summary>
            Gets a reference for the specified view bridge
            </summary>
            <param name="bridgeType">view bridge type to get</param>
            <returns>reference to view bridge, or null if the view cannot provide it</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryView.Document">
            <summary>
            Gets/sets the document displayed by this view
            </summary>
            <remarks>
            The set accessor of this property will fire the DisplayedDocumentChanging - DisplayedDocumentChanged events pair
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryView.ViewStyle">
            <summary>
            Gets/sets the library view style
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryView.ItemAppearance">
            <summary>
            Gets/sets the library items appearance
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryView.ItemLayout">
            <summary>
            Gets/sets the library items layout
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryView.PreviewManager">
            <summary>
            Gets/sets the library preview manager
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryView.ItemsPadding">
            <summary>
            Gets/sets the library items padding applied to the bounds of all items
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryView.FocusedItem">
            <summary>
            Gets/sets the focused library item
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryView.SmartPaintService">
            <summary>
            Obtains a reference to the library view smart paint service
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.GetItemForMaster(Nevron.Diagram.NMaster)">
            <summary>
            Obtains the item, which represents the specified master
            </summary>
            <param name="master">master for which to obtain item</param>
            <returns>library view item</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.GetNextItem(Nevron.Diagram.WinForm.NLibraryViewItem)">
            <summary>
            Gets the next item
            </summary>
            <param name="item"></param>
            <returns>library view item</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.GetPreviousItem(Nevron.Diagram.WinForm.NLibraryViewItem)">
            <summary>
            Gets the previous item
            </summary>
            <param name="item"></param>
            <returns>library view item</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.GetNextItemInCol(Nevron.Diagram.WinForm.NLibraryViewItem)">
            <summary>
            Gets the next item in the same column
            </summary>
            <param name="item"></param>
            <returns>library view item</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.GetPreviousItemInCol(Nevron.Diagram.WinForm.NLibraryViewItem)">
            <summary>
            Gets the previous item in the same column
            </summary>
            <param name="item"></param>
            <returns>library view item</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.GetInsertionIndexFromPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Gets the insertion index at which dropped items should be inserted
            </summary>
            <param name="point">point in device coordinate</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.EnsureVisible(Nevron.Diagram.WinForm.NLibraryViewItem)">
            <summary>
            Ensures that the specified item is visible within the library view
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.HitTestMasters(Nevron.GraphicsCore.NPointF,Nevron.Filters.INFilter)">
            <summary>
            Hit test the library view items by point and returns a list of the masters they represent
            </summary>
            <param name="point"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.HitTestMasters(Nevron.GraphicsCore.NRectangleF,Nevron.Filters.INFilter)">
            <summary>
            Hit test the library view items by rect and returns a list of the masters they represent
            </summary>
            <param name="rect"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.LastHitMaster(Nevron.GraphicsCore.NPointF,Nevron.Filters.INFilter)">
            <summary>
            Obtains the last hit master by point
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="filter">filter to use</param>
            <returns>last hit master, or null if no master was hit</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.Reset">
            <summary>
            Resets the view to its original settings
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryView.SceneScaleToDeviceX">
            <summary>
            Obtains the X scaling of scene coordinates to device coordinates (pixels)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryView.SceneScaleToDeviceY">
            <summary>
            Obtains the Y scaling of scene coordinates to device coordinates (pixels)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.UpdateViewLayout">
            <summary>
            Updates the layout of the view
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.UpdateTransformations">
            <summary>
            Updates the view transformations
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.OnNodeSelected(Nevron.Dom.INNode)">
            <summary>
            Called by the selection the specified element has been selected
            </summary>
            <remarks>
            Overriden to invalidate the item of the selected item and make it the focused item
            </remarks>
            <param name="node">node which has been selected</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.OnNodeDeselected(Nevron.Dom.INNode)">
            <summary>
            Called by the selection when the specified node has been deselected
            </summary>
            <remarks>
            Overriden to invalidate the item of the deselected item
            </remarks>
            <param name="node">node which has been deselected</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.ProvideViewHitTestContext">
            <summary>
            Provides a valid hit test context, which can be used for view hit tests
            </summary>
            <returns>view hit test context</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.HitTestSelection(Nevron.GraphicsCore.NPointF,Nevron.Filters.INFilter)">
            <summary>
            Hit test by point only the selected nodes which satisfy the specified filter
            </summary>
            <param name="point"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.HitTestSelection(Nevron.GraphicsCore.NRectangleF,Nevron.Filters.INFilter)">
            <summary>
            Hit test by rect only the selected nodes which satisfy the specified filter
            </summary>
            <param name="rect"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.Cut(Nevron.Dom.NNodeList)">
            <summary>
            Cuts the specified nodes from the document and places them on the clipboard
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.Copy(Nevron.Dom.NNodeList)">
            <summary>
            Copies the specified nodes to the clipboard
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.Paste">
            <summary>
            Pastes the current clipboard content in the document
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.DoDragDrop(Nevron.Dom.NNodeList,System.Windows.Forms.DragDropEffects@)">
            <summary>
            Starts a drag and drop operation with the specified nodes
            </summary>
            <param name="nodes"></param>
            <param name="effects"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.ResetLibraryView">
            <summary>
            Called from the Reset method to reset only the fields declared in NDrawingView
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.OnReset">
            <summary>
            Called when the view has been reset
            </summary>
            <remarks>
            This implementation will adopt the document measurement unit if the view is connected to a document. 
            It will also call the UpdateTransformations and UpdateViewLayout methods 
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.RebuildItems">
            <summary>
            Rebuilds the library item items from the library items of the library document
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.ReshapeItems">
            <summary>
            Reshapes the library view items in accordance with the current view style and item layout
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.OnDocumentNodeIndexChanged(Nevron.Dom.NChildNodeEventArgs)">
            <summary>
            Handles the document node index changed event
            </summary>
            <remarks>
            Overriden to rebuild and reshape the items
            </remarks>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.AttachToDocument">
            <summary>
            Attaches the view to the current document
            </summary>
            <remarks>
            Overriden to subscibe the view for the NodeIndexChanged event
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.DetachFromDocument">
            <summary>
            Detaches the view from the current document
            </summary>
            <remarks>
            Overriden to unsubscibe the view from the NodeIndexChanged event
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.OnGotFocus(System.EventArgs)">
            <summary>
            Overriden to invalidate the view when it received the focus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.OnLostFocus(System.EventArgs)">
            <summary>
            Overriden to invalidate the view when it lost the focus
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.CreateServices">
            <summary>
            Called to create the services and add them in the service manager
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.CreateTools">
            <summary>
            Called to create the tools aplicable for this view and add them in the controller tools collection
            </summary>
            <remarks>
            Overriden to add all tools, which are applicable for library views and enable the tools with the following names:
            NDWFR.ToolLibraryMove
            NDWFR.ToolLibrarySelector 
            NDWFR.ToolLibraryKeyboard 
            NDWFR.ToolLibraryContextMenu
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.OnDocumentNodeInserted(Nevron.Dom.NChildNodeEventArgs)">
            <summary>
            Handles the NodeInsered document event
            </summary>
            <remarks>
            Overriden to perform a total view update if a master has been inserted
            </remarks>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.OnDocumentNodeRemoved(Nevron.Dom.NChildNodeEventArgs)">
            <summary>
            Handles the NodeRemoved document event
            </summary>
            <remarks>
            Overriden to perform a total view update if a master has been removed
            </remarks>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.ComputeSceneBounds">
            <summary>
            Computes the bounds of the scene
            </summary>
            <remarks>
            Overriden to return the bounds of the library view items and pad them with the ItemsPadding property value
            </remarks>
            <returns>scene bounds</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.NeedsViewBackgroundPaint(Nevron.Diagram.WinForm.NViewPaintContext)">
            <summary>
            Determines the need for a view background paint pass
            </summary>
            <remarks>
            Overriden to return true
            </remarks>
            <param name="context">paint context</param> 
            <returns>true if view content paint pass is needed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.NeedsViewForegroundPaint(Nevron.Diagram.WinForm.NViewPaintContext)">
            <summary>
            Determines the need for a view foreground paint pass
            </summary>
            <remarks>
            Overriden to return true
            </remarks>
            <param name="context">paint event arguments</param> 
            <returns>true if view content paint pass is needed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.PaintViewForeground(Nevron.Diagram.NPaintContext)">
            <summary>
            Performs the view Foreground Paint Pass
            </summary>
            <remarks>
            Overriden to paint the view nodes and the foreground frame of the background
            </remarks>
            <param name="context">context in which to paint</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.PaintViewBackground(Nevron.Diagram.NPaintContext)">
            <summary>
            Overriden to paint the background frame
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.PaintEmptyInDesignMode(Nevron.Diagram.WinForm.NViewPaintContext)">
            <summary>
            Performs the painting of a view, which is not connected to a document in design mode
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryView.ProvideViewPaintContext(Nevron.Diagram.WinForm.NViewPaintContext,Nevron.Diagram.PaintPass)">
            <summary>
            Provides a view paint context for the specified paint pass
            </summary>
            <param name="device"></param>
            <param name="pass"></param>
            <param name="clipBounds"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NIconAndDetailsShape">
            <summary>
            Represents an icon and details shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconAndDetailsShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconAndDetailsShape.#ctor(Nevron.Diagram.WinForm.NLibraryViewItem)">
            <summary>
            Initializer constructor
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconAndDetailsShape.Paint(Nevron.Diagram.NPaintContext,Nevron.Diagram.WinForm.NItemState@)">
            <summary>
            Overriden to paint an icon and details shape
            </summary>
            <param name="context"></param>
            <param name="state"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconAndDetailsShape.HitTestRegion(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Overriden to hit test an icons and details shape
            </summary>
            <param name="point"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconAndDetailsShape.HitTestRegion(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Overriden to hit test an icons and details shape
            </summary>
            <param name="rect"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconAndDetailsShape.GetImageBounds">
            <summary>
            Overriren to return the icons bounds
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconAndDetailsShape.GetNameAndPromptBounds">
            <summary>
            Gets the bounds of the name and prompt texts
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconAndDetailsShape.GetNameBounds">
            <summary>
            Gets the bounds of the name text
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconAndDetailsShape.GetPromptBounds">
            <summary>
            Gets the bounds of the prompt text
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconAndDetailsShape.GetNameTextInfo(Nevron.Diagram.WinForm.NItemTextInfo@)">
            <summary>
            Gets the name text info
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconAndDetailsShape.GetPromptTextInfo(Nevron.Diagram.WinForm.NItemTextInfo@)">
            <summary>
            Gets the prompt text info
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NIconAndNameShape">
            <summary>
            Represents an icon and name shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconAndNameShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconAndNameShape.#ctor(Nevron.Diagram.WinForm.NLibraryViewItem)">
            <summary>
            Initializer constructor
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconAndNameShape.Paint(Nevron.Diagram.NPaintContext,Nevron.Diagram.WinForm.NItemState@)">
            <summary>
            Overriden to paint and icon and name shape
            </summary>
            <param name="context"></param>
            <param name="state"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconAndNameShape.HitTestRegion(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Overriden to hit test an icon and name shape
            </summary>
            <param name="point"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconAndNameShape.HitTestRegion(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Overriden to hit test an icon and name shape
            </summary>
            <param name="rect"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconAndNameShape.GetImageBounds">
            <summary>
            Overriden to return the icon bounds
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconAndNameShape.GetNameBounds">
            <summary>
            Gets the bounds of the name text
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconAndNameShape.GetNameTextInfo(Nevron.Diagram.WinForm.NItemTextInfo@)">
            <summary>
            Gets the name text info
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NIconOnlyShape">
            <summary>
            Represents an icon only shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconOnlyShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconOnlyShape.#ctor(Nevron.Diagram.WinForm.NLibraryViewItem)">
            <summary>
            Initializer constructor
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconOnlyShape.Paint(Nevron.Diagram.NPaintContext,Nevron.Diagram.WinForm.NItemState@)">
            <summary>
            Overriden to paint an icon only shape
            </summary>
            <param name="context"></param>
            <param name="state"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconOnlyShape.HitTestRegion(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Overriden to hit test an icon only shape
            </summary>
            <param name="point"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconOnlyShape.HitTestRegion(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Overriden to hit test an icon only shape
            </summary>
            <param name="rect"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NIconOnlyShape.GetImageBounds">
            <summary>
            Overriden to return the bounds of the icon
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NItemShape">
            <summary>
            The NItemShape class serves as base class for the library view item shapes
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NItemShape.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NItemShape.#ctor(Nevron.Diagram.WinForm.NLibraryViewItem)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NItemShape.Clone">
            <summary>
            Creates an identical copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NItemShape.Paint(Nevron.Diagram.NPaintContext,Nevron.Diagram.WinForm.NItemState@)">
            <summary>
            Paints the item
            </summary>
            <param name="context"></param>
            <param name="state"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NItemShape.HitTestRegion(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the item region by point
            </summary>
            <param name="point"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NItemShape.HitTestRegion(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the item region by rect
            </summary>
            <param name="rect"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NItemShape.Layout">
            <summary>
            Obtains a reference to the item layout
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NItemShape.Appearance">
            <summary>
            Obtains a reference to the item appearace
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NItemShape.Master">
            <summary>
            Obtains a reference to the item master
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NItemShape.GetImageBounds">
            <summary>
            Gets the bounds of the item image
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NItemShape.DrawImage(Nevron.Diagram.NPaintContext,Nevron.Diagram.WinForm.NItemState@,System.Drawing.Bitmap)">
            <summary>
            Draws the item image
            </summary>
            <param name="context"></param>
            <param name="state"></param>
            <param name="image"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NItemShape.DrawBackground(Nevron.Diagram.NPaintContext,Nevron.Diagram.WinForm.NItemState@,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Draws the item background if the item is selected or highlighted
            </summary>
            <param name="context"></param>
            <param name="state"></param>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NItemShape.DrawFocusedFrame(Nevron.Diagram.NPaintContext,Nevron.Diagram.WinForm.NItemState@,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Draws the item focused frame if the item is focused
            </summary>
            <param name="context"></param>
            <param name="state"></param>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NItemShape.DrawText(Nevron.Diagram.NPaintContext,Nevron.Diagram.WinForm.NItemState@,Nevron.Diagram.WinForm.NItemTextInfo@,System.Boolean)">
            <summary>
            Draws a text of the item
            </summary>
            <param name="context"></param>
            <param name="state"></param>
            <param name="info"></param>
            <param name="allowDrawDecoration"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NItemShape.MeasureTextFrame(Nevron.GraphicsCore.NRenderingContext,Nevron.Diagram.WinForm.NItemTextInfo@)">
            <summary>
            Measures the frame bounding the specified text info
            </summary>
            <param name="context"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NItemShape.Item">
            <summary>
            Reference to the item holding the shape
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NItemState">
            <summary>
            Encapsulates the state sensitive painting of the item
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NItemState.Highlighted">
            <summary>
            Whether the item is highlighted
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NItemState.Selected">
            <summary>
            Whether the item is selected
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NItemState.Focused">
            <summary>
            Whether the item is focused
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NItemState.Previewed">
            <summary>
            Whether the item is previewed
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NItemState.BackColor">
            <summary>
            Back color to use
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NItemState.ForeColor">
            <summary>
            Fore color to use
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NItemTextInfo">
            <summary>
            Encapsulates the information need to display an item text
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NItemTextInfo.#ctor(System.String,Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NFontStyle,Nevron.HorzAlign,Nevron.VertAlign)">
            <summary>
            Initializer contructor
            </summary>
            <param name="text"></param>
            <param name="rect"></param>
            <param name="fontStyle"></param>
            <param name="horzAlign"></param>
            <param name="vertAlign"></param>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NItemTextInfo.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NItemTextInfo.Rect">
            <summary>
            Rect
            </summary>
        </member>
        <member name="F:Nevron.Diagram.WinForm.NItemTextInfo.TextStyle">
            <summary>
            Text style
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NListShape">
            <summary>
            Represents a list item shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NListShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NListShape.#ctor(Nevron.Diagram.WinForm.NLibraryViewItem)">
            <summary>
            Initializer constructor
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NListShape.Paint(Nevron.Diagram.NPaintContext,Nevron.Diagram.WinForm.NItemState@)">
            <summary>
            Overriden to paint a list item shape
            </summary>
            <param name="context"></param>
            <param name="state"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NListShape.HitTestRegion(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Overriden to hit test a list item shape
            </summary>
            <param name="point"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NListShape.HitTestRegion(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Overriden to hit test a list item shape
            </summary>
            <param name="rect"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NListShape.GetImageBounds">
            <summary>
            Overriden to return the bounds of the list item image
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NListShape.GetNameBounds">
            <summary>
            Gets the bounds of the name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NListShape.GetNameTextInfo(Nevron.Diagram.WinForm.NItemTextInfo@)">
            <summary>
            Gets the name text info
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NThumbnailShape">
            <summary>
            Represents a thumbnail shape
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NThumbnailShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NThumbnailShape.#ctor(Nevron.Diagram.WinForm.NLibraryViewItem)">
            <summary>
            Initializer constructor
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NThumbnailShape.Paint(Nevron.Diagram.NPaintContext,Nevron.Diagram.WinForm.NItemState@)">
            <summary>
            Overriden to paint a thumbnail shape
            </summary>
            <param name="context"></param>
            <param name="state"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NThumbnailShape.HitTestRegion(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Overriden to hit test a thumbnail shape
            </summary>
            <param name="point"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NThumbnailShape.HitTestRegion(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Overriden to hit test a thumbnail shape
            </summary>
            <param name="rect"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NThumbnailShape.GetImageBounds">
            <summary>
            Overriden to return the bounds of the thumbnail image
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NThumbnailShape.GetNameBounds">
            <summary>
            Gets the bounds of the name text
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NThumbnailShape.GetNameTextInfo(Nevron.Diagram.WinForm.NItemTextInfo@)">
            <summary>
            Gets the name text info
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NLibraryMovePreview">
            <summary>
            The NLibraryMovePreview class is a view node, 
            which is used for the preview of nodes movement inside library views
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to cashe a reference to the view hosting the preview and update the references of all contained nodes
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.GetEnumerator">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <returns>node enumerator</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryMovePreview.Visible">
            <summary>
            Controls the visibility of the preview
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the tracker in the specified context
            </summary>
            <remarks>
            If the tracker is in tracking mode the handles will be hidden if the ShowHandlesWhenTracking proprty is false.
            </remarks>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the tracker can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the node can be painted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.Invalidate">
            <summary>
            Invalidates the tracker
            </summary>
            <remarks>
            If the tracker is in tracking mode this method will invalidate the preview. Otherwise it will invalidate the handles.
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.IndexOfChild(Nevron.Dom.INNode)">
            <summary>
            Gets the index of the specified node in the container
            </summary>
            <param name="node">the node to locate</param>
            <returns>index of the node</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.GetChildAt(System.Int32)">
            <summary>
            Gets the child node at the specified index
            </summary>
            <param name="index">index</param>
            <returns>node at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.SetChildIndex(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Sets a new index of the specified child node
            </summary>
            <param name="node">node whose index to change</param>
            <param name="index">new index</param>
            <returns>previous node index</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.IsChild(Nevron.Dom.INNode)">
            <summary>
            Determines whether the specified node is a child node for this container
            </summary>
            <param name="node">node to check</param>
            <returns>true if it is a child node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.ChildrenCount(Nevron.Filters.INFilter)">
            <summary>
            Returns the number of child nodes which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <returns>children count, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.Children(Nevron.Filters.INFilter)">
            <summary>
            Obtains the child nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.AccumulateChildren(Nevron.Filters.INFilter,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the children contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="list">list to which to append the child nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.IsDescendant(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Queries whether the specified node is a descendant of this node
            </summary>
            <param name="node">node to look for</param>
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>true if the node is a descendant node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.DescendantsCount(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Returns the number of descendant nodes, which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>count of descendants, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.Descendants(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Obtains the descentant nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.AccumulateDescendants(Nevron.Filters.INFilter,System.Int32,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the descendants contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <param name="list">list to which to append the descendant nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.GetEnumerator(Nevron.Filters.INFilter)">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.AddChild(Nevron.Dom.INNode)">
            <summary>
            Adds a child node
            </summary>
            <param name="node">node to add</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.InsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Inserts a child node at the specified index
            </summary>
            <param name="index">index at which to insert the child node</param>
            <param name="node">node to insert</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Queries whether the specified node can be inserted at the specified index
            </summary>
            <param name="index">index at which the child node will be inserted</param>
            <param name="node">child node to insert</param>
            <returns>true if the node can be inserted at the specified index, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.RemoveChild(Nevron.Dom.INNode)">
            <summary>
            Removes the specified child node from the container children
            </summary>
            <param name="node">child node to remove</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.RemoveChildAt(System.Int32)">
            <summary>
            Removes the child node at the specified index
            </summary>
            <param name="index">index of child node to remove</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.RemoveAllChildren">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.CanRemoveChild(Nevron.Dom.INNode)">
            <summary>
            Queries whether the specified child node can be removed
            </summary>
            <param name="node">child node to remove</param>
            <returns>true if the node can be removed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.Initialize(Nevron.Dom.NNodeList,Nevron.Diagram.WinForm.NLibraryPreviewManager)">
            <summary>
            Initializes the preview with the specified elements
            </summary>
            <param name="elements">elements with which to initilize the preview</param>
            <param name="previewManager">preview manager associated with the preview</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryMovePreview.Move(System.Single,System.Single)">
            <summary>
            Moves the preview with the specified amounts
            </summary>
            <param name="transX">x translate</param>
            <param name="transY">y translate</param>
            <returns>true if successfully translated, false if translation was not allowed due to constrains</returns> 
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryMovePreview.CurrentBounds">
            <summary>
            Gets/sets the current bounds of the preview (updated during translation)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryMovePreview.StartBounds">
            <summary>
            Gets/sets the start bounds of the preview (determined during initialization)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryMovePreview.LastTransX">
            <summary>
            Gets/sets the last known allowed X translate of the preview
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryMovePreview.LastTransY">
            <summary>
            Gets/sets the last known allowed Y translate of the preview
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryMovePreview.View">
            <summary>
            Obtains a reference to the view
            </summary>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NLibraryViewItem">
            <summary>
            The NLibraryViewItem class is used to display a master inside a library view
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewItem.#ctor(Nevron.Diagram.NMaster)">
            <summary>
            Initializer constructor
            </summary>
            <param name="master"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewItem.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewItem.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the node in the specified context
            </summary>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewItem.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the node can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the node can be painted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewItem.Invalidate">
            <summary>
            Invalidates the instance
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItem.Bounds">
            <summary>
            Gets/sets the bounds of the node (in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItem.Center">
            <summary>
            Gets/sets the node center (in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItem.Location">
            <summary>
            Gets/sets the node location (top left corner of the bounds, in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItem.Width">
            <summary>
            Gets/sets the node width (in scene coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItem.Height">
            <summary>
            Gets/sets the node height (in scene coordinates)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewItem.HitTest(Nevron.GraphicsCore.NPointF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the node by point with the specified context
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewItem.HitTest(Nevron.GraphicsCore.NRectangleF,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests the node by rectangle with the specified context
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="context">context to use</param>
            <returns>true if the node was hit, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItem.Master">
            <summary>
            Gets/sets the master, which this item represents
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NLibraryViewItem.View">
            <summary>
            Obtains a reference to the view in which the item resides
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewItem.Reshape(Nevron.Diagram.WinForm.LibraryViewStyle,Nevron.Diagram.WinForm.NLibraryViewItemLayout)">
            <summary>
            Reshapes the item so that it can be displayed and hit tested in the specified view style
            </summary>
            <param name="viewStyle"></param>
            <param name="layout"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewItem.GetValidPrompt">
            <summary>
            Gets the master prompt string if it is valid, otherwise returns the default master prompt string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NLibraryViewItem.GetTooltipText">
            <summary>
            Obtains a tooltip text for this item, which is constructed from the master name and a valid prompt string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NViewLayer">
            <summary>
            The NViewLayer class represents a primary holder for view nodes
            </summary>
            <remarks>
            NViewLayer enhances its base NDiagramNode with the following features:
            <list type="bullet">
            <item>
            	<term>Free composition</term>
            	<description>
            	NViewLayer implements the INNodeComposite interface, so you can freely insert and remove nodes from it.
            	</description>
            </item>
            <item>
            	<term>Painting</term>
            	<description>
            	By implementing the INPaintable interface desiner layers propagate the Content paint passe to their children.
            	</description>
            </item>
            <item>
            	<term>Hit tests</term>
            	<description>Implemented is the INHitTest interface to indicate that the NViewLayer descendants can be hittested.
            	</description>
            </item>	
            </list>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to update the references of all contained nodes
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.GetServiceOfType(System.Type)">
            <summary>
            Gets a reference to a service of the specified type
            </summary>
            <remarks>
            This implementation will return null for service of type NDiagramEventSinkService if the FireEvents property is set to false. 
            For all other types of services it will call the view implementation of the INServiceProvider interface. 
            In this way elements hosted in view layers can optionally fire events.
            </remarks>
            <param name="serviceType">service type</param>
            <returns>service instance or null if a service of this type cannot be located</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.GetEnumerator">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.IndexOfChild(Nevron.Dom.INNode)">
            <summary>
            Gets the index of the specified node in the container
            </summary>
            <param name="node">the node to locate</param>
            <returns>index of the node</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.GetChildAt(System.Int32)">
            <summary>
            Gets the child node at the specified index
            </summary>
            <param name="index">index</param>
            <returns>node at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.SetChildIndex(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Sets a new index of the specified child node
            </summary>
            <param name="node">node whose index to change</param>
            <param name="index">new index</param>
            <returns>previous node index</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.IsChild(Nevron.Dom.INNode)">
            <summary>
            Determines whether the specified node is a child node for this container
            </summary>
            <param name="node">node to check</param>
            <returns>true if it is a child node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.ChildrenCount(Nevron.Filters.INFilter)">
            <summary>
            Returns the number of child nodes which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <returns>children count, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.Children(Nevron.Filters.INFilter)">
            <summary>
            Obtains the child nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.AccumulateChildren(Nevron.Filters.INFilter,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the children contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="list">list to which to append the child nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.IsDescendant(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Queries whether the specified node is a descendant of this node
            </summary>
            <param name="node">node to look for</param>
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>true if the node is a descendant node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.DescendantsCount(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Returns the number of descendant nodes, which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>count of descendants, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.Descendants(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Obtains the descentant nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.AccumulateDescendants(Nevron.Filters.INFilter,System.Int32,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the descendants contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <param name="list">list to which to append the descendant nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.GetEnumerator(Nevron.Filters.INFilter)">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.AddChild(Nevron.Dom.INNode)">
            <summary>
            Adds a child node
            </summary>
            <param name="node">node to add</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.InsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Inserts a child node at the specified index
            </summary>
            <param name="index">index at which to insert the child node</param>
            <param name="node">node to insert</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.CanInsertChild(System.Int32,Nevron.Dom.INNode)">
            <summary>
            Queries whether the specified node can be inserted at the specified index
            </summary>
            <param name="index">index at which the child node will be inserted</param>
            <param name="node">child node to insert</param>
            <returns>true if the node can be inserted at the specified index, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.RemoveChild(Nevron.Dom.INNode)">
            <summary>
            Removes the specified child node from the container children
            </summary>
            <param name="node">child node to remove</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.RemoveChildAt(System.Int32)">
            <summary>
            Removes the child node at the specified index
            </summary>
            <param name="index">index of child node to remove</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.RemoveAllChildren">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.CanRemoveChild(Nevron.Dom.INNode)">
            <summary>
            Queries whether the specified child node can be removed
            </summary>
            <param name="node">child node to remove</param>
            <returns>true if the node can be removed, otherwise false</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewLayer.Visible">
            <summary>
            Controls the visibility of the layer
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.Invalidate">
            <summary>
            Invalidates the layer
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.Paint(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the layer in the specified context
            </summary>
            <param name="context">paint context to use</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.CanPaint(Nevron.Diagram.NPaintContext)">
            <summary>
            Determines whether the layer can be painted in the specified context
            </summary>
            <param name="context">paint content to check for</param>
            <returns>true if the layer can be painted, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.HitTest(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests by point all node descendants, which satisfy the specified filter
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>list of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.HitTest(Nevron.GraphicsCore.NRectangleF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests by rectangle all node descendants, which satisfy the specified filter
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>array of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NViewLayer.LastHit(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Returns the last hit descendant by point, which statisfies the specified filter
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>hit node, or null if there is not hit node</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewLayer.View">
            <summary>
            Obtains a reference to the view hosting the layer
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NViewLayer.FireEvents">
            <summary>
            Indicates whether the content hosted in this layer must fire view events or not
            </summary>
            <remarks>
            By default set to false, which means that hosted content will not fire events
            </remarks>
        </member>
        <member name="T:Nevron.Diagram.WinForm.NView">
            <summary>
            The NView class is a Windows Forms Control, which serves as base class for all diagram document views
            </summary>
            <remarks>
            The view is designed to display a scene, which is composed by the merged view and displayed document content. 
            The first visible point of the scene is controlled by the ViewportOrigin property. The device point to which the 
            viewport origin is mapped is accessible from the WindowOrigin property.
            <para>
            All NView derivates share the following set of important features:
            <list type="bullet">
            <item>
            	<term>Selection</term>
            	<description>The selection contains the current set of manipulated document nodes. 
            	It is accessible from the Selection property.
            	</description>
            	<term>Controller</term>
            	<description>
            	The controller is an extensible processor of mouse, keyboard and drag and drop events. 
            	All user events, which the view receives are delegated to the controller for processing. 
            	The controller hosts a collection of tools, which determine the current view behavior. 
            	It is up to NView derivates to populate and configure the tools collection.
            	</description>
            	<term>Scrolling</term>
            	<description>
            	The NView class adds support for scrollbars and autoscrolling.
            	</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.GetEnumerator">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.CreateNonSerializedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.GetReferenceProvider">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.ProvideReference(System.Type)">
            <summary>
            
            </summary>
            <param name="parentType"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.GetServiceOfType(System.Type)">
            <summary>
            Gets a reference to a service of the specified type
            </summary>
            <param name="serviceType">service type</param>
            <returns>service instance or null if a service of this type cannot be located</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.Attributes">
            <summary>
            Gets the list of child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.GetAttributeByName(System.String)">
            <summary>
            Gets a child or descendant attribute by its name
            </summary>
            <param name="attributeName">child name or full attribute name</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
            <summary>
            Sets a child or descendant attribute by its name
            </summary>
            <param name="attributeName">attribute name</param>
            <param name="attribute">attribute to set</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnAttributePropertyChanging(System.String,System.String,System.Object)">
            <summary>
            Called by child or descendants attributes when an attribute property is changing
            </summary>
            <param name="attributeFullName">full attribute name</param>
            <param name="attributeProperty">attribute property</param>
            <param name="newValue">new property value</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnAttributePropertyChanged(System.String,System.String)">
            <summary>
            Called by child or descendants attributes when an attribute property has changed
            </summary>
            <param name="attributeFullName">full attribute name</param>
            <param name="attributeProperty">attribute property</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnAttributeChanged(System.String)">
            <summary>
            Called by child or descendants attributes when an attribute has changed
            </summary>
            <param name="attributeFullName">full attribute name</param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.RootNode">
            <summary>
            Since the view is the root node this property will always return this
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.ParentNode">
            <summary>
            Since the view is the root node this property will always return null 
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.IndexOfChild(Nevron.Dom.INNode)">
            <summary>
            Gets the index of the specified node in the container
            </summary>
            <param name="node">the node to locate</param>
            <returns>index of the node</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.GetChildAt(System.Int32)">
            <summary>
            Gets the child node at the specified index
            </summary>
            <param name="index">index</param>
            <returns>node at the specified index</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.SetChildIndex(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Sets a new index of the specified child node
            </summary>
            <param name="node">node whose index to change</param>
            <param name="index">new index</param>
            <returns>previous node index</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.IsChild(Nevron.Dom.INNode)">
            <summary>
            Determines whether the specified node is a child node for this container
            </summary>
            <param name="node">node to check</param>
            <returns>true if it is a child node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.ChildrenCount(Nevron.Filters.INFilter)">
            <summary>
            Returns the number of child nodes which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <returns>children count, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.Children(Nevron.Filters.INFilter)">
            <summary>
            Obtains the child nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.AccumulateChildren(Nevron.Filters.INFilter,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the children contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="list">list to which to append the child nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.IsDescendant(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Queries whether the specified node is a descendant of this node
            </summary>
            <param name="node">node to look for</param>
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>true if the node is a descendant node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DescendantsCount(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Returns the number of descendant nodes, which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>count of descendants, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.Descendants(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Obtains the descentant nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.AccumulateDescendants(Nevron.Filters.INFilter,System.Int32,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the descendants contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <param name="list">list to which to append the descendant nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.GetEnumerator(Nevron.Filters.INFilter)">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.Refresh">
            <summary>
            Refreshes the entire viewable area
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.SmartRefresh">
            <summary>
            Refreshes only the invalid viewable area
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.UpdateView">
            <summary>
            Informs the view that it needs to update itself
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.GetViewBridge(Nevron.Diagram.ViewBridgeType)">
            <summary>
            Gets a reference for the specified view bridge
            </summary>
            <param name="bridgeType">view bridge type to get</param>
            <returns>reference to view bridge, or null if the view cannot provide it</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.HitTest(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests by point all node descendants, which satisfy the specified filter
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>list of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.HitTest(Nevron.GraphicsCore.NRectangleF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Hit tests by rectangle all node descendants, which satisfy the specified filter
            </summary>
            <param name="rectangle">rectangle in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>array of hit nodes</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.LastHit(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter,Nevron.Diagram.NHitTestContext)">
            <summary>
            Returns the last hit descendant by point, which statisfies the specified filter
            </summary>
            <param name="point">point in device coordinates</param>
            <param name="depth">depth in which to traverse the tree or -1 if the entire subtree should be traversed</param> 
            <param name="filter">filter to use. null value is equal to a constant true filter.</param>
            <param name="context">hit test context</param>
            <returns>hit node, or null if there is not hit node</returns>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NView.PropertyChanging">
            <summary>
            Property changing event
            </summary>
            <remarks>
            The view must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NView.PropertyChanged">
            <summary>
            Property changed event
            </summary>
            <remarks>
            The view must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NView.AttributePropertyChanging">
            <summary>
            Attribute property changing event
            </summary>
            <remarks>
            The view must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NView.AttributePropertyChanged">
            <summary>
            Attribute property changed event
            </summary>
            <remarks>
            The view must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NView.AttributeChanged">
            <summary>
            Attribute changed event
            </summary>
            <remarks>
            The view must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NView.DisplayedDocumentChanging">
            <summary>
            Fired when the document displayed by the view is about to be changed
            </summary>
            <remarks>
            The view must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NView.DisplayedDocumentChanged">
            <summary>
            Fired when the document displayed by the view has changed
            </summary>
            <remarks>
            The view must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NView.TransformationsChanged">
            <summary>
            Fired when the transformations of the view have changed
            </summary>
            <remarks>
            The view must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NView.NodeSelecting">
            <summary>
            Fired when an node is about to be selected
            </summary>
            <remarks>
            The view must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NView.NodeSelected">
            <summary>
            Fired when an node has been selected
            </summary>
            <remarks>
            The view must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NView.NodeDeselecting">
            <summary>
            Fired when an node is about to be deselected
            </summary>
            <remarks>
            The view must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NView.NodeDeselected">
            <summary>
            Fired when an node has been deselected
            </summary>
            <remarks>
            The view must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NView.MultiSelectionStarted">
            <summary>
            Fired when multiple nodes are going to be selected or deselected
            </summary>
            <remarks>
            The view must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NView.MultiSelectionEnded">
            <summary>
            Fired when multiple nodes have been selected or deselected
            </summary>
            <remarks>
            The view must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NView.ToolsChanged">
            <summary>
            Fired when the controller collection of tools has changed
            </summary>
            <remarks>
            The view must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NView.ToolEnabled">
            <summary>
            Fired when a tool has been enabled
            </summary>
            <remarks>
            The view must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NView.ToolDisabled">
            <summary>
            Fired when a tool has been disabled
            </summary>
            <remarks>
            The view must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NView.ToolActivated">
            <summary>
            Fired when a tool has been activated
            </summary>
            <remarks>
            The view must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NView.ToolDeactivated">
            <summary>
            Fired when a tool has been deactivated
            </summary>
            <remarks>
            The view must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="E:Nevron.Diagram.WinForm.NView.ToolAborted">
            <summary>
            Fired when a tool has been aborted
            </summary>
            <remarks>
            The view must be connected to an event sink service in order to hook-unhook this event
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.DelegateBuildContextMenu">
            <summary>
            Build context menu delegate
            </summary>
            <remarks>
            This delegate is called from the BuildContextMenu method and can be used to hook the creation of context menus
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.RenderTechnology">
            <summary>
            Gets / sets the render technology of this view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.Graphics">
            <summary>
            Returns a view compatible graphics
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.GraphicsSettings">
            <summary>
            Gets/sets the graphics settings, with which the view scene must be rendered
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.WindowBackColor">
            <summary>
            Gets/sets the window back color, which is used for the filling of the window background
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.Viewport">
            <summary>
            Returns the view area in scene coordinates displayed by the view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.ViewportOrigin">
            <summary>
            Gets/sets the viewport origin
            </summary>
            <remarks>
            The viewport origin is the point in scene coordinates, which is mapped to the 
            left-top corner of the window (e.g. the WindowOrigin). Scrollbars can 
            change the viewport origin to achieve effects like scrolling and panning.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.ViewportSize">
            <summary>
            Gets the current viewport size 
            </summary>
            <remarks>
            The viewport size is measured in scene coordinates and represents the extend of the area from 
            the viewport origin which is displayed by the view. The rectangle formed by the 
            ViewportOrigin and the ViewportSize is called viewport and can be obtained from the Viewport property.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.Window">
            <summary>
            Returns the view area in device coordinates in which the viewport is mapped
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.WindowOrigin">
            <summary>
            Gets the window origin
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.WindowSize">
            <summary>
            Gets the current window size
            </summary>
            <remarks>
            The window size is measured in device coordinates and represents the extend of the area from 
            the window origin which is used to display the document. The rectangle formed by the 
            WindowOrigin and the WindowSize is called window and can be obtained from the Window property.
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.ScrollBars">
            <summary>
            Specifies which scrollbars can be shown when needed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.SmallScrollChange">
            <summary>
            Controls the small scoll change of the scrollbars (in pixels)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.NonScrollableSceneAlignment">
            <summary>
            Controls the alignment of the scene relative to the window when the horizontal or vertical scrollbar must not be shown
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.VertScrollbar">
            <summary>
            Obtains a reference to the vertical scrollbar
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.HorzScrollbar">
            <summary>
            Obtains a reference to the horizontal scrollbar
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.LockRefresh">
            <summary>
            Locks/unlocks the refreshing of the view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.InDraggingState">
            <summary>
            Determines whether the view is currently in dragging state
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.ShowMessages">
            <summary>
            Specifies whether view messages should be displayed
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.ContentLayer">
            <summary>
            Obtains a reference to the content layer
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.PreviewLayer">
            <summary>
            Obtains a reference to the preview layer
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.AutoScroller">
            <summary>
            Gets/sets the autoscroller
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.Selection">
            <summary>
            Gets/sets the selection
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.InteractivityManager">
            <summary>
            Gets/sets the cursor and tooltip manager
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.Controller">
            <summary>
            Get/sets the view controller
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.ServiceManager">
            <summary>
            Gets/sets the service manager, which used to maintain the collection of services registed for this view
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.EventSinkService">
            <summary>
            Obtains a reference to the view event sink service
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.HighlightedNodes">
            <summary>
            Gets/sets the nodes, which must be displayed as highlighted
            </summary>
            <remarks>
            During painting the members of this collection are passed in the HighlightedNodes hashtable of the appropriate paint context
            </remarks>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.SceneToDevice">
            <summary>
            Obtains a reference to the current scene to device transformation
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.DesignTimeState">
            <summary>
            Gets/sets the design time state of the view
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.Reset">
            <summary>
            Resets the view to its original settings
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.SceneScaleToDeviceX">
            <summary>
            Obtains the X scaling of scene coordinates to device coordinates (pixels)
            </summary>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.SceneScaleToDeviceY">
            <summary>
            Obtains the Y scaling of scene coordinates to device coordinates (pixels)
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.UpdateViewLayout">
            <summary>
            Updates the layout of the view
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.UpdateTransformations">
            <summary>
            Updates the transformations of the view
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.ProvideViewHitTestContext">
            <summary>
            Provides a valid hit test context, which can be used for view hit tests
            </summary>
            <returns>view hit test context</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.HitTestSelection(Nevron.GraphicsCore.NPointF,Nevron.Filters.INFilter)">
            <summary>
            Hit test by point only the selected nodes, which satisfy the specified filter
            </summary>
            <param name="point"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.HitTestSelection(Nevron.GraphicsCore.NRectangleF,Nevron.Filters.INFilter)">
            <summary>
            Hit test by rect only the selected nodes, which satisfy the specified filter
            </summary>
            <param name="rect"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.Cut(Nevron.Dom.NNodeList)">
            <summary>
            
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.Copy(Nevron.Dom.NNodeList)">
            <summary>
            
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.Paste">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DoDragDrop(Nevron.Dom.NNodeList,System.Windows.Forms.DragDropEffects@)">
            <summary>
            
            </summary>
            <param name="nodes"></param>
            <param name="effects"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.HitTestViewContent(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter)">
            <summary>
            Hit test the view content layer by point
            </summary>
            <param name="point">device point</param>
            <param name="depth">depth in which to drill the content layer</param>
            <param name="filter">filter to use</param>
            <remarks>list of hit nodes</remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.HitTestViewContent(Nevron.GraphicsCore.NRectangleF,System.Int32,Nevron.Filters.INFilter)">
            <summary>
            Hit test the view content layer by rect
            </summary>
            <param name="rect">device rect</param>
            <param name="depth">depth in which to drill the content layer</param>
            <param name="filter">filter to use</param>
            <remarks>list of hit nodes</remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.LastViewContentHit(Nevron.GraphicsCore.NPointF,System.Int32,Nevron.Filters.INFilter)">
            <summary>
            Obtains the last hit view content layer descendant by point
            </summary>
            <param name="point">point in devic coordinates</param>
            <param name="depth">depth in which to drill the content layer</param>
            <param name="filter">filter to use</param>
            <remarks>hit node or null if no node was hit</remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.UpdateScrollbars">
            <summary>
            Updates the view scrollbars
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.ScrollInDirection(Nevron.GraphicsCore.CompassDirection,System.Single)">
            <summary>
            Scrolls the view in the specified direction
            </summary>
            <param name="direction">direction in which to scroll</param> 
            <param name="steps">number of small scroll steps to perform</param> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DoPaint(Nevron.Diagram.WinForm.NViewPaintContext)">
            <summary>
            Performs the merged painting of the view and and the document
            </summary>
            <remarks>
            This method is called by the overriden OnPaint method. This implementation will perform the following steps:
            <para>
            1. Call the PaintDocumentBackground method if the NeedsDocumentBackgroundPaint method returned true.
            </para>
            <para>
            2. Call the PaintViewBackground method if the NeedsViewBackgroundPaint method returned true.
            </para>
            <para>
            3. Call the PaintDocument method if the NeedsDocumentForegroundPaint method returned true.
            </para>
            <para>
            4. Call the PaintView method if the NeedsViewForegroundPaint method returned true.
            </para>
            </remarks>
            <param name="paintContext"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DoMouseEnter(System.EventArgs)">
            <summary>
            Handles the mouse enter event
            </summary>
            <remarks>
            This implementation delegates the call to the controller
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DoMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the mouse down event
            </summary>
            <remarks>
            This implementation delegates the call to the controller
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DoMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the mouse wheel event
            </summary>
            <remarks>
            This implementation delegates the call to the controller
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DoMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the mouse move event
            </summary>
            <remarks>
            This implementation delegates the call to the controller. 
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DoMouseHover(System.EventArgs)">
            <summary>
            Handles the mouse hover event
            </summary>
            <remarks>
            This implementation delegates the call to the controller
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DoMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the mouse up event
            </summary>
            <remarks>
            This implementation delegates the call to the controller
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DoMouseLeave(System.EventArgs)">
            <summary>
            Handles the mouse up event
            </summary>
            <remarks>
            This implementation delegates the call to the controller
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DoClick(System.EventArgs)">
            <summary>
            Handles the click event
            </summary>
            <remarks>
            This implementation delegates the call to the controller
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DoDoubleClick(System.EventArgs)">
            <summary>
            Handles the click event
            </summary>
            <remarks>
            This implementation delegates the call to the controller
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DoKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles the key down event
            </summary>
            <remarks>
            This implementation delegates the call to the controller
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DoKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Handles the key press event
            </summary>
            <remarks>
            This implementation delegates the call to the controller
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DoKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles the key up event
            </summary>
            <remarks>
            This implementation delegates the call to the controller
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DoIsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Handles the IsInputKey query
            </summary>
            <remarks>
            This implementation delegates the call to the controller
            </remarks>
            <param name="keyData">key data</param>
            <returns>true if the key is an input key and should be passed to the view without preprocessing, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DoIsInputChar(System.Char)">
            <summary>
            Handles the IsInputChar query
            </summary>
            <remarks>
            This implementation delegates the call to the controller
            </remarks>
            <param name="keyChar">char</param>
            <returns>true if the char is an input char and should be passed to the view without preprocessing, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DoDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            Handles the drag enter event
            </summary>
            <remarks>
            This implementation delegates the call to the controller
            </remarks>
            <param name="drgevent"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DoDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Handles the drag over event
            </summary>
            <remarks>
            This implementation delegates the call to the controller
            </remarks>
            <param name="drgevent"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DoDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Handles the drag drop event
            </summary>
            <remarks>
            This implementation delegates the call to the controller
            </remarks>
            <param name="drgevent"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DoDragLeave(System.EventArgs)">
            <summary>
            Handles the drag leave event
            </summary>
            <remarks>
            This implementation delegates the call to the controller
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.BuildContextMenu(System.Object)">
            <summary>
            Builds a context menu for the specified object
            </summary>
            <param name="obj">object for which to build menu</param>
            <returns>context menu instance if menu was built, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnNodeSelecting(Nevron.Dom.INNode)">
            <summary>
            Called by the selection when the specified node is about to be selected
            </summary>
            <remarks>
            This implementation will fire the NodeSelecting event
            </remarks>
            <param name="node">node which is going to be selected</param>
            <returns>true if the node can be selected, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnNodeSelected(Nevron.Dom.INNode)">
            <summary>
            Called by the selection the specified node has been selected
            </summary>
            <remarks>
            This implementation will fire the NodeSelected event
            </remarks>
            <param name="node">node which has been selected</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnNodeDeselecting(Nevron.Dom.INNode)">
            <summary>
            Called by the selection when the specified node is going to be deselected
            </summary>
            <remarks>
            This implementation will fire the NodeDeselecting event
            </remarks>
            <param name="node">node which is going to be deselected</param>
            <returns>true if the node can be deselected, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnNodeDeselected(Nevron.Dom.INNode)">
            <summary>
            Called by the selection when the specified node has been deselected
            </summary>
            <remarks>
            This implementation will fire the NodeDeselected event
            </remarks>
            <param name="node">node which has been deselected</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnMultiSelectionStarted">
            <summary>
            Called by the selection when a multi selection session has started
            </summary>
            <remarks>
            This implementation fires the MultiSelectionStarted event
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnMultiSelectionEnded">
            <summary>
            Called by the selection when a multi selection session has ended
            </summary>
            <remarks>
            This implementation fires the MultiSelectionEnded event
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.CanCut(Nevron.Dom.NNodeList)">
            <summary>
            Determines whether the specified nodes can be cut
            </summary>
            <param name="nodes">nodes</param> 
            <returns>true if the specified nodes can be cut, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.CanCopy(Nevron.Dom.NNodeList)">
            <summary>
            Determines whether the specified nodes can be copied
            </summary>
            <param name="nodes">nodes</param> 
            <returns>true if the specified nodes can be copied, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.CanPaste">
            <summary>
            Determines whether the current clipboard content can be pasted in this view
            </summary>
            <returns>true if the current clipboard content can be pasted in this view, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.CanDoDragDrop(Nevron.Dom.NNodeList)">
            <summary>
            Determines whether the specified nodes can be the content of a a drag and drop operation
            </summary>
            <param name="nodes">nodes</param>
            <returns>true if the specified nodes can be the content of a a drag and drop operation, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnControlParentChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the handle of a view control has been destroyed
            </summary>
            <remarks>
            This implementation will remove the sender control from the Controls collection and also unhook its events.
            </remarks>
            <param name="sender">sender control</param>
            <param name="e">event args</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnDraggingStarted">
            <summary>
            Called when a dragging operation has been started
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnDragging(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Called when a dragging operaiton is performed in the specified scene area
            </summary>
            <remarks>
            This implementation calls the Scroll method of the AutoScroller to perform auto scrolling
            </remarks>
            <param name="dragArea">dragged area (in scene coordinates)</param> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnDraggingEnded">
            <summary>
            Called when a dragging operation has been stopped 
            </summary>
            <remarks>
            This implementation stops the autoscrolling (if it at all started)
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.ShowMessage(System.String)">
            <summary>
            Shows a message in the view
            </summary>
            <param name="message">message to display</param> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.HideMessage">
            <summary>
            Hides the last shown message
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.ProcessTransactionResult(Nevron.Diagram.NTransactionResult)">
            <summary>
            Processes the specified transaction result
            </summary>
            <remarks>
            This method will analyze the transaction result status and optionally show a 
            view message with details about the problems 
            </remarks> 
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.GetMousePositionInScene">
            <summary>
            Gets the current mouse position in scene coordinates
            </summary>
            <returns>mouse position in scene coordinates</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.GetMousePositionInDevice">
            <summary>
            Gets the current mouse position in device coordinates
            </summary>
            <returns>mouse position in device coordinates</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.BeginInit">
            <summary>
            Begins an initialization of the view - pair it with EndInit
            </summary>
            <remarks>
            This implementation will lock all services and lock the view refresh
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.EndInit">
            <summary>
            Ends an initialization of the view - pair it with BeginInit
            </summary>
            <remarks>
            This implementation will unlock all services and unlock the view refresh
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DisposePaintContexts">
            <summary>
            Disposes the cached paint contexts that this view uses.
            You only need to call this method in order to clear 
            the cached GDI+ resources that the view uses.
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.ResetView">
            <summary>
            Called from the Reset method to reset only the fields declared in NView
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.CreateServices">
            <summary>
            Called to rebuild the service manager and the view services
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.CreateTools">
            <summary>
            Called to create the tools aplicable for this view and add them in the controller tools collection
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnPropertyChanging(System.String,System.Object)">
            <summary>
            General property changing handler, which fires the NodePropertyChanging event
            </summary>
            <param name="propertyName">name of the property which is chaning</param>
            <param name="newValue">new property value</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnPropertyChanged(System.String)">
            <summary>
            General property changed handler, which fires the NodePropertyChanged event
            </summary>
            <param name="propertyName">name of the property which has chaned</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnScrollerValueChanged(System.Object,Nevron.UI.WinForm.Controls.ScrollBarEventArgs)">
            <summary>
            Handles the scrollbar Scroll event
            </summary>
            <param name="sender">scrollbar from which the event was fired</param>
            <param name="e">scroll event arguments</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnTransformationsChanged">
            <summary>
            Called when the transformations of the view have changed
            </summary>
            <remarks>
            This implementation fires the TransformationsChanged event
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnDisplayedDocumentChanging(Nevron.Diagram.NDocument)">
            <summary>
            Called when the specified document is about to become the currently displayed document
            </summary>
            <param name="document">new displayed document</param>
            <returns>true if the specified document can become the new displayed document, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnDisplayedDocumentChanged">
            <summary>
            Called when the currently displayed document has changed
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnDocumentNodeInserted(Nevron.Dom.NChildNodeEventArgs)">
            <summary>
            Handles the NodeInsered document event
            </summary>
            <remarks>
            This implementation does nothing
            </remarks>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnDocumentNodeRemoved(Nevron.Dom.NChildNodeEventArgs)">
            <summary>
            Handles the NodeRemoved document event
            </summary>
            <remarks>
            This implementation gets the nodes in the removed node subtree and calls the OnDocumentNodeSubtreeeRemoved method
            </remarks>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnDocumentNodeSubtreeRemoved(Nevron.Dom.NNodeList)">
            <summary>
            Called when a node is removed and receives as argument the nodes in the removed node subtree
            </summary>
            <remarks>
            This implementation deselects the node and its possible descendants
            </remarks>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnDocumentNodePropertyChanged(Nevron.Dom.NNodePropertyEventArgs)">
            <summary>
            Handles the NodePropertyChanged document event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.AttachToDocument">
            <summary>
            Attaches the view to the current document
            </summary>
            <remarks>
            This implementation subscribes the view for the NodeInserted and NodeRemoved document events
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DetachFromDocument">
            <summary>
            Detaches the view from the current document
            </summary>
            <remarks>
            This implementation unsubscribes the view from the NodeInserted and NodeRemoved document events and 
            clears the selection
            </remarks>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.ComputeWindowSize(System.Boolean,System.Boolean)">
            <summary>
            Computes the window size based on the specified scrollbars visibility
            </summary>
            <param name="includeHorzScroller">whether to include the horizontal scroll bar</param>
            <param name="includeVertScroller">whether to include the vertical scroll bar</param>
            <returns>size of the window</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.ComputeViewportSize(Nevron.GraphicsCore.NSizeF)">
            <summary>
            Computes the viewport size based on the specified window size
            </summary>
            <param name="windowSize">window size for which to compute viewport size</param>
            <returns>size of the viewport</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.MustShowHorzScrollbar(Nevron.GraphicsCore.NSizeF)">
            <summary>
            Determines the need for a horizontal scrollbar based on a proposed viewport size
            </summary>
            <param name="viewportSize">viewport size</param>
            <returns>true if the horizontal scrollbar must be shown, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.MustShowVertScrollbar(Nevron.GraphicsCore.NSizeF)">
            <summary>
            Determines the need for a vertical scrollbar based on a proposed viewport size
            </summary>
            <param name="viewportSize">viewport size</param>
            <returns>true if the vertical scrollbar must be shown, otherwise false</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nevron.Diagram.WinForm.NView.NeedsWindowBackgroundPaint(Nevron.Diagram.WinForm.NViewPaintContext)" -->
        <member name="M:Nevron.Diagram.WinForm.NView.NeedsDocumentBackgroundPaint(Nevron.Diagram.WinForm.NViewPaintContext)">
            <summary>
            Determines the need for a document background paint pass
            </summary>
            <remarks>
            This implementation returns false
            </remarks>
            <param name="paintContext">paint context</param> 
            <returns>true if document background paint pass is needed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.NeedsDocumentForegroundPaint(Nevron.Diagram.WinForm.NViewPaintContext)">
            <summary>
            Determines the need for a document foregrounds paint pass
            </summary>
            <remarks>
            This implementation returns false
            </remarks>
            <param name="context">paint context</param> 
            <returns>true if document content paint pass is needed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.NeedsViewBackgroundPaint(Nevron.Diagram.WinForm.NViewPaintContext)">
            <summary>
            Determines the need for a view background paint pass
            </summary>
            <remarks>
            This implementation returns false
            </remarks>
            <param name="context">paint event arguments</param> 
            <returns>true if view background paint pass is needed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.NeedsViewForegroundPaint(Nevron.Diagram.WinForm.NViewPaintContext)">
            <summary>
            Determines the need for a view foreground paint pass
            </summary>
            <remarks>
            This implementation returns false
            </remarks>
            <param name="context">paint event arguments</param> 
            <returns>true if view content paint pass is needed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.ProvideViewPaintContext(Nevron.Diagram.WinForm.NViewPaintContext,Nevron.Diagram.PaintPass)">
            <summary>
            Provides a view paint context for the specified paint pass
            </summary>
            <param name="paintContext"></param>
            <param name="pass"></param>
            <param name="clipBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.ProvideDocumentPaintContext(Nevron.Diagram.WinForm.NViewPaintContext,Nevron.Diagram.PaintPass)">
            <summary>
            Provides a document paint context for the specified paint pass
            </summary>
            <param name="paintContext"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.PaintWindowBackground(Nevron.Diagram.NPaintContext)">
            <summary>
            Paints the window background area
            </summary>
            <remarks>
            This implementation does nothing
            </remarks>
            <param name="context">paint context</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.PaintDocumentBackground(Nevron.Diagram.NPaintContext)">
            <summary>
            Performs the document Background Paint Pass
            </summary>
            <remarks>
            This implementation does nothing
            </remarks>
            <param name="context">context in which to paint</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.PaintDocumentForeground(Nevron.Diagram.NPaintContext)">
            <summary>
            Performs the document Foreground Paint Pass
            </summary>
            <remarks>
            This implementation does nothing
            </remarks>
            <param name="context">context in which to paint</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.PaintViewBackground(Nevron.Diagram.NPaintContext)">
            <summary>
            Performs the view Background Paint Pass
            </summary>
            <remarks>
            This implementation does nothing
            </remarks>
            <param name="context">context in which to paint</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.PaintViewForeground(Nevron.Diagram.NPaintContext)">
            <summary>
            Performs the view Foreground Paint Pass
            </summary>
            <remarks>
            This implementation does nothing
            </remarks>
            <param name="context">context in which to paint</param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.PaintEmptyInDesignMode(Nevron.Diagram.WinForm.NViewPaintContext)">
            <summary>
            Performs the painting of a view, which is not connected to a document in design mode
            </summary>
            <param name="paintContext"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.DisposeDeviceUnusedObjects(Nevron.GraphicsCore.IN2DDevice)">
            <summary>
            Safely disposes the specified the unused objects in the specified context device.
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.ComputeSceneBounds">
            <summary>
            Computes the bounds of the scene
            </summary>
            <returns>scene bounds</returns>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.Dispose(System.Boolean)">
            <summary>
            Overriden to detach the view from the document
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Nevron.Diagram.WinForm.NView.DefaultSize">
            <summary>
            Gets the default size of the control
            </summary>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnResize(System.EventArgs)">
            <summary>
            Overriden to call the UpdateViewLayout method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overriden to call the DoPaint method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnMouseEnter(System.EventArgs)">
            <summary>
            Overriden to call the DoMouseEnter method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden to call the DoMouseDown method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden to call the DoMouseWheel method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden to call the DoMouseMove method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnMouseHover(System.EventArgs)">
            <summary>
            Overriden to call the DoMouseHover method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden to call the DoMouseUp method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnMouseLeave(System.EventArgs)">
            <summary>
            Overriden to call the DoMouseLeave method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnClick(System.EventArgs)">
            <summary>
            Overriden to call the DoClick method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnDoubleClick(System.EventArgs)">
            <summary>
            Overriden to call the DoDoubleClick method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overriden to call the DoKeyDown method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Overriden to call the DoKeyPress method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overriden to call the DoKeyUp method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Overriden to call the DoIsInputKey method
            </summary>
            <param name="keyData"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.IsInputChar(System.Char)">
            <summary>
            Overriden to call the DoIsInputChar method
            </summary>
            <param name="keyChar"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
            Overriden to cancel the drag and drop operation if the Escape key was pressed or 
            the mouse has entered the window
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="drgevent"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Overriden to call the DoDragDror method
            </summary>
            <param name="drgevent"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Overriden to call the DoDragDrop method
            </summary>
            <param name="drgevent"></param>
        </member>
        <member name="M:Nevron.Diagram.WinForm.NView.OnDragLeave(System.EventArgs)">
            <summary>
            Overriden to call the DoDragLeave method
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Nevron.Internal.ljfE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.vjfE.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Internal.vjfE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Internal.ElfE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Internal.KlfE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Internal.plfE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Internal.UlfE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Internal.SlKE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.SlKE.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Internal.AMfE.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.AMfE.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
    </members>
</doc>
