<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nevron.Chart</name>
    </assembly>
    <members>
        <member name="T:Nevron.Chart.NPointSetSimplifier3D">
            <summary>
            Represents a point set simplifier that works on 3D vectors
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPointSetSimplifier3D.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointSetSimplifier3D.BranchingFactor">
            <summary>
            Gets or sets the branching factor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointSetSimplifier3D.DistanceFactor">
            <summary>
            Gets or sets the distance factor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPointSetSimplifier3D.Simplify(Nevron.GraphicsCore.NVector3DD[])">
            <summary>
            Returns the simplified point set
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NArrayList`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NArrayList`1.#ctor(System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Nevron.Chart.NArrayList`1.AddSlow(`0)">
            <summary>
            Adds an item to the array. Generally slow
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Chart.NArrayList`1.Contains(`0)">
            <summary>
            Determines whether the array contains the specified item
            </summary>
            <param name="value"></param>
            <returns>true if contained, otherwise false</returns>
        </member>
        <member name="M:Nevron.Chart.NArrayList`1.IndexOf(`0)">
            <summary>
            Determines the index of the specified item in the array
            </summary>
            <param name="value"></param>
            <returns>index of the item in the array, or -1 if the item is not a member of this series</returns>
        </member>
        <member name="M:Nevron.Chart.NArrayList`1.Remove(`0)">
            <summary>
            Removes the specified item from the array
            </summary>
            <param name="value">item value</param>
        </member>
        <member name="M:Nevron.Chart.NArrayList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the array
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Chart.NArrayList`1.InsertRange(System.Int32,`0[])">
            <summary>
            Inserts a range of items in the data series after the specified index
            </summary>
            <param name="index">index after which to insert the range</param>
            <param name="items">Inserts a range of items in the data series after the specified index</param>
        </member>
        <member name="M:Nevron.Chart.NArrayList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts a new item at the specified index
            </summary>
            <param name="index">index at which to insert the item</param>
            <param name="item">item value</param>
        </member>
        <member name="P:Nevron.Chart.NArrayList`1.Capacity">
            <summary>
            Gets or sets the capacity of this list
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAxisValueAnchor">
            <summary>
            Represents an anchor, which can be anchored to an axis value
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisValueAnchor.#ctor">
            <summary>
            Creates a new, not attached axis anchor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisValueAnchor.#ctor(Nevron.Chart.NAxis,Nevron.Chart.AxisValueAnchorMode,System.Double)">
            <summary>
            Creates a new axis anchor object attached to the axis value.
            </summary>
            <param name="axis"></param>
            <param name="mode"></param>
            <param name="axisValue"></param>
        </member>
        <member name="P:Nevron.Chart.NAxisValueAnchor.Axis">
            <summary>
            The axis to attach to.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisValueAnchor.AxisValue">
            <summary>
            The axis value.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisValueAnchor.Mode">
            <summary>
            Gets or sets the anchor mode. The anchor mode defines how the anchored object is displayed 
            in case the anchor value is out of the axis ruler range.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisValueAnchor.IsVisible">
            <summary>
            Overriden to take into account the axis visibility
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NAxisValueAnchor.GetLocation(Nevron.Chart.NChartRenderingContext)">
            <summary>
            Overriden to obtain the location of the anchor, 
            by computing the axis value projection in the current viewport
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NPieDataPointAnchor">
            <summary>
            Represents an anchor, which can be attached to a pie series data point.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPieDataPointAnchor.#ctor">
            <summary>
            Creates a new pie data point anchor with default settings.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPieDataPointAnchor.#ctor(Nevron.Chart.NPieSeries,System.Int32,System.Single,System.Drawing.StringAlignment)">
            <summary>
            Creates a new pie data point anchor attached to the specified pie series.
            </summary>
            <param name="series">series to which the data point belongs</param>
            <param name="dataPointIndex">data point index</param>
            <param name="radialPosition">Position along the pie sector radial line. Defined as a value in the range [0, 1].</param>
            <param name="depthAlignment">depth alignment</param>
        </member>
        <member name="P:Nevron.Chart.NPieDataPointAnchor.DataPointIndex">
            <summary>
            Gets or sets the index of the data point.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPieDataPointAnchor.RadialPosition">
            <summary>
            Gets or sets the anchor aligment relative to the data point.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPieDataPointAnchor.DepthAlignment">
            <summary>
            Gets or sets the anchor depth aligment relative to the data point.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPieDataPointAnchor.Series">
            <summary>
            Gets or sets the series to which the data point belongs.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPieDataPointAnchor.IsVisible">
            <summary>
            Overriden to take into account the series visibility and the data point validity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NPieDataPointAnchor.GetLocation(Nevron.Chart.NChartRenderingContext)">
            <summary>
            Overriden to obtain the projection of the aligned anchor relative to the data point in the current viewport
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NChartAnchor">
            <summary>
            Base class for all anchors that can attach panels to gauge panels.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartAnchor.Chart">
            <summary>
            The chart to attach to
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartAnchor.IsVisible">
            <summary>
            Overriden to take into account the chart visibility
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NModelPointAnchor">
            <summary>
            Represents a chart anchor, which can be attached to a specific chart model point
            </summary>
        </member>
        <member name="M:Nevron.Chart.NModelPointAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NModelPointAnchor.#ctor(Nevron.Chart.NChart,Nevron.GraphicsCore.NVector3DF)">
            <summary>
            Initializer constructor
            </summary>
            <param name="chart">chart to attach to</param>
            <param name="modelPoint">model point of the chart</param>
        </member>
        <member name="P:Nevron.Chart.NModelPointAnchor.ModelPoint">
            <summary>
            Gets/sets the model point to which this anchor is attached
            </summary>
        </member>
        <member name="M:Nevron.Chart.NModelPointAnchor.GetLocation(Nevron.Chart.NChartRenderingContext)">
            <summary>
            Overriden to obtain the projection of the chart model point in the current viewport
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NScalePointAnchor">
            <summary>
            Represents a chart anchor, which can be attached to a specific chart scale point
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScalePointAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScalePointAnchor.#ctor(Nevron.Chart.NChart,System.Int32,System.Int32,System.Int32,Nevron.Chart.AxisValueAnchorMode,Nevron.GraphicsCore.NVector3DD)">
            <summary>
            Initializer constructor
            </summary>
            <param name="chart">chart to attach to</param>
            <param name="horzAxisIndex">index of the horizontal axis on which the scale point X coordinate is scaled</param>
            <param name="vertAxisIndex">index of the vertical axis on which the scale point Y coordinate is scaled</param>
            <param name="depthAxisIndex">index of the depth axis on which the scale point Z coordinate is scaled</param>
            <param name="mode">controls the visibility of the acnhor depending on the position of the xyz coordinaces on the respective axis rulers</param>
            <param name="scalePoint">anchor scale point</param>
        </member>
        <member name="P:Nevron.Chart.NScalePointAnchor.Mode">
            <summary>
            Gets or sets the value anchor mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScalePointAnchor.ScalePoint">
            <summary>
            Gets/sets the scale point
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScalePointAnchor.HorzAxisIndex">
            <summary>
            Gets/sets the horizontal axis index
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScalePointAnchor.VertAxisIndex">
            <summary>
            Gets/sets the vertical axis index
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScalePointAnchor.DepthAxisIndex">
            <summary>
            Gets/sets the depth axis index
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScalePointAnchor.IsVisible">
            <summary>
            Overriden to take into account the chart visibity and the validity of the specified axes indices
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NScalePointAnchor.GetLocation(Nevron.Chart.NChartRenderingContext)">
            <summary>
            Overriden to obtain the projection of the scale point in the current viewport
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NScalePointAnchor.GetHorzAxis(Nevron.Chart.NChart)">
            <summary>
            Obtains a reference to the horizontal axis of the specified chart, 
            corresponding to the specified horizontal axis index 
            </summary>
            <param name="chart"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NScalePointAnchor.GetVertAxis(Nevron.Chart.NChart)">
            <summary>
            Obtains a reference to the vertical axis of the specified chart, 
            corresponding to the specified vertical axis index 
            </summary>
            <param name="chart"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NScalePointAnchor.GetDepthAxis(Nevron.Chart.NChart)">
            <summary>
            Obtains a reference to the depth axis of the specified chart, 
            corresponding to the specified depth axis index 
            </summary>
            <param name="chart"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NDataPointAnchor">
            <summary>
            Represents an anchor, which can be attached to a data point.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataPointAnchor.#ctor">
            <summary>
            Creates a new NDataPointAnchor object with default settings.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataPointAnchor.#ctor(Nevron.Chart.NSeriesBase,System.Int32,System.Drawing.ContentAlignment,System.Drawing.StringAlignment)">
            <summary>
            Creates a new NDataPointAnchor object attached to the specified series.
            </summary>
            <param name="series">series to which the data point belongs</param>
            <param name="dataPointIndex">data point index</param>
            <param name="contentAlignment">alignment of the anchor relative to the data point</param>
            <param name="depthAlignment">depth alignment relative to the data point depth perspective</param>
        </member>
        <member name="P:Nevron.Chart.NDataPointAnchor.DataPointIndex">
            <summary>
            Gets or sets the index of the data point.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataPointAnchor.ContentAlignment">
            <summary>
            Gets or sets the anchor aligment relative to the data point.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataPointAnchor.DepthAlignment">
            <summary>
            Gets or sets the anchor depth aligment relative to the data point.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataPointAnchor.Series">
            <summary>
            Gets or sets the series to which the data point belongs.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataPointAnchor.IsVisible">
            <summary>
            Overriden to take into account the series visibility and the data point validity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDataPointAnchor.GetLocation(Nevron.Chart.NChartRenderingContext)">
            <summary>
            Overriden to obtain the projection of the aligned anchor relative to the data point in the current viewport
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NGaugeAnchor">
            <summary>
            Base class for all anchors that can attach panels to gauge panels.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGaugeAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGaugeAnchor.#ctor(Nevron.Chart.NGaugePanel)">
            <summary>
            Initializer constructor
            </summary>
            <param name="gauge"></param>
        </member>
        <member name="P:Nevron.Chart.NGaugeAnchor.Gauge">
            <summary>
            The gauge to attach to
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGaugeAnchor.IsVisible">
            <summary>
            Overriden to take into account the chart visibility
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NGaugeAxisValueAnchor">
            <summary>
            Represents an anchor, which can be anchored to a gauge axis value
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGaugeAxisValueAnchor.#ctor">
            <summary>
            Creates a new, not attached axis anchor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGaugeAxisValueAnchor.#ctor(Nevron.Chart.NGaugeAxis,Nevron.Chart.AxisValueAnchorMode,System.Double)">
            <summary>
            Creates a new axis anchor object attached to the axis value.
            </summary>
            <param name="axis"></param>
            <param name="mode"></param>
            <param name="axisValue"></param>
        </member>
        <member name="P:Nevron.Chart.NGaugeAxisValueAnchor.Axis">
            <summary>
            The axis to attach to.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGaugeAxisValueAnchor.AxisValue">
            <summary>
            The axis value.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGaugeAxisValueAnchor.Mode">
            <summary>
            Gets or sets the anchor mode. The anchor mode defines how the anchored object is displayed 
            in case the anchor value is out of the axis ruler range.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGaugeAxisValueAnchor.IsVisible">
            <summary>
            Overriden to take into account the axis visibility
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NGaugeAxisValueAnchor.GetLocation(Nevron.Chart.NChartRenderingContext)">
            <summary>
            Overriden to obtain the location of the anchor, 
            by computing the axis value projection in the current viewport
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NGaugeModelAnchor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGaugeModelAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGaugeModelAnchor.#ctor(Nevron.Chart.NGaugePanel,Nevron.GraphicsCore.NPointL)">
            <summary>
            Initializer constructor
            </summary>
            <param name="gauge"></param>
            <param name="modelPoint"></param>
        </member>
        <member name="P:Nevron.Chart.NGaugeModelAnchor.ModelPoint">
            <summary>
            Gets/sets the model point to which this anchor is attached
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGaugeModelAnchor.GetLocation(Nevron.Chart.NChartRenderingContext)">
            <summary>
            Overriden to obtain the projection of the chart model point in the current viewport
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NLegendDataItemAnchor">
            <summary>
            Represents an anchor, which can be attached to a legend data item
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendDataItemAnchor.#ctor">
            <summary>
            Create a new NLegendDataItemAnchor object 
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendDataItemAnchor.#ctor(Nevron.Chart.NLegend,System.Int32)">
            <summary>
            Creates a new NLegendDataItemAnchor with the specified settings.
            </summary>
            <param name="legend"></param>
            <param name="nLegendDataItemIndex"></param>
        </member>
        <member name="P:Nevron.Chart.NLegendDataItemAnchor.Legend">
            <summary>
            Gets/sets the legend to which to attach
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendDataItemAnchor.LegendDataItemIndex">
            <summary>
            Gets/sets the legend data item index
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendDataItemAnchor.IsVisible">
            <summary>
            Overriden to determine the visibility of the legend and the validity of the data item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NLegendDataItemAnchor.GetLocation(Nevron.Chart.NChartRenderingContext)">
            <summary>
            Overriden to obtain the location of the anchor the current viewport
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NAnchor">
            <summary>
            The NAnchor class servers as base class for all anchors
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAnchor.#ctor">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAnchor.IsVisible">
            <summary>
            Must override to determine the anchor visibility
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NAnchor.GetLocation(Nevron.Chart.NChartRenderingContext)">
            <summary>
            Must override to provide the anchor location
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NAnchor.ReplaceForeignUniqueIds(System.Collections.Hashtable,System.Boolean)">
            <summary>
            Replaces any foreign unique ids (references to other nodes)
            </summary>
            <param name="mapUIds">map of uids which is used to find the new foreign uid value</param>
            <param name="makeNotFoundEmpty">indicates whether the not found foreign uids must be set to Guid.Empty</param>
        </member>
        <member name="T:Nevron.Chart.NCartesianPanelAnchor">
            <summary>
            Represents an anchor, which can be attached to a panel
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCartesianPanelAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCartesianPanelAnchor.#ctor(Nevron.Chart.NPanel,Nevron.GraphicsCore.NPointL,System.Drawing.ContentAlignment)">
            <summary>
            Initializer constructor
            </summary>
            <param name="panel">the panel to attach to</param>
            <param name="location">location in the panel</param>
            <param name="contentAlignment">alignment of the location relative to the panel</param>
        </member>
        <member name="P:Nevron.Chart.NCartesianPanelAnchor.Location">
            <summary>
            Gets/set the location within the panel
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCartesianPanelAnchor.ContentAlignment">
            <summary>
            Gets/sets the alignment of the location relative to the panel
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCartesianPanelAnchor.IsVisible">
            <summary>
            Overriden to determine the visibility of the panel
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NCartesianPanelAnchor.GetLocation(Nevron.Chart.NChartRenderingContext)">
            <summary>
            Overriden to obtain the location of the anchor the current viewport
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NPanelAnchor">
            <summary>
            Represents an anchor, which can be attached to a panel
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPanelAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPanelAnchor.#ctor(Nevron.Chart.NPanel)">
            <summary>
            Initializer constructor
            </summary>
            <param name="panel">the panel to attach to</param>
        </member>
        <member name="P:Nevron.Chart.NPanelAnchor.Panel">
            <summary>
            Gets/sets the panel to which the anchor is attached
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPanelAnchor.IsVisible">
            <summary>
            Overriden to determine the visibility of the panel
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NPolarPanelAnchor">
            <summary>
            Represents an anchor, which can be attached to a panel
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPolarPanelAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPolarPanelAnchor.#ctor(Nevron.Chart.NPanel,Nevron.GraphicsCore.NLength,Nevron.GraphicsCore.Alignment,Nevron.GraphicsCore.NAngle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="panel"></param>
            <param name="offset"></param>
            <param name="alignment"></param>
            <param name="angle"></param>
        </member>
        <member name="P:Nevron.Chart.NPolarPanelAnchor.Angle">
            <summary>
            Gets or sets the angle
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPolarPanelAnchor.AngleXML">
            <summary>
            Implements angle serialization in XML
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPolarPanelAnchor.Alignment">
            <summary>
            Gets or sets the alignemnt of the anchor relative to the panel center and radius
            </summary>
            <remarks>
            When Alignment is Near the offset is treated as distance from the center.
            When Alignment is Far the offset is treated as distance from the radius towards the center
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NPolarPanelAnchor.Offset">
            <summary>
            Gets or sets the offset of the anchor from the center
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPolarPanelAnchor.IsVisible">
            <summary>
            Overriden to determine the visibility of the panel
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NPolarPanelAnchor.GetLocation(Nevron.Chart.NChartRenderingContext)">
            <summary>
            Overriden to obtain the location of the anchor the current viewport
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NScrollBar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBar.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBar.BeginValue">
            <summary>
            Gets the scrollbar begin value from paging view
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBar.EndValue">
            <summary>
            Gets the scrollbar end value from paging view
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBar.Visible">
            <summary>
            Controls the visibility of the scrollbar.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBar.ShowSliders">
            <summary>
            Gets or sets a value indicating whether the thumb sliders are visible
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBar.ViewRange">
            <summary>
            Gets the view range of the scrollbar
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBar.ScrollBarHeight">
            <summary>
            The height of the scrollbar in NLength format
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBar.SliderButtonWidth">
            <summary>
            Gets or sets the width of the slider buttons 
            </summary>
            <remarks>
            This property is discarded if the sliders are not visible
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NScrollBar.MinThumbWidth">
            <summary>
            The height of the scrollbar in NLength format
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBar.TimerInterval">
            <summary>
            Gets or sets the timer interval (in ms).
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBar.ShowResetButtonAtEnd">
            <summary>
            When set to true the scroll bar will be positioned at the end of the scrollbar
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBar.LeftScrollButton">
            <summary>
            The left scrollbar button.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBar.RightScrollButton">
            <summary>
            The right scrollbar button.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBar.LeftStripeButton">
            <summary>
            The right scrollbar button.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBar.RightStripeButton">
            <summary>
            The right scrollbar button.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBar.ResetButton">
            <summary>
            The reset button of the scrollbar.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBar.ThumbButton">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBar.LeftSliderButton">
            <summary>
            Gets the left slider button
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBar.RightSliderButton">
            <summary>
            Gets the right slider button
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBar.DragMode">
            <summary>
            Gets the current scrollbar drag mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBar.Name">
            <summary>
            User defined name of the node
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScrollBar.GetContentRange">
            <summary>
            Get the difference between the mininum and maximum scroller values
            </summary>
            <returns></returns>
        </member>
        <member name="E:Nevron.Chart.NScrollBar.Reset">
            <summary>
            Occurs when the user presses the scrollbar reset button.
            </summary>
        </member>
        <member name="E:Nevron.Chart.NScrollBar.BeginValueChanged">
            <summary>
            Occurs when the scroller value has changed.
            </summary>
        </member>
        <member name="E:Nevron.Chart.NScrollBar.EndValueChanged">
            <summary>
            Occurs when the scroller large change has changed.
            </summary>
        </member>
        <member name="E:Nevron.Chart.NScrollBar.ViewRangeChanged">
            <summary>
            Occurs when the scroller view range has changed.
            </summary>
        </member>
        <member name="E:Nevron.Chart.NScrollBar.DragModeChanged">
            <summary>
            Occurs when the scrollbar drag mode has changed
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScrollBar.OnReset">
            <summary>
            Raises the Reset event.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScrollBar.FireBeginValueChanged">
            <summary>
            Raises the ValueChanged event.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScrollBar.FireViewRangeChanged">
            <summary>
            Raises the ViewRangeChanged event
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScrollBar.FireEndValueChanged">
            <summary>
            Raises the ValueChanged event.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScrollBar.FireScrollbarDragModeChanged">
            <summary>
            Raises the DragModeChanged event
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScrollBar.OnRangeChanged(Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Informs scrollbar observers that the range has changed
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScrollBar.HitTest(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NRectangleF,System.Boolean,System.Collections.Generic.List{Nevron.Dom.INNode})">
            <summary>
            Performs a hit test.
            </summary>
            <param name="context"></param>
            <param name="rect"></param>
            <param name="containsOrIntersect"></param>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.Chart.NScrollBar.OnTimerTick">
            <summary>
            Occurs when the timer ticks
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScrollBar.OnTimerStop">
            <summary>
            Occurs when the timer is stopped
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScrollBar.OnTimerStart">
            <summary>
            Occurs when the timer is started
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScrollBarArrowButton">
            <summary>
            Represents a scroll bar arrow button.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBarArrowButton.ArrowFillStyle">
            <summary>
            Gets or sets the fill style applied to the arrow.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBarArrowButton.ArrowBorderStyle">
            <summary>
            Gets or sets the border style applied to the arrow.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBarArrowButton.ArrowButtonType">
            <summary>
            Returns the arrow type of the button.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScrollBarButton">
            <summary>
            Represents a scrollbar button.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScrollBarElement">
            <summary>
            Base for all scrollbar elements.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScrollBarResetButton">
            <summary>
            Summary description for NScrollBarResetButton.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBarResetButton.Visible">
            <summary>
            Controls the visibility of the reset button.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScrollBarResetButton.ResetBorderStyle">
            <summary>
            Gets or sets the border style of the reset mark.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScrollBarSliderButton.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScrollBarSliderButton.#ctor(System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="left"></param>
        </member>
        <member name="P:Nevron.Chart.NScrollBarStripeButton.StripeButtonType">
            <summary>
            Returns the type of this stripe button.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NModel1DToScale1DTransformation">
            <summary>
            Converts coordinates from model to scale.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NModel1DToScale1DTransformation.#ctor(Nevron.Chart.NChart,System.Int32)">
            <summary>
            Creates a new model to scale transformation based on a chart and axis.
            </summary>
            <param name="chart"></param>
            <param name="axisId"></param>
        </member>
        <member name="M:Nevron.Chart.NModel1DToScale1DTransformation.Transform(System.Single,System.Double@)">
            <summary>
            Transforms a model coordinate to scale coordinate
            </summary>
            <param name="valueModel"></param>
            <param name="value"></param>
        </member>
        <member name="T:Nevron.Chart.NModel3DToScale1DTransformation">
            <summary>
            Converts coordinates from model to scale.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NModel3DToScale1DTransformation.#ctor(Nevron.Chart.NChart,System.Int32)">
            <summary>
            Creates a model to scale tranformation for the specified chart and axis.
            </summary>
            <param name="chart"></param>
            <param name="axisId"></param>
        </member>
        <member name="M:Nevron.Chart.NModel3DToScale1DTransformation.Transform(Nevron.GraphicsCore.NVector3DF,System.Double@)">
            <summary>
            Transforms the given model point to its scale coordinate.
            </summary>
            <param name="pointModel"></param>
            <param name="value"></param>
        </member>
        <member name="T:Nevron.Chart.NModel3DToScale2DTransformation">
            <summary>
            Converts coordinates from model to scale.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NModel3DToScale2DTransformation.#ctor(Nevron.Chart.NChart,System.Int32,System.Int32)">
            <summary>
            Creates a new model to scale transformation based on a chart and a set of two non colinear axes.
            </summary>
            <param name="chart"></param>
            <param name="horizontalAxisId"></param>
            <param name="verticalAxisId"></param>
        </member>
        <member name="M:Nevron.Chart.NModel3DToScale2DTransformation.Transform(Nevron.GraphicsCore.NVector3DF,Nevron.GraphicsCore.NVector2DD@)">
            <summary>
            Transforms a point from model to scale coordinates.
            </summary>
            <param name="pointModel"></param>
            <param name="pointScale"></param>
        </member>
        <member name="T:Nevron.Chart.NModel3DToScale3DTransformation">
            <summary>
            Converts coordinates from model to scale.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NModel3DToScale3DTransformation.#ctor(Nevron.Chart.NChart,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new model to scale transformation based on a chart and a set of three non colinear axes.
            </summary>
            <param name="chart"></param>
            <param name="horizontalAxisId"></param>
            <param name="verticalAxisId"></param>
            <param name="depthAxisId"></param>
        </member>
        <member name="M:Nevron.Chart.NModel3DToScale3DTransformation.Transform(Nevron.GraphicsCore.NVector3DF,Nevron.GraphicsCore.NVector3DD@)">
            <summary>
            Transforms a point from model to scale coordinates.
            </summary>
            <param name="pointModel"></param>
            <param name="pointScale"></param>
        </member>
        <member name="T:Nevron.Chart.NModel3DToViewTransformation">
            <summary>
            Converts coordinates from model to view space.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NModel3DToViewTransformation.#ctor(Nevron.Chart.NChart)">
            <summary>
            Initializer constructor
            </summary>
            <param name="chart"></param>
        </member>
        <member name="M:Nevron.Chart.NModel3DToViewTransformation.#ctor(Nevron.GraphicsCore.NProjection)">
            <summary>
            
            </summary>
            <param name="projection"></param>
        </member>
        <member name="M:Nevron.Chart.NModel3DToViewTransformation.#ctor(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NProjection)">
            <summary>
            Creates a new model to view transformation based on the passed projection.
            </summary>
            <param name="context"></param>
            <param name="projection"></param>
        </member>
        <member name="M:Nevron.Chart.NModel3DToViewTransformation.Transform(Nevron.GraphicsCore.NVector3DF,Nevron.GraphicsCore.NPointF@)">
            <summary>
            Transforms a point in model coordinates to view coordinates.
            </summary>
            <param name="pointModel"></param>
            <param name="pointView"></param>
        </member>
        <member name="T:Nevron.Chart.NScale1DToModel3DTransformation">
            <summary>
            Converts coordinates from scale to model.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScale1DToModel3DTransformation.#ctor(Nevron.Chart.NChart,System.Int32)">
            <summary>
            Creates a new scale to model transformation based on a chart and axis.
            </summary>
            <param name="chart"></param>
            <param name="axisId"></param>
        </member>
        <member name="T:Nevron.Chart.NScale1DToViewTransformation">
            <summary>
            Converts coordinates from scale to view space.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScale1DToViewTransformation.#ctor(Nevron.Chart.NChartRenderingContext,Nevron.Chart.NChart,System.Int32)">
            <summary>
            Creates a new scale to view transformation based on a chart and axis.
            </summary>
            <param name="context"></param>
            <param name="chart"></param>
            <param name="axisId"></param>
        </member>
        <member name="M:Nevron.Chart.NScale1DToViewTransformation.Transform(System.Double,Nevron.GraphicsCore.NPointF@)">
            <summary>
            Transforms an axis scale coordinate to view coordinate.
            </summary>
            <param name="value"></param>
            <param name="pointView"></param>
        </member>
        <member name="M:Nevron.Chart.NScale1DToViewTransformation.Transform(System.Double[],Nevron.GraphicsCore.NPointF[]@)">
            <summary>
            Transforms axis scale coordinates to view coordinates.
            </summary>
            <param name="values"></param>
            <param name="pointViews"></param>
        </member>
        <member name="T:Nevron.Chart.NScale3DToModel3DTransformation">
            <summary>
            Converts coordinates from scale to model.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScale3DToModel3DTransformation.#ctor(Nevron.Chart.NChart,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new scale to model transformation for the specified chart and a set of three non-colinear axes.
            </summary>
            <param name="chart"></param>
            <param name="horizontalAxisId"></param>
            <param name="verticalAxisId"></param>
            <param name="depthAxisId"></param>
        </member>
        <member name="M:Nevron.Chart.NScale3DToModel3DTransformation.Transform(Nevron.GraphicsCore.NVector3DD,Nevron.GraphicsCore.NVector3DF@)">
            <summary>
            Transforms a scale point to model coordinates.
            </summary>
            <param name="vecPointScale"></param>
            <param name="vecPointModel"></param>
        </member>
        <member name="T:Nevron.Chart.NScale2DToModel3DTransformation">
            <summary>
            Converts coordinates from scale to model.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScale2DToModel3DTransformation.#ctor(Nevron.Chart.NChart,System.Int32,System.Int32)">
            <summary>
            Creates a new scale to model transformation for the specified chart and a set of three non-colinear axes.
            </summary>
            <param name="chart"></param>
            <param name="horizontalAxisId"></param>
            <param name="verticalAxisId"></param>
        </member>
        <member name="M:Nevron.Chart.NScale2DToModel3DTransformation.Transform(Nevron.GraphicsCore.NVector2DD,Nevron.GraphicsCore.NVector3DF@)">
            <summary>
            Transforms a scale point to model coordinates.
            </summary>
            <param name="vecPointScale"></param>
            <param name="vecPointModel"></param>
        </member>
        <member name="T:Nevron.Chart.NScale3DToViewTransformation">
            <summary>
            Converts coordinates from 3D scale to view space.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScale3DToViewTransformation.#ctor(Nevron.Chart.NChart,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="chart"></param>
            <param name="horizontalAxisId"></param>
            <param name="verticalAxisId"></param>
            <param name="depthAxisId"></param>
        </member>
        <member name="M:Nevron.Chart.NScale3DToViewTransformation.Transform(Nevron.GraphicsCore.NVector3DD,Nevron.GraphicsCore.NPointF@)">
            <summary>
            Transforms the point from scale to view
            </summary>
            <param name="pointScale"></param>
            <param name="pointView"></param>
        </member>
        <member name="M:Nevron.Chart.NScale3DToViewTransformation.Transform(Nevron.GraphicsCore.NVector3DD[],Nevron.GraphicsCore.NPointF[]@)">
            <summary>
            Transforms the points from scale to view
            </summary>
            <param name="pointScales"></param>
            <param name="pointViews"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Nevron.Chart.NScale2DToViewTransformation">
            <summary>
            Converts coordinates from scale to view space.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScale2DToViewTransformation.#ctor(Nevron.Chart.NChart,System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="chart"></param>
            <param name="horizontalAxisId"></param>
            <param name="verticalAxisId"></param>
        </member>
        <member name="M:Nevron.Chart.NScale2DToViewTransformation.#ctor(Nevron.Chart.NChartRenderingContext,Nevron.Chart.NChart,System.Int32,System.Int32)">
            <summary>
            Creates a new scale to view tranformation based on a chart and a set of two non-colinear axes.
            </summary>
            <param name="context"></param>
            <param name="chart"></param>
            <param name="horizontalAxisId"></param>
            <param name="verticalAxisId"></param>
        </member>
        <member name="T:Nevron.Chart.NViewToModel1DTransformation">
            <summary>
            Converts coordinates from view to model.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NViewToModel1DTransformation.#ctor(Nevron.Chart.NChart,System.Int32,System.Int32)">
            <summary>
            Creates a new view to model 1D tranformation for the specified chart and axis.
            </summary>
            <param name="chart"></param>
            <param name="axisId1"></param>
            <param name="axisId2"></param>
        </member>
        <member name="M:Nevron.Chart.NViewToModel1DTransformation.Transform(Nevron.GraphicsCore.NPointF,System.Single@)">
            <summary>
            
            </summary>
            <param name="pointView"></param>
            <param name="modelCoordinate"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NViewToModel2DTransformation">
            <summary>
            Converts coordinates from view to model.
            </summary>
            <remarks>
            This transformation converts coordinates from view (client) coordinates to model coordinates defined
            by a set of two non colinear axes.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NViewToModel2DTransformation.#ctor(Nevron.Chart.NChart,System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="chart"></param>
            <param name="horizontalAxisId"></param>
            <param name="verticalAxisId"></param>
        </member>
        <member name="M:Nevron.Chart.NViewToModel2DTransformation.#ctor(Nevron.Chart.NChartRenderingContext,Nevron.Chart.NChart,System.Int32,System.Int32)">
            <summary>
            Creates a new view to model 2D tranformation for the specified chart, horizontal and vertical axes.
            </summary>
            <param name="context"></param>
            <param name="chart"></param>
            <param name="horizontalAxisId"></param>
            <param name="verticalAxisId"></param>
        </member>
        <member name="M:Nevron.Chart.NViewToModel2DTransformation.Transform(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NVector3DF@)">
            <summary>
            Transforms the point from view to model coordinates.
            </summary>
            <param name="pointView"></param>
            <param name="pointModel"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NViewToModel3DTransformation">
            <summary>
            Converts coordinates from view to model.
            </summary>
            <remarks>
            This transformation converts points in 2D view space to model coordinates specifed by a set of horizontal, vertical and depth axes.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NViewToModel3DTransformation.#ctor(Nevron.Chart.NChart,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Converts coordinates from view to scale.
            </summary>
            <param name="chart"></param>
            <param name="horizontalAxisId"></param>
            <param name="verticalAxisId"></param>
            <param name="depthAxisId"></param>
            <param name="depthValue"></param>
        </member>
        <member name="T:Nevron.Chart.NViewToScale1DTransformation">
            <summary>
            Converts coordinates from view to scale.
            </summary>
            <remarks>
            This transformation converts points in 2D view space to a coordinate on an axis (scale coordinates).
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NViewToScale1DTransformation.#ctor(Nevron.Chart.NChart,System.Int32,System.Int32)">
            <summary>
            Creates a new view to scale 1D transformation for the specified chart and axis.
            </summary>
            <param name="chart"></param>
            <param name="axisId1"></param>
            <param name="axisId2"></param>
        </member>
        <member name="M:Nevron.Chart.NViewToScale1DTransformation.Transform(Nevron.GraphicsCore.NPointF,System.Double@)">
            <summary>
            Transforms the point in view coordinates to the corresponding scale coordinate.
            </summary>
            <param name="pointView"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NViewToScale1DTransformation.TransformPoints(Nevron.GraphicsCore.NPointF[],System.Double[]@)">
            <summary>
            Transforms the point in view coordinates to the corresponding scale coordinate.
            </summary>
            <param name="pointViews"></param>
            <param name="scaleCoordinates"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NViewToScale2DTransformation">
            <summary>
            Converts coordinates from view to scale.
            </summary>
            <remarks>
            This transformation converts points in 2D view space to coordinates on a set of two non-colinear axes (scale coordinates).
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NViewToScale2DTransformation.#ctor(Nevron.Chart.NChart,System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="chart"></param>
            <param name="horizontalAxisId"></param>
            <param name="verticalAxisId"></param>
        </member>
        <member name="M:Nevron.Chart.NViewToScale2DTransformation.#ctor(Nevron.Chart.NChartRenderingContext,Nevron.Chart.NChart,System.Int32,System.Int32)">
            <summary>
            Creates a new view to model 1D tranformation for the specified chart and axis.
            </summary>
            <param name="context"></param>
            <param name="chart"></param>
            <param name="horizontalAxisId"></param>
            <param name="verticalAxisId"></param>
        </member>
        <member name="M:Nevron.Chart.NViewToScale2DTransformation.Transform(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NVector2DD@)">
            <summary>
            Transforms the point in view coordinates to the corresponding scale coordinates.
            </summary>
            <param name="pointView"></param>
            <param name="pointScale"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NViewToScale2DTransformation.TransformPoints(Nevron.GraphicsCore.NPointF[],Nevron.GraphicsCore.NVector2DD[]@)">
            <summary>
            Transforms the points in view coordinates to the corresponding scale coordinates.
            </summary>
            <param name="pointViews"></param>
            <param name="pointScales"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NViewToScale3DTransformation">
            <summary>
            Converts coordinates from view to scale.
            </summary>
            <remarks>
            This transformation converts points in 2D view space to coordinates on a set of two non-colinear axes (scale coordinates).
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NViewToScale3DTransformation.#ctor(Nevron.Chart.NChart,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Creates a new view to scale 3D transformation for the specified chart horizontal, vertical and depth axis.
            </summary>
            <param name="chart"></param>
            <param name="horizontalAxisId"></param>
            <param name="verticalAxisId"></param>
            <param name="depthAxisId"></param>
            <param name="depthValue"></param>
        </member>
        <member name="M:Nevron.Chart.NViewToScale3DTransformation.Transform(Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NVector3DD@)">
            <summary>
            Transforms the point in view coordinates to the corresponding scale coordinates.
            </summary>
            <param name="pointView"></param>
            <param name="pointScale"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NViewToScale3DTransformation.TransformPoints(Nevron.GraphicsCore.NPointF[],Nevron.GraphicsCore.NVector3DD[]@)">
            <summary>
            Transforms the points in view coordinates to the corresponding scale coordinates.
            </summary>
            <param name="pointViews"></param>
            <param name="pointScales"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NClearVerb">
            <summary>
            Represents the clear document verb
            </summary>
        </member>
        <member name="T:Nevron.Chart.NExportImageVerb">
            <summary>
            Represents the export Image verb
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLoadFromFileVerb">
            <summary>
            Summary description for NLoadFromFile.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NPrintVerb">
            <summary>
            Summary description for NPrintManagerVerb.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NSaveToFileVerb">
            <summary>
            Summary description for NSaveToFileVerb.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NShowDataBindingWizardVerb">
            <summary>
            Summary description for NShowDataBindingWizardVerb.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NShowEditorVerb">
            <summary>
            Summary description for NShowEditorVerb.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NShowWizardVerb">
            <summary>
            Summary description for NShowWizardVerb.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NVerb">
            <summary>
            Base verb abstract class
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVerb.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NVerb.ChartDesigner">
            <summary>
            Obtains a reference to a chart designer
            </summary>
        </member>
        <member name="P:Nevron.Chart.NVerb.DesignerVerb">
            <summary>
            Obtains the designer verb for this verb
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVerb.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Chart.NVerb.CreateNonSerializedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVerb.GetReferenceProvider">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NVerb.Text">
            <summary>
            Obtains the text associated with this verb.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVerb.Execute">
            <summary>
            Executes the verb.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NVerbCollection">
            <summary>
            Holds designer verbs.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NGaugeSelectorTypeEditor">
            <summary>
            Summary description for NChartSelectorTypeEditor.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAxisSelectorTypeEditor">
            <summary>
            Summary description for NAxisSelectorTypeEditor.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NChartSelectorTypeEditor">
            <summary>
            Summary description for NChartSelectorTypeEditor.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDomSelectorTypeEditor">
            <summary>
            Summary description for NDomSelectorTypeEditor.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLegendSelectorTypeEditor">
            <summary>
            Summary description for NLegendSelectorTypeEditor.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NPanelSelectorTypeEditor">
            <summary>
            Summary description for NPanelSelectorTypeEditor.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NSeriesSelectorTypeEditor">
            <summary>
            Summary description for NSeriesSelectorTypeEditor.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NPanelTypeEditor">
            <summary>
            Summary description for NPanelTypeEditor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPanelTypeEditor.Edit(Nevron.Chart.NPanel,Nevron.Chart.NPanel@)">
            <summary>
            Edits the specified panel
            </summary>
            <param name="panel"></param>
            <param name="panelResult"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NChartDocumentState.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartDocumentState.#ctor(Nevron.Chart.NChartDocumentState)">
            <summary>
            Initializer constructor
            </summary>
            <param name="documentState"></param>
        </member>
        <member name="T:Nevron.Chart.NChartElement">
            <summary>
            Summary description for NChartSceneTreeItem.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartElement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartElement.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NChartElement.GetAttributeByName(System.String)">
            <summary>
            Gets a child or descendant attribute by its name
            </summary>
            <param name="attributeName">child name or full attribute name</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NChartElement.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NChartElement.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
            <summary>
            Sets a child or descendant attribute by its name
            </summary>
            <param name="attributeName"></param>
            <param name="attribute"></param>
        </member>
        <member name="P:Nevron.Chart.NChartElement.UniqueId">
            <summary>
            Gets/sets the unique id of the element
            </summary>
            <remarks>
            The set implementation has been provided for Cloning with new Ids. Do not call it directly.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NChartElement.Id">
            <summary>
            Gets/sets the id of the element
            </summary>
            <remarks>
            The set implementation has been provided, so that the document can assign a valid id. Do not call it directly
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NChartElement.Tag">
            <summary>
            User defined data associated with the node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartElement.Name">
            <summary>
            User defined name of the node
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartElement.CloneWithNewUniqueId(System.Collections.Hashtable)">
            <summary>
            Creates an identical copy of the element, which differs only by the element unique id
            </summary>
            <param name="mapUIds">map of uids, which must be populated with the made unique id changes</param>
            <returns>cloning, which differs by unique Id only</returns>
        </member>
        <member name="M:Nevron.Chart.NChartElement.ReplaceForeignUniqueIds(System.Collections.Hashtable,System.Boolean)">
            <summary>
            Replaces any foreign unique ids (references to other nodes)
            </summary>
            <param name="mapUIds">map of uids which is used to find the new foreign uid value</param>
            <param name="makeNotFoundEmpty">indicates whether the not found foreign uids must be set to Guid.Empty</param>
        </member>
        <member name="M:Nevron.Chart.NChartElement.Nevron#Dom#INElement#RegisterElement(Nevron.Dom.NElementIndex)">
            <summary>
            Register the element in the element index
            </summary>
            <param name="jjtC"></param>
        </member>
        <member name="M:Nevron.Chart.NChartElement.Nevron#Dom#INElement#UnregisterElement(Nevron.Dom.NElementIndex)">
            <summary>
            Unregister the element from the element index
            </summary>
            <param name="KjtC"></param>
        </member>
        <member name="M:Nevron.Chart.NChartElement.OnAttributePropertyChanging(System.String,System.String,System.Object)">
            <summary>
            Called by child or descendants attributes when an attribute property is changing
            </summary>
            <param name="attributeFullName">full attribute name</param>
            <param name="propertyName">attribute property</param>
            <param name="newValue">new property value</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Chart.NChartElement.OnAttributePropertyChanged(System.String,System.String)">
            <summary>
            Called by child or descendants attributes when an attribute property has changed
            </summary>
            <param name="attributeFullName">full attribute name</param>
            <param name="propertyName">attribute property</param>
        </member>
        <member name="M:Nevron.Chart.NChartElement.OnAttributeChanged(System.String)">
            <summary>
            Called by child or descendants attributes when an attribute has changed
            </summary>
            <param name="attributeFullName">full attribute name</param>
        </member>
        <member name="M:Nevron.Chart.NChartElement.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Updates the references stored by the object
            </summary>
            <remarks>
            Overriden to cashe references to the document, layer and history service. 
            </remarks>
            <param name="provider"></param>
        </member>
        <member name="P:Nevron.Chart.NChartElement.Document">
            <summary>
            Obtains a reference to the document in which this element resides
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartElement.ToString">
            <summary>
            Overriden to return the element name
            </summary>
            <returns>the name of the element</returns>
        </member>
        <member name="M:Nevron.Chart.NChartElement.StartTransaction(System.String)">
            <summary>
            Starts a new transaction
            </summary>
            <remarks>
            Safely calls the StartTransaction method of the history service (if connected to history service)
            </remarks>
            <param name="description">transaction description</param>
        </member>
        <member name="M:Nevron.Chart.NChartElement.Commit">
            <summary>
            Commits the current transaction
            </summary>
            <remarks>
            Safely calls the Commit method of the history service (if connected to history service)
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NChartElement.Rollback">
            <summary>
            Rolls back the current transaction
            </summary>
            <remarks>
            Safely calls the Rollback method of the history service (if connected to history service)
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NChartElement.RecordProperty(System.String)">
            <summary>
            Records the state of the specified property before it is changed
            </summary>
            <remarks>
            Safely calls the RecordPropertyChange method of the history service (if connected to history service)
            </remarks>
            <param name="propertyName">property name</param>
        </member>
        <member name="M:Nevron.Chart.NChartElement.StartProperty(System.String)">
            <summary>
            Records the state of the specified property before it is changed and pauses the history service. Pair it with the EndProperty method.
            </summary>
            <remarks>
            Safely calls the RecordPropertyChange method of the history service (if connected to history service) and pauses it.
            </remarks>
            <param name="propertyName">property name</param>
        </member>
        <member name="M:Nevron.Chart.NChartElement.EndProperty">
            <summary>
            Resumes the history service. Pair it with the StartProperty method.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartElement.RecordState(System.String,System.String)">
            <summary>
            Records the entire state of the node
            </summary>
            <remarks>
            Safely calls the RecordElementStateChange method of the history service (if connected to a history service).
            When this operation is undone or redone from history, the history will call the 
            OnStateChangingFromHistory and OnStateChangedFromHistory methods with the specified hint.
            </remarks>
            <param name="description">history operation description</param>
            <param name="hint">state change hint</param>
        </member>
        <member name="M:Nevron.Chart.NChartElement.RecordState(System.String,System.String[],System.String)">
            <summary>
            Records the state of the specified node fields
            </summary>
            <remarks>
            Safely calls the RecordElementStateChange method of the history service (if connected to a history service).
            When this operation is undone or redone from history, the history will call the 
            OnStateChangingFromHistory and OnStateChangedFromHistory methods with the specified hint.
            </remarks>
            <param name="description">history operation description</param>
            <param name="fields">fields to record</param>
            /// <param name="hint">state change hint</param>
        </member>
        <member name="M:Nevron.Chart.NChartElement.PauseHistoryService">
            <summary>
            Safely pauses the history service
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartElement.ResumeHistoryService">
            <summary>
            Safely resumes the history service
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartElement.GetElementFromUniqueId(System.Guid@)">
            <summary>
            Obtains an context tree item from the specified unique id
            </summary>
            <param name="uid">unique id of the object</param>
            <returns>context tree item</returns>
        </member>
        <member name="T:Nevron.Chart.NChartElementCollection">
            <summary>
            Base of all chart collections
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartElementCollection.#ctor(System.Type)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartElementCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartElementCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartElementCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartElementCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:Nevron.Chart.NChartElementCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartElementCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartElementCollection.Add(System.Object)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NChartElementCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartElementCollection.Contains(System.Object)">
            <summary>
            Determines whether the IList contains a specific value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NChartElementCollection.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the collection.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NChartElementCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the collection at the specified position.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.NChartElementCollection.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the collectino.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.NChartElementCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Nevron.Chart.NChartElementCollection.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NChartElementComposite">
            <summary>
            Summary description for NChartElementComposite.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartElementCompositeImpl.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            Overriden to store a reference to the element document
            </summary>
            <param name="provider"></param>
        </member>
        <member name="T:Nevron.Chart.NChartElementContainer">
            <summary>
            Summary description for NAttributeContainer.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartElementContainer.#ctor">
            <summary>
            Deafault constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartElementContainer.GetChildFromId(System.Int32)">
            <summary>
            Obtains a child element by its id
            </summary>
            <param name="id">id of the node</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Chart.NChartElementContainer.GetChildFromUniqueId(System.Guid)">
            <summary>
            Obtains a child element by its unique id
            </summary>
            <param name="uid">unique id of the element</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Chart.NChartElementContainer.GetDescendantFromId(System.Int32,System.Int32)">
            <summary>
            Obtains a element node by its id
            </summary>
            <param name="id">id of the element</param>
            <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Chart.NChartElementContainer.GetDescendantFromUniqueId(System.Guid,System.Int32)">
            <summary>
            Obtains a child element by its unique id
            </summary>
            <param name="uid">unique id of the node</param>
            <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Chart.NChartElementContainer.IndexOfChild(Nevron.Dom.INNode)">
            <summary>
            Gets the index of the specified node in the container
            </summary>
            <param name="node">the node to locate</param>
            <returns>index of the node</returns>
        </member>
        <member name="M:Nevron.Chart.NChartElementContainer.GetChildAt(System.Int32)">
            <summary>
            Gets the child node at the specified index
            </summary>
            <param name="index">index</param>
            <returns>node at the specified index</returns>
        </member>
        <member name="M:Nevron.Chart.NChartElementContainer.SetChildIndex(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Sets a new index of the specified child node
            </summary>
            <param name="node">node whose index to change</param>
            <param name="index">new index</param>
            <returns>previous node index</returns>
        </member>
        <member name="M:Nevron.Chart.NChartElementContainer.IsChild(Nevron.Dom.INNode)">
            <summary>
            Determines whether the specified node is a child node for this container
            </summary>
            <param name="node">node to check</param>
            <returns>true if it is a child node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Chart.NChartElementContainer.ChildrenCount(Nevron.Filters.INFilter)">
            <summary>
            Returns the number of child nodes which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <returns>children count, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Chart.NChartElementContainer.Children(Nevron.Filters.INFilter)">
            <summary>
            Obtains the child nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Chart.NChartElementContainer.AccumulateChildren(Nevron.Filters.INFilter,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the children contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="list">list to which to append the child nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Chart.NChartElementContainer.IsDescendant(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Queries whether the specified node is a descendant of this node
            </summary>
            <param name="node">node to look for</param>
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>true if the node is a descendant node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Chart.NChartElementContainer.DescendantsCount(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Returns the number of descendant nodes, which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>count of descendants, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Chart.NChartElementContainer.Descendants(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Obtains the descentant nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Chart.NChartElementContainer.AccumulateDescendants(Nevron.Filters.INFilter,System.Int32,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the descendants contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <param name="list">list to which to append the descendant nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Chart.NChartElementContainer.GetEnumerator(Nevron.Filters.INFilter)">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Chart.NChartElementContainer.GetEnumerator">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <returns>node enumerator</returns>
        </member>
        <member name="T:Nevron.Chart.NChartNode">
            <summary>
            The base of all chart nodes.
            </summary> 
        </member>
        <member name="M:Nevron.Chart.NChartNode.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartNode.Clone">
            <summary>
            Creates an identical copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NChartNode.ParentNode">
            <summary>
            Obtains the parent node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartNode.RootNode">
            <summary>
            Obtains the root of this node
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartNode.OnPropertyChanging(System.String,System.Object)">
            <summary>
            General property changing handler, which fires the NodePropertyChanging event
            </summary>
            <param name="propertyName">name of the property which is chaning</param>
            <param name="newValue">new property value</param>
            <returns>true if the change is acceptable, otherwise false</returns>
        </member>
        <member name="M:Nevron.Chart.NChartNode.OnPropertyChanged(System.String)">
            <summary>
            General property changed handler, which fires the NodePropertyChanged event
            </summary>
            <param name="propertyName">name of the property which has chaned</param>
        </member>
        <member name="T:Nevron.Chart.NChartNodeCollection">
            <summary>
            Summary description for NNodeCollection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartNodeCollection.#ctor(System.Type)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartNodeCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartNodeCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartNodeCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartNodeCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:Nevron.Chart.NChartNodeCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartNodeCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartNodeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartNodeCollection.Add(System.Object)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NChartNodeCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartNodeCollection.Contains(System.Object)">
            <summary>
            Determines whether the IList contains a specific value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NChartNodeCollection.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the collection.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NChartNodeCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the collection at the specified position.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.NChartNodeCollection.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the collectino.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.NChartNodeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:Nevron.Chart.NChartNodeComposite">
            <summary>
            Summary description for NChartNodeComposite.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDocument">
            <summary>
            Base class of winforms and webforms chart controls.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocument.Settings">
            <summary>
            Gets or sets the settins object of the document controlling the appearance related settings 
            of the chart document
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocument.Charts">
            <summary>
            Gets the charts contained in this document
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocument.Legends">
            <summary>
            Gets the legends contained in this document
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocument.Watermarks">
            <summary>
            Gets the watermarks contained in this document
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocument.Labels">
            <summary>
            Gets the labels contained in this document
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocument.Gauges">
            <summary>
            Gets the gauges contained in this document
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocument.NumericDisplays">
            <summary>
            Gets the numeric displays contained in this document
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocument.StateIndicators">
            <summary>
            Gets the state indicators contained in this document
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocument.StyleSheet">
            <summary>
            Gets the chart stylesheet
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocument.RootPanel">
            <summary>
            The root panel of the document
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocument.BackgroundStyle">
            <summary>
            Gets or sets the background style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocument.InteractivityStyle">
            <summary>
            Gets or sets the background interactivity style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocument.AnimationsStyle">
            <summary>
            Gets or sets the background animations style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocument.State">
            <summary>
            Gets or sets a chart document state object
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocument.AutoRefresh">
            <summary>
            When set to true the control will automatically invalidate when a property changes.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocument.HitTestOverlayElements">
            <summary>
            Whether to include ovelay elements (like range selections and axis cursors) in the hit test
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocument.CurrentRenderingContext">
            <summary>
            Gets the current chart rendering context
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDocument.Lock">
            <summary>
            Locks this document from concurrent access from other threads.
            </summary>
            <remarks>
            You need to call the Lock method when you are about to change or read the document and there are possibly other threads that want to gain aceess to it as well.
            Note that you must unlock the document after the reading / modifications are done.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NDocument.Unlock">
            <summary>
            Unlocks this document for concurrent access from other threads.
            </summary>
            <remarks>
            You need to call the Unlock method after you called Lock when you're finished with reading or modifying the document.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NDocument.Calculate">
            <summary>
            Calculates the chart document
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDocument.RebuildElementIndex">
            <summary>
            Rebuilds the document element index
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDocument.Refresh">
            <summary>
            Refreshes the chart document and invalidates all attached views
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDocument.HitTest(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NPointF,System.Boolean)">
            <summary>
            Performs a hit test
            </summary>
            <param name="context">the view context</param>
            <param name="point">a view point</param>
            <param name="recalcLayout">whether to recalculate the layout of the document</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDocument.HitTest(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NPointF)">
            <summary>
            Performs a hit test
            </summary>
            <param name="context">the view context</param>
            <param name="point">a view point</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDocument.Clear">
            <summary>
            Clears the current chart document and inserts a new chart and legend
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDocument.RecalcLayout(Nevron.Chart.NChartRenderingContext)">
            <summary>
            Recalculates the chart layout
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NDocument.DeepClone">
            <summary>
            Creates a serialization clone of this document
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDocument.GetElementFromId(System.Int32)">
            <summary>
            Obtains an element from its id
            </summary>
            <param name="id">element id</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Chart.NDocument.GetElementFromUniqueId(System.Guid)">
            <summary>
            Obtains an element from its unique id
            </summary>
            <param name="uid">unique id</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Chart.NDocument.RegisterElement(Nevron.Dom.INElement)">
            <summary>
            Registers the specified element in the document
            </summary>
            <param name="element">element to register</param>
        </member>
        <member name="M:Nevron.Chart.NDocument.UnregisterElement(Nevron.Dom.INElement)">
            <summary>
            Unregisters the specified element from the document
            </summary>
            <param name="element">element to unregister</param>
        </member>
        <member name="M:Nevron.Chart.NDocument.GetServiceOfType(System.Type)">
            <summary>
            Gets a reference to a service of the specified type
            </summary>
            <param name="serviceType">service type</param>
            <returns>service instance or null if a service of this type cannot be located</returns>
        </member>
        <member name="M:Nevron.Chart.NDocument.Paint(Nevron.Chart.NChartRenderingContext,System.Boolean,System.Boolean)">
            <summary>
            Paints the document
            </summary>
            <param name="context"></param>
            <param name="oneTimePaint"></param>
            <param name="recalc"></param>
        </member>
        <member name="T:Nevron.Chart.NHitTestResult">
            <summary>
            Contains information about the chart element at given window coordinates.
            </summary>
            <remarks>
            You obtain an instance of this class by calling the HitTest function of the control
            </remarks>
            <example>
            The following example obtains a NHitTestResult object for the object lying on window coordinates 100, 100.
            <code lang = 'VB'>
            Dim hitTestResult As NHitTestResult =  ChartControl.HitTest(100,100) 
            If hitTestResult.ChartElement = ChartElement.ControlBackground Then
               MessageBox.Show("You clicked on the background")
            End If
            </code>
            <code>
            NHitTestResult hitTestResult = ChartControl.HitTest(100, 100);
            if (hitTestResult.ChartElement == ChartElement.ControlBackground)
            {
            	MessageBox.Show("You clicked on the background");
            }
            </code>
            </example>
        </member>
        <member name="M:Nevron.Chart.NHitTestResult.#ctor(Nevron.Chart.NChartNode)">
            <summary>
            Initializer constructor
            </summary>
            <param name="selectedNode"></param>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.Object">
            <summary>
            Returns a reference to a chart object at the given window coordinates.
            </summary>
            <remarks>
            This value can be null (Nothing in VB.NET) if there the window coordinates are outside the control dimensions.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.ObjectIndex">
            <summary>
            Returns the object index in the parent collection
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.ChartElement">
            <summary>
            The chart element type at the given window coordinates.
            </summary>
            <remarks>
            This property defines which properties of the NHitTestResult are valid.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.Chart">
            <summary>
            Returns a reference to the NChart object containing the located object.
            </summary>
            <remarks>
            The value of this property is null (Nothing in VB.NET) if the chart element is not ChartElement.DataPoint, ChartElement.SurfaceDataPoint, ChartElement.Axis, ChartElement.AxisStripe or ChartElement.ChartWall.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.ChartWall">
            <summary>
            Returns a reference to a NChartWall object.
            </summary>
            <remarks>
            The value of this property is null (Nothing in VB.NET) if the chart element is not ChartElement.ChartWall.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.Series">
            <summary>
            Returns a reference to the NSeriesBase object containing the located data item.
            </summary>
            <remarks>
            The value of this property is null (Nothing in VB.NET) if the chart element is not ChartElement.DataPoint or ChartElement.SurfaceDataPoint.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.Axis">
            <summary>
            Returns a reference to a NAxis object.
            </summary>
            <remarks>
            The value of this property is null (Nothing in VB.NET) if the chart element is not ChartElement.Axis or ChartElement.AxisStripe.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.AxisScalePartId">
            <summary>
            Returns the id of the axis scale decoration
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.AxisStripe">
            <summary>
            Returns a reference to a NAxisStripe object.
            </summary>
            <remarks>
            The value of this property is null (Nothing in VB.NET) if the chart element is not ChartElement.AxisStripe.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.TreeMapNode">
            <summary>
            A tree map node object
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.GroupTreeMapNode">
            <summary>
            A tree map group node object
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.TreeMapChart">
            <summary>
            A tree map chart
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.Label">
            <summary>
            Returns a reference to a NLabel object.
            </summary>
            <remarks>
            The value of this property is null (Nothing in VB.NET) if the chart element is not ChartElement.Label.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.Watermark">
            <summary>
            Returns a reference to a NWatermark object.
            </summary>
            <remarks>
            The value of this property is null (Nothing in VB.NET) if the chart element is not ChartElement.Watermark.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.Legend">
            <summary>
            Returns a reference to a NLegend object.
            </summary>
            <remarks>
            The value of this property is null (Nothing in VB.NET) if the chart element is not ChartElement.Legend or ChartElement.LegendDataItem.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.LegendCellData">
            <summary>
            Returns a reference to a NLegendCellData object.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.LegendDataItem">
            <summary>
            Returns a reference to a NLegendItemCellData object.
            </summary>
            <remarks>
            The value of this property is null (Nothing in VB.NET) if the chart element is not ChartElement.LegendDataItem.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.LegendDataItemIndex">
            <summary>
            Returns the index of the legend data item
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.DataPointIndex">
            <summary>
            Returns the index of the data point in the NSeries values collection.
            </summary>
            <remarks>
            The value of this property is -1 if the chart element is not ChartElement.DataPoint.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.SurfaceDataPointX">
            <summary>
            Returns the index of the data point in the NSurfaceSeriesBase values collection.
            </summary>
            <remarks>
            The value of this property is -1 if the chart element is not ChartElement.SurfaceDataPoint.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.SurfaceDataPointZ">
            <summary>
            Returns the index of the data point in the NSurfaceSeries values collection.
            </summary>
            <remarks>
            The value of this property is -1 if the chart element is not ChartElement.SurfaceDataPoint.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.SurfaceTriangle">
            <summary>
            Returns the current surface triangle
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.SurfacePointA">
            <summary>
            Gets the A surface point
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.SurfacePointB">
            <summary>
            Gets the B surface point
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.SurfacePointC">
            <summary>
            Gets the C surface point
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.HeatMapDataPointX">
            <summary>
            Returns the index of the data point in the NHeatMapData values collection.
            </summary>
            <remarks>
            The value of this property is -1 if the chart element is not ChartElement.HeatMapDataPoint.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.HeatMapDataPointY">
            <summary>
            Returns the y index of the data point in the NHeatMapData values collection.
            </summary>
            <remarks>
            The value of this property is -1 if the chart element is not ChartElement.HeatMapDataPoint.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.GaugeAxis">
            <summary>
            Returns a reference to a NGaugeAxis object.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.MarkerValueIndicator">
            <summary>
            Returns a gauge marker indicator
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.NeedleValueIndicator">
            <summary>
            Returns a gauge needle indicator
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.RangeIndicator">
            <summary>
            Returns a gauge range indicator
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.StockGroup">
            <summary>
            Returns a stock group object
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.KagiData">
            <summary>
            Returns a Kagi data object
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.RenkoData">
            <summary>
            Returns a Renko data object
            </summary>				
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.PointAndFigureData">
            <summary>
            Returns a Point and Figure data object
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHitTestResult.LineBreakData">
            <summary>
            Returns a line break data object
            </summary>
        </member>
        <member name="T:Nevron.Chart.NIncompatibleTypeException">
            <summary>
            Summary description for NIncompatibleTypeException.
            </summary>
        </member>
        <member name="T:Nevron.Chart.Windows.NKeyEventArgs">
            <summary>
            Used as argument in INKeyboardEventHandler interface
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NKeyEventArgs.#ctor(Nevron.Chart.INView,Nevron.Chart.Windows.Key)">
            <summary>
            Initializer constructor
            </summary>
            <param name="view"></param>
            <param name="keyData"></param>
        </member>
        <member name="P:Nevron.Chart.Windows.NKeyEventArgs.Alt">
            <summary>Gets a value indicating whether the ALT key was pressed.</summary>
            <returns>true if the ALT key was pressed; otherwise, false.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Nevron.Chart.Windows.NKeyEventArgs.Control">
            <summary>Gets a value indicating whether the CTRL key was pressed.</summary>
            <returns>true if the CTRL key was pressed; otherwise, false.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Nevron.Chart.Windows.NKeyEventArgs.Handled">
            <summary>Gets or sets a value indicating whether the event was handled.</summary>
            <returns>true to bypass the control's default handling; otherwise, false to also pass the event along to the default control handler.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Nevron.Chart.Windows.NKeyEventArgs.KeyCode">
            <summary>Gets the keyboard code for a <see cref="E:System.Windows.Forms.Control.KeyDown" /> or <see cref="E:System.Windows.Forms.Control.KeyUp" /> event.</summary>
            <returns>A <see cref="T:System.Windows.Forms.Keys" /> value that is the key code for the event.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Nevron.Chart.Windows.NKeyEventArgs.KeyValue">
            <summary>Gets the keyboard value for a <see cref="E:System.Windows.Forms.Control.KeyDown" /> or <see cref="E:System.Windows.Forms.Control.KeyUp" /> event.</summary>
            <returns>The integer representation of the <see cref="P:System.Windows.Forms.KeyEventArgs.KeyCode" /> property.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Nevron.Chart.Windows.NKeyEventArgs.KeyData">
            <summary>Gets the key data for a <see cref="E:System.Windows.Forms.Control.KeyDown" /> or <see cref="E:System.Windows.Forms.Control.KeyUp" /> event.</summary>
            <returns>A <see cref="T:System.Windows.Forms.Keys" /> representing the key code for the key that was pressed, combined with modifier flags that indicate which combination of CTRL, SHIFT, and ALT keys was pressed at the same time.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Nevron.Chart.Windows.NKeyEventArgs.Modifiers">
            <summary>Gets the modifier flags for a <see cref="E:System.Windows.Forms.Control.KeyDown" /> or <see cref="E:System.Windows.Forms.Control.KeyUp" /> event. The flags indicate which combination of CTRL, SHIFT, and ALT keys was pressed.</summary>
            <returns>A <see cref="T:System.Windows.Forms.Keys" /> value representing one or more modifier flags.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Nevron.Chart.Windows.NKeyEventArgs.Shift">
            <summary>Gets a value indicating whether the SHIFT key was pressed.</summary>
            <returns>true if the SHIFT key was pressed; otherwise, false.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Nevron.Chart.Windows.NKeyEventArgs.SuppressKeyPress">
            <summary>Gets or sets a value indicating whether the key event should be passed on to the underlying control.</summary>
            <returns>true if the key event should not be sent to the control; otherwise, false.</returns>
        </member>
        <member name="F:Nevron.Chart.Windows.NKeyEventArgs.View">
            <summary>
            View from which the event originated
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.NKeyEventArgs.Processed">
            <summary>
            Whether the event was processed. If not processed other keyboard event processors can process it
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.NKeyEventArgs.m_Handled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.NKeyEventArgs.m_KeyData">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.NKeyEventArgs.m_SuppressKeyPress">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.Windows.NMouseCommand">
            <summary>
            Defines a mouse command.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NMouseCommand.#ctor">
            <summary>
            Creates a new mouse command with default settings
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NMouseCommand.#ctor(Nevron.Chart.Windows.MouseAction,Nevron.Chart.Windows.MouseButton,System.Int32)">
            <summary>
            Creates a new mouse command with the specified parameters.
            </summary>
            <param name="mouseAction"></param>
            <param name="mouseButton"></param>
            <param name="clicks"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NMouseCommand.#ctor(Nevron.Chart.Windows.Key,Nevron.Chart.Windows.MouseAction,Nevron.Chart.Windows.MouseButton,System.Int32)">
            <summary>
            Creates a new mouse command with the specified parameters.
            </summary>
            <param name="key"></param>
            <param name="mouseAction"></param>
            <param name="mouseButton"></param>
            <param name="clicks"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NMouseCommand.#ctor(Nevron.Chart.Windows.Key[],Nevron.Chart.Windows.MouseAction,Nevron.Chart.Windows.MouseButton,System.Int32)">
            <summary>
            Creates a new mouse command with the specified parameters.
            </summary>
            <param name="keys"></param>
            <param name="mouseAction"></param>
            <param name="mouseButton"></param>
            <param name="clicks"></param>
        </member>
        <member name="P:Nevron.Chart.Windows.NMouseCommand.MouseAction">
            <summary>
            The mouse action recognized by this command.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NMouseCommand.Keys">
            <summary>
            The modifier keys that have to be pressed in order for the command to match
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NMouseCommand.Clicks">
            <summary>
            The number of clicks.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NMouseCommand.MouseButton">
            <summary>
            The mouse button(s) of this command.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NMouseCommand.Match(Nevron.Chart.Windows.Key,Nevron.Chart.Windows.MouseAction,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Returns true if the command matches the specified mouse action and event arguments
            </summary>
            <param name="keys"></param>
            <param name="mouseAction"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NMouseCommand.MatchKey(Nevron.Chart.Windows.Key,Nevron.Chart.Windows.Key[])">
            <summary>
            Matches the specified key
            </summary>
            <param name="key"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.Windows.NMouseEventArgs">
            <summary>
            Represents mouse event args
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NMouseEventArgs.#ctor(Nevron.Chart.INView,Nevron.Chart.Windows.MouseButton,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="view"></param>
            <param name="button"></param>
            <param name="clicks"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="delta"></param>
        </member>
        <member name="P:Nevron.Chart.Windows.NMouseEventArgs.View">
            <summary>
            View from which the event originated
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.NMouseEventArgs.Processed">
            <summary>
            Whether the event was processed. If not processed other mouse event processors can process it.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NMouseEventArgs.Button">
            <summary>
            Gets which mouse button was pressed.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NMouseEventArgs.Clicks">
            <summary>
            Gets the number of times the mouse button was pressed and released.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NMouseEventArgs.Delta">
            <summary>
            Gets a signed count of the number of detents the mouse wheel has rotated,
            multiplied by the WHEEL_DELTA constant. A detent is one notch of the mouse
            wheel.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NMouseEventArgs.Location">
            <summary>
            Gets the location of the mouse during the generating mouse event.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NMouseEventArgs.X">
            <summary>
            Gets the x-coordinate of the mouse during the generating mouse event.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NMouseEventArgs.Y">
            <summary>
            Gets the y-coordinate of the mouse during the generating mouse event.
            </summary>
        </member>
        <member name="T:Nevron.Chart.Windows.NShortcut">
            <summary>
            Represents a keyboard shortcut combination that can be assigned to a INShortcutProvider instance.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NShortcut.#ctor(Nevron.Chart.Windows.Key,Nevron.Chart.Windows.Key)">
            <summary>
            Creates a new keys combination with the
            specified key and modifiers values
            </summary>
            <param name="key">
            The key value of the shortcut.
            </param>
            <param name="modifiers">
            The modifiers combination of the shortcut.
            </param>
        </member>
        <member name="M:Nevron.Chart.Windows.NShortcut.#ctor">
            <summary>
            Creates a new unassigned shortcut.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NShortcut.#ctor(System.Int32,System.Int32)">
            <summary>
            Instance descriptor constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NShortcut.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NShortcut.ToString">
            <summary>
            Overriden. Displays the key and modifiers values separated by "+".
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.Windows.NShortcut.Key">
            <summary>
            Gets/sets the key value of the shortcut.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NShortcut.Modifiers">
            <summary>
            Gets/sets the modifiers value of the shortcut.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NShortcut.Keys">
            <summary>
            Gets the combined value of the key and modifier.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NShortcut.Empty">
            <summary>
            Gets an empty shortcut.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NShortcut.Match(Nevron.Chart.Windows.NKeyEventArgs)">
            <summary>
            Returns true if the shortcut matches with the specified KeyEventArgs.
            </summary>
            <param name="e"></param>
            <returns>Returns true only if the shortcut matches all modifiers and key code</returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NShortcut.MatchAny(Nevron.Chart.Windows.NKeyEventArgs)">
            <summary>
            Returns true if the shortcut matches any of the modifier keys and the key code.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.Windows.RangeSelectionDragMode">
            <summary>
            Enumerates the range selection drag modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.RangeSelectionDragMode.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.RangeSelectionDragMode.N">
            <summary>
            North
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.RangeSelectionDragMode.E">
            <summary>
            East
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.RangeSelectionDragMode.S">
            <summary>
            South
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.RangeSelectionDragMode.W">
            <summary>
            West
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.RangeSelectionDragMode.Inside">
            <summary>
            Inside selection
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.RangeSelectionDragMode.SE">
            <summary>
            South east
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.RangeSelectionDragMode.SW">
            <summary>
            South west
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.RangeSelectionDragMode.NE">
            <summary>
            North east
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.RangeSelectionDragMode.NW">
            <summary>
            North west
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.RangeSelectionDragMode.VerticalResizeMask">
            <summary>
            Vertical resize mask
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.RangeSelectionDragMode.HorizontalResizeMask">
            <summary>
            Horizontal resize mask
            </summary>
        </member>
        <member name="T:Nevron.Chart.Windows.DragOutsideAxisRangeMode">
            <summary>
            Enumerates how dragging data points outside the current axis ranges is performed
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.DragOutsideAxisRangeMode.Enabled">
            <summary>
            Dragging outside the axis range is enabled
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.DragOutsideAxisRangeMode.Disabled">
            <summary>
            Dragging outside the axis range is disabled
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.DragOutsideAxisRangeMode.Automatic">
            <summary>
            Dragging outside the axis range is disabled when the axes are zoomed and enabled otherwise
            </summary>
        </member>
        <member name="T:Nevron.Chart.Windows.MouseButton">
            <summary>
            Specifies constants that define which mouse button was pressed.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.MouseButton.None">
            <summary>
            No mouse button was pressed.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.MouseButton.Left">
            <summary>
            The left mouse button was pressed.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.MouseButton.Right">
            <summary>
            The right mouse button was pressed.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.MouseButton.Middle">
            <summary>
            The middle mouse button was pressed.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.MouseButton.XButton1">
            <summary>
            The first XButton was pressed.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.MouseButton.XButton2">
            <summary>
            The second XButton was pressed.
            </summary>
        </member>
        <member name="T:Nevron.Chart.Windows.MouseAction">
            <summary>
            Defines the possible mouse actions
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.MouseAction.None">
            <summary>
            No mouse action
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.MouseAction.Down">
            <summary>
            Mouse down
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.MouseAction.Up">
            <summary>
            Mouse up
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.MouseAction.Move">
            <summary>
            Mouse move
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.MouseAction.Leave">
            <summary>
            Mouse leave
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.MouseAction.Enter">
            <summary>
            Mouse enter
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.MouseAction.Hover">
            <summary>
            Mouse hover
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.MouseAction.Wheel">
            <summary>
            Mouse wheel
            </summary>
        </member>
        <member name="T:Nevron.Chart.Windows.Key">
            <summary>
            Specifies key codes and modifiers.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Modifiers">
            <summary>
            The bitmask to extract modifiers from a key value.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.None">
            <summary>
            No key pressed.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.LButton">
            <summary>
            The left mouse button.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.RButton">
            <summary>
            The right mouse button.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Cancel">
            <summary>
            The CANCEL key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.MButton">
            <summary>
            The middle mouse button (three-button mouse).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.XButton1">
            <summary>
            The first x mouse button (five-button mouse).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.XButton2">
            <summary>
            The second x mouse button (five-button mouse).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Back">
            <summary>
            The BACKSPACE key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Tab">
            <summary>
            The TAB key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.LineFeed">
            <summary>
            The LINEFEED key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Clear">
            <summary>
            The CLEAR key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Enter">
            <summary>
            The ENTER key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Return">
            <summary>
            The RETURN key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.ShiftKey">
            <summary>
            The SHIFT key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.ControlKey">
            <summary>
            The CTRL key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Menu">
            <summary>
            The ALT key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Pause">
            <summary>
            The PAUSE key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.CapsLock">
            <summary>
            The CAPS LOCK key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Capital">
            <summary>
            The CAPS LOCK key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.KanaMode">
            <summary>
            The IME Kana mode key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.HanguelMode">
            <summary>
            The IME Hanguel mode key. (maintained for compatibility; use HangulMode)
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.HangulMode">
            <summary>
            The IME Hangul mode key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.JunjaMode">
            <summary>
            The IME Junja mode key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.FinalMode">
            <summary>
            The IME final mode key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.KanjiMode">
            <summary>
            The IME Kanji mode key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.HanjaMode">
            <summary>
            The IME Hanja mode key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Escape">
            <summary>
            The ESC key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.IMEConvert">
            <summary>
            The IME convert key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.IMENonconvert">
            <summary>
            The IME nonconvert key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.IMEAceept">
            <summary>
            The IME accept key. Obsolete, use System.Windows.Forms.Keys.IMEAccept instead.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.IMEAccept">
            <summary>
            The IME accept key, replaces System.Windows.Forms.Keys.IMEAceept.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.IMEModeChange">
            <summary>
            The IME mode change key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Space">
            <summary>
            The SPACEBAR key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Prior">
            <summary>
            The PAGE UP key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.PageUp">
            <summary>
            The PAGE UP key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Next">
            <summary>
            The PAGE DOWN key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.PageDown">
            <summary>
            The PAGE DOWN key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.End">
            <summary>
            The END key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Home">
            <summary>
            The HOME key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Left">
            <summary>
            The LEFT ARROW key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Up">
            <summary>
            The UP ARROW key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Right">
            <summary>
            The RIGHT ARROW key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Down">
            <summary>
            The DOWN ARROW key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Select">
            <summary>
            The SELECT key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Print">
            <summary>
            The PRINT key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Execute">
            <summary>
            The EXECUTE key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.PrintScreen">
            <summary>
            The PRINT SCREEN key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Snapshot">
            <summary>
            The PRINT SCREEN key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Insert">
            <summary>
            The INS key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Delete">
            <summary>
            The DEL key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Help">
            <summary>
            The HELP key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.D0">
            <summary>
            The 0 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.D1">
            <summary>
            The 1 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.D2">
            <summary>
            The 2 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.D3">
            <summary>
            The 3 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.D4">
            <summary>
            The 4 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.D5">
            <summary>
            The 5 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.D6">
            <summary>
            The 6 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.D7">
            <summary>
            The 7 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.D8">
            <summary>
            The 8 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.D9">
            <summary>
            The 9 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.A">
            <summary>
            The A key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.B">
            <summary>
            The B key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.C">
            <summary>
            The C key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.D">
            <summary>
            The D key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.E">
            <summary>
            The E key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F">
            <summary>
            The F key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.G">
            <summary>
            The G key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.H">
            <summary>
            The H key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.I">
            <summary>
            The I key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.J">
            <summary>
            The J key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.K">
            <summary>
            The K key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.L">
            <summary>
            The L key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.M">
            <summary>
            The M key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.N">
            <summary>
            The N key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.O">
            <summary>
            The O key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.P">
            <summary>
            The P key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Q">
            <summary>
            The Q key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.R">
            <summary>
            The R key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.S">
            <summary>
            The S key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.T">
            <summary>
            The T key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.U">
            <summary>
            The U key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.V">
            <summary>
            The V key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.W">
            <summary>
            The W key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.X">
            <summary>
            The X key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Y">
            <summary>
            The Y key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Z">
            <summary>
            The Z key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.LWin">
            <summary>
            The left Windows logo key (Microsoft Natural Keyboard).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.RWin">
            <summary>
            The right Windows logo key (Microsoft Natural Keyboard).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Apps">
            <summary>
            The application key (Microsoft Natural Keyboard).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Sleep">
            <summary>
            The computer sleep key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.NumPad0">
            <summary>
            The 0 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.NumPad1">
            <summary>
            The 1 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.NumPad2">
            <summary>
            The 2 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.NumPad3">
            <summary>
            The 3 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.NumPad4">
            <summary>
            The 4 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.NumPad5">
            <summary>
            The 5 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.NumPad6">
            <summary>
            The 6 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.NumPad7">
            <summary>
            The 7 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.NumPad8">
            <summary>
            The 8 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.NumPad9">
            <summary>
            The 9 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Multiply">
            <summary>
            The multiply key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Add">
            <summary>
            The add key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Separator">
            <summary>
            The separator key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Subtract">
            <summary>
            The subtract key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Decimal">
            <summary>
            The decimal key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Divide">
            <summary>
            The divide key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F1">
            <summary>
            The F1 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F2">
            <summary>
            The F2 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F3">
            <summary>
            The F3 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F4">
            <summary>
            The F4 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F5">
            <summary>
            The F5 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F6">
            <summary>
            The F6 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F7">
            <summary>
            The F7 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F8">
            <summary>
            The F8 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F9">
            <summary>
            The F9 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F10">
            <summary>
            The F10 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F11">
            <summary>
            The F11 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F12">
            <summary>
            The F12 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F13">
            <summary>
            The F13 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F14">
            <summary>
            The F14 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F15">
            <summary>
            The F15 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F16">
            <summary>
            The F16 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F17">
            <summary>
            The F17 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F18">
            <summary>
            The F18 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F19">
            <summary>
            The F19 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F20">
            <summary>
            The F20 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F21">
            <summary>
            The F21 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F22">
            <summary>
            The F22 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F23">
            <summary>
            The F23 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.F24">
            <summary>
            The F24 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.NumLock">
            <summary>
            The NUM LOCK key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Scroll">
            <summary>
            The SCROLL LOCK key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.LShiftKey">
            <summary>
            The left SHIFT key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.RShiftKey">
            <summary>
            The right SHIFT key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.LControlKey">
            <summary>
            The left CTRL key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.RControlKey">
            <summary>
            The right CTRL key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.LMenu">
            <summary>
            The left ALT key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.RMenu">
            <summary>
            The right ALT key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.BrowserBack">
            <summary>
            The browser back key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.BrowserForward">
            <summary>
             The browser forward key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.BrowserRefresh">
            <summary>
            The browser refresh key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.BrowserStop">
            <summary>
            The browser stop key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.BrowserSearch">
            <summary>
            The browser search key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.BrowserFavorites">
            <summary>
            The browser favorites key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.BrowserHome">
            <summary>
            The browser home key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.VolumeMute">
            <summary>
            The volume mute key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.VolumeDown">
            <summary>
            The volume down key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.VolumeUp">
            <summary>
            The volume up key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.MediaNextTrack">
            <summary>
            The media next track key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.MediaPreviousTrack">
            <summary>
            The media previous track key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.MediaStop">
            <summary>
            The media Stop key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.MediaPlayPause">
            <summary>
            The media play pause key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.LaunchMail">
            <summary>
            The launch mail key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.SelectMedia">
            <summary>
            The select media key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.LaunchApplication1">
            <summary>
            The start application one key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.LaunchApplication2">
            <summary>
            The start application two key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Oem1">
            <summary>
            The OEM 1 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.OemSemicolon">
            <summary>
            The OEM Semicolon key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Oemplus">
            <summary>
            The OEM plus key on any country/region keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Oemcomma">
            <summary>
            The OEM comma key on any country/region keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.OemMinus">
            <summary>
            The OEM minus key on any country/region keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.OemPeriod">
            <summary>
            The OEM period key on any country/region keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.OemQuestion">
            <summary>
            The OEM question mark key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Oem2">
            <summary>
            The OEM 2 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Oemtilde">
            <summary>
            The OEM tilde key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Oem3">
            <summary>
            The OEM 3 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Oem4">
            <summary>
            The OEM 4 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.OemOpenBrackets">
            <summary>
            The OEM open bracket key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.OemPipe">
            <summary>
            The OEM pipe key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Oem5">
            <summary>
            The OEM 5 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Oem6">
            <summary>
            The OEM 6 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.OemCloseBrackets">
            <summary>
            The OEM close bracket key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Oem7">
            <summary>
            The OEM 7 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.OemQuotes">
            <summary>
            The OEM singled/double quote key on a US standard keyboard (Windows 2000or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Oem8">
            <summary>
            The OEM 8 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Oem102">
            <summary>
            The OEM 102 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.OemBackslash">
            <summary>
            The OEM angle bracket or backslash key on the RT 102 key keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.ProcessKey">
            <summary>
            The PROCESS KEY key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Packet">
            <summary>
            Used to pass Unicode characters as if they were keystrokes. The Packet key
            value is the low word of a 32-bit virtual-key value used for non-keyboard
            input methods.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Attn">
            <summary>
            The ATTN key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Crsel">
            <summary>
            The CRSEL key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Exsel">
            <summary>
            The EXSEL key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.EraseEof">
            <summary>
            The ERASE EOF key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Play">
            <summary>
            The PLAY key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Zoom">
            <summary>
            The ZOOM key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.NoName">
            <summary>
            A constant reserved for future use.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Pa1">
            <summary>
            The PA1 key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.OemClear">
            <summary>
            The CLEAR key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.KeyCode">
            <summary>
            The bitmask to extract a key code from a key value.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Shift">
            <summary>
            The SHIFT modifier key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Control">
            <summary>
            The CTRL modifier key.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Windows.Key.Alt">
            <summary>
            The ALT modifier key.
            </summary>
        </member>
        <member name="T:Nevron.Chart.Windows.NController">
            <summary>
            Controls the interactivity features of the control.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NController.#ctor">
            <summary>
            Initailizer contructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NController.Selection">
            <summary>
            Gets or sets the current selection
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NController.Tools">
            <summary>
            Gets or sets the tools collection.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NController.ActiveTool">
            <summary>
            Gets the current active tool
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NController.Clear">
            <summary>
            Clears the current selection and tools.
            </summary>
        </member>
        <member name="T:Nevron.Chart.Windows.NToolCollection">
            <summary>
            This collection holds the interactivity tool, which can 
            be applied to the chart control.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NToolCollection.#ctor">
            <summary>
            Creates a new empty interactivity operations collection.
            </summary>
        </member>
        <member name="T:Nevron.Chart.Windows.NSelection">
            <summary>
            The selection object holds the selected objects of the chart.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NSelection.SelectedObjects">
            <summary>
            Returns an array list containing the selected objects
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NSelection.Clear">
            <summary>
            Clears the selection
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NSelection.Add(Nevron.Chart.NChartNode)">
            <summary>
            Adds an object to the selection
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NSelection.Contains(Nevron.Chart.NChartNode)">
            <summary>
            Returns true if the selection contains the specified object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NSelection.ContainsObjectsOfType(System.Type)">
            <summary>
            Returns true if the selection contains objects from the specified type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NSelection.AddDrillDown(Nevron.Chart.NChartNode)">
            <summary>
            Adds the specified chart node only if the current selection contains its parent.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NSelection.AddDataPoint(Nevron.Chart.NSeriesBase,System.Int32)">
            <summary>
            
            </summary>
            <param name="series"></param>
            <param name="dataPointIndex"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NSelection.AddDataPointDrilldown(Nevron.Chart.NSeriesBase,System.Int32)">
            <summary>
            
            </summary>
            <param name="series"></param>
            <param name="dataPointIndex"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NSelection.Delete(Nevron.Chart.NChartNode)">
            <summary>
            Deletes an object from the selection
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NSelection.GetSelectedObjectsOfType(System.Type)">
            <summary>
            Returns a list of the selected objects
            </summary>
            <param name="type"></param>
            <returns>null if no objects were found</returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NSelection.InternalDeleteObject(Nevron.Chart.NChartNode)">
            <summary>
            Deletes all nodes that are descendant from this node
            </summary>
            <param name="node"></param>
        </member>
        <member name="F:Nevron.Chart.Windows.NSelection.m_SelectedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.Windows.NCalloutDragTool">
            <summary>
            Represents a tool that allows for annotation dragging by the end user
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NCalloutDragTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NCalloutDragTool.CanBeginDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Return true if dragging can start
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NCalloutDragTool.OnDoDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Overriden to perform dragging
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Nevron.Chart.Windows.NAxisCursorDragTool">
            <summary>
            Represents a tool that allows for axis cursor dragging
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NAxisCursorDragTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NAxisCursorDragTool.CanBeginDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Return true if dragging can start
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NAxisCursorDragTool.OnDoDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Overriden to perform dragging
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NFloatBarDragPointTool.#ctor">
            <summary>
            Creates a new NTrackballTool operation.
            </summary>
            <remarks>
            You must add the object to the InteractivityCollection of 
            the control in order to enable the trackball feature.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.Windows.NFloatBarDragPointTool.NormalizeBeginEndValues">
            <summary>
            Gets or sets whether to normalize the begin / end values
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NFloatBarDragPointTool.SideTrackDragLength">
            <summary>
            Gets or sets the float side drag area length
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NFloatBarDragPointTool.OnDoDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Overriden to perform dragging
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NFloatBarDragPointTool.CancelOperation">
            <summary>
            Overriden to rever the state to the original one if the user presses Esc key
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NVolumeSelectorTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NVolumeSelectorTool.SelectionFill">
            <summary>
            Gets or sets the fill style used to render the volume selection
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NVolumeSelectorTool.LeftPlane">
            <summary>
            Gets the left volume selection plane
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NVolumeSelectorTool.TopPlane">
            <summary>
            Gets the top volume selection plane
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NVolumeSelectorTool.RightPlane">
            <summary>
            Gets the right volume selection plane
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NVolumeSelectorTool.BottomPlane">
            <summary>
            Gets the bottom volume selection plane
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NVolumeSelectorTool.CanBeginDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Return true if dragging can start
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NVolumeSelectorTool.OnDoDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Overriden to perform dragging
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NVolumeSelectorTool.CancelOperation">
            <summary>
            Overriden to rever the state to the original one if the user presses Esc key
            </summary>
        </member>
        <member name="T:Nevron.Chart.Windows.NAxisScrollTool">
            <summary>
            Enables the Axis Scroll feature.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NAxisScrollTool.#ctor">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="T:Nevron.Chart.Windows.NDataPanTool">
            <summary>
            When present in the Tools collection of the control enables the data pan feature.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NDataPanTool.#ctor">
            <summary>
            Creates a new data pan tool with default settings
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPanTool.PanLeftShortcut">
            <summary>
            The keyboard command associated with left panning.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPanTool.PanRightShortcut">
            <summary>
            The keyboard command associated with right panning.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPanTool.PanUpShortcut">
            <summary>
            The keyboard command associated with upward panning.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPanTool.PanDownShortcut">
            <summary>
            The keyboard command associated with downward panning.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPanTool.HorizontalStep">
            <summary>
            The horizontal pan step.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPanTool.VerticalStep">
            <summary>
            The vertical pan step.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NDataPanTool.CanBeginDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Return true if dragging can start
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.Windows.NDataPointDragTool">
            <summary>
            When present in the Tools collection of the control enables the data point drag feature.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NDataPointDragTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPointDragTool.AllowHorizontalDragging">
            <summary>
            Whether the user can change the horizontal position of the data point
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPointDragTool.AllowVerticalDragging">
            <summary>
            Whether the user can change the vertical position of the data point
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPointDragTool.DragOutsideAxisRangeMode">
            <summary>
            Gets or sets the mode which determines whether dragging outside the axis range is permitted
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPointDragTool.DragLeftShortcut">
            <summary>
            The keyboard command associated with left dragging.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPointDragTool.DragRightShortcut">
            <summary>
            The keyboard command associated with right dragging.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPointDragTool.DragUpShortcut">
            <summary>
            The keyboard command associated with upward dragging.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPointDragTool.DragDownShortcut">
            <summary>
            The keyboard command associated with downward dragging.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPointDragTool.HorizontalStep">
            <summary>
            The horizontal drag step.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPointDragTool.VerticalStep">
            <summary>
            The horizontal drag step.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPointDragTool.DepthAxisId">
            <summary>
            The index of the axis used as a depth (z) axis. Note that you cannot specify collinear axes for the HorizontalAxisId, VerticalAxisId and DepthAxisId properties.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPointDragTool.DepthAxisValue">
            <summary>
            The value for the depth axis when transforming to scale coordinates.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPointDragTool.TimerInterval">
            <summary>
            Gets or sets the timer interval (int ms) used to recalculate the chart
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPointDragTool.MaxXDragValue">
            <summary>
            Gets or sets the maximum x drag value
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPointDragTool.MaxYDragValue">
            <summary>
            Gets or sets the maximum y drag value
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPointDragTool.MaxZDragValue">
            <summary>
            Gets or sets the maximum z drag value
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPointDragTool.MinXDragValue">
            <summary>
            Gets or sets the minimum x drag value
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPointDragTool.MinYDragValue">
            <summary>
            Gets or sets the minimum y drag value
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPointDragTool.MinZDragValue">
            <summary>
            Gets or sets the minimum z drag value
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataPointDragTool.DataPointXYZValue">
            <summary>
            Gets the last data point value
            </summary>
        </member>
        <member name="E:Nevron.Chart.Windows.NDataPointDragTool.DataPointChanged">
            <summary>
            Fired when a data point is update
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NDataPointDragTool.CanBeginDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Return true if dragging can start
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NDataPointDragTool.OnTimerTick">
            <summary>
            Occurs when the timer ticks
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NDataPointDragTool.OnTimerStop">
            <summary>
            Occurs when the timer is stopped
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NDataPointDragTool.OnTimerStart">
            <summary>
            Occurs when the timer is started
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NDataPointDragTool.GetSelectedDataPoints">
            <summary>
            Gets the selected data points
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NDataPointDragTool.GetDataPointXYZValue(Nevron.GraphicsCore.NVector3DF)">
            <summary>
            Gets the data point XYZ value given the specified model point
            </summary>
            <param name="pointModel"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NDataPointDragTool.UpdateDataPoint">
            <summary>
            Updates the selected data points
            </summary>
        </member>
        <member name="T:Nevron.Chart.Windows.NDataZoomTool">
            <summary>
            The NDataZoomTool controls the data zooming feature of the control in WinForms.
            </summary>
            <remarks>
            You enable data zooming by a adding an instance of this object to the Tools collection of the control.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.Windows.NDataZoomTool.#ctor">
            <summary>
            Creates a new NDataZoomTool object with default settings.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataZoomTool.ZoomInFillStyle">
            <summary>
            The fill style used to paint the selected area in the chart when the tool will zoom in.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataZoomTool.ZoomInBorderStyle">
            <summary>
            The border used to paint the selected area in the chart when the tool will zoom in.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataZoomTool.ZoomOutFillStyle">
            <summary>
            The fill style used to paint the selected area in the chart when the tool will zoom out.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataZoomTool.ZoomOutBorderStyle">
            <summary>
            The border used to paint the selected area in the chart when the tool will zoom out.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataZoomTool.AlwaysZoomIn">
            <summary>
            When set to true the tool will always zoom in.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataZoomTool.WheelZoomAtMouse">
            <summary>
            When set to true the wheel zoom will zoom in relative to the current mouse position.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataZoomTool.MinSelectedAreaSize">
            <summary>
            Gets or sets the minimum area size in pixels which is considered a valid user selection.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataZoomTool.WheelZoomFactor">
            <summary>
            Gets or sets the wheel zoom factor that defines the zoom in or out applied in response to a mouse wheel rotation.
            </summary>
            <remarsk>
            value must be in the range [1, -1]
            </remarsk>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataZoomTool.AnimateZooming">
            <summary>
            Gets or sets a value indicating whether the zoom is animated.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataZoomTool.AnimationDurationType">
            <summary>
            Gets or sets the animation duration type
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataZoomTool.AnimationSteps">
            <summary>
            Gets or sets the number of animation steps to perform if animated zooming is enabled.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDataZoomTool.AnimationTime">
            <summary>
            Gets or sets the total duration of the animation if animated zooming is enabled
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NDataZoomTool.DoWheel(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Processes wheel operations
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NDataZoomTool.CanBeginDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Return true if dragging can start
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NDataZoomTool.UpdateRangeSelections(Nevron.Chart.Windows.NMouseEventArgs@)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NDataZoomTool.ApplyRangeSelections(Nevron.Chart.NChartRenderingContext)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NDataZoomTool.ApplyRangeSelections(System.Boolean)">
            <summary>
            
            </summary>
            <param name="zoomIn"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NDataZoomTool.HideRangeSelections">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.Windows.NChartAxisTool">
            <summary>
            The base for all tools that depend on the chart axis configuration.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NChartAxisTool.#ctor">
            <summary>
            Initializer contructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NChartAxisTool.HorizontalAxisId">
            <summary>
            The index of the axis used as a horizontal (x) axis. Note that you cannot 
            specify collinear axes for the HorizontalAxisId and VerticalAxisId properties.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NChartAxisTool.VerticalAxisId">
            <summary>
            The index of the axis used as a vertical (y) axis. Note that you cannot specify collinear axes for the HorizontalAxisId and VerticalAxisId properties.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NChartAxisTool.CanBeginDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Return true if dragging can start
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NRangeSelectionMoveResizeTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.Windows.NPanelPanTool">
            <summary>
            The panel pan tool allows the user to pan a content panel.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NPanelPanTool.#ctor">
            <summary>
            Creates a new NPanelPanTool operation.
            </summary>
            <remarks>
            You must add the object to the InteractivityCollection of 
            the control in order to enable the mouse zoom feature.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.Windows.NPanelPanTool.PanLeftShortcut">
            <summary>
            The keyboard command associated with left panning.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NPanelPanTool.PanRightShortcut">
            <summary>
            The keyboard command associated with right panning.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NPanelPanTool.PanUpShortcut">
            <summary>
            The keyboard command associated with upward panning.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NPanelPanTool.PanDownShortcut">
            <summary>
            The keyboard command associated with downward panning.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NPanelPanTool.HorizontalStep">
            <summary>
            The horizontal pan step.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NPanelPanTool.VerticalStep">
            <summary>
            The vertical pan step.
            </summary>
        </member>
        <member name="E:Nevron.Chart.Windows.NPanelPanTool.ZoomChanged">
            <summary>
            Fired when the panel zoom factor has changed
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NPanelPanTool.CanBeginDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Return true if dragging can start
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NPanelPanTool.OnBeginDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NPanelPanTool.OnDoDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Nevron.Chart.Windows.NPanelZoomTool">
            <summary>
            The panel zoom tool allows the user to zoom in and out content panels.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NPanelZoomTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NPanelZoomTool.MinZoomFactor">
            <summary>
            Gets or sets the minimum zoom factor
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NPanelZoomTool.ZoomStep">
            <summary>
            The change in the zoom scale of the panel when the user presses the up or down arrow buttons.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NPanelZoomTool.ZoomInShortcut">
            <summary>
            The keyboard command associated with zoom in.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NPanelZoomTool.AlwaysZoomIn">
            <summary>
            When set to true the tool will always zoom in.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NPanelZoomTool.PreserveAspect">
            <summary>
            Gets or sets whether the tool will preserve the original aspect of the panel.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NPanelZoomTool.ZoomInBoundsOnly">
            <summary>
            Gets or sets whether the zoom is perfomed in the panel bounds only
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NPanelZoomTool.ZoomOutShortcut">
            <summary>
            The keyboard command associated with zoom out.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NPanelZoomTool.AllowZoomOutsidePanel">
            <summary>
            Gets or sets whether zooming is allowed outside the panel
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NPanelZoomTool.ZoomInFillStyle">
            <summary>
            Gets or sets the selected zoom in area fill style.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NPanelZoomTool.ZoomOutFillStyle">
            <summary>
            Gets or sets the selected zoom out area fill style
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NPanelZoomTool.ZoomInBorderStyle">
            <summary>
            Gets or sets the selected zoom in area border style
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NPanelZoomTool.ZoomOutBorderStyle">
            <summary>
            Gets or sets the selected zoom out area border style
            </summary>
        </member>
        <member name="E:Nevron.Chart.Windows.NPanelZoomTool.ZoomChanged">
            <summary>
            Fired when the panel zoom factor has changed
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NPanelZoomTool.CanBeginDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Return true if dragging can start
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NPanelZoomTool.DoWheel(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Processes wheel operations
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NPanelZoomTool.OnBeginDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NPanelZoomTool.OnDoDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Nevron.Chart.Windows.NChartTool">
            <summary>
            Base for all tools that depend on a chart panel.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NChartTool.#ctor">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NChartTool.RepaintChartWhileDragging">
            <summary>
            Whether or not the control should repaint while the user uses
            the data pan tool.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NChartTool.GetActiveProjection">
            <summary>
            Obtains the projection of the first chart in the selection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NChartTool.GetActiveChart">
            <summary>
            Obtains the first chart in the selection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.Windows.NTrackballTool">
            <summary>
            This class represents the trackball tool. The trackball 
            tool of the control enables you to to interactively modify the 
            Elevation and Rotation parameters of the NProjection object of the active chart.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NTrackballTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NTrackballTool.RotationStep">
            <summary>
            The change in the rotation parameter of the chart view when the user presses the left or right arrow buttons.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NTrackballTool.ElevationStep">
            <summary>
            The change in the elevation parameter of the chart view when the user presses the up or down arrow buttons.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NTrackballTool.RotateLeftShortcut">
            <summary>
            The keyboard command associated with left rotation.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NTrackballTool.RotateRightShortcut">
            <summary>
            The keyboard command associated with right rotation.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NTrackballTool.ElevateUpShortcut">
            <summary>
            The keyboard command associated with up elevation.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NTrackballTool.ElevateDownShortcut">
            <summary>
            The keyboard command associated with down elevation.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NTrackballTool.EnableKineticDrag">
            <summary>
            Whether the trackball uses kinetic drag.
            </summary>
        </member>
        <member name="E:Nevron.Chart.Windows.NTrackballTool.ProjectionChanged">
            <summary>
            Occurs when the view has changed.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NTrackballTool.CanBeginDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Return true if dragging can start
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.Windows.NZoomTool">
            <summary>
            The zoom feature of the control enables the user to interactively modify 
            the Zoom parameter of the NProjection object attached to the active chart.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NZoomTool.#ctor">
            <summary>
            Creates a new NZoomTool operation.
            </summary>
            <remarks>
            You must add the object to the InteractivityCollection of 
            the control in order to enable the mouse zoom feature.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.Windows.NZoomTool.ZoomStep">
            <summary>
            The change in the zoom parameter of the chart view when the user presses the up or down arrow buttons.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NZoomTool.ZoomInShortcut">
            <summary>
            The keyboard command associated with zoom in.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NZoomTool.ZoomOutShortcut">
            <summary>
            The keyboard command associated with zoom out.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NZoomTool.CanBeginDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Return true if dragging can start
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NZoomTool.DoWheel(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Processes wheel operations
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Nevron.Chart.Windows.NDataCursorTool">
            <summary>
            The NDataCursorTool controls the data cursor feature of the control in WinForms.
            </summary>
            <remarks>
            You enable data cursors by a adding an instance of this object to the Interactivity collection of the control.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.Windows.NDataCursorTool.#ctor">
            <summary>
            Creates a new data cursor tool with default settings
            </summary>
        </member>
        <member name="T:Nevron.Chart.Windows.NDragEventArgs">
            <summary>
            Contains information about the current mouse and keyboard state when dragging occurs.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDragEventArgs.KeyState">
            <summary>
            Gets the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.
            </summary>
        </member>
        <member name="T:Nevron.Chart.Windows.NDragTool">
            <summary>
            The base of all dragging tools.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.#ctor">
            <summary>
            Creates a new NDragTool object.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDragTool.Cursor">
            <summary>
            Controls the cursor displayed by the control when the operation is active.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDragTool.BeginDragMouseCommand">
            <summary>
            The mouse command that activates the drag operation.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDragTool.EndDragMouseCommand">
            <summary>
            The mouse command that terminates the drag operation
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDragTool.FocusControlWhenActive">
            <summary>
            Whether the control will obtain keyboard focus when this tool is activated
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NDragTool.IsDragging">
            <summary>
            Returns true if the tool is currently in drag state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.Activate">
            <summary>
            Activates this tool.
            </summary>
            <remarks>
            When a tool is active it will receive all event notifications and they will not be
            dispatched to the other tools in the tools collection.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.Deactivate">
            <summary>
            Deactivates this tool.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.DoWheel(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Processes wheel operations
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.DoBeginDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Initiates a begin drag
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.DoDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Initiates a do drag
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.DoEndDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Ends the drag operation
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Nevron.Chart.Windows.NDragTool.BeginDrag">
            <summary>
            Fired before a drag operation is about to begin.
            </summary>
        </member>
        <member name="E:Nevron.Chart.Windows.NDragTool.Drag">
            <summary>
            Fired when a drag operation is being processed.
            </summary>
        </member>
        <member name="E:Nevron.Chart.Windows.NDragTool.EndDrag">
            <summary>
            Fired after a drag operation has ended.
            </summary>
        </member>
        <member name="E:Nevron.Chart.Windows.NDragTool.Cancel">
            <summary>
            Fired if the user pressed the Escape button.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.CanBeginDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Returns true if a drag operation can be started
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.OnBeginDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Called when a drag operation has started
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.OnDoDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Called to perform dragging
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.OnEndDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Called when a drag operation has ended
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.CancelOperation">
            <summary>
            Cancels this drag operation
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.OnKeyDown(System.Object,Nevron.Chart.Windows.NKeyEventArgs)">
            <summary>
            On Key Down
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.OnMouseDown(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            On Mouse Down
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.OnMouseMove(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            On Mouse Move
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.OnMouseUp(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            On Mouse Up
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.OnMouseWheel(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            On Mouse Wheel
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.TranslateWheelDelta(Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Translate wheel delta value
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.ProcessMouseAction(Nevron.Chart.Windows.MouseAction,System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="mouseAction"></param>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.FireBeginDrag(Nevron.Chart.Windows.NMouseEventArgs@)">
            <summary>
            
            </summary>
            <param name="mouseEventArgs"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.FireDrag(Nevron.Chart.Windows.NMouseEventArgs@)">
            <summary>
            
            </summary>
            <param name="mouseEventArgs"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.FireEndDrag(Nevron.Chart.Windows.NMouseEventArgs@)">
            <summary>
            
            </summary>
            <param name="mouseEventArgs"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.FireCancel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.SetMouseCaptureAndCursor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.ReleaseMouseCaptureAndCursor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NDragTool.ObtainControlCursor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.Windows.NIndicatorDragTool">
            <summary>
            This class represents an indicator drag tool allowing the user to drag marker and needle indicators
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NIndicatorDragTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NIndicatorDragTool.Step">
            <summary>
            The change in the rotation parameter of the chart view when the user presses the left or right arrow buttons.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NIndicatorDragTool.IncreaseValueShortcut">
            <summary>
            The keyboard command associated with indicator value increase with the specified step.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NIndicatorDragTool.DecreaseValueShortcut">
            <summary>
            The keyboard command associated with indicator value decrease with the specified step.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NIndicatorDragTool.CanBeginDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Return true if dragging can start
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NIndicatorDragTool.DoWheel(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Processes wheel operations
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Nevron.Chart.Windows.NCursorTool">
            <summary>
            When present in the Tools collection instructs the 
            control to change the mouse cursor depending on the underlying chart object.
            </summary>
            <remarks>
            By default all chart objects have the default cursor so you must also 
            modify the Cursor property of the objects that you want to change the 
            mouse cursor.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.Windows.NCursorTool.#ctor">
            <summary>
            Creates a new NCursorTool object.
            </summary>
            <remarks>
            You must add the object to the Tools of the chart controller in 
            order to enable the cursor change feature.
            </remarks>
        </member>
        <member name="T:Nevron.Chart.Windows.NInteractivityTool">
            <summary>
            Base for all tools that use attributes from the NInteractivityStyle object.
            </summary>
        </member>
        <member name="T:Nevron.Chart.Windows.NTooltipTool">
            <summary>
            When present in the Tools collection instructs the 
            control to display tooltips for the chart elements that have an 
            assigned tooltip.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NTooltipTool.#ctor">
            <summary>
            Creates a new NTooltipTool object with default settings.
            </summary>
            <remarks>
            This constructor sets AutoPopDelay to 5000ms, InitialDelay to 500ms 
            and Reshow delay to 100ms.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.Windows.NTooltipTool.AutoPopDelay">
            <summary>
            Controls the period of time the tooltips remain visible if the 
            mouse pointer is stationary within the chart.
            </summary>
            <remarks>
            This property enables you to shorten or lengthen the time that the 
            tooltip window is displayed when the mouse pointer is over a control. 
            For example, if you display extensive help in a tooltip window, you 
            can increase the value of this property to ensure that the user has 
            sufficient time to read the text.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.Windows.NTooltipTool.InitialDelay">
            <summary>
            Gets or sets the time that passes before the tooltip appears.
            </summary>
            <remarks>
            This property enables you to shorten or lengthen the time that the 
            chart control waits before displaying a tooltip window. If the value 
            of the InitialDelay property is set to a value that is too long 
            in duration, the user of your application may not know that your 
            application provides tooltip help. You can use this property to 
            ensure that the user has tooltips displayed quickly by shortening 
            the time specified.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.Windows.NTooltipTool.ReshowDelay">
            <summary>
            Gets or sets the length of time that must transpire before subsequent 
            tooltip windows appear as the mouse pointer moves from one chart 
            element to another.
            </summary>
            <remarks>
            This property enables you to shorten or lengthen the time that the 
            tooltip waits before displaying a tooltip window after a previous 
            tooltip window is displayed. The first time a tooltip window is 
            displayed the value of the InitialDelay property is used to determine 
            the delay to apply before initially showing the tooltip window. When 
            a tooltip window is currently being displayed and the user moves the 
            cursor to another chart element or control that displays a tooltip 
            window, the value of the ReshowDelay property is used before showing 
            the tooltip for the new control. The tooltip window from the previous 
            control must still be displayed in order for the delay specified in 
            the ReshowDelay property to be used; otherwise the InitialDelay 
            property value is used.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.Windows.NTooltipTool.GetTooltipFromPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            Gets the tooltip from the specified mouse position
            </summary>
            <param name="mousePosition"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.Windows.NTool">
            <summary>
            The base class for all interactivity tools.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NTool.#ctor">
            <summary>
            Creates a new NTool object.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NTool.Enabled">
            <summary>
            Gets or sets whether the tool is enabled
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NTool.IsActive">
            <summary>
            Returns true if this tool is the active tool
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NTool.CaptureMouseWhenActive">
            <summary>
            Gets or sets whether the tool will capture all mouse input when it is the active tool
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NTool.Activate">
            <summary>
            Activates this tool.
            </summary>
            <remarks>
            When a tool is active it will receive all event notifications and they will not be
            dispatched to the other tools in the tools collection.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.Windows.NTool.Deactivate">
            <summary>
            Deactivates this tool.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NTool.GetOuterControl">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NTool.Repaint">
            <summary>
            Repaints the control
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NTool.RepaintOverlay">
            <summary>
            Repaints the chart overlay
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NTool.GetDocument">
            <summary>
            Gets the current chart document
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NTool.GetController">
            <summary>
            Gets the controller hosting this tool
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NTool.GetSelection">
            <summary>
            Gets the selection this tool operates on
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NTool.GetSelectedObjectsOfType(System.Type)">
            <summary>
            Gets the selected objects of the specified type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NTool.OnMouseDown(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            On Mouse Down
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NTool.OnMouseMove(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            On Mouse Move
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NTool.OnMouseUp(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            On Mouse Up
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NTool.OnMouseLeave(System.Object,System.EventArgs)">
            <summary>
            On Mouse Leave
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NTool.OnMouseHover(System.Object,System.EventArgs)">
            <summary>
            On Mouse Hover
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NTool.OnMouseEnter(System.Object,System.EventArgs)">
            <summary>
            On Mouse Enter
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NTool.OnMouseWheel(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            On Mouse Wheel
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NTool.OnKeyDown(System.Object,Nevron.Chart.Windows.NKeyEventArgs)">
            <summary>
            On Key Down
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NTool.OnKeyPress(System.Object,Nevron.Chart.NKeyPressEventArgs)">
            <summary>
            On Key Press
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NTool.OnKeyUp(System.Object,Nevron.Chart.Windows.NKeyEventArgs)">
            <summary>
            On Key Up
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NTool.GetContext">
            <summary>
            Gets the current rendering context
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NTool.GetSelectedCharts">
            <summary>
            Gets an array of selected charts
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NTool.GetSelectedContentPanels">
            <summary>
            Gets an array of the currently selected panels
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.Windows.NOffsetTool">
            <summary>
            This class represents the offset tool. The offset 
            feature of the control enables the end user to move panels on the canvas
            by pressing the mouse button and then dragging the mouse over the control. 
            The panel will move accordingly.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NOffsetTool.#ctor">
            <summary>
            Creates a new NOffsetTool object.
            </summary>
            <remarks>
            You must add the object to the InteractivityCollection of 
            the control in order to enable the mouse offset feature.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.Windows.NOffsetTool.HorizontalStep">
            <summary>
            The change in the x margin location parameter of the chart view when the user presses the left or right arrow buttons.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NOffsetTool.VerticalStep">
            <summary>
            The change in the y margin location parameter of the chart view when the user presses the up or down arrow buttons.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NOffsetTool.MoveLeftShortcut">
            <summary>
            The keyboard command associated with left move.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NOffsetTool.MoveRightShortcut">
            <summary>
            The keyboard command associated with right rotation.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NOffsetTool.MoveUpShortcut">
            <summary>
            The keyboard command associated with upward move.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NOffsetTool.MoveDownShortcut">
            <summary>
            The keyboard command associated with down move.
            </summary>
        </member>
        <member name="E:Nevron.Chart.Windows.NOffsetTool.LocationChanged">
            <summary>
            Occurs when the panel location has changed.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NOffsetTool.CanBeginDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Return true if dragging can start
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NOffsetTool.GetSelectedDockPanels">
            <summary>
            Gets the selected dock panels
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.Windows.NPanelSelectorTool">
            <summary>
            Modifies the Selection object based on the object the mouse is currently over.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NPanelSelectorTool.#ctor">
            <summary>
            Initializer contructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NPanelSelectorTool.SelectionMode">
            <summary>
            Gets/sets th SelectionMode
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NPanelSelectorTool.Focus">
            <summary>
            Gets or sets whether to focus the control when a mouse down occurs
            </summary>
        </member>
        <member name="E:Nevron.Chart.Windows.NPanelSelectorTool.SelectionChanged">
            <summary>
            Occurs when the Selection object has changed.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NPanelSelectorTool.OnMouseDown(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Nevron.Chart.Windows.NSelectorTool">
            <summary>
            Modifies the Selection object based on the object the mouse is currently over.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NSelectorTool.#ctor">
            <summary>
            Initializer contructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NSelectorTool.Mode">
            <summary>
            Gets/sets the selector tool mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NSelectorTool.SelectionMode">
            <summary>
            Gets/sets th SelectionMode
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NSelectorTool.Drilldown">
            <summary>
            Whether the selection will drill down.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NSelectorTool.ContainOrIntersect">
            <summary>
            Indicates whether the tool will hit test regions with contain or interect.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NSelectorTool.Focus">
            <summary>
            Gets or sets whether to focus the control when a mouse down occurs
            </summary>
        </member>
        <member name="E:Nevron.Chart.Windows.NSelectorTool.SelectionChanged">
            <summary>
            Occurs when the Selection object has changed.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NSelectorTool.CanBeginDrag(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Return true if dragging can start
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NSelectorTool.OnMouseMove(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NSelectorTool.OnMouseDown(System.Object,Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Nevron.Chart.Windows.NNode">
            <summary>
            Base view node
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NNode.ParentNode">
            <summary>
            Obtains the parent node
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NNode.RootNode">
            <summary>
            Obtains the root of this node
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NNode.Clone">
            <summary>
            Creates an identical copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.Windows.NNodeCollection">
            <summary>
            Summary description for NNodeCollection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NNodeCollection.#ctor(System.Type)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NNodeCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NNodeCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NNodeCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NNodeCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:Nevron.Chart.Windows.NNodeCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NNodeCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Windows.NNodeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NNodeCollection.Add(System.Object)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NNodeCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NNodeCollection.Contains(System.Object)">
            <summary>
            Determines whether the IList contains a specific value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NNodeCollection.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the collection.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.Windows.NNodeCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the collection at the specified position.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NNodeCollection.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the collectino.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.Windows.NNodeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:Nevron.Chart.Windows.NNodeComposite">
            <summary>
            Summary description for NNodeComposite.
            </summary>
        </member>
        <member name="T:Nevron.Chart.Windows.NHitTestCacheService">
            <summary>
            Caches hit testing.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NHitTestCacheService.Reset">
            <summary>
            Resets the service
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NHitTestCacheService.HitTest(Nevron.GraphicsCore.NPointF)">
            <summary>
            Translates a view point to a context segment.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.Windows.NViewService">
            <summary>
            The base class for all view services.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Windows.NViewService.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Nevron.Chart.NKeyPressEventArgs">
            <summary>
            Used as argument in INKeyboardEventHandler delegates
            </summary>
        </member>
        <member name="M:Nevron.Chart.NKeyPressEventArgs.#ctor(Nevron.Chart.INView,System.Char)">
            <summary>
            Initializer constructor
            </summary>
            <param name="view">view from which the event originated</param> 
            <param name="keyChar">key chart</param>
        </member>
        <member name="F:Nevron.Chart.NKeyPressEventArgs.View">
            <summary>
            View from which the event originated
            </summary>
        </member>
        <member name="F:Nevron.Chart.NKeyPressEventArgs.Processed">
            <summary>
            Whether the event was processed. If not processed other keyboard event processors can process it
            </summary>
        </member>
        <member name="T:Nevron.Chart.NOverlayChartElementCollection">
            <summary>
            Summary description for NOverlaySceneTreeItemCollection.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NSettings">
            <summary>
            Controls settings related to the chart rendering and scaling like antialiasing, 
            jittering and 2D object scaling.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSettings.EnableJittering">
            <summary>
            This property is deprecated. You should use the JitterMode property.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSettings.JitterMode">
            <summary>
            Controls the jittering mode (full context antialiasing) feature of the control.
            </summary>
            <remarks>
            Jittering or blurring is an efficient way to antialias the whole context including 
            polygons. In some cases it can also produce images with better quality that 
            antialiasing because it antialiases polygons also. The idea behind jittering is 
            very simple and this why this special visual effect is so effective. Instead of 
            rendering the context only once the control renders it several times and produces 
            different image samples of the image. All these samples have a small offset along 
            the X and Y directions. The samples are added together with weight coefficients 
            to produce the final image. Jittering is turned off by default.
            </remarks>
            <example>
            The following code enables jittering with 4 samples and four pixel deviation 2.
            <code lang = 'VB'>
            NChartControl.Settings.JitterMode = JitterMode.Enabled;
            NChartControl.Settings.JitteringDeviation = 2
            NChartControl.Settings.JitteringSteps = 4
            </code>
            <code>
            NChartControl.Settings.JitterMode = JitterMode.Enabled
            NChartControl.Settings.JitteringDeviation = 2;
            NChartControl.Settings.JitteringSteps = 4;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSettings.AutoJitterInterval">
            <summary>
            Controls the time period (in ms) to wait until an auto jitter occurs.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSettings.AnimationInterval">
            <summary>
            Gets or sets the animation interval in milliseconds
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSettings.JitteringDeviation">
            <summary>
            The maximum deviation of the jittering samples from the original image in pixels. 
            </summary>
            <remarks>
            The default value for this property is 1. Greater values produce a more blurred image.
            </remarks>
            <example>
            The following code enables jittering with 4 samples and four pixel deviation 2.
            <code lang = 'VB'>
            NChartControl.Settings.EnableJittering = True
            NChartControl.Settings.JitteringDeviation = 2
            NChartControl.Settings.JitteringSteps = 4
            </code>
            <code>
            NChartControl.Settings.EnableJittering = true;
            NChartControl.Settings.JitteringDeviation = 2;
            NChartControl.Settings.JitteringSteps = 4;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSettings.JitteringSteps">
            <summary>
            The number of image samples rendered by the control to produce a jittered image.
            </summary>
            <remarks>
            The values of this property range from 2 to 16 and greater values produce 
            a better blurring effect. The default value is 2.
            </remarks>
            <example>
            The following code enables jittering with 4 samples and pixel deviation 2.
            <code lang = 'VB'>
            NChartControl.Settings.EnableJittering = True
            NChartControl.Settings.JitteringDeviation = 2
            NChartControl.Settings.JitteringSteps = 4
            </code>
            <code>
            NChartControl.Settings.EnableJittering = true;
            NChartControl.Settings.JitteringDeviation = 2;
            NChartControl.Settings.JitteringSteps = 4;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSettings.ShapeRenderingMode">
            <summary>
            Controls the antialising (smoothing) feature of the control.
            </summary>
            <remarks>
            Nevron Chart for .NET can antialias the lines and points rendered by the control. 
            This property is set to SmoothingMode.AntiAlias by default. You may wish to turn off the antialising to 
            increase the performance.
            </remarks>
            <example>
            The following code disables the antialiasing:
            <code lang = 'VB'>
            NChartControl.Settings.ShapeRenderingMode = ShapeRenderingMode.None
            </code>
            <code>
            NChartControl.Settings.ShapeRenderingMode = ShapeRenderingMode.None;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSettings.TextRenderingHint">
            <summary>
            Controls the text rendering hint (antialising) applied to text in the control.
            </summary>
            <remarks>
            This property is set to TextRenderingHint.SystemDefault by default.
            </remarks>
            <example>
            The following sets higher antialiasing for the control texts.
            <code lang = 'VB'>
            NChartControl.Settings.TextRenderingHint = TextRenderingHint.AntiAlias
            </code>
            <code>
            NChartControl.Settings.SmoothingMode = TextRenderingHint.AntiAlias;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSettings.RenderSurface">
            <summary>
            Whether or not to render the chart to a bitmap or use a double buffer window.
            </summary>
            <remarks>
            OpenGL supports rendering in a GDI bitmap or Win32 window specially configured 
            for OpenGL rendering. In Window mode the chart will automatically leverage the 
            video board 3D acceleration. Because it is not guaranteed that the video drivers 
            are up to date, the control uses by the default the slower but more robust mode � GDI 
            bitmap. You may instruct the chart to render to a window at any time by setting 
            the RenderToBitmap property to false.
            </remarks>
            <example>
            The following code will configure the chart to create a window render surface.
            <code lang = 'VB'>
            NChartControl1.Settings.RenderToBitmap = False
            </code>
            <code>
            NChartControl1.Settings.RenderSurface = RenderSurface.Window;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSettings.TransparentBackground">
            <summary>
            Controls the opacity of the background. 
            </summary>
            <remarks>
            When set to true the NBackgroundStyle object of the chart will 
            not be rendered resulting in a transparent background. Note that 
            rendering with transparent background is slower.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NSettings.MinLineHitTestWidth">
            <summary>
            Gets or sets the minimim line width acceptable for hit testing
            </summary>
            <remarks>
            By default this property is set to 3 thus allowing the end user to easily select
            tiny lines.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NSettings.MultiThreadMode">
            <summary>
            Gets or sets the multithread mode of the control
            </summary>
        </member>
        <member name="T:Nevron.Chart.NViewEventArgs">
            <summary>
            Used as argument in view events
            </summary>
        </member>
        <member name="M:Nevron.Chart.NViewEventArgs.#ctor(Nevron.Chart.INView)">
            <summary>
            Initializer constructor
            </summary>
            <param name="view"></param>
        </member>
        <member name="F:Nevron.Chart.NViewEventArgs.View">
            <summary>
            View in which the event originated
            </summary>
        </member>
        <member name="F:Nevron.Chart.NViewEventArgs.Processed">
            <summary>
            Whether the event was processed. If not processed other processors can process it
            </summary>
        </member>
        <member name="T:Nevron.Chart.NChartPreviewControl">
            <summary>
            Draws preview of a chart control
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartPreviewControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:Nevron.Chart.CSVReader.NCsvColumn">
            <summary>
            Represents a schema of a column in NCSVReader.
            </summary>
        </member>
        <member name="M:Nevron.Chart.CSVReader.NCsvColumn.#ctor(System.String)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Nevron.Chart.CSVReader.NCsvColumn.Name">
            <summary>
            Gets/Sets the column name.
            </summary>
        </member>
        <member name="P:Nevron.Chart.CSVReader.NCsvColumn.DefaultNullValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.CSVReader.NCsvColumn.Empty">
            <summary>
            Whether the column is empty
            </summary>
        </member>
        <member name="M:Nevron.Chart.CSVReader.NCsvColumn.Parse(System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.CSVReader.NCsvColumn.DataType">
            <summary>
            Gets/Set the type of the column.
            </summary>
        </member>
        <member name="T:Nevron.Chart.CSVReader.NDecimalCsvColumn">
            <summary>
            Represents CSV column with decimal values.
            </summary>
        </member>
        <member name="T:Nevron.Chart.CSVReader.NSingleCsvColumn">
            <summary>
            Represents CSV column with single values.
            </summary>
        </member>
        <member name="T:Nevron.Chart.CSVReader.NDoubleCsvColumn">
            <summary>
            Represents CSV column with double values.
            </summary>
        </member>
        <member name="T:Nevron.Chart.CSVReader.NInt64CsvColumn">
            <summary>
            Represents CSV column with Int64 values.
            </summary>
        </member>
        <member name="T:Nevron.Chart.CSVReader.NInt32CsvColumn">
            <summary>
            Represents CSV column with Int32 values.
            </summary>
        </member>
        <member name="T:Nevron.Chart.CSVReader.NStringCsvColumn">
            <summary>
            Represents CSV column with string values.
            </summary>
        </member>
        <member name="T:Nevron.Chart.CSVReader.NCsvReader">
            <summary>
            Represents a reader which reads data from csv formated file or stream.
            </summary>
        </member>
        <member name="M:Nevron.Chart.CSVReader.NCsvReader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.CSVReader.NCsvReader.LoadDataTableFromFile(System.String)">
            <summary>
            Loads the data from csv file to DataTable.
            </summary>
            <param name="fileName">A relative or absolute path to the csv file.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> which contains the data from the csv file.</returns>
        </member>
        <member name="M:Nevron.Chart.CSVReader.NCsvReader.LoadDataTableFromStream(System.IO.Stream)">
            <summary>
            Reads the data from <see cref="T:System.IO.Stream"/> with csv content to a <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which to read the csv data.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> which contains the data from the stream.</returns>
        </member>
        <member name="P:Nevron.Chart.CSVReader.NCsvReader.BufferSize">
            <summary>
            Gets/Sets the buffer size of the reader buffer. 
            <para>Default value is 512.</para>
            </summary>        
        </member>
        <member name="P:Nevron.Chart.CSVReader.NCsvReader.CellSeparator">
            <summary>
            Gets/Sets the value of cell delimeter.
            <para>Default value is ",".</para>
            </summary>
        </member>
        <member name="P:Nevron.Chart.CSVReader.NCsvReader.LineSeparators">
            <summary>
            Gets/Sets the value of new row delimeter.
            <para>Default value is ";"</para>
            </summary>
        </member>
        <member name="P:Nevron.Chart.CSVReader.NCsvReader.EscapeCharacter">
            <summary>
            Gets/Sets the value of the escape character.
            <para>Default value is "\"</para>
            </summary>
        </member>
        <member name="P:Nevron.Chart.CSVReader.NCsvReader.HasHeader">
            <summary>
            Gets/Sets a value whether the csv file has a header row. 
            If is set to true the first row of the file will be omited.
            <para>The default value is false.</para>
            </summary>
        </member>
        <member name="P:Nevron.Chart.CSVReader.NCsvReader.QuotedCellIfContainsDelimiter">
            <summary>
            Gets/Sets a value whether in csv file if cell contain cell delimiter the content of the cell is quoted.
            <para>Default value is true.</para>
            </summary>
        </member>
        <member name="P:Nevron.Chart.CSVReader.NCsvReader.TrimCell">
            <summary>
            Gets/Sets a value whether the leading and trailing spaces in cell should be ignored.
            <para>The default value is true.</para>
            </summary>
        </member>
        <member name="P:Nevron.Chart.CSVReader.NCsvReader.Columns">
            <summary>
            Gets the list of NCsvColumns.
            </summary>
        </member>
        <member name="P:Nevron.Chart.CSVReader.NCsvReader.FormatProvider">
            <summary>
            Get/Set 
            <para>Default value is CultureInfo.InvariantCulture</para>
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDataBindingManager">
            <summary>
            Controls the database integration of the chart control.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataBindingManager.EnableDataBinding">
            <summary>
            Gets or sets a value indicating whether the data binding is enabled.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataBindingManager.RefreshChartOnChange">
            <summary>
            Indicates whether the chart should be repainted on update.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataBindingManager.AddBinding(System.Int32,System.Int32,System.String,System.Object,System.String)">
            <summary>
            Binds a chart data series to a column in a data source.
            </summary>
            <param name="chartIndex">the index of the chart that contains the data series</param>
            <param name="seriesIndex">the index of the series that contains the data series</param>
            <param name="dataSeries">the name of the property that exposes the data series</param>
            <param name="dataSource">the data source (DataTable, DataSet, DataView or DataAdapter)</param>
            <param name="dataMember">the name of the column to bind to. In case of a DataSet use the "TableName.ColumnName" format.</param>
        </member>
        <member name="M:Nevron.Chart.NDataBindingManager.RemoveBindingsForSeries(Nevron.Chart.NSeriesBase)">
            <summary>
            Removes the data bindings for all the data series of the specified series.
            </summary>
            <param name="series"></param>
        </member>
        <member name="M:Nevron.Chart.NDataBindingManager.RemoveBindingsForChart(Nevron.Chart.NChart)">
            <summary>
            Removes the data bindings for all the data series of the specified chart.
            </summary>
            <param name="chart"></param>
        </member>
        <member name="M:Nevron.Chart.NDataBindingManager.RemoveAllBindings">
            <summary>
            Removes all the data bindings.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataBindingManager.UpdateChartControl">
            <summary>
            Updates the chart control from the data sources.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataBindingManager.ShowDialog(System.Object[])">
            <summary>
            Displays a dialog window that enables you to visually edit data bindings.
            </summary>
            <param name="dataSources">
            an array of data source objects that should be 
            displayed in the dialog as data sources
            </param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NDataBindingWizardForm">
            <summary>
            Summary description for NDataBindingWizardForm.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataBindingWizardForm.#ctor">
            <summary>
            Creates a new data binding wizard form.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataBindingWizardForm.#ctor(Nevron.Chart.NDocument,System.ComponentModel.ISite)">
            <summary>
            Creates a new data binding wizard form.
            </summary>
            <param name="document"></param>
            <param name="site"></param>
        </member>
        <member name="M:Nevron.Chart.NDataBindingWizardForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataBindingWizardForm.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NExcelReader">
            <summary>
            Represents a reader which reads Excel files into a DataSets.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NExcelReader.ReadAll(System.String)">
            <summary>
            Reads all data from provided Excel file.
            </summary>
            <param name="fileName">A relative or absolute path to the Excel file.</param>
            <returns>DataSet with DataTables for each Excel sheet.</returns>
        </member>
        <member name="M:Nevron.Chart.NExcelReader.ReadAll(System.IO.FileStream)">
            <summary>
            Reads all data from provided FileStream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.FileStream"/> from which to read the Excel data.</param>
            <returns>DataSet with DataTables for each Excel sheet.</returns>
        </member>
        <member name="M:Nevron.Chart.NExcelReader.ReadRange(System.IO.FileStream,System.String,System.String)">
            <summary>
            Reads a range of cells from provided file stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.FileStream"/> from which to read the Excel data.</param>
            <param name="sheetName">The name of the sheet that contains the data.</param>
            <param name="range">The range of cells in Excel annotaion. <para>For example "A1:G20"</para></param>
            <returns>DataSet with single table which content is the selected range.</returns>
        </member>
        <member name="M:Nevron.Chart.NExcelReader.ReadRange(System.String,System.String,System.String)">
            <summary>
            Reads a range of cells from provided Excel file.
            </summary>
            <param name="fileName">A relative or absolute path to the Excel file.</param>
            <param name="sheetName">The name of the sheet that contains the data.</param>
            <param name="range">The range of cells in Excel annotaion. <para>For example "A1:G20"</para></param>
            <returns>DataSet with single table which content is the selected range.</returns>
        </member>
        <member name="T:Nevron.Chart.Functions.NArgumentCollection">
            <summary>
            Represents a collection of NDataSeries objects which participate in a function 
            expression as arguments (data sources). Each NFunctionCalculator object has an 
            associated argument collection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Functions.NArgumentCollection.Add(Nevron.Chart.NDataSeriesDouble)">
            <summary>
            Adds a new argument to the collection. All the data series that participate in 
            a function expression must be added to the collection before calculating the 
            function.
            </summary>
            <remarks>
            The names of the data series in the argument collection must be unique so 
            sometimes it may be necessary to rename a data series before adding it. 
            The names can contain all kinds of characters except '{' and '}'. They 
            cannot consist of whitespaces only.
            </remarks>
            <example>
            The following example adds two data series to the argument collection and 
            sets an expression which uses them.
            <code>
            barSeries1.Values.Name = "Apples";
            barSeries2.Values.Name = "Oranges";
            functionCalculator.Arguments.Clear();
            functionCalculator.Arguments.Add(barSeries1.Values);
            functionCalculator.Arguments.Add(barSeries2.Values);
            functionCalculator.Expression = "ADD(Apples ; Oranges)";
            </code>
            </example>
            <param name="ds">The data series object to be added to the collection.</param>
        </member>
        <member name="M:Nevron.Chart.Functions.NArgumentCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the argument at the specified index from the collection.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Chart.Functions.NArgumentCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Functions.NArgumentCollection.Count">
            <summary>
            Gets the number of data series (arguments) in the collection.
            </summary>
        </member>
        <member name="T:Nevron.Chart.Functions.NFunctionCalculator">
            <summary>
            Instances of this class can be used for calculation of various mathematical, 
            statistical and financial functions.
            </summary>
        </member>
        <member name="M:Nevron.Chart.Functions.NFunctionCalculator.#ctor">
            <summary>
            Creates a new instance of the NFunctionCalculator class.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Functions.NFunctionCalculator.Arguments">
            <summary>
            Gets or sets a collection of the data series which are used in the 
            function calculation as arguments.
            </summary>
        </member>
        <member name="P:Nevron.Chart.Functions.NFunctionCalculator.Expression">
            <summary>
            The Expression property defines the function expression or in other words 
            the formula of the function. The expression can be constructed to represent 
            various functions.
            </summary>
            <example>
            The following code sets an expression for the ADD function with two arguments.
            <code>
            barSeries1.Values.Name = "Apples";
            barSeries2.Values.Name = "Oranges";
            functionCalculator.Arguments.Clear();
            functionCalculator.Arguments.Add(barSeries1.Values);
            functionCalculator.Arguments.Add(barSeries2.Values);
            functionCalculator.Expression = "ADD(Apples ; Oranges)";
            </code>
            </example>
        </member>
        <member name="M:Nevron.Chart.Functions.NFunctionCalculator.Validate">
            <summary>
            Checks if the current argument collection and the current expression are valid.
            </summary>
            <exception cref="T:Nevron.Chart.Functions.NFunctionException">Raised if there are some invalid arguments or a syntax error in the expression.</exception>
        </member>
        <member name="M:Nevron.Chart.Functions.NFunctionCalculator.Calculate">
             <summary>
             Calculates a function which is defined by the current expression and arguments.
             </summary>
             <exception cref="T:Nevron.Chart.Functions.NFunctionException">
             Raised if there are some invalid arguments or a syntax error in the expression.
             </exception>
             <example>
             The following code Calculates a function and presents the result data 
             in a line chart.
             <code>
             // ... setup the lineSeries
             // ... setup the functionCalculator (arguments and expression)
             
            	lineSeries.Values = functionCalculator.Calculate();
            	lineSeries.Values.ValueFormatter = new NNumericValueFormatter("0.00");
            
            	chartControl.Refresh();
             </code>
             </example>
             <returns>
             The function returns an NDataSeries object which contains the result of 
             the calculation. If the expression is empty the function returns null.
             </returns>
        </member>
        <member name="T:Nevron.Chart.Functions.NFunctionException">
            <summary>
            Thrown when an error occures in the function calculation.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NImageExporter">
            <summary>
            This object provides the functionality related to export images generated by Nevron Chart for .NET.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NImageExporter.#ctor(Nevron.Chart.NDocument,Nevron.GraphicsCore.NSize)">
            <summary>
            Initializer constructor
            </summary>
            <param name="document"></param>
            <param name="defaultSize"></param>
        </member>
        <member name="P:Nevron.Chart.NImageExporter.DefaultImageSize">
            <summary>
            Gets or sets the default image size associated with the image exporter
            </summary>
            <remarks>
            By default the image exporter will try to synchronize with the chart document view dimensions.
            If the document is not connected to a view the default size is 200x200 pixels. You may alter the default 
            size by passing a NSize value with positive width and height. 
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NImageExporter.CopyToClipboard(Nevron.GraphicsCore.INImageFormat)">
            <summary>
            Places an object corresponding to the specified image format in the clipboard.
            </summary>
            <param name="imageFormat"></param>
            <remarks>
            The dimensions of the image depend on the control size.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NImageExporter.CopyToClipboard(Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution,Nevron.GraphicsCore.INImageFormat)">
            <summary>
            Places an object corresponding to the specified image format and dimensions in the clipboard.
            </summary>
            <param name="dimensions"></param>
            <param name="resolution"></param>
            <param name="imageFormat"></param>
        </member>
        <member name="M:Nevron.Chart.NImageExporter.SaveToFile(System.String,Nevron.GraphicsCore.INImageFormat)">
            <summary>
            Saves the current chart image to a file using the dimensions of the primary chart view.
            </summary>
            <param name="fileName">full file name</param>
            <param name="imageFormat">the image format used to encode the image</param>
        </member>
        <member name="M:Nevron.Chart.NImageExporter.SaveToFile(System.String,Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution,Nevron.GraphicsCore.INImageFormat)">
            <summary>
            Saves the current chart image to a file
            </summary>
            <param name="fileName">full file name</param>
            <param name="dimensions">the dimensions of the image in pixels</param>
            <param name="resolution">the resolution of the exported image</param>
            <param name="imageFormat">the image format used to encode the image</param>
        </member>
        <member name="M:Nevron.Chart.NImageExporter.SaveToStream(System.IO.Stream,Nevron.GraphicsCore.INImageFormat)">
            <summary>
            Saves the current chart image to a stream using the dimensions of the primary chart view.
            </summary>
            <param name="stream">output stream</param>
            <param name="imageFormat">the image format used to encode the image</param>
        </member>
        <member name="M:Nevron.Chart.NImageExporter.SaveToStream(System.IO.Stream,Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution,Nevron.GraphicsCore.INImageFormat)">
            <summary>
            Saves the current chart image to a stream using specified dimensions.
            </summary>
            <param name="stream">a stream to export the image</param>
            <param name="dimensions">the dimensions of the image in pixels</param>
            <param name="resolution">the resolution of the image</param>
            <param name="imageFormat">the format of the image</param>
        </member>
        <member name="M:Nevron.Chart.NImageExporter.ShowDialog">
            <summary>
            Shows an import export / dialog.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NImageExporter.RenderToBitmap(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Renders the current context to a System.Drawing.Bitmap object.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NImageExporter.GetImageBytes(Nevron.GraphicsCore.INImageFormat)">
            <summary>
            Gets the image bytes in the specified image format
            </summary>
            <param name="imageFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NImageExporter.GetImageBytes(Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution,Nevron.GraphicsCore.INImageFormat)">
            <summary>
            Gets the image bytes in the specified image format, dimensions and resolution
            </summary>
            <param name="dimensions"></param>
            <param name="resolution"></param>
            <param name="imageFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NImageExporter.RenderToGraphics(Nevron.GraphicsCore.NRectangle,System.Drawing.Graphics)">
            <summary>
            Renders the chart in the specified graphics object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NImageExportTypeEditor">
            <summary>
            Summary description for NImageExportTypeEditor.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NChartImageFormatProvider">
            <summary>
            Summary description for NChartImageFormatProvider.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartImageFormatProvider.#ctor(Nevron.Chart.NDocument)">
            <summary>
            Initializer constructor
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Nevron.Chart.NChartImageFormatProvider.ProvideImage(Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution,Nevron.GraphicsCore.INImageFormat)">
            <summary>
            Provides an image with the specifies dimensions and format.
            </summary>
            <param name="dimensions"></param>
            <param name="resolution"></param>
            <param name="imageFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NChartImageFormatProvider.ProvideImage(Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NRectangle,Nevron.GraphicsCore.NResolution,Nevron.GraphicsCore.INImageFormat)">
            <summary>
            Provides an image with the specifies dimensions and format.
            </summary>
            <param name="dimensions"></param>
            <param name="viewport"></param>
            <param name="resolution"></param>
            <param name="imageFormat"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NChartRasterImageFormatProvider">
            <summary>
            Summary description for NChartRasterImageFormatProvider.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartRasterImageFormatProvider.#ctor(Nevron.Chart.NDocument)">
            <summary>
            Initializer constructor
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Nevron.Chart.NChartRasterImageFormatProvider.ProvideImage(Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution,Nevron.GraphicsCore.INImageFormat)">
            <summary>
            Provides a raster image with the specifies dimensions and format.
            </summary>
            <param name="dimensions"></param>
            <param name="resolution"></param>
            <param name="imageFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NChartRasterImageFormatProvider.ProvideImage(Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NRectangle,Nevron.GraphicsCore.NResolution,Nevron.GraphicsCore.INImageFormat)">
            <summary>
            Provides a raster image with the specifies dimensions and format.
            </summary>
            <param name="dimensions"></param>
            <param name="viewport"></param>
            <param name="resolution"></param>
            <param name="imageFormat"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NChartRasterImageFormatProvider.ProvidedMimeTypes">
            <summary>
            Obtains an array of the provided mime types
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleStripFillStyleStyleApplicator">
            <summary>
            Applies a stroke style to the axis major and minor grid style
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleStripFillStyleStyleApplicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleStripFillStyleStyleApplicator.#ctor(Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fillStyle"></param>
        </member>
        <member name="M:Nevron.Chart.NScaleStripFillStyleStyleApplicator.Apply(Nevron.Chart.NChartElement)">
            <summary>
            Applies the settings contained in this applicator to the specfied chart element
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:Nevron.Chart.NAxisGridStrokeStyleApplicator">
            <summary>
            Applies a stroke style to the axis major and minor grid style
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisGridStrokeStyleApplicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisGridStrokeStyleApplicator.#ctor(Nevron.GraphicsCore.NStrokeStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="strokeStyle"></param>
        </member>
        <member name="M:Nevron.Chart.NAxisGridStrokeStyleApplicator.ApplyStrokeToScale(Nevron.Chart.NStandardScaleConfigurator)">
            <summary>
            Apply stroke style to scale
            </summary>
            <param name="scale"></param>
        </member>
        <member name="T:Nevron.Chart.NAxisRulerFillStyleApplicator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisRulerFillStyleApplicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisRulerFillStyleApplicator.#ctor(Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fillStyle"></param>
        </member>
        <member name="M:Nevron.Chart.NAxisRulerFillStyleApplicator.Apply(Nevron.Chart.NChartElement)">
            <summary>
            Applies the settings contained in this applicator to the specfied chart element
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:Nevron.Chart.NAxisRulerStrokeStyleApplicator">
            <summary>
            Applies stroke style to the axis ruler
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisRulerStrokeStyleApplicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisRulerStrokeStyleApplicator.#ctor(Nevron.GraphicsCore.NStrokeStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="strokeStyle"></param>
        </member>
        <member name="M:Nevron.Chart.NAxisRulerStrokeStyleApplicator.Apply(Nevron.Chart.NChartElement)">
            <summary>
            Applies the settings contained in this applicator to the specfied chart element
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:Nevron.Chart.NAxisStrokeStyleApplicator">
            <summary>
            Base for all axis stroke style applicators
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisStrokeStyleApplicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisStrokeStyleApplicator.#ctor(Nevron.GraphicsCore.NStrokeStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="strokeStyle"></param>
        </member>
        <member name="M:Nevron.Chart.NAxisStrokeStyleApplicator.Apply(Nevron.Chart.NChartElement)">
            <summary>
            Applies the settings contained in this applicator to the specfied chart element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Chart.NAxisStrokeStyleApplicator.ApplyStrokeToScale(Nevron.Chart.NStandardScaleConfigurator)">
            <summary>
            Apply stroke style to scale
            </summary>
            <param name="scale"></param>
        </member>
        <member name="T:Nevron.Chart.NAxisTickStrokeStyleApplicator">
            <summary>
            Applies stroke style to the axis minor and major ticks
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisTickStrokeStyleApplicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisTickStrokeStyleApplicator.#ctor(Nevron.GraphicsCore.NStrokeStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="strokeStyle"></param>
        </member>
        <member name="M:Nevron.Chart.NAxisTickStrokeStyleApplicator.ApplyStrokeToScale(Nevron.Chart.NStandardScaleConfigurator)">
            <summary>
            Apply stroke style to scale
            </summary>
            <param name="scale"></param>
        </member>
        <member name="T:Nevron.Chart.NControlBackgroundFillStyleApplicator">
            <summary>
            Applies fill style to the control background
            </summary>
        </member>
        <member name="M:Nevron.Chart.NControlBackgroundFillStyleApplicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NControlBackgroundFillStyleApplicator.#ctor(Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fillStyle"></param>
        </member>
        <member name="M:Nevron.Chart.NControlBackgroundFillStyleApplicator.Apply(Nevron.Chart.NChartElement)">
            <summary>
            Applies the settings contained in this applicator to the specfied chart element
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:Nevron.Chart.NPanelBackgroundFillStyleApplicator">
            <summary>
            Applies fill style to the panel background
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPanelBackgroundFillStyleApplicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPanelBackgroundFillStyleApplicator.#ctor(Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fillStyle"></param>
        </member>
        <member name="M:Nevron.Chart.NPanelBackgroundFillStyleApplicator.Apply(Nevron.Chart.NChartElement)">
            <summary>
            Applies the settings contained in this applicator to the specfied chart element
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:Nevron.Chart.NPanelBorderFillStyleApplicator">
            <summary>
            Applies fill style to the panel background
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPanelBorderFillStyleApplicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPanelBorderFillStyleApplicator.#ctor(System.Drawing.Color)">
            <summary>
            Initializer constructor
            </summary>
            <param name="borderColor"></param>
        </member>
        <member name="P:Nevron.Chart.NPanelBorderFillStyleApplicator.BorderColor">
            <summary>
            Gets or sets the border color
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPanelBorderFillStyleApplicator.Apply(Nevron.Chart.NChartElement)">
            <summary>
            Applies the settings contained in this applicator to the specfied chart element
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:Nevron.Chart.NIndicatorFillStyleApplicator">
            <summary>
            Applies fill style to gauge indicators
            </summary>
        </member>
        <member name="M:Nevron.Chart.NIndicatorFillStyleApplicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NIndicatorFillStyleApplicator.#ctor(System.Collections.Generic.List{Nevron.GraphicsCore.NFillStyle})">
            <summary>
            Initializer constructor
            </summary>
            <param name="fillStyles"></param>
        </member>
        <member name="P:Nevron.Chart.NIndicatorFillStyleApplicator.FillStyles">
            <summary>
            Gets or sets the fill styles applied by the applicator
            </summary>
        </member>
        <member name="M:Nevron.Chart.NIndicatorFillStyleApplicator.Apply(Nevron.Chart.NChartElement)">
            <summary>
            Applies the settings contained in this applicator to the specfied chart element
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:Nevron.Chart.NIndicatorStrokeStyleApplicator">
            <summary>
            Applies stroke style to gauge indicators
            </summary>
        </member>
        <member name="M:Nevron.Chart.NIndicatorStrokeStyleApplicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NIndicatorStrokeStyleApplicator.#ctor(System.Collections.Generic.List{Nevron.GraphicsCore.NStrokeStyle})">
            <summary>
            Initializer constructor
            </summary>
            <param name="strokeStyles"></param>
        </member>
        <member name="P:Nevron.Chart.NIndicatorStrokeStyleApplicator.StrokeStyles">
            <summary>
            Gets or sets the stroke styles applied by the applicator
            </summary>
        </member>
        <member name="M:Nevron.Chart.NIndicatorStrokeStyleApplicator.Apply(Nevron.Chart.NChartElement)">
            <summary>
            Applies the settings contained in this applicator to the specfied chart element
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:Nevron.Chart.NGaugeAxisLabelFillStyleApplicator">
            <summary>
            Applies fill style to gauge labels
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGaugeAxisLabelFillStyleApplicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGaugeAxisLabelFillStyleApplicator.#ctor(Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fillStyle"></param>
        </member>
        <member name="M:Nevron.Chart.NGaugeAxisLabelFillStyleApplicator.Apply(Nevron.Chart.NChartElement)">
            <summary>
            Applies the settings contained in this applicator to the specfied chart element
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:Nevron.Chart.NLabelFillStyleApplicator">
            <summary>
            Applies fill style to chart labels
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLabelFillStyleApplicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLabelFillStyleApplicator.#ctor(Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fillStyle"></param>
        </member>
        <member name="M:Nevron.Chart.NLabelFillStyleApplicator.Apply(Nevron.Chart.NChartElement)">
            <summary>
            Applies the settings contained in this applicator to the specfied chart element
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:Nevron.Chart.NLabelStrokeStyleApplicator">
            <summary>
            Applies stroke style to chart labels
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLabelStrokeStyleApplicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLabelStrokeStyleApplicator.#ctor(Nevron.GraphicsCore.NStrokeStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="strokeStyle"></param>
        </member>
        <member name="M:Nevron.Chart.NLabelStrokeStyleApplicator.Apply(Nevron.Chart.NChartElement)">
            <summary>
            Applies the settings contained in this applicator to the specfied chart element
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:Nevron.Chart.NFillStyleApplicator">
            <summary>
            The base of all applicators that apply a fill style to a chart element
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFillStyleApplicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFillStyleApplicator.#ctor(Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fillStyle"></param>
        </member>
        <member name="P:Nevron.Chart.NFillStyleApplicator.FillStyle">
            <summary>
            Gets or sets the fill style of the applicator
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFillStyleApplicator.GetFillStyleClone">
            <summary>
            Gets a copy of the fill style object contained in this applicator
            </summary>
        </member>
        <member name="T:Nevron.Chart.NStrokeStyleApplicator">
            <summary>
            The base of all applicators that apply a stroke style to a chart element
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStrokeStyleApplicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStrokeStyleApplicator.#ctor(Nevron.GraphicsCore.NStrokeStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="strokeStyle"></param>
        </member>
        <member name="P:Nevron.Chart.NStrokeStyleApplicator.StrokeStyle">
            <summary>
            Gets or sets the stroke style of the applicator
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStrokeStyleApplicator.GetStrokeStyleClone">
            <summary>
            Gets a copy of the stroke style object contained in this applicator
            </summary>
        </member>
        <member name="T:Nevron.Chart.NNumericDisplaySegmentFillStyleApplicator">
            <summary>
            Applies fill style to numeric display whole part and decimal segments
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNumericDisplaySegmentFillStyleApplicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNumericDisplaySegmentFillStyleApplicator.#ctor(Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="litFillStyle"></param>
            <param name="dimFillStyle"></param>
            <param name="decimalLitFillStyle"></param>
            <param name="decimalDimFillStyle"></param>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplaySegmentFillStyleApplicator.LitFillStyle">
            <summary>
            Gets or sets the lit fill style of the numeric display
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplaySegmentFillStyleApplicator.DimFillStyle">
            <summary>
            Gets or sets the dim fill style of the numeric display
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplaySegmentFillStyleApplicator.DecimalLitFillStyle">
            <summary>
            Gets or sets the lit fill style of the decimal part of the numeric display
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplaySegmentFillStyleApplicator.DecimalDimFillStyle">
            <summary>
            Gets or sets the dim fill style of the decimal part of the numeric display
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNumericDisplaySegmentFillStyleApplicator.Apply(Nevron.Chart.NChartElement)">
            <summary>
            Applies the settings contained in this applicator to the specfied chart element
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:Nevron.Chart.NSeriesDataItemStrokeStyleApplicator">
            <summary>
            Applies stroke style to series data items
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSeriesDataItemStrokeStyleApplicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSeriesDataItemStrokeStyleApplicator.#ctor(System.Collections.Generic.List{Nevron.GraphicsCore.NStrokeStyle},System.Boolean,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="strokeStyles"></param>
            <param name="applyToMarkers"></param>
            <param name="applyToDataLabels"></param>
        </member>
        <member name="M:Nevron.Chart.NSeriesDataItemStrokeStyleApplicator.#ctor(System.Collections.Generic.List{Nevron.GraphicsCore.NStrokeStyle},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="strokeStyles"></param>
            <param name="applyToMarkers"></param>
            <param name="applyToDataLabels"></param>
            <param name="applyToDataPoints"></param>
        </member>
        <member name="P:Nevron.Chart.NSeriesDataItemStrokeStyleApplicator.StrokeStyles">
            <summary>
            Gets or sets the list of stroke styles
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesDataItemStrokeStyleApplicator.ApplyToMarkers">
            <summary>
            Whether to apply the stroke to markers
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesDataItemStrokeStyleApplicator.ApplyToDataLabels">
            <summary>
            Whether to apply the stroke to the data labels
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesDataItemStrokeStyleApplicator.ApplyToDataPoints">
            <summary>
            Whether to apply the stroke to the data points
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesDataItemStrokeStyleApplicator.CanOverrideDataPointBorderStyles">
            <summary>
            Determines whether the applicator is allowed to override the data point stroke styles if they are present. 
            By default true.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSeriesDataItemStrokeStyleApplicator.Apply(Nevron.Chart.NChartElement)">
            <summary>
            Applies the settings contained in this applicator to the specfied chart element
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:Nevron.Chart.NSeriesStrokeStyleApplicator">
            <summary>
            Applies a stroke style to series
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSeriesStrokeStyleApplicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSeriesStrokeStyleApplicator.#ctor(Nevron.GraphicsCore.NStrokeStyle,System.Boolean,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="strokeStyle"></param>
            <param name="applyToMarkers"></param>
            <param name="applyToDataLabels"></param>
        </member>
        <member name="M:Nevron.Chart.NSeriesStrokeStyleApplicator.#ctor(Nevron.GraphicsCore.NStrokeStyle,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="strokeStyle"></param>
            <param name="applyToMarkers"></param>
            <param name="applyToDataLabels"></param>
            <param name="applyToDataPoints"></param>
        </member>
        <member name="P:Nevron.Chart.NSeriesStrokeStyleApplicator.ApplyToMarkers">
            <summary>
            Whether to apply to markers
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesStrokeStyleApplicator.ApplyToDataLabels">
            <summary>
            Whether to apply stroke style to data labels
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesStrokeStyleApplicator.ApplyToDataPoints">
            <summary>
            Whether to apply stroke style to data points
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesStrokeStyleApplicator.CanClearDataPointBorderStyles">
            <summary>
            Determines whether the implementation can clear the borders styles series.
            By default true.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesStrokeStyleApplicator.CanClearDataPointDataLabelStyles">
            <summary>
            Determines whether the implementation can clear the data label styles series.
            By default true.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesStrokeStyleApplicator.CanClearDataPointMarkerStyles">
            <summary>
            Determines whether the implementation can clear the markers styles of the series.
            By default true.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSeriesStrokeStyleApplicator.Apply(Nevron.Chart.NChartElement)">
            <summary>
            Applies the settings contained in this applicator to the specfied chart element
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:Nevron.Chart.NChartWallFillStyleApplicator">
            <summary>
            Applies fill style to chart walls
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartWallFillStyleApplicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartWallFillStyleApplicator.#ctor(Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fillStyle"></param>
        </member>
        <member name="M:Nevron.Chart.NChartWallFillStyleApplicator.Apply(Nevron.Chart.NChartElement)">
            <summary>
            Applies the settings contained in this applicator to the specfied chart element
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:Nevron.Chart.NAppearanceStyleSheetConfigurator">
            <summary>
            The base of all appearance style sheet configurators
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAppearanceStyleSheetConfigurator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAppearanceStyleSheetConfigurator.Palette">
            <summary>
            Gets or sets the palette used by the configurator
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAppearanceStyleSheetConfigurator.MultiColorSeries">
            <summary>
            Gets or sets a value indicating whether the style sheet will be applied
            per data point or per series. 
            </summary>
            <remarks>
            When set to true the colors in the SeriesColors palette array will be assigned to individual data points.
            Otherwise the colors in the SeriesColors palette array will be assigned per series.
            </remarks>
        </member>
        <member name="T:Nevron.Chart.NStrokeStyleSheetConfigurator">
            <summary>
            Represents a style sheet configurator that can create a style sheet modifying different stroke
            styles in the chart document.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStrokeStyleSheetConfigurator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStrokeStyleSheetConfigurator.ApplyToDataLabels">
            <summary>
            Gets or sets a value indicating whether stroke style should 
            be applied to series data labels
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStrokeStyleSheetConfigurator.ApplyToMarkers">
            <summary>
            Gets or sets a value indicating whether stroke style should be applied
            to series markers
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStrokeStyleSheetConfigurator.LabelStrokeTemplate">
            <summary>
            Gets or sets the template used to create stroke style for labels
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStrokeStyleSheetConfigurator.SeriesStrokeTemplate">
            <summary>
            Gets or sets the template used to create the stroke style for series
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStrokeStyleSheetConfigurator.IndicatorStrokeTemplate">
            <summary>
            Gets or sets the template used to create the stroke style for indicators
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStrokeStyleSheetConfigurator.RulerStrokeTemplate">
            <summary>
            Gets or sets the template used to create the stroke style for axis rulers
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStrokeStyleSheetConfigurator.TickStrokeTemplate">
            <summary>
            Gets or sets the template used to create the stroke style for axis ticks
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStrokeStyleSheetConfigurator.GridLineStrokeTemplate">
            <summary>
            Gets or sets the template used to create the stroke style for gridlines
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStrokeStyleSheetConfigurator.ConfigureSheet(Nevron.Chart.NStyleSheet)">
            <summary>
            Configures the specified style sheet
            </summary>
            <param name="sheet"></param>
        </member>
        <member name="T:Nevron.Chart.NStyleSheetConfigurator">
            <summary>
            The base of all style sheet configurators
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStyleSheetConfigurator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStyleSheetConfigurator.ConfigureSheet(Nevron.Chart.NStyleSheet)">
            <summary>
            Configures the specified style sheet
            </summary>
            <param name="sheet"></param>
        </member>
        <member name="T:Nevron.Chart.PredefinedStyleSheet">
            <summary>
            Enumerates the predefined style sheets
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.Nevron">
            <summary>
            Nevron palette, single color per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.NevronMultiColor">
            <summary>
            Nevron palette, multiple colors per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.Winter">
            <summary>
            Winter palette, single color per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.WinterMultiColor">
            <summary>
            Winter palette, multiple colors per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.Autumn">
            <summary>
            Autumn palette, single color per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.AutumnMultiColor">
            <summary>
            Autumn palette, multiple colors per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.Bright">
            <summary>
            Bright palette, single color per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.BrightMultiColor">
            <summary>
            Bright palette, multiple colors per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.Cool">
            <summary>
            Bright palette, single color per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.CoolMultiColor">
            <summary>
            Cool palette, multi color per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.Dark">
            <summary>
            Dark palette, single color per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.DarkMultiColor">
            <summary>
            Dark palette, multiple color per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.Nature">
            <summary>
            Nature palette, single color per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.NatureMultiColor">
            <summary>
            Nature palette, multiple colors per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.Pale">
            <summary>
            Pale palette, single color per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.PaleMultiColor">
            <summary>
            Pale palette, multiple colors per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.Pastel">
            <summary>
            Pastel palette, single color per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.PastelMultiColor">
            <summary>
            Pastel palette, multiple colors per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.Rose">
            <summary>
            Rose palette, single color per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.RoseMultiColor">
            <summary>
            Rose palette, multiple colors per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.Black">
            <summary>
            Black palette, single color per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.BlackMultiColor">
            <summary>
            Black palette, multiple colors per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.White">
            <summary>
            White palette, single color per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.WhiteMultiColor">
            <summary>
            White palette, multiple colors per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.Fresh">
            <summary>
            Fresh palette, single color per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.FreshMultiColor">
            <summary>
            Fresh palette, multiple colors per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.Earth">
            <summary>
            Earth palette, single color per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.EarthMultiColor">
            <summary>
            Earth palette, multiple colors per series
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.Excel">
            <summary>
            Excel
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.ExcelMultiColor">
            <summary>
            Excel multicolor
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.Cold">
            <summary>
            Cold,
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedStyleSheet.ColdMultiColor">
            <summary>
            Cold multi color
            </summary>
        </member>
        <member name="T:Nevron.Chart.ChartPredefinedPalette">
            <summary>
            Enumerates the predefined palettes
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartPredefinedPalette.Nevron">
            <summary>
            Nevron
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartPredefinedPalette.Winter">
            <summary>
            Winter
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartPredefinedPalette.Autumn">
            <summary>
            Autumn
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartPredefinedPalette.Bright">
            <summary>
            Bright
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartPredefinedPalette.Cool">
            <summary>
            Cool
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartPredefinedPalette.Dark">
            <summary>
            Dark
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartPredefinedPalette.Nature">
            <summary>
            Nature
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartPredefinedPalette.Pale">
            <summary>
            Pale
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartPredefinedPalette.Pastel">
            <summary>
            Pastel
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartPredefinedPalette.Rose">
            <summary>
            Rose
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartPredefinedPalette.White">
            <summary>
            White backgrounds and black / gray fillings
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartPredefinedPalette.Black">
            <summary>
            Black backgrounds and white fillings
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartPredefinedPalette.Fresh">
            <summary>
            Fresh
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartPredefinedPalette.Earth">
            <summary>
            Earth
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartPredefinedPalette.Excel">
            <summary>
            Excel
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartPredefinedPalette.Cold">
            <summary>
            Cold
            </summary>
        </member>
        <member name="T:Nevron.Chart.NChartPalette">
            <summary>
            Represents a palette of colors for different chart elements
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartPalette.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartPalette.#ctor(Nevron.Chart.ChartPredefinedPalette)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartPalette.ControlBackgroundForeColor">
            <summary>
            Gets or sets the control background fore color
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartPalette.ControlBackgroundBackColor">
            <summary>
            Gets or sets the background back color
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartPalette.LabelForeColor">
            <summary>
            Gets or sets the label fore color
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartPalette.LabelBackColor">
            <summary>
            Gets or sets the label back color
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartPalette.GaugeBackgroundBackColor">
            <summary>
            Gets or sets teh gauge background back color
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartPalette.GaugeBackgroundForeColor">
            <summary>
            Gets or sets the gauge background fore color
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartPalette.NumericLitColor">
            <summary>
            Gets or sets the numeric color for lit cell segments
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartPalette.NumericDimColor">
            <summary>
            Gets or sets the numeric color for dimmed cell segments
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartPalette.NumericDecimalLitColor">
            <summary>
            Gets or sets the numeric decimal color for lit cell segments
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartPalette.NumericDecimalDimColor">
            <summary>
            Gets or sets the numeric decimal color for dimmed cell segments
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartPalette.GaugeAxisLabelForeColor">
            <summary>
            Gets or sets the fore gauge axis label color
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartPalette.GaugeAxisLabelBackColor">
            <summary>
            Gets or sets the fore gauge axis label color
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartPalette.IndicatorColors">
            <summary>
            Gets or sets a collection of colors used to show gauge indicators
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartPalette.RulerStrokeColor">
            <summary>
            Gets or sets the ruler stroke color
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartPalette.RulerFillColor">
            <summary>
            Gets or sets the ruler fill color
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartPalette.TickStrokeColor">
            <summary>
            Gets or sets the tick stroke color
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartPalette.GridStrokeColor">
            <summary>
            Gets or sets the grid lines stroke color
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartPalette.WallForeColor">
            <summary>
            Gets or sets the wall fore color.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartPalette.WallBackColor">
            <summary>
            Gets or sets the wall back color.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartPalette.SeriesColors">
            <summary>
            Gets or sets a collection of colors used to show series or data items.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartPalette.ScaleStripColor">
            <summary>
            Gets or sets the scale strip color.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartPalette.SetPredefinedPalette(Nevron.Chart.ChartPredefinedPalette)">
            <summary>
            Apllies a predefined set of colors to the pallete color entries
            </summary>
            <param name="palette"></param>
        </member>
        <member name="T:Nevron.Chart.NRuleApplicator">
            <summary>
            The base of all rule applicators
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRuleApplicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRuleApplicator.Apply(Nevron.Chart.NChartElement)">
            <summary>
            Applies the settings contained in this applicator to the specfied chart element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Chart.NRuleApplicator.Clone">
            <summary>
            Creates an exact replica of this object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NFillStyleSheetConfigurator">
            <summary>
            Represents a style sheet configurator that will apply fill related rules to the 
            passed style sheet
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFillStyleSheetConfigurator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFillStyleSheetConfigurator.ControlBackgroundFillTemplate">
            <summary>
            Gets or sets the template used to create a control background fill style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFillStyleSheetConfigurator.GaugeBackgroundFillTemplate">
            <summary>
            Gets or sets the template used to create the gauge background fill style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFillStyleSheetConfigurator.LabelFillTemplate">
            <summary>
            Gets or sets the template used to create a label fill style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFillStyleSheetConfigurator.WallFillTemplate">
            <summary>
            Gets or sets the template used to create a wall fill style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFillStyleSheetConfigurator.SeriesFillTemplate">
            <summary>
            Gets or sets the template used to create a series fill style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFillStyleSheetConfigurator.IndicatorFillTemplate">
            <summary>
            Gets or sets the template used to create an indicator fill style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFillStyleSheetConfigurator.NumericIndicatorCellFillTemplate">
            <summary>
            Gets or sets the template  used to create fill styles for the numeric indicator segments
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFillStyleSheetConfigurator.RulerFillTemplate">
            <summary>
            Gets or sets template used to create fill styles for the axis rulers
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFillStyleSheetConfigurator.ScaleStripFillTemplate">
            <summary>
            Gets or sets template used to create fill styles for the scale strips
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFillStyleSheetConfigurator.SeriesColorIntensityFactor">
            <summary>
            Gets or sets the color intensity of the second color applied to the series
            fill template.
            </summary>
            <remarks>
            This property has effect only when the fill style template applied to the series
            uses two colors (for example gradient or hatch). 
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NFillStyleSheetConfigurator.ApplyToMarkers">
            <summary>
            Gets or sets a value indicating whether fill style should be applied
            to series markers
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFillStyleSheetConfigurator.ApplyToGaugePanelBorders">
            <summary>
            Gets or sets a value indicating whether the gauge panel border style will be styled.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFillStyleSheetConfigurator.ConfigureSheet(Nevron.Chart.NStyleSheet)">
            <summary>
            Configures the specified style sheet
            </summary>
            <param name="sheet"></param>
        </member>
        <member name="T:Nevron.Chart.NEmptySelector">
            <summary>
            Represents an empty selector (e.g. a selector that does not return matches)
            </summary>
        </member>
        <member name="M:Nevron.Chart.NEmptySelector.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NFillStyleTemplate">
            <summary>
            The base of all fill style templates
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFillStyleTemplate.CreateFillStyle(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a fill style based on a foreground and background color
            </summary>
            <param name="foreColor"></param>
            <param name="backColor"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NModParentOrderSelector">
            <summary>
            Represents a mod parent order selector
            </summary>
            <remarks>
            This selector will match when the index of the chart element in its parent, divided by the modFactor equals value:<br/>
            indexInParent % modFactor == value
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NModParentOrderSelector.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NModParentOrderSelector.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="modFactor"></param>
            <param name="value"></param>
        </member>
        <member name="P:Nevron.Chart.NModParentOrderSelector.ModFactor">
            <summary>
            Gets or sets the mod factor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NModParentOrderSelector.Value">
            <summary>
            Gets or sets the value
            </summary>
        </member>
        <member name="M:Nevron.Chart.NModParentOrderSelector.Match(Nevron.Chart.NChartElement)">
            <summary>
            Returns true if the selector matches the specified chart element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NStyleSheetRule">
            <summary>
            Represents a rule consisting of a selector and applicators.
            </summary>
            <remarks>
            The applicators will be applied only if the selector matches the passed chart element.
            You may group several rules in a style sheet object and then apply it to chart documents.
            For more information check the NStyleSheet class description.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NStyleSheetRule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStyleSheetRule.#ctor(Nevron.Chart.NSelector,Nevron.Chart.NRuleApplicator)">
            <summary>
            Initializer constructor
            </summary>
            <param name="selector"></param>
            <param name="applicator"></param>
        </member>
        <member name="M:Nevron.Chart.NStyleSheetRule.#ctor(Nevron.Chart.NSelector,System.Collections.Generic.List{Nevron.Chart.NRuleApplicator})">
            <summary>
            Initializer constructor
            </summary>
            <param name="selector"></param>
            <param name="applicators"></param>
        </member>
        <member name="P:Nevron.Chart.NStyleSheetRule.Selector">
            <summary>
            Gets or sets the selector associated with this rule
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStyleSheetRule.Applicators">
            <summary>
            Gets or sets the list of applicators associated with this rule
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStyleSheetRule.Clone">
            <summary>
            Creates an exact replica of this object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NSeriesFillStyleApplicator">
            <summary>
            Applies a fill style to series
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSeriesFillStyleApplicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSeriesFillStyleApplicator.#ctor(Nevron.GraphicsCore.NFillStyle,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fillStyle"></param>
            <param name="applyToMarkers"></param>
        </member>
        <member name="P:Nevron.Chart.NSeriesFillStyleApplicator.ApplyToMarkers">
            <summary>
            Whether to apply fill style to markers
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesFillStyleApplicator.CanClearDataPointFillStyles">
            <summary>
            Determines whether the implementation can clear the fills styles series.
            By default true.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesFillStyleApplicator.CanClearDataPointMarkerStyles">
            <summary>
            Determines whether the implementation can clear the markers styles of the series.
            By default true.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSeriesFillStyleApplicator.Apply(Nevron.Chart.NChartElement)">
            <summary>
            Applies the settings contained in this applicator to the specfied chart element
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:Nevron.Chart.NSeriesDataItemFillStyleApplicator">
            <summary>
            Applies fill styles to series data items
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSeriesDataItemFillStyleApplicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSeriesDataItemFillStyleApplicator.#ctor(System.Collections.Generic.List{Nevron.GraphicsCore.NFillStyle},System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fillStyles"></param>
            <param name="applyToMarkers"></param>
        </member>
        <member name="P:Nevron.Chart.NSeriesDataItemFillStyleApplicator.FillStyles">
            <summary>
            Gets or sets the fill styles in the applicator
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesDataItemFillStyleApplicator.ApplyToMarkers">
            <summary>
            Whether to apply the fill style to markers
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesDataItemFillStyleApplicator.CanOverrideDataPointFillStyles">
            <summary>
            Determines whether the applicator is allowed to override the data point fill styles if they are present. By default true.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSeriesDataItemFillStyleApplicator.Apply(Nevron.Chart.NChartElement)">
            <summary>
            Applies the settings contained in this applicator to the specfied chart element
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:Nevron.Chart.NAndSelector">
            <summary>
            Represents a selector that will match if all child selectors returns true
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAndSelector.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAndSelector.#ctor(System.Collections.Generic.List{Nevron.Chart.NSelector})">
            <summary>
            Initializer constructor
            </summary>
            <param name="selectors"></param>
        </member>
        <member name="M:Nevron.Chart.NAndSelector.#ctor(Nevron.Chart.NSelector,Nevron.Chart.NSelector)">
            <summary>
            Initializer constructor
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="T:Nevron.Chart.NLogicalSelector">
            <summary>
            The base for all logical selectors (NAndSelector and NOrSelector)
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLogicalSelector.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLogicalSelector.#ctor(System.Collections.Generic.List{Nevron.Chart.NSelector})">
            <summary>
            Initializer constructor
            </summary>
            <param name="selectors"></param>
        </member>
        <member name="M:Nevron.Chart.NLogicalSelector.#ctor(Nevron.Chart.NSelector,Nevron.Chart.NSelector)">
            <summary>
            Initializer constructor
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="P:Nevron.Chart.NLogicalSelector.Selectors">
            <summary>
            Gets or sets the list of child selectors of this selector
            </summary>
        </member>
        <member name="T:Nevron.Chart.NOrSelector">
            <summary>
            Represents a selector that will match if any of the child selectors returns true
            </summary>
        </member>
        <member name="M:Nevron.Chart.NOrSelector.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NOrSelector.#ctor(System.Collections.Generic.List{Nevron.Chart.NSelector})">
            <summary>
            Initializer constructor
            </summary>
            <param name="selectors"></param>
        </member>
        <member name="M:Nevron.Chart.NOrSelector.#ctor(Nevron.Chart.NSelector,Nevron.Chart.NSelector)">
            <summary>
            Initializer constructor
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="M:Nevron.Chart.NOrSelector.Match(Nevron.Chart.NChartElement)">
            <summary>
            Returns true if the selector matches the specified chart element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NSelector">
            <summary>
            Represents the base of all chart element selectors
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSelector.Match(Nevron.Chart.NChartElement)">
            <summary>
            Returns true if the selector matches the specified chart element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NSelector.Clone">
            <summary>
            Creates an exact replica of this object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NTypeOfSelector">
            <summary>
            Represents a selector that will match if the element is derived from type.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTypeOfSelector.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTypeOfSelector.#ctor(System.Type)">
            <summary>
            Initializer constructor
            </summary>
            <param name="targetType"></param>
        </member>
        <member name="M:Nevron.Chart.NTypeOfSelector.#ctor(System.Type[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="targetTypes"></param>
        </member>
        <member name="P:Nevron.Chart.NTypeOfSelector.TargetTypes">
            <summary>
            Gets or sets the target types of the selector
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTypeOfSelector.Match(Nevron.Chart.NChartElement)">
            <summary>
            Returns true if the selector matches the specified chart element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NStyleSheet">
            <summary>
            Represents a chart style sheet object consisting of CSS2 like rules.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStyleSheet.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStyleSheet.Rules">
            <summary>
            Gets or sets the list of rules contained in this style sheet
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStyleSheet.CreatePredefinedStyleSheet(Nevron.Chart.PredefinedStyleSheet)">
            <summary>
            Creates a predefined style sheet
            </summary>
            <param name="styleSheet"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NStyleSheet.CreateFromPalette(Nevron.Chart.NChartPalette,System.Boolean)">
            <summary>
            Creates a style sheet from the specified palette
            </summary>
            <param name="palette"></param>
            <param name="multiColor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NStyleSheet.Clear">
            <summary>
            Clears the style sheet
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStyleSheet.Append(Nevron.Chart.NStyleSheet)">
            <summary>
            Appends the specified style sheet to this sheet
            </summary>
            <param name="sheet"></param>
        </member>
        <member name="M:Nevron.Chart.NStyleSheet.AppendRule(Nevron.Chart.NStyleSheetRule)">
            <summary>
            Appends the rule to this style sheet
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:Nevron.Chart.NStyleSheet.Apply(Nevron.Chart.NChartElement)">
            <summary>
            Applies the sheet on the specified container chart element
            </summary>
            <param name="chartElement"></param>
        </member>
        <member name="T:Nevron.Chart.NPrintDocument">
            <summary>
            The NPrintDocument class represents a PrintDocument, which supports paging and is attached to a print manager.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPrintDocument.#ctor(Nevron.Chart.NPrintManager,Nevron.Chart.NDocument,System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,Nevron.Chart.INPrintDocumentController,Nevron.Chart.INPrintPageLayout)">
            <summary>
            Creates a new instance of the print document attached to the 
            specified print manager. 
            </summary>
            <param name="printManager"></param>
            <param name="chartDocument"></param>
            <param name="printerSettings"></param>
            <param name="pageSettings"></param>
            <param name="printDocumentController"></param>
            <param name="printPageLayout"></param>
        </member>
        <member name="P:Nevron.Chart.NPrintDocument.PrintDocumentController">
            <summary>
            Obtains a reference to the print document layout controlling the document appearance.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPrintDocument.PrintPageLayout">
            <summary>
            Obtains a reference to the print page layout.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPrintDocument.IsPrinted">
            <summary>
            Determines whether the document is currently being printed
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPrintDocument.PrintedPageIndex">
            <summary>
            Obtains the index of the currently printed page
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPrintDocument.PageCount">
            <summary>
            Obtains the number of pages in the document.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPrintDocument.OnBeginPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Overriden to initialize the IsPrinted and PrintedPageIndex properties
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.NPrintDocument.OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Overriden to print the current page
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Chart.NPrintDocument.OnEndPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Overriden to reset the IsPrinted and PrintedPageIndex properties
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Nevron.Chart.NPrintManager">
            <summary>
            The NPrintManager class can be used to print the chart
            </summary>
            <remarks>
            This class can be instanciated upon demand. The constructor must receive a 
            reference to the chartt, which must be printed:
            <code>
            NPrintManager printManager = new NPrintManager(chartControl);
            </code>
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NPrintManager.#ctor(Nevron.Chart.NDocument)">
            <summary>
            Creates a new instance of the print manager attached to the specified document
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPrintManager.PageSettings">
            <summary>
            Gets/sets the page settings
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPrintManager.PrinterSettings">
            <summary>
            Gets/sets the printers settings
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPrintManager.PrintDocumentController">
            <summary>
            Gets or sets the print document controller responsible for paging and chart configuration.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPrintManager.PrintPageLayout">
            <summary>
            Gets or sets the print page layout controlling how the chart is printed on the page.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPrintManager.ShowPrintPreviewOnTop">
            <summary>
            Gets or sets a value indicating whether the print preview dialog should be displayed on top
            of all other windows
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPrintManager.Max3DDPI">
            <summary>
            Gets or sets the maximum DPI used for rasterization of 3D charts
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPrintManager.Print">
            <summary>
            Prints the document.
            </summary>
            <remarks>
            Prints the document using the settings of the NPrintManager. 
            </remarks>
            <example>
            The following code prints the document.
            <code>
            printManager.Print();
            </code>
            </example>
            <returns>true if the document was successfully printed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Chart.NPrintManager.ShowPrintPreview">
            <summary>
            Shows the print preview dialog 
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPrintManager.ShowPageSetupDialog">
            <summary>
            Shows the page setup dialog
            </summary>
            <returns>true if the user modified the current printer or page settings.</returns>
        </member>
        <member name="M:Nevron.Chart.NPrintManager.ShowPrintDialog">
            <summary>
            Shows the print dialog allowing users to select a printer and choose which portions of the document to print.
            </summary>
            <returns>true if the user modified the current printer settings.</returns>
        </member>
        <member name="M:Nevron.Chart.NPrintManager.CreatePrintDocument">
            <summary>
            Creates a new print document with the current print manager settings
            </summary>
            <returns>new NPrintDocument instance if the operation succeeded, otherwise null</returns>
        </member>
        <member name="M:Nevron.Chart.NPrintManager.Reset">
            <summary>
            Sets the properties of the print manager to their default values.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NPrintPreviewForm">
            <summary>
            Summary description for NPrintPreviewForm.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPrintPreviewForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPrintPreviewForm.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAxisPagingDocumentController">
            <summary>
            Prints a document on multiple pages according to the axis paging 
            applied to all charts in the control.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisPagingDocumentController.#ctor">
            <summary>
            Initializer contructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisPagingDocumentController.SampleCount">
            <summary>
            Returns the number of samples.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisPagingDocumentController.BeforePrintSample(System.Int32)">
            <summary>
            Called before the print document prints a sample.
            </summary>
            <param name="sample"></param>
        </member>
        <member name="M:Nevron.Chart.NAxisPagingDocumentController.BeforePrintDocument">
            <summary>
            Called before the print document is printed.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisPagingDocumentController.AfterPrintDocument">
            <summary>
            Called after the print document is printed.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NPrintDocumentController">
            <summary>
            Base class for all print document controllers.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPrintDocumentController.SampleCount">
            <summary>
            Returns the sample count.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPrintDocumentController.BeforePrintSample(System.Int32)">
            <summary>
            Called before the print document prints a sample.
            </summary>
            <param name="sample"></param>
        </member>
        <member name="M:Nevron.Chart.NPrintDocumentController.BeforePrintDocument">
            <summary>
            Called before the print document is printed.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPrintDocumentController.AfterPrintDocument">
            <summary>
            Called after the print document is printed.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NSinglePageDocumentController">
            <summary>
            Prints the chart on a single page..
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSinglePageDocumentController.SampleCount">
            <summary>
            Returns the sample count (1).
            </summary>
        </member>
        <member name="T:Nevron.Chart.NPrintPageLayout">
            <summary>
            Base for all page layouts.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPrintPageLayout.#ctor">
            <summary>
            Initializer contructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPrintPageLayout.SamplesPerPage">
            <summary>
            Returns the samples per page provided by this layout
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPrintPageLayout.GetSampleBounds(System.Int32,System.Int32,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Prints the sample on the page.
            </summary>
            <param name="page"></param>
            <param name="sample"></param>
            <param name="e"></param>
        </member>
        <member name="T:Nevron.Chart.NSingleSamplePageLayout">
            <summary>
            Prints a single sample per page.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSingleSamplePageLayout.#ctor">
            <summary>
            Initializer contructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSingleSamplePageLayout.SamplesPerPage">
            <summary>
            Returns the samples per page provided by this layout
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSingleSamplePageLayout.GetSampleBounds(System.Int32,System.Int32,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Prints the sample on the page.
            </summary>
            <param name="page"></param>
            <param name="sample"></param>
            <param name="e"></param>
        </member>
        <member name="T:Nevron.Chart.NAppearanceSerializationFilter">
            <summary>
            Serializes all appearance settings of the control and skips data (NDataSeries and NLegendItemCollection).
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAppearanceSerializationFilter.#ctor">
            <summary>
            Initializer contructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDataSerializationFilter">
            <summary>
            Serializes all data and skips all properties related to the appearance of the control (NFillStyle, NStrokeStyle etc).
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSerializationFilter.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDocumentSerializer">
            <summary>
            Controls chart document serialization.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDocumentSerializer.#ctor(Nevron.Chart.NDocument)">
            <summary>
            Initializer contructor
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Nevron.Chart.NDocumentSerializer.LoadControlStateFromFile">
            <summary>
            Loads the control state from file
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDocumentSerializer.SaveControlStateToFile">
            <summary>
            Saves the control state to file
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDocumentSerializer.SaveControlStateToFile(System.String,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
            <summary>
            Saves the current state of the chart control to a file in the specified format.
            </summary>
            <param name="filePath">A relative or absolute path for the output file.</param>
            <param name="format">The format of the file.</param>
            <param name="filter">A serialization filter.</param>
            <remarks>
            The filter parameters is used only when the format is CustomXML or CustomBinary.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NDocumentSerializer.LoadControlStateFromFile(System.String,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
            <summary>
            Loads an existing chart state to the chart control from a file.
            </summary>
            <param name="filePath">A relative or absolute path for the input file.</param>
            <param name="format">The format of the file.</param>
            <param name="filter">A serialization filter.</param>
            <remarks>
            The filter parameters is used only when the format is CustomXML or CustomBinary.
            </remarks>
            <example>
            The following example loads a new state and repaints the control:
            <code lang = 'VB'>
            nChartControl1.Serializer.LoadControlStateFromFile("c:\chart.bin", PersistencyFormat.Binary, Nothing)
            nChartControl1.Refresh()
            </code>
            <code>
            nChartControl1.Serializer.LoadControlStateFromFile("c:\chart.bin", PersistencyFormat.Binary, null);
            nChartControl1.Refresh();
            </code>
            </example>
        </member>
        <member name="M:Nevron.Chart.NDocumentSerializer.SaveControlStateToStream(System.IO.Stream,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
            <summary>
            Saves the chart control state in the passed stream.
            </summary>
            <param name="stream">The stream to load the state from.</param>
            <param name="format">The format of the stream.</param>
            <param name="filter">A serialization filter.</param>
            <remarks>
            You're responsible for the stream creation and closure. The filter parameter is used only when the format is CustomXML or CustomBinary.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NDocumentSerializer.LoadControlStateFromStream(System.IO.Stream,Nevron.Serialization.PersistencyFormat,Nevron.Serialization.INSerializationFilter)">
            <summary>
            Loads the chart control state from the passed stream.
            </summary>
            <param name="stream">The stream to save the state to.</param>
            <param name="format">The format of the stream.</param>
            <param name="filter">A serialization filter.</param>
            <remarks>
            You're responsible for the stream creation and closure. The filter parameters is used only when the format is CustomXML or CustomBinary.
            </remarks>
        </member>
        <member name="T:Nevron.Chart.NColorFillStyleTemplate">
            <summary>
            Represents a template that produces a solid color filling.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NColorFillStyleTemplate.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NColorFillStyleTemplate.CreateFillStyle(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a fill style based on a foreground and background color
            </summary>
            <param name="foreColor"></param>
            <param name="backColor"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NGradientFillStyleTemplate">
            <summary>
            Represents a template that produces a gradient filling
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGradientFillStyleTemplate.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGradientFillStyleTemplate.#ctor(Nevron.GraphicsCore.GradientStyle,Nevron.GraphicsCore.GradientVariant)">
            <summary>
            Initializer constructor
            </summary>
            <param name="style"></param>
            <param name="variant"></param>
        </member>
        <member name="P:Nevron.Chart.NGradientFillStyleTemplate.Style">
            <summary>
            Gets or sets the style of the gradient fill style created by this template
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGradientFillStyleTemplate.Variant">
            <summary>
            Gets or sets the variant of the gradient fill style created by this template
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGradientFillStyleTemplate.CreateFillStyle(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a fill style based on a foreground and background color
            </summary>
            <param name="foreColor"></param>
            <param name="backColor"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NHatchFillStyleTemplate">
            <summary>
            Represents a template that produces a hatch filling
            </summary>
        </member>
        <member name="M:Nevron.Chart.NHatchFillStyleTemplate.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NHatchFillStyleTemplate.#ctor(System.Drawing.Drawing2D.HatchStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="style"></param>
        </member>
        <member name="P:Nevron.Chart.NHatchFillStyleTemplate.Style">
            <summary>
            Gets or sets the style of the hatch fill style created by this template
            </summary>
        </member>
        <member name="M:Nevron.Chart.NHatchFillStyleTemplate.CreateFillStyle(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a fill style based on a foreground and background color
            </summary>
            <param name="foreColor"></param>
            <param name="backColor"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NStrokeStyleTemplate">
            <summary>
            Represents a template that can produce NStrokeStyle objects given a stroke color
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStrokeStyleTemplate.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStrokeStyleTemplate.#ctor(Nevron.GraphicsCore.NLength,Nevron.GraphicsCore.LinePattern)">
            <summary>
            Initializer constructor
            </summary>
            <param name="width"></param>
            <param name="pattern"></param>
        </member>
        <member name="M:Nevron.Chart.NStrokeStyleTemplate.CreateStrokeStyle(System.Drawing.Color)">
            <summary>
            Creates a NStrokeStyle object given a color 
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NTextureFillStyleTemplate">
            <summary>
            Base class for all templates that produce textured filling
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSampledAxisInfo.#ctor(Nevron.Chart.NAxis,System.Boolean,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="axis"></param>
            <param name="vertical"></param>
            <param name="zoomed"></param>
        </member>
        <member name="M:Nevron.Chart.NSampledAxisInfo.CalculateSmallChange">
            <summary>
            Calculates the small change of the scrollbar
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NViewportD">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.NViewportD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x1"></param>
            <param name="x2"></param>
            <param name="y1"></param>
            <param name="y2"></param>
        </member>
        <member name="M:Nevron.Chart.NViewportD.#ctor(Nevron.GraphicsCore.NRange1DD,Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Initializer constructor
            </summary>
            <param name="xRange"></param>
            <param name="yRange"></param>
        </member>
        <member name="M:Nevron.Chart.NViewportD.#ctor(Nevron.Chart.NViewportD)">
            <summary>
            Copy constructor
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="P:Nevron.Chart.NViewportD.XRange">
            <summary>
            Gets or sets the x range
            </summary>
        </member>
        <member name="P:Nevron.Chart.NViewportD.YRange">
            <summary>
            Gets or sets the y range
            </summary>
        </member>
        <member name="M:Nevron.Chart.NViewportD.GetXValueFromFactor(System.Double)">
            <summary>
            Gets a x value from the factor
            </summary>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NViewportD.GetYValueFromFactor(System.Double)">
            <summary>
            Gets a y value from the factor
            </summary>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NViewportD.GetXFactorFromValue(System.Double)">
            <summary>
            Gets a factor from the x value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NViewportD.GetYFactorFromValue(System.Double)">
            <summary>
            Gets a factor from the y value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NViewportD.GetViewportFactorFromValue(Nevron.Chart.NViewportD)">
            <summary>
            Gets the viewport factor from value
            </summary>
            <param name="viewport"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NViewportD.GetViewportValueFromFactor(Nevron.Chart.NViewportD)">
            <summary>
            Gets the viewport value from factors
            </summary>
            <param name="viewport"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NViewportD.ClampFactor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.NViewportD.Normalize(Nevron.Chart.NViewportD,System.Double,System.Double)">
            <summary>
            Normalizes the viewport to have the specified factor
            </summary>
            <param name="viewport"></param>
            <param name="xFactor"></param>
            <param name="yFactor"></param>
        </member>
        <member name="M:Nevron.Chart.NViewportD.Normalize">
            <summary>
            Normalizes the viewport coordinates
            </summary>
        </member>
        <member name="M:Nevron.Chart.NViewportD.InvertFactor">
            <summary>
            Inverts the viewport factors
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAnimationTheme.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnimationTheme.AnimationThemeType">
            <summary>
            Gets or sets the animation theme type
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnimationTheme.SeriesAnimationDuration">
            <summary>
            Gets or sets the animation duration per series
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnimationTheme.AxesAnimationDuration">
            <summary>
            Gets or sets the animation duration applied to chart axes
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnimationTheme.WallsAnimationDuration">
            <summary>
            Gets or sets the animation duration applied to chart walls
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnimationTheme.IndicatorsAnimationDuration">
            <summary>
             Gets or sets the animation duration applied to gauge indicators
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnimationTheme.AnimatePanelsSequentially">
            <summary>
            Gets or sets a value indicating whether panels should be animated sequentially or simultaneously
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnimationTheme.AnimateChartsSequentially">
            <summary>
            Gets or sets a value indicating whether axes, walls and series should be animated 
            sequentially or simultaneously
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnimationTheme.AnimateSeriesSequentially">
            <summary>
            Gets or sets a value indicating whether series are animated sequentially (one by one)
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnimationTheme.AnimateDataPointsSequentially">
            <summary>
            Gets or sets a value indicating whether data points within a series are animated sequentially (one by one)
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnimationTheme.AnimateGaugesSequentially">
            <summary>
            Gets or sets a value indicating whether gauge axes and indicators will be animated sequentially
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnimationTheme.AnimateIndicatorsSequentially">
            <summary>
            Gets or sets a value indicating whether indicators within a gauge will be animated sequentially
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAnimationTheme.Apply(Nevron.Chart.NChartElement)">
            <summary>
            
            </summary>
            <param name="chartElement"></param>
        </member>
        <member name="T:Nevron.Chart.NChartWizard">
            <summary>
            The NChartWizard class offers a handy user interface for fast
            editing of charts.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartWizard.#ctor(Nevron.Chart.NDocument)">
            <summary>
            Creates a new instance of the chart wizard, which is associated with the specified chart control
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:Nevron.Chart.NChartWizard.ShowDialog">
            <summary>
            Shows the chart wizard dialog.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.INAxisZoneManagerHost">
            <summary>
            Summary description for INAxisZoneManagerHost.
            </summary>
        </member>
        <member name="M:Nevron.Chart.INAxisZoneManagerHost.OnAnchorChanged">
            <summary>
            Called when an axis anchor has changed
            </summary>
        </member>
        <member name="M:Nevron.Chart.INAxisZoneManagerHost.OnScaleChanged">
            <summary>
            Called when a scale has changed
            </summary>
        </member>
        <member name="T:Nevron.Chart.INAxisZoneManagerHost2D">
            <summary>
            Summary description for INAxisZoneManagerHost2D.
            </summary>
        </member>
        <member name="T:Nevron.Chart.INPaintCallback">
            <summary>
            Implement this interface to provide custom code for execution before
            and/or after chart panel painting.
            </summary>
        </member>
        <member name="M:Nevron.Chart.INPaintCallback.OnBeforePaint(Nevron.Chart.NPanel,Nevron.Chart.NPanelPaintEventArgs)">
            <summary>
            Occurs before the panel is painted.
            </summary>
        </member>
        <member name="M:Nevron.Chart.INPaintCallback.OnAfterPaint(Nevron.Chart.NPanel,Nevron.Chart.NPanelPaintEventArgs)">
            <summary>
            Occurs after the panel is painted.
            </summary>
        </member>
        <member name="T:Nevron.Chart.INScrollbarController">
            <summary>
            Implemented by scrollbar controllers
            </summary>
        </member>
        <member name="M:Nevron.Chart.INScrollbarController.IsInverted">
            <summary>
            Returns true of the scrollbar should use inverted logic
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.INScrollbarController.DoSmallLeftScroll">
            <summary>
            Called when the user has requested a left scroll
            </summary>
        </member>
        <member name="M:Nevron.Chart.INScrollbarController.DoLargeLeftScroll">
            <summary>
            Called when the user has requested a left scroll
            </summary>
        </member>
        <member name="M:Nevron.Chart.INScrollbarController.DoSmallRightScroll">
            <summary>
            Called when the user has requested a right scroll
            </summary>
        </member>
        <member name="M:Nevron.Chart.INScrollbarController.DoLargeRightScroll">
            <summary>
            Called when the user has requested a right scroll
            </summary>
        </member>
        <member name="M:Nevron.Chart.INScrollbarController.GetRightLargeChange">
            <summary>
            Returns the right large change
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.INScrollbarController.GetLeftLargeChange">
            <summary>
            Returns the left large change
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.INScrollbarController.Scroll(System.Double)">
            <summary>
            Scrolls the axis with the specified step
            </summary>
            <param name="step"></param>
        </member>
        <member name="M:Nevron.Chart.INScrollbarController.ScrollToValue(System.Double)">
            <summary>
            Scrolls the axis in order to show the specified value
            </summary>
            <param name="axisValue"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.INScrollbarController.TimelineMinimum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.INScrollbarController.TimelineMaximum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.INScrollbarController.TimelineBeginValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.INScrollbarController.TimelineEndValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.INScrollbarController.Minimum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.INScrollbarController.Maximum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.INScrollbarController.BeginValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.INScrollbarController.EndValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.INScrollbarObserver">
            <summary>
            Implemented by scrollbar observers
            </summary>
        </member>
        <member name="M:Nevron.Chart.INScrollbarObserver.OnRangeChanged(Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Called when the scrollbar value has changed
            </summary>
        </member>
        <member name="M:Nevron.Chart.INScrollbarObserver.OnReset">
            <summary>
            Fired when the scrollbar reset buttons was pressed
            </summary>
        </member>
        <member name="T:Nevron.Chart.INCustomSeriesCallback">
            <summary>
            Defines callback methods used by the NCustomSeries type. Implement this interface 
            to provide rendering and calculation code for custom series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.INCustomSeriesCallback.GetAxisRanges(Nevron.GraphicsCore.NRange1DD@,Nevron.GraphicsCore.NRange1DD@)">
            <summary>
            Computes and returns the series min and max values for the X and Y axes.
            </summary>
            <param name="rangeX">Out parameter containing the X axis range.</param>
            <param name="rangeY">Out parameter containing the Y axis range.</param>
        </member>
        <member name="M:Nevron.Chart.INCustomSeriesCallback.Paint2D(Nevron.Chart.NChartRenderingContext2D,Nevron.GraphicsCore.NGraphics)">
            <summary>
            Paints the custom series in a 2D graphics context.
            </summary>
            <param name="context">The chart rendering context.</param>
            <param name="graphics">The graphics object that must be used for painting.</param>
        </member>
        <member name="T:Nevron.Chart.INDataPointCollection">
            <summary>
            Implemented by objects which can be treated as data point 
            collections (for example series).
            </summary>
        </member>
        <member name="M:Nevron.Chart.INDataPointCollection.AddDataPoint(Nevron.Chart.NDataPoint)">
            <summary>
            When implemented by a class, adds a data point to the data point collection.
            </summary>
            <param name="dataPoint">The data point to add to the collection.</param>
        </member>
        <member name="M:Nevron.Chart.INDataPointCollection.RemoveDataPointAt(System.Int32)">
            <summary>
            When implemented by a class, removes the data point at the specified index.
            </summary>
            <param name="index">The zero-based index of the data point to remove.</param>
        </member>
        <member name="M:Nevron.Chart.INDataPointCollection.InsertDataPointAt(System.Int32,Nevron.Chart.NDataPoint)">
            <summary>
            When implemented by a class, inserts a data point to the collection at the 
            specified position.
            </summary>
            <param name="index">The zero-based index at which the data point should be inserted.</param>
            <param name="dataPoint">The data point to insert into the collection.</param>
        </member>
        <member name="M:Nevron.Chart.INDataPointCollection.ClearDataPoints">
            <summary>
            When implemented by a class, removes all data points from the collection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.INDataPointCollection.StoreDataPoint(System.Int32,Nevron.Chart.NDataPoint)">
            <summary>
            When implemented by a class, sets a data point at the specified index.
            </summary>
            <param name="index">The zero-based index of the data point to set.</param>
            <param name="dataPoint">The data point to set.</param>
        </member>
        <member name="M:Nevron.Chart.INDataPointCollection.ComposeDataPoint(System.Int32)">
            <summary>
            When implemented by a class, gets the data point at the specified index.
            </summary>
            <param name="index">The zero-based index of the data point to get.</param>
            <returns>Returns the data point at the specified index.</returns>
        </member>
        <member name="M:Nevron.Chart.INDataPointCollection.GetDataPointCount">
            <summary>
            When implemented by a class, obtains the number of data points 
            contained in the collection.
            </summary>
            <returns>Returns the number of data points.</returns>
        </member>
        <member name="T:Nevron.Chart.INDataUserControl">
            <summary>
            Implemented by series, which can display an additional data grid user control in the data points editor
            </summary>
        </member>
        <member name="M:Nevron.Chart.INDataUserControl.GetUserControl(Nevron.Chart.NDataSeriesGrid)">
            <summary>
            Obtains an additional user controls for the chart editor associated with the specified data series grid
            </summary>
            <param name="grid"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.INSceneNode">
            <summary>
            Implemented by context nodes
            </summary>
        </member>
        <member name="P:Nevron.Chart.INSceneNode.MinMaxValid">
            <summary>
            Gets or sets whether the min max of the node is valid
            </summary>
        </member>
        <member name="P:Nevron.Chart.INSceneNode.IndexZ">
            <summary>
            Gets or sets the z index
            </summary>
        </member>
        <member name="P:Nevron.Chart.INSceneNode.ZOrder">
            <summary>
            Gets the z order of the node
            </summary>
        </member>
        <member name="T:Nevron.Chart.INTooltipFormatter">
            <summary>
            Implemented by objects which can format tooltips
            </summary>
        </member>
        <member name="M:Nevron.Chart.INTooltipFormatter.FormatTooltip(System.String)">
            <summary>
            Formats the specified tooltip format string
            </summary>
            <param name="tooltip">tooltip format string</param>
            <returns>formatted tooltip</returns>
        </member>
        <member name="T:Nevron.Chart.INChartDesigner">
            <summary>
            Implemented by chart document designers.
            </summary>
        </member>
        <member name="P:Nevron.Chart.INChartDesigner.Document">
            <summary>
            Obtains a reference to the chart document associated with the designer
            </summary>
        </member>
        <member name="P:Nevron.Chart.INChartDesigner.ViewSize">
            <summary>
            Gets the size of the view / control hosting the document
            </summary>
        </member>
        <member name="M:Nevron.Chart.INChartDesigner.OnDocumentChanged">
            <summary>
            Called when the chart document has changed
            </summary>
        </member>
        <member name="M:Nevron.Chart.INChartDesigner.OnDocumentCleared">
            <summary>
            Called when the chart document has been cleared (reset to default state)
            </summary>
        </member>
        <member name="T:Nevron.Chart.INVerb">
            <summary>
            Implemented by chart verbs.
            </summary>
        </member>
        <member name="P:Nevron.Chart.INVerb.DesignerVerb">
            <summary>
            Obtains a VS design time support verb
            </summary>
        </member>
        <member name="T:Nevron.Chart.INEventHandler">
            <summary>
            Summary description for INEventProcessor.
            </summary>
        </member>
        <member name="T:Nevron.Chart.INHitTestService">
            <summary>
            Implemented by hit test services
            </summary>
        </member>
        <member name="M:Nevron.Chart.INHitTestService.HitTest(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NPointF)">
            <summary>
            Performs a hit test.
            </summary>
            <param name="context"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.INHitTestService.HitTest(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NRectangleF,System.Boolean,System.Collections.Generic.List{Nevron.Dom.INNode})">
            <summary>
            Performs a hit test.
            </summary>
            <param name="context"></param>
            <param name="rect"></param>
            <param name="containsOrIntersect"></param>
            <param name="nodes"></param>
        </member>
        <member name="T:Nevron.Chart.INChartElement">
            <summary>
            Summary description for INChartElement.
            </summary>
        </member>
        <member name="T:Nevron.Chart.INChartElementContainer">
            <summary>
            Summary description for INChartElementContainer.
            </summary>
        </member>
        <member name="T:Nevron.Chart.INChartImageMapElement">
            <summary>
            Implemented by chart element that can write content to a HTML writer or vector image map
            </summary>
        </member>
        <member name="T:Nevron.Chart.INHitTestable">
            <summary>
            Implemented by objects that are hit testable.
            </summary>
        </member>
        <member name="M:Nevron.Chart.INHitTestable.HitTest(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NPointF)">
            <summary>
            Performs a hit test.
            </summary>
            <param name="context"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.INHitTestable.HitTest(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NRectangleF,System.Boolean,System.Collections.Generic.List{Nevron.Dom.INNode})">
            <summary>
            Performs a hit test.
            </summary>
            <param name="context"></param>
            <param name="rect"></param>
            <param name="containsOrIntersect"></param>
            <param name="nodes"></param>
        </member>
        <member name="T:Nevron.Chart.INKeyboardEventHandler">
            <summary>
            Implemented by elements, which can handle keyboard events 
            </summary>
        </member>
        <member name="M:Nevron.Chart.INKeyboardEventHandler.OnKeyDown(Nevron.Chart.Windows.NKeyEventArgs)">
            <summary>
            Handles the key down event
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Chart.INKeyboardEventHandler.OnKeyPress(Nevron.Chart.NKeyPressEventArgs)">
            <summary>
            Handles the key press event
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Chart.INKeyboardEventHandler.OnKeyUp(Nevron.Chart.Windows.NKeyEventArgs)">
            <summary>
            Handles the key up event
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="T:Nevron.Chart.INMouseEventHandler">
            <summary>
            Implemented by elements, which can handle mouse events 
            </summary>
        </member>
        <member name="M:Nevron.Chart.INMouseEventHandler.OnMouseEnter(Nevron.Chart.NViewEventArgs)">
            <summary>
            Called when the mouse entered the element
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Chart.INMouseEventHandler.OnMouseMove(Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Called when the mouse moves in the element
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Chart.INMouseEventHandler.OnMouseHover(Nevron.Chart.NViewEventArgs)">
            <summary>
            Called when the mouse hovers in the element
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Chart.INMouseEventHandler.OnMouseDown(Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Called when a mouse button is down in the element
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Chart.INMouseEventHandler.OnMouseUp(Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Called when a mouse button is up in the element
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Chart.INMouseEventHandler.OnMouseWheel(Nevron.Chart.Windows.NMouseEventArgs)">
            <summary>
            Called when a mouse wheel was moved in the element
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="M:Nevron.Chart.INMouseEventHandler.OnMouseLeave(Nevron.Chart.NViewEventArgs)">
            <summary>
            Called when the mouse leaves the element
            </summary>
            <param name="e">event arguments received from a view</param>
        </member>
        <member name="T:Nevron.Chart.INChartControl">
            <summary>
            Implemented by chart control adapters in WinForms and WebForms
            </summary>
        </member>
        <member name="P:Nevron.Chart.INChartControl.Charts">
            <summary>
            Obtains a reference to the charts collection
            </summary>
        </member>
        <member name="P:Nevron.Chart.INChartControl.Legends">
            <summary>
            Obtains a reference to the legends collection
            </summary>
        </member>
        <member name="P:Nevron.Chart.INChartControl.Labels">
            <summary>
            Obtains a reference to the labels collection
            </summary>
        </member>
        <member name="P:Nevron.Chart.INChartControl.Gauges">
            <summary>
            Obtains a reference to the gauges collection
            </summary>
        </member>
        <member name="P:Nevron.Chart.INChartControl.NumericDisplays">
            <summary>
            Obtains a reference to the numeric displays collection
            </summary>
        </member>
        <member name="P:Nevron.Chart.INChartControl.StateIndicators">
            <summary>
            Obtains a reference to the state indicators collection
            </summary>
        </member>
        <member name="P:Nevron.Chart.INChartControl.Watermarks">
            <summary>
            Obtains a reference to the watermarks collection
            </summary>
        </member>
        <member name="P:Nevron.Chart.INChartControl.Panels">
            <summary>
            Gets/sets the panels collection
            </summary>
        </member>
        <member name="P:Nevron.Chart.INChartControl.BackgroundStyle">
            <summary>
            Gets/sets the background style
            </summary>
        </member>
        <member name="P:Nevron.Chart.INChartControl.InteractivityStyle">
            <summary>
            Gets/sets the chart default interactivity style
            </summary>
        </member>
        <member name="P:Nevron.Chart.INChartControl.Settings">
            <summary>
            Gets/sets the chart settings
            </summary>
        </member>
        <member name="P:Nevron.Chart.INChartControl.ServiceManager">
            <summary>
            Obtains a reference to the chart service container
            </summary>
        </member>
        <member name="P:Nevron.Chart.INChartControl.Document">
            <summary>
            Obtains the current chart document
            </summary>
        </member>
        <member name="P:Nevron.Chart.INChartControl.DataBindingManager">
            <summary>
            Obtains a reference to the chart data binding manager
            </summary>
        </member>
        <member name="P:Nevron.Chart.INChartControl.ImageExporter">
            <summary>
            Obtains a reference to the chart image exporter
            </summary>
        </member>
        <member name="T:Nevron.Chart.INOverlayRenderable">
            <summary>
            Implemented by objects which support overlay rendering
            </summary>
        </member>
        <member name="T:Nevron.Chart.INAutoSizeable">
            <summary>
            Implemented by objects which can be automatically resized
            </summary>
        </member>
        <member name="P:Nevron.Chart.INAutoSizeable.UseAutomaticSize">
            <summary>
            Indicates whether the object must automatically resize itself
            </summary>
        </member>
        <member name="T:Nevron.Chart.INGuidelineTarget">
            <summary>
            Implemented by guideline targets
            </summary>
        </member>
        <member name="T:Nevron.Chart.INMeasureable">
            <summary>
            Implemented by objects which can be measured in GDI rendering devices
            </summary>
        </member>
        <member name="M:Nevron.Chart.INMeasureable.Measure(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Measures the object in the specified device and returns its size in pixels
            </summary>
            <param name="context"></param>
            <param name="maxSize"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.INPostOrderPaintable2D">
            <summary>
            Implemented by object that support foreground painting in 2D.
            </summary>
        </member>
        <member name="M:Nevron.Chart.INPostOrderPaintable2D.PostOrderPaint2D(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            Renders foregound in 2D.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Nevron.Chart.INPostOrderPaintable3D">
            <summary>
            Implemented by object that support foreground painting in 3D.
            </summary>
        </member>
        <member name="M:Nevron.Chart.INPostOrderPaintable3D.PostOrderPaint3D(Nevron.Chart.NChartRenderingContext3D)">
            <summary>
            Renders foregound in in 3D.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Nevron.Chart.INPreOrderPaintable2D">
            <summary>
            Implemented by objects which support GDI+ rendering
            </summary>
        </member>
        <member name="M:Nevron.Chart.INPreOrderPaintable2D.PreOrderPaint2D(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            Render in 2D.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Nevron.Chart.INPreOrderPaintable3D">
            <summary>
            Implemented by objects which support OpenGL rendering
            </summary>
        </member>
        <member name="M:Nevron.Chart.INPreOrderPaintable3D.PreOrderPaint3D(Nevron.Chart.NChartRenderingContext3D)">
            <summary>
            Render in 3D.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Nevron.Chart.INPrintDocumentController">
            <summary>
            Implemented by printing document controllers
            </summary>
        </member>
        <member name="M:Nevron.Chart.INPrintDocumentController.BeforePrintSample(System.Int32)">
            <summary>
            Called before printing the specified sample 
            </summary>
            <param name="sample"></param>
        </member>
        <member name="M:Nevron.Chart.INPrintDocumentController.BeforePrintDocument">
            <summary>
            Called before printing the document
            </summary>
        </member>
        <member name="M:Nevron.Chart.INPrintDocumentController.AfterPrintDocument">
            <summary>
            Called after the document has been printed 
            </summary>
        </member>
        <member name="P:Nevron.Chart.INPrintDocumentController.SampleCount">
            <summary>
            Obtains the number of samples which must be printed
            </summary>
        </member>
        <member name="T:Nevron.Chart.INPrintPageLayout">
            <summary>
            Implemented by print page layouts
            </summary>
        </member>
        <member name="P:Nevron.Chart.INPrintPageLayout.SamplesPerPage">
            <summary>
            Obtains the numbers of samples which must be printed for each page
            </summary>
        </member>
        <member name="M:Nevron.Chart.INPrintPageLayout.GetSampleBounds(System.Int32,System.Int32,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Gets the sample bounds for the specified page 
            </summary>
            <param name="page">page index</param>
            <param name="sample">page sample</param>
            <param name="e">pring event arguments</param>
        </member>
        <member name="T:Nevron.Chart.INMaster">
            <summary>
            Implemented by objects which can serve as masters in synchoronization services 
            </summary>
        </member>
        <member name="M:Nevron.Chart.INMaster.AlignSlaves">
            <summary>
            Aligns the slaves to the master
            </summary>
        </member>
        <member name="P:Nevron.Chart.INMaster.Slaves">
            <summary>
            Obtains an array of the master slaves
            </summary>
        </member>
        <member name="T:Nevron.Chart.INSlave">
            <summary>
            Implemented by slaves involved in synchronization services
            </summary>
        </member>
        <member name="M:Nevron.Chart.INSlave.AlignToMaster(Nevron.Chart.INMaster)">
            <summary>
            Aligns the slave to its master
            </summary>
            <param name="master"></param>
        </member>
        <member name="T:Nevron.Chart.INMouseService">
            <summary>
            Implemented by mouse services
            </summary>
        </member>
        <member name="P:Nevron.Chart.INMouseService.Capture">
            <summary>
            Get / sets mouse capture
            </summary>
        </member>
        <member name="P:Nevron.Chart.INMouseService.CursorSet">
            <summary>
            Whether the cursor has been set
            </summary>
        </member>
        <member name="P:Nevron.Chart.INMouseService.Cursor">
            <summary>
            Gets or sets the mouse cursor
            </summary>
        </member>
        <member name="P:Nevron.Chart.INMouseService.DefaultCursor">
            <summary>
            Gets or sets the default mouse cursor
            </summary>
        </member>
        <member name="P:Nevron.Chart.INMouseService.ScreenMousePosition">
            <summary>
            Gets the current mouse screen coordinates 
            </summary>
        </member>
        <member name="P:Nevron.Chart.INMouseService.ClientMousePosition">
            <summary>
            Gets the mouse position in client coordinates
            </summary>
        </member>
        <member name="T:Nevron.Chart.INTimerObserver">
            <summary>
            Implemented by timer observers
            </summary>
        </member>
        <member name="M:Nevron.Chart.INTimerObserver.OnTimerTick">
            <summary>
            Occurs when the timer ticks
            </summary>
        </member>
        <member name="M:Nevron.Chart.INTimerObserver.OnTimerStop">
            <summary>
            Occurs when the timer is stopped
            </summary>
        </member>
        <member name="M:Nevron.Chart.INTimerObserver.OnTimerStart">
            <summary>
            Occurs when the timer is started
            </summary>
        </member>
        <member name="T:Nevron.Chart.INTimerService">
            <summary>
            Implemented by timer services
            </summary>
        </member>
        <member name="M:Nevron.Chart.INTimerService.RegisterObserver(System.Int32,System.Boolean,Nevron.Chart.INTimerObserver)">
            <summary>
            Registers a obser that will receive notification when the timer ticks
            </summary>
            <param name="timeInterval"></param>
            <param name="createNewTimer"></param>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.INTimerService.UnRegisterObserver(Nevron.Chart.INTimerObserver)">
            <summary>
            Unregisters the observer
            </summary>
            <param name="observer"></param>
        </member>
        <member name="M:Nevron.Chart.INTimerService.StopObserveTimer(Nevron.Chart.INTimerObserver)">
            <summary>
            Stops the timer with the specified handle
            </summary>
            <param name="observer"></param>
        </member>
        <member name="M:Nevron.Chart.INTimerService.StartObserveTimer(Nevron.Chart.INTimerObserver)">
            <summary>
            Starts the timer with the specified handle
            </summary>
            <param name="observer"></param>
        </member>
        <member name="T:Nevron.Chart.INView">
            <summary>
            Summary description for INView.
            </summary>
        </member>
        <member name="P:Nevron.Chart.INView.Document">
            <summary>
            Gets or sets the document associated with this view
            </summary>
        </member>
        <member name="P:Nevron.Chart.INView.Size">
            <summary>
            Gets the size in pixels of this view
            </summary>
        </member>
        <member name="P:Nevron.Chart.INView.Resolution">
            <summary>
            Gets the resolution of this chart view
            </summary>
        </member>
        <member name="P:Nevron.Chart.INView.Context">
            <summary>
            Gets the rendering context associated with this view
            </summary>
        </member>
        <member name="T:Nevron.Chart.NFilteredIterator">
            <summary>
            Represents a filtered iterator.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFilteredIterator.#ctor(Nevron.INIterator,Nevron.Filters.INFilter)">
            <summary>
            Creates a new filtered iterator based on iterator and filter.
            </summary>
            <param name="iterator"></param>
            <param name="filter"></param>
        </member>
        <member name="M:Nevron.Chart.NFilteredIterator.MoveNext">
            <summary>
            Advanced the iterator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NFilteredIterator.Reset">
            <summary>
            Resets the iterator.
            </summary>
        </member>
        <member name="F:Nevron.Chart.NFilteredIterator.m_Iterator">
            <summary>
            The underlying iterator.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NImageMapDockPanel">
            <summary>
            The base for all docking panels.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NImageMapDockPanel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NImageMapDockPanel.CacheSelectionRendering">
            <summary>
            Whether or not to cache the internal image map created by the panel.
            </summary>
            <remarks>
            When you use an interactivity operations like tooltips, events and cursors the 
            control internally performs a render to determine the chart object under the 
            mouse cursor. This render is cached for reuse by default, which greatly improves 
            the speed of subsequent interactivity requests. The generated image map is 
            automatically updated when you refresh the chart or drag it with the trackball. 
            You may wish to turn off this cache to reduce the memory footprint of the control.
            </remarks>
            <example>
            The following code disables the selection cache:
            <code lang = 'VB'>
            somePanel.CacheSelectionRendering = False
            </code>
            <code>
            somePanel.CacheSelectionRendering = false;
            </code>
            </example>
        </member>
        <member name="M:Nevron.Chart.NImageMapDockPanel.Refresh">
            <summary>
            Invalidates the cached image map and refreshes all child panels.
            </summary>
        </member>
        <member name="F:Nevron.Chart.NImageMapDockPanel.m_bCacheSelectionRendering">
            <summary>
            Whether to cache selection rendering
            </summary>
        </member>
        <member name="T:Nevron.Chart.NGuideline">
            <summary>
            Represents a guideline that aligns panels objects on their sides
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGuideline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGuideline.#ctor(Nevron.Chart.PanelSide)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGuideline.Side">
            <summary>
            Gets or sets the panel side
            </summary>
        </member>
        <member name="T:Nevron.Chart.NTwinGuideline">
            <summary>
            Creates a guideline that snaps the two targets in a twin panel
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTwinGuideline.Target1Offset">
            <summary>
            Gets/sets the offset of the first target zone from the second target
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTwinGuideline.Target2Offset">
            <summary>
            Gets/sets the offset of the second target zone from the first target
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAnchorPanel">
            <summary>
            Represents a content panel hosting an anchor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAnchorPanel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnchorPanel.Anchor">
            <summary>
            An anchor object defining the panel location.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAnchorPanel.RecalcLayout(Nevron.Chart.NChartRenderingContext)">
            <summary>
            Recalculates the layout of this panel and it's descendants
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NAnchorPanel.GetPanelLocation(Nevron.Chart.NChartRenderingContext,Nevron.Chart.NPanel)">
            <summary>
            Overriden to return the anchor location
            </summary>
            <param name="context"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NAutoSizeableDockPanel">
            <summary>
            Extends docking panels with the auto size feature.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoSizeableDockPanel.UseAutomaticSize">
            <summary>
            When set to true the panel will use size which is best for the dispalyed contents.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoSizeableDockPanel.Cache">
            <summary>
            When set to true the control will cache the content of this panel when using smart painting.
            </summary>
            <remarks>
            Note that when you set this property to true you're responsible to manually refresh the contents of the panel.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NBackgroundDecoratorPanel.BackgroundStyle">
            <summary>
            Gets or sets the background style of the panel.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBackgroundDecoratorPanel.InteractivityStyle">
            <summary>
            Gets or sets the interactivity style of the panel.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBackgroundDecoratorPanel.AnimationsStyle">
            <summary>
            Gets or sets the animation style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBackgroundDecoratorPanel.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NBackgroundDecoratorPanel.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NBackgroundDecoratorPanel.PreOrderPaint2D(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            Renders in 2D.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Nevron.Chart.NContentPanel">
            <summary>
            Base for all content panels.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NContentPanel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NContentPanel.Visible">
            <summary>
            Controls the visibility of the panel.
            </summary>
            <remarks>
            This property is deprecated, you should use VisibilityMode instead
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NContentPanel.VisibilityMode">
            <summary>
            Controls the visibility of the panel.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NContentPanel.ContentAlignment">
            <summary>
            The alignment of the panel contents relative to the panel bounds.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NContentPanel.FitAlignment">
            <summary>
            Gets or sets the alignment of the panel contents relative to the panel content area, when bounds mode is set to Fit
            </summary>
        </member>
        <member name="P:Nevron.Chart.NContentPanel.Size">
            <summary>
            Specifies the size of the panel when UseAutomaticSize is turned off
            </summary>
        </member>
        <member name="P:Nevron.Chart.NContentPanel.ContentSize">
            <summary>
            The size of the content before scaling is applied.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NContentPanel.ContentBounds">
            <summary>
            This property is deprecated. You should use ContentArea instead.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NContentPanel.MarginsArea">
            <summary>
            Gets the margins area of this panel.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NContentPanel.ContentArea">
            <summary>
            Gets the content area of this panel
            </summary>
        </member>
        <member name="P:Nevron.Chart.NContentPanel.ZoomedContentArea">
            <summary>
            Gets the zoomed content area. This is the actual content area after the zoom factor and offset are applied to the content area.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NContentPanel.ContentAreaZoomFactor">
            <summary>
            Gets or sets the zoom factors applied on the content area
            </summary>
        </member>
        <member name="P:Nevron.Chart.NContentPanel.ClipPanelContentWhenZooming">
            <summary>
            Whether the panel content will be clipped when applying a panel zoom
            </summary>
        </member>
        <member name="M:Nevron.Chart.NContentPanel.CalculateZoomedContentArea">
            <summary>
            Gets the zoomed content area (after the content area zoom factors are applied)
            </summary>
        </member>
        <member name="P:Nevron.Chart.NContentPanel.BackgroundFillStyle">
            <summary>
            Gets or sets the background fill style of the panel
            </summary>
        </member>
        <member name="P:Nevron.Chart.NContentPanel.PaintEffect">
            <summary>
            Gets or sets the paint effect applied after the gauge is painted
            </summary>
        </member>
        <member name="P:Nevron.Chart.NContentPanel.BoundsMode">
            <summary>
            Defines the mode used to fit the panel contents into the panel bounds.
            </summary>
            <remarks>
            The possible values for this property are BoundsMode.None, BoundsMode.Stretch and BoundsMode.Fit.
            <ul>
            <li>None - the panel will not try to align the contents to the panel bounds.</li>
            <li>Fit - the panel will stretch the contents along X and Y in order to fill as much as possible of the panel area preserving the contents proportions.</li>
            <li>Stretch - the panel will stretch the contents along X and Y in order to fill as much as possible of the panel area without breaking outside. This bounds mode does not preserve the panel contents proportions.</li>
            </ul>
            </remarks>
            <example>
            The following code modifies the chart bounds mode and chart margins:
            <code lang = 'VB'>
            Dim chart As NChart = CType(nChartControl1.Charts.GetAt(0), NChart)
            chart.BoundsMode = BoundsMode.Stretch
            chart.View.SetPredefinedProjection(PredefinedProjection.Orthogonal)
            </code>
            <code>
            NChart chart = nChartControl1.Charts[0];
            chart.BoundsMode = BoundsMode.Stretch;
            chart.View.SetPredefinedProjection(PredefinedProjection.Orthogonal);
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NContentPanel.PositionChildPanelsInContentBounds">
            <summary>
            When set to true child panels that use docking will use the panel content bounds instead of the panel bounds.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NContentPanel.Padding">
            <summary>
            Gets or sets the padding applied to the panel
            </summary>
            <remarks>
            The padding controls the distance between the panel border and its content
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NContentPanel.Margins">
            <summary>
            Gets or sets the margins applied to the panel
            </summary>
            <remarks>
            The margins control the distance between the panel bounds and the border (or content if there is no border style)
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NContentPanel.BorderStyle">
            <summary>
            Gets or sets the outline of the panel
            </summary>
        </member>
        <member name="P:Nevron.Chart.NContentPanel.AllowContentZoom">
            <summary>
            Gets or sets a value indicating whether panel zoom is allowed or not
            </summary>
        </member>
        <member name="M:Nevron.Chart.NContentPanel.Measure(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Returns the native size of the content panel.
            </summary>
            <param name="context"></param>
            <param name="maxSize"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NContentPanel.RecalcLayout(Nevron.Chart.NChartRenderingContext)">
            <summary>
            Recalculates the layout of this panel and it's descendants
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NContentPanel.GetPanelOffsetFromSide(Nevron.Chart.PanelSide)">
            <summary>
            
            </summary>
            <param name="side"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NContentPanel.GetRootOffsetFromSide(Nevron.Chart.PanelSide)">
            <summary>
            
            </summary>
            <param name="side"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NContentPanel.SetOffsetsFromSide(Nevron.Chart.NChartRenderingContext,Nevron.Chart.PanelSide,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="side"></param>
            <param name="rootOffset"></param>
            <param name="panelOffset"></param>
        </member>
        <member name="M:Nevron.Chart.NContentPanel.CalculateBoundsAndContentBounds(Nevron.Chart.NChartRenderingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NContentPanel.IsContentZoomAllowed">
            <summary>
            Gets whether panel zoom is allowed or not for this panel
            </summary>
        </member>
        <member name="M:Nevron.Chart.NContentPanel.CalculateContentSize(Nevron.Chart.NChartRenderingContext)">
            <summary>
            Calculates the size of the content in the panel
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="E:Nevron.Chart.NContentPanel.ContentAreaChanged">
            <summary>
            Occurs when the scroller value has changed.
            </summary>
        </member>
        <member name="F:Nevron.Chart.NContentPanel.m_bPositionChildPanelsInContentBounds">
            <summary>
            Bounds for rendering (after bounds mode is applied)
            </summary>
        </member>
        <member name="F:Nevron.Chart.NContentPanel.m_ClipChildPanelsInContentArea">
            <summary>
            Whether child panels must be clipped.
            </summary>
        </member>
        <member name="F:Nevron.Chart.NContentPanel.m_MarginsArea">
            <summary>
            Bounds of the panels - margins
            </summary>
        </member>
        <member name="F:Nevron.Chart.NContentPanel.m_BorderArea">
            <summary>
            Area occupied by the panel border
            </summary>
        </member>
        <member name="F:Nevron.Chart.NContentPanel.m_ContentArea">
            <summary>
            Area occupied by the panel content
            </summary>
        </member>
        <member name="F:Nevron.Chart.NContentPanel.m_ZoomedContentArea">
            <summary>
            The zoomed content area
            </summary>
        </member>
        <member name="F:Nevron.Chart.NContentPanel.m_ContentAreaZoomFactor">
            <summary>
            Zoom area specified in factors
            </summary>
        </member>
        <member name="F:Nevron.Chart.NContentPanel.m_ClipPanelContentWhenZooming">
            <summary>
            Apply clip when using panel zoom
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDockPanel">
            <summary>
            The base for all docking panels.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDockPanel.Location">
            <summary>
            The location of the panel relative to the parent panel.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDockPanel.DockMode">
            <summary>
            The docking mode of this panel.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDockPanel.DockMargins">
            <summary>
            The margins of the panel relative to the parent panel when docking is used.
            </summary>
            <remarks>
            This property is obsolete. Use Margins instead.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NDockPanel.Offset(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NPointL)">
            <summary>
            Offsets the panel from its current location with the specified amount.
            </summary>
            <param name="context"></param>
            <param name="offset"></param>
        </member>
        <member name="T:Nevron.Chart.NSideGuideline">
            <summary>
            Represents a guideline that aligns panels objects on their sides
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSideGuideline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSideGuideline.#ctor(Nevron.Chart.PanelSide)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSideGuideline.Static">
            <summary>
            Gets or sets a value indicating whether the guideline is static
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSideGuideline.StaticPosition">
            <summary>
            Gets or sets the static position of the guideline relative to the root panel
            </summary>
            <remarks>
            This value has effect only when the guideline is static
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NSideGuideline.Targets">
            <summary>
            Returns a collection containing the guideline targets
            </summary>
        </member>
        <member name="T:Nevron.Chart.NGuidelineCollection">
            <summary>
            A collection of NGuideline objects
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGuidelineCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NGuidelineTargetCollection">
            <summary>
            A collection containing the ids of the object aligned to the guideline
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGuidelineTargetCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGuidelineTargetCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NGuidelineTargetCollection.ItemType">
            <summary>
            Obtains the type of objects which can be stored in the array
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGuidelineTargetCollection.Add(System.Object)">
            <summary>
            Adds the specified object to the collection.
            </summary>
            <param name="obj"></param>
            <remarks>
            The object must implement the INGuidelineTarget interface
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NGuidelineTargetCollection.Add(Nevron.Chart.INGuidelineTarget)">
            <summary>
            Adds the specified INGuidelineTarget object to the collection.
            </summary>
            <param name="GuidelineTarget"></param>
        </member>
        <member name="M:Nevron.Chart.NGuidelineTargetCollection.Insert(System.Int32,Nevron.Chart.INGuidelineTarget)">
            <summary>
            Inserts the specified INGuidelineTarget object to the collection at the specified index location.
            </summary>
            <param name="index"></param>
            <param name="GuidelineTarget"></param>
        </member>
        <member name="M:Nevron.Chart.NGuidelineTargetCollection.Clear">
            <summary>
            Removes all GuidelineTargets from the collection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGuidelineTargetCollection.Contains(Nevron.Chart.INGuidelineTarget)">
            <summary>
            Determines whether the specified GuidelineTarget is contained in this collection.
            </summary>
            <param name="GuidelineTarget"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NGuidelineTargetCollection.IndexOf(Nevron.Chart.INGuidelineTarget)">
            <summary>
            Retrieves the index of a specified GuidelineTarget object in the collection.
            </summary>
            <param name="GuidelineTarget"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NGuidelineTargetCollection.Remove(Nevron.Chart.INGuidelineTarget)">
            <summary>
            Removes the specified GuidelineTarget from the collection.
            </summary>
            <param name="GuidelineTarget"></param>
        </member>
        <member name="M:Nevron.Chart.NGuidelineTargetCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the GuidelineTarget at the specified index from the collection.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Chart.NGuidelineTargetCollection.ReplaceForeignUniqueId(System.Collections.Hashtable,System.Boolean)">
            <summary>
            Replaces any foreign unique ids (references to other nodes)
            </summary>
            <param name="mapUIds">map of uids which is used to find the new foreign uid value</param>
            <param name="makeNotFoundEmpty">indicates whether the not found foreign uids must be set to Guid.Empty</param>
        </member>
        <member name="P:Nevron.Chart.NGuidelineTargetCollection.Count">
            <summary>
            The number of elements contained in the Collection.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGuidelineTargetCollection.IsSynchronized">
            <summary>
            true if access to the ICollection is synchronized (thread-safe); otherwise, false.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGuidelineTargetCollection.SyncRoot">
            <summary>
            An object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGuidelineTargetCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the Collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Chart.NGuidelineTargetCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NGuidelineTargetCollection.Clone">
            <summary>
            Creates an identical copy of this object
            </summary>
            <remarks>
            The implementation will create a new instanse of the NReferenceHolderArrayList derived class.
            For this purpose all NReferenceHolderArrayList derivates must have a defualt public constructor.
            </remarks>
            <returns>
            The cloned collection
            </returns>
        </member>
        <member name="T:Nevron.Chart.NPaintCallback">
            <summary>
            Provides empty implementation of the the INPaintCallback interface
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPaintCallback.OnBeforePaint(Nevron.Chart.NPanel,Nevron.Chart.NPanelPaintEventArgs)">
            <summary>
            Occurs before the panel is painted.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPaintCallback.OnAfterPaint(Nevron.Chart.NPanel,Nevron.Chart.NPanelPaintEventArgs)">
            <summary>
            Occurs after the panel is painted.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NPanel">
            <summary>
            Base for all panels in the control.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPanel.#ctor">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPanel.Bounds">
            <summary>
            Gets the bounds of this panel.
            </summary>
            <remarks>
            You cannot modify the bounds of the panel because they are calculated by the layout manager.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NPanel.ParentPanel">
            <summary>
            The parent of this panel.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPanel.ChildPanels">
            <summary>
            The child panels of this panel.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPanel.PaintCallback">
            <summary>
            Assign a value to this property to provide custom code for execution before
            and/or after panel painting.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPanel.OverlayPaintCallback">
            <summary>
            Assign a value to this property to provide custom code for execution before
            and/or after panel painting.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPanel.CustomPaintSizeMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPanel.Use2DRasterImageMap">
            <summary>
            Gets / or sets whether this panel should use 2D raster image map.
            </summary>
            <remarks>
            Using a raster image map can be useful if the panel (chart) contain many data points which would result in a large vector image map
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NPanel.Refresh">
            <summary>
            Refreshes the panel and its child panels.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPanel.IsDescendant(Nevron.Chart.NPanel)">
            <summary>
            Returns true if this panel contains the specified panel.
            </summary>
            <param name="panel"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NPanel.RemoveDescendantsOfType(System.Type)">
            <summary>
            Removes all descendant panels from the specified type.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Nevron.Chart.NPanel.BringToFront">
            <summary>
            Places the panel on top of the Z order.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPanel.SendToBack">
            <summary>
            Places the panel at the end of the Z order.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPanel.RecalcLayout(Nevron.Chart.NChartRenderingContext)">
            <summary>
            Recalculates the layout of this panel and it's descendants
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NPanel.TransformViewPointToParent(Nevron.GraphicsCore.NPointF@)">
            <summary>
            Transforms the point to parent coordinates
            </summary>
            <param name="point"></param>
            <returns>true if the transformation was successful</returns>
        </member>
        <member name="M:Nevron.Chart.NPanel.OnBoundsChanging(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Occurs before the bounds property changes
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Chart.NPanel.OnBoundsChanged">
            <summary>
            Occurs when the bounds property has changed
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPanel.HitTest(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NRectangleF,System.Boolean,System.Collections.Generic.List{Nevron.Dom.INNode})">
            <summary>
            Performs a hit test.
            </summary>
            <param name="context"></param>
            <param name="rect"></param>
            <param name="containOrIntersect"></param>
            <param name="nodes"></param>
        </member>
        <member name="T:Nevron.Chart.NPanelCollection">
            <summary>
            Summary description for NPanelRebindableArrayList.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NPanelDeck">
            <summary>
            Represents a collection from panels.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPanelDeck.Count">
            <summary>
            Returns the number of items.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPanelDeck.GetPanelAt(System.Int32)">
            <summary>
            Gets the panel at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NPanelDeck.Clear">
            <summary>
            Removes all panels from the deck and their descendants from the panels hierarchy
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPanelDeck.IndexOf(Nevron.Chart.NPanel)">
            <summary>
            Gets the index of the specified panel in the collection
            </summary>
            <param name="panel"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NPanelDeck.Remove(Nevron.Chart.NPanel)">
            <summary>
            Removes the panel
            </summary>
            <param name="panel"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NPanelDeck.RemoveAt(System.Int32)">
            <summary>
            Removes the panel at index
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:Nevron.Chart.NPanelPaintEventArgs">
            <summary>
            The NEventArgs class derives from EventArgs and is used when you intercept the BeforePaint and AfterPaint events.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPanelPaintEventArgs.Graphics">
            <summary>
            The NGraphics object associated with the panel
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPanelPaintEventArgs.Context">
            <summary>
            Gets the current chart rendering context
            </summary>
            <remarks>
            You can use this context to perform coordinate 
            transformations during the chart paint (for example when handling BeforePaint and AfterPaint events)
            </remarks>
        </member>
        <member name="T:Nevron.Chart.NRootPanel">
            <summary>
            Summary description for NRootPanel.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRootPanel.Guidelines">
            <summary>
            Gets or sets a collection of guidelines 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRootPanel.BackgroundStyle">
            <summary>
            Gets or sets the background style of the root panel.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRootPanel.InteractivityStyle">
            <summary>
            Gets or sets the interactivity style of the root panel.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRootPanel.AnimationsStyle">
            <summary>
            Gets or sets the animation style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRootPanel.Charts">
            <summary>
            Obtains a collection containing all charts in the control.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRootPanel.Legends">
            <summary>
            Obtains a collection containing all legends in the control.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRootPanel.Labels">
            <summary>
            Obtains a collection containing all labels in the control.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRootPanel.Gauges">
            <summary>
            Obtains a collection containing all gauges in the control.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRootPanel.NumericDisplays">
            <summary>
            Obtains a collection containing all numeric displays in the control.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRootPanel.StateIndicators">
            <summary>
            Obtains a collection containing all state indicators in the control.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRootPanel.Watermarks">
            <summary>
            Obtains a collection containing all watermarks in the control.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRootPanel.Panels">
            <summary>
            Obtains a collection containing all panels in the control.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRootPanel.Layout(Nevron.Chart.NChartRenderingContext)">
            <summary>
            Layouts the panel and it's descendants
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Nevron.Chart.NRootPanel.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NRootPanel.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NRootPanel.PreOrderPaint2D(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            Renders in 2D.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Nevron.Chart.NRootPanel.IsContentZoomAllowed">
            <summary>
            Gets whether panel zoom is allowed or not for this panel
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRootPanel.RecalcLayout(Nevron.Chart.NChartRenderingContext)">
            <summary>
            Recalculates the layout of this panel and it's descendants
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Chart.NChartLoadAssemblyType">
            <summary>
            Used to explicitly load the Nevron.Chart.dll assembly
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAnnotation">
            <summary>
            The NAnnotation class serves as base class for all annotations
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAnnotation.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnnotation.Text">
            <summary>
            Gets/sets the annotation text
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnnotation.TextFitMode">
            <summary>
            Gets or sets the the text fit mode of the annotation.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnnotation.MaxTextWidth">
            <summary>
            Gets or sets the maximum width of the text in the annotation when the text fit mode is set to wrap
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnnotation.TextStyle">
            <summary>
            Gets/sets the annotation text style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnnotation.FillStyle">
            <summary>
            Gets/sets the annotation fill style 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnnotation.StrokeStyle">
            <summary>
            Get/sets the annotation stroke style 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnnotation.ShadowStyle">
            <summary>
            Get/sets the annotation shadow style 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnnotation.InteractivityStyle">
            <summary>
            Gets or sets the interactivity style of the panel.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnnotation.Orientation">
            <summary>
            Controls the angle between the annotation anchor point and the annotation shape center
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnnotation.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NAnnotation.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NAnnotation.HitTest(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NRectangleF,System.Boolean,System.Collections.Generic.List{Nevron.Dom.INNode})">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="rect"></param>
            <param name="containsOrIntersect"></param>
            <param name="nodes"></param>
        </member>
        <member name="P:Nevron.Chart.NAnnotation.UseAutomaticSize">
            <summary>
            When set to true the panel will use size best for the dispalyed contents.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnnotation.Cache">
            <summary>
            When set to true the control will cache the content of this panel when using smart painting.
            </summary>
            <remarks>
            Note that when you set this property to true you're responsible to manually refresh the contents of the panel.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NAnnotation.GetCachedPanelKey(Nevron.GraphicsCore.NSize@)">
            <summary>
            Gets the composite key for the cashed panel content
            </summary>
            <param name="panelSize"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NAnnotation.WriteToImageMap(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.INImageMapWriter)">
            <summary>
            Writes the chart to a HTML image map
            </summary>
            <param name="context"></param>
            <param name="imageMapWriter"></param>
        </member>
        <member name="M:Nevron.Chart.NAnnotation.Measure(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Measures the object in the specified device and returns its size in pixels
            </summary>
            <param name="context"></param>
            <param name="maxSize"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NAnnotation.DrawTextGDI(Nevron.Chart.NChartRenderingContext2D,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Draws the annotation text in the specified GDI device
            </summary>
            <param name="context">device</param>
            <param name="rcDraw">drawing rect</param>
        </member>
        <member name="T:Nevron.Chart.NArrowAnnotation">
            <summary>
            The NAnnotation represents a single arrow annotation
            </summary>
        </member>
        <member name="M:Nevron.Chart.NArrowAnnotation.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NArrowAnnotation.ArrowHeadWidthPercent">
            <summary>
            Gets/sets the width of the arrow head relative to the arrow body width
            </summary>
        </member>
        <member name="P:Nevron.Chart.NArrowAnnotation.ArrowRectHeightPercent">
            <summary>
            Gets/sets the height of the arrow body relative to the arrow head height
            </summary>
        </member>
        <member name="M:Nevron.Chart.NArrowAnnotation.PreOrderPaint2D(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            Paints the arrow
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Nevron.Chart.NArrowAnnotation.CalculateBounds(Nevron.Chart.NChartRenderingContext)">
            <summary>
            Overiden to calculate the arrow bounds
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Chart.NArrowCallout">
            <summary>
            Represents an arrow callout (text plus simple arrow pointing to anchor point)
            </summary>
        </member>
        <member name="M:Nevron.Chart.NArrowCallout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NArrowCallout.BeginCapStyle">
            <summary>
            Gets or sets the begin cap style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NArrowCallout.EndCapStyle">
            <summary>
            Gets or sets the end cap style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NArrowCallout.EnableBaseLine">
            <summary>
            Whether the callout will draw a baseline or cap at the end of the arrow
            </summary>
            <remarks>
            When set to true EndCapStyle is not regarded.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NArrowCallout.PreOrderPaint2D(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            Renders the callout in the specified GDI+ device
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Chart.NCallout">
            <summary>
            The NCallout represents a callout annotation and serves as base class for all types of callout annotations
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCallout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCallout.PositionMode">
            <summary>
            Gets or set the position mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCallout.TextAlignment">
            <summary>
            Gets or sets the callout text alignemnt relative to text pin
            </summary>
            <remarks>
            This property is regarded only when PositionMode is set to CalloutPositionMode.AlignToText
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NCallout.ArrowBasePercent">
            <summary>
            Gets/sets size of the callout arrow base relative to the shape side it's currently attached to
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCallout.ArrowLength">
            <summary>
            Gets/sets size of the callout arrow 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCallout.AlwaysInsideParent">
            <summary>
            Specifies whether the callout can leave the bounds of its parent
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCallout.FitInParentContentBounds">
            <summary>
            Whether to fit in the parent content bounds
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCallout.FitInParentChartPlotBounds">
            <summary>
            Whether to fit in parent chart plot bounds (takes effect only in case parent is a chart panel)
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCallout.Pivot">
            <summary>
            Obtains the pivot position of the callout
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCallout.AllowDragging">
            <summary>
            Gets or sets a property indicating whether the callout allows dragging via the mouse.
            </summary>
            <remarks>
            Set to true by default.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NCallout.ArrowStrokeStyle">
            <summary>
            Gets or sets the stroke style applied callout arrow
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCallout.GetCachedPanelKey(Nevron.GraphicsCore.NSize@)">
            <summary>
            Gets the composite key for the cashed panel content
            </summary>
            <param name="panelSize"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NCallout.CalculateBounds(Nevron.Chart.NChartRenderingContext)">
            <summary>
            Overiden to calculate the callout bounds
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NCallout.CalculateContentBounds(Nevron.Chart.NChartRenderingContext)">
            <summary>
            Overriden to assign margined bounds to the panel
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NCallout.FitBounds(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Fits the content bounds inside the parent bounds
            </summary>
            <param name="parentBounds"></param>
            <param name="contentBounds"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NCutEdgeRectangularCallout">
            <summary>
            The NCutEdgeRectangularCallout represents a callout annotation, which is diisplayed as a cut edge rectangle
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCutEdgeRectangularCallout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCutEdgeRectangularCallout.CutEdgePercent">
            <summary>
            Gets/sets the size of the cut edge relative to the smaller side of the callout rectangle
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCutEdgeRectangularCallout.PreOrderPaint2D(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            Renders the callout in the specified GDI+ device
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Chart.NOvalCallout">
            <summary>
            The NOvalCallout represents an oval callout annotation.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NOvalCallout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NOvalCallout.PreOrderPaint2D(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            Renders the callout in the specified GDI+ device
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Chart.NRectangularCallout">
            <summary>
            The NRectangularCallout rectangular a callout annotation.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRectangularCallout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRectangularCallout.PreOrderPaint2D(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            Renders the callout in the specified GDI+ device
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Chart.NRoundedRectangularCallout">
            <summary>
            The NRoundedRectangularCallout rounded rectangular callout annotation
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRoundedRectangularCallout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRoundedRectangularCallout.SmoothEdgePercent">
            <summary>
            Gets/sets the size of the smooth edge relative to the smaller side of the callout rectangle
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRoundedRectangularCallout.PreOrderPaint2D(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            Renders the callout in the specified GDI+ device
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NRoundedRectangularCallout.AutoInflateBounds(Nevron.GraphicsCore.NSizeF)">
            <summary>
            Automatically inflates the size
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NRoundedRectangularCallout.AutoDeflateBounds(Nevron.GraphicsCore.NSizeF)">
            <summary>
            Automatically deflates the size
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NAutoDockAxisAnchor">
            <summary>
            An abstract base class for the automatic dock axis anchors.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAutoDockAxisAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAutoDockAxisAnchor.#ctor(Nevron.Chart.AxisOrientation)">
            <summary>
            Initializer constructor
            </summary>
            <param name="axisOrientation"></param>
        </member>
        <member name="M:Nevron.Chart.NAutoDockAxisAnchor.#ctor(Nevron.Chart.AxisOrientation,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="axisOrientation"></param>
            <param name="createNewZoneLevel"></param>
        </member>
        <member name="M:Nevron.Chart.NAutoDockAxisAnchor.#ctor(Nevron.Chart.AxisOrientation,System.Boolean,System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="axisOrientation"></param>
            <param name="createNewZoneLevel"></param>
            <param name="beginPercent"></param>
            <param name="endPercent"></param>
        </member>
        <member name="P:Nevron.Chart.NAutoDockAxisAnchor.AxisOrientation">
            <summary>
            Gets or sets the axis orientation
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAxisCrossing">
            <summary>
            Represents a crossing between two axes. This is the base class for all axis crossing types.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisCrossing.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisCrossing.#ctor(Nevron.Chart.NAxis)">
            <summary>
            Initializer constructor
            </summary>
            <param name="axis"></param>
        </member>
        <member name="P:Nevron.Chart.NAxisCrossing.Axis">
            <summary>
            The axis to attach to.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAxisCrossingCollection">
            <summary>
            Represents a collection of NAxisCrossing objects
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisCrossingCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NBestVisibilityAxisAnchor">
            <summary>
            Automatically docks a Cartesian axis to one of the axis zones.
            This axis anchor ensures best visibility for the axis by dynamically choosing 
            the most suitable dock zone, taking into account the current projection settings.
            </summary>
            <remarks>
            To enable this type of automatic docking for a given axis you have to create an instance 
            of the NAutoDockAxisAnchor type and assign it to the Anchor property of the axis.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NBestVisibilityAxisAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NBestVisibilityAxisAnchor.#ctor(Nevron.Chart.AxisOrientation)">
            <summary>
            Initializer constructor
            </summary>
            <param name="axisOrientation"></param>
        </member>
        <member name="M:Nevron.Chart.NBestVisibilityAxisAnchor.#ctor(Nevron.Chart.AxisOrientation,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="axisOrientation"></param>
            <param name="createNewZoneLevel"></param>
        </member>
        <member name="M:Nevron.Chart.NBestVisibilityAxisAnchor.#ctor(Nevron.Chart.AxisOrientation,System.Boolean,System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="axisOrientation"></param>
            <param name="createNewZoneLevel"></param>
            <param name="beginPercent"></param>
            <param name="endPercent"></param>
        </member>
        <member name="P:Nevron.Chart.NBestVisibilityAxisAnchor.ZonePreference">
            <summary>
            Gets or sets an enum value that specifies preferences for automatic selection of dock zones.
            </summary>
            <remarks>
            The automatic dock axis anchor dynamicaly chooses the most suitable dock zone for an axis, 
            taking into account the current projection. The ZonePreference value helps the anchor decide 
            which axis dock zone to choose when there are two options for the given projection state.
            </remarks>
        </member>
        <member name="T:Nevron.Chart.NCrossAxisAnchor">
            <summary>
            Represents an axis anchor that will create a crossing between two or more axes.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCrossAxisAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCrossAxisAnchor.#ctor(Nevron.Chart.AxisOrientation)">
            <summary>
            Initializer constructor
            </summary>
            <param name="axisOrientation"></param>
        </member>
        <member name="M:Nevron.Chart.NCrossAxisAnchor.#ctor(Nevron.Chart.AxisOrientation,Nevron.Chart.NAxisCrossing)">
            <summary>
            Initializer constructor
            </summary>
            <param name="axisOrientation"></param>
            <param name="axisCrossing"></param>
        </member>
        <member name="M:Nevron.Chart.NCrossAxisAnchor.#ctor(Nevron.Chart.AxisOrientation,Nevron.Chart.NAxisCrossing,System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="axisOrientation"></param>
            <param name="axisCrossing"></param>
            <param name="beginPercent"></param>
            <param name="endPercent"></param>
        </member>
        <member name="P:Nevron.Chart.NCrossAxisAnchor.Crossings">
            <summary>
            Gets or sets the axis crossing associated with anchor
            </summary>
            <remarks>
            The axis crossing collection can contain an unlimited number of crossings however only the
            first two valid crossings will be regarded by the anchor
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NCrossAxisAnchor.AxisOrientation">
            <summary>
            Gets or sets the orientation of the axis attached to this crossing anchor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDockAxisAnchor">
            <summary>
            Docks a Cartesian axis to a specified axis zone.
            </summary>
            <remarks>
            An instance of this type can be assigned to the Anchor property of an axis.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NDockAxisAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDockAxisAnchor.#ctor(Nevron.Chart.AxisDockZone)">
            <summary>
            Initializer constructor
            </summary>
            <param name="dockZone"></param>
        </member>
        <member name="M:Nevron.Chart.NDockAxisAnchor.#ctor(Nevron.Chart.AxisDockZone,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="dockZone"></param>
            <param name="createNewZoneLevel"></param>
        </member>
        <member name="M:Nevron.Chart.NDockAxisAnchor.#ctor(Nevron.Chart.AxisDockZone,System.Boolean,System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <remarks>
            The begin and end percentages indicate how much space the axis will occupy from the respective dock zone.
            </remarks>
            <param name="dockZone"></param>
            <param name="createNewZoneLevel"></param>
            <param name="beginPercent"></param>
            <param name="endPercent"></param>
        </member>
        <member name="P:Nevron.Chart.NDockAxisAnchor.AxisDockZone">
            <summary>
            Gets or sets the axis position (zone) the axis is placed into
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDockAxisAnchorBase">
            <summary>
            An abstract base class for the dock axis anchors.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDockAxisAnchorBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDockAxisAnchorBase.#ctor(System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="createNewZoneLevel"></param>
        </member>
        <member name="M:Nevron.Chart.NDockAxisAnchorBase.#ctor(System.Boolean,System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="createNewZoneLevel"></param>
            <param name="beginPercent"></param>
            <param name="endPercent"></param>
        </member>
        <member name="P:Nevron.Chart.NDockAxisAnchorBase.SynchronizeRulerOrientation">
            <summary>
            Gets or sets a value indicating whether this anchor should synchronize the 
            ruler orientation of the axis with the axis zone.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDockAxisAnchorBase.BeforeSpace">
            <summary>
            Specifies spacing of the level before the other levels in the zone (if any)
            </summary>
            <remarks>
            This property takes effect only when the property CreateNewZoneLevel is set to true.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NDockAxisAnchorBase.AfterSpace">
            <summary>
            Specifies spacing that should be leaved after the level of the axis before other 
            levels are added in the zone.
            </summary>
            <remarks>
            This property takes effect only when the property CreateNewZoneLevel is set to true.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NDockAxisAnchorBase.CreateNewZoneLevel">
            <summary>
            Gets or sets a value indicating whether this anchor will create a new 
            zone level for the axis or use the last created one.
            </summary>
            <remarks>
            If there are no levels in the zone the anchor will always create a zone 
            level. Note that the BeforeSpace and AfterSpace properties depend on the 
            value of this property.
            </remarks>
        </member>
        <member name="T:Nevron.Chart.NModelAxisCrossing">
            <summary>
            Describes a cross point between two axes in scale model coordinates.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NModelAxisCrossing.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NModelAxisCrossing.#ctor(Nevron.Chart.NAxis,Nevron.HorzAlign,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="axis"></param>
            <param name="horzAlign"></param>
            <param name="offset"></param>
        </member>
        <member name="T:Nevron.Chart.NAutoSideAxisAnchor">
            <summary>
            Automatically docks a Cartesian axis to one of the axis zones.
            This axis anchor dynamically chooses a dock zone for the axis, 
            taking into account the current projection settings and a user preference for side.
            </summary>
            <remarks>
            To enable this type of automatic docking for a given axis you have to create an instance 
            of the NAutoSideDockAxisAnchor type and assign it to the Anchor property of the axis.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NAutoSideAxisAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAutoSideAxisAnchor.#ctor(Nevron.Chart.AxisOrientation)">
            <summary>
            Initializer constructor
            </summary>
            <param name="axisOrientation">Specifies the axis orientation: vertical, horizontal or depth.</param>
        </member>
        <member name="M:Nevron.Chart.NAutoSideAxisAnchor.#ctor(Nevron.Chart.AxisOrientation,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="axisOrientation"></param>
            <param name="createNewZoneLevel"></param>
        </member>
        <member name="M:Nevron.Chart.NAutoSideAxisAnchor.#ctor(Nevron.Chart.AxisOrientation,System.Boolean,System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="axisOrientation"></param>
            <param name="createNewZoneLevel"></param>
            <param name="beginPercent"></param>
            <param name="endPercent"></param>
        </member>
        <member name="P:Nevron.Chart.NAutoSideAxisAnchor.PreferredSide">
            <summary>
            Gets or sets a value that specifies a preferred side for an axis.
            </summary>
            <remarks>
            The automatic dock axis anchor dynamicaly chooses a dock zone for an axis, 
            taking into account the current projection and the side preference. For an 
            arbitrary 3D view there are two possible edges of the chart box that can host an axis. 
            One of them is named "Primary" and the other "Secondary". This property determines 
            which of these edges is selected for the axis. For example: for a Y axis 
            the left side of the chart is primary, and the right side is secondary.
            If you choose the primary side the Y axis will always be displayed to the left, no 
            matter how the chart is rotated.
            </remarks>
        </member>
        <member name="T:Nevron.Chart.NValueAxisCrossing">
            <summary>
            Describes a cross point between two axes in scale value coordinates.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NValueAxisCrossing.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NValueAxisCrossing.#ctor(Nevron.Chart.NAxis,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="axis"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.NValueAxisCrossing.#ctor(Nevron.Chart.NAxis,System.Double,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="axis"></param>
            <param name="value"></param>
            <param name="clampToRuler"></param>
        </member>
        <member name="P:Nevron.Chart.NValueAxisCrossing.ClampToRuler">
            <summary>
            Gets or sets a property indicating whether the value should be clamped to the ruler range of the referenced axis
            </summary>
        </member>
        <member name="P:Nevron.Chart.NValueAxisCrossing.Value">
            <summary>
            Gets or sets the scale value at which the axes intersect
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRadarAxisAnchor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRadarAxisAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadarAxisAnchor.UseCustomAngle">
            <summary>
            Controls whether the axis must use a custom angle
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadarAxisAnchor.CustomAngle">
            <summary>
            Controls the axis custom angle position
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDockTernaryAxisAnchor">
            <summary>
            Represents a ternary axis anchor, docking the ternary axis attached to it to one of the ternary chart dock zones
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDockTernaryAxisAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDockTernaryAxisAnchor.#ctor(Nevron.Chart.TernaryAxisDockZone)">
            <summary>
            Initializer constructor
            </summary>
            <param name="dockZone"></param>
        </member>
        <member name="M:Nevron.Chart.NDockTernaryAxisAnchor.#ctor(Nevron.Chart.TernaryAxisDockZone,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="dockZone"></param>
            <param name="createNewZoneLevel"></param>
        </member>
        <member name="M:Nevron.Chart.NDockTernaryAxisAnchor.#ctor(Nevron.Chart.TernaryAxisDockZone,System.Boolean,System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="dockZone"></param>
            <param name="createNewZoneLevel"></param>
            <param name="beginPercent"></param>
            <param name="endPercent"></param>
        </member>
        <member name="M:Nevron.Chart.NDockTernaryAxisAnchor.#ctor(Nevron.Chart.TernaryAxisDockZone,System.Boolean,Nevron.Chart.RulerOrientation,System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="dockZone"></param>
            <param name="createNewZoneLevel"></param>
            <param name="rulerOrientation"></param>
            <param name="beginPercent"></param>
            <param name="endPercent"></param>
        </member>
        <member name="P:Nevron.Chart.NDockTernaryAxisAnchor.DockZone">
            <summary>
            Gets or sets the ternary axis dock zone where this anchor will dock the axis attached to it
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDockTernaryAxisAnchor.SynchronizeRulerOrientation">
            <summary>
            Gets or sets a value indicating whether this anchor should synchronize the 
            ruler orientation of the axis with the axis zone
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDockTernaryAxisAnchor.BeforeSpace">
            <summary>
            Specifies spacing of the level before the other levels in the zone (if any)
            </summary>
            <remarks>
            This property takes effect only when the property CreateNewZoneLevel is set to true.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NDockTernaryAxisAnchor.AfterSpace">
            <summary>
            Specifies spacing that should be leaved after the level of the axis before other 
            levels are added in the zone.
            </summary>
            <remarks>
            This property takes effect only when the property CreateNewZoneLevel is set to true.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NDockTernaryAxisAnchor.CreateNewZoneLevel">
            <summary>
            Gets or sets a value indicating whether this anchor will create a new 
            zone level for the axis or use the last created one.
            </summary>
            <remarks>
            If there are no levels in the zone the anchor will always create a zone 
            level. Note that the BeforeSpace and AfterSpace properties depend on the 
            value of this property.
            </remarks>
        </member>
        <member name="F:Nevron.Chart.NDockTernaryAxisAnchor.m_BeforeSpace">
            <summary>
            Spacing of the level before content starts
            </summary>
        </member>
        <member name="F:Nevron.Chart.NDockTernaryAxisAnchor.m_AfterSpace">
            <summary>
            Spacing of the level after content ends
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDeleteCustomAxisCommand">
            <summary>
            Summary description for NDeleteCustomAxisCommand.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAxisCollection">
            <summary>
            Represents a collection of NAxis objects.
            </summary>
            <remarks>
            You can obain a reference to this object with the help of 
            the Axes property of the NChart class.
            </remarks>
            <seealso cref="T:Nevron.Chart.NChart"/>
        </member>
        <member name="M:Nevron.Chart.NAxisCollection.RemoveCustomAxis(System.Int32)">
            <summary>
            Removes a custom axis.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the nAxis id is smaller that 5</exception>
            <remarks>
            Indexes from 0 to 4  are reserved for the standard axes. The standard axes cannot be removed.
            </remarks>
            <param name="nAxisId">the id of the removed axis</param>
        </member>
        <member name="M:Nevron.Chart.NAxisCollection.GetAxis(System.Int32)">
            <summary>
            Obtains a reference to an axis by its id.
            </summary>
            <param name="nAxisId">the axis id</param>
            <returns>a reference to the axis. If the the axis id references an invalid axis the returned value is null.</returns>
        </member>
        <member name="M:Nevron.Chart.NAxisCollection.Clone">
            <summary>
            Creates an identical copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NAxisCollection.Name">
            <summary>
            User defined name of the node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisCollection.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NCartesianAxisCollection">
            <summary>
            Represents a collection axis objects that can be associated with a cartesian chart.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCartesianAxisCollection.AddCustomAxis(Nevron.Chart.AxisOrientation,Nevron.Chart.AxisDockZone)">
            <summary>
            Adds a custom cartesian axis to the collection.
            </summary>
            <param name="orientation">the axis orientation</param>
            <param name="pos">the initial axis predefined position</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NEmptyAxisCollection">
            <summary>
            Represents an empty axis collection (used in charts that do not have axes).
            </summary>
        </member>
        <member name="T:Nevron.Chart.NPolarAxisCollection">
            <summary>
            Represents a collection axis objects that can be associated with a polar chart.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPolarAxisCollection.AddCustomAxis(Nevron.Chart.PolarAxisOrientation)">
            <summary>
            Adds a custom cartesian axis to the collection.
            </summary>
            <param name="orientation">the axis orientation</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NTernaryAxisCollection">
            <summary>
            Represents a collection of ternary axes.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRadarAxisCollection">
            <summary>
            Summary description for NRadarAxisCollection.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAxisView">
            <summary>
            Represents a range of values displayed by the axis
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisView.GetViewRange(Nevron.GraphicsCore.NRange1DD,System.Boolean@)">
            <summary>
            Obtains the range displayed by the axis given the current content range
            </summary>
            <param name="range"></param>
            <param name="isZoomed"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NContentAxisView">
            <summary>
            Configures the axis to display the range of the content that scales on it
            </summary>
        </member>
        <member name="M:Nevron.Chart.NContentAxisView.GetViewRange(Nevron.GraphicsCore.NRange1DD,System.Boolean@)">
            <summary>
            Obtains the range displayed by the axis given the current content range
            </summary>
            <param name="range"></param>
            <param name="isZoomed"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NPageAxisView">
            <summary>
            Represents an axis view that will split the content range of the axis to pages
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPageAxisView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPageAxisView.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="pageCount"></param>
            <param name="pageIndex"></param>
        </member>
        <member name="P:Nevron.Chart.NPageAxisView.PageCount">
            <summary>
            Gets or sets the page count
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPageAxisView.PageIndex">
            <summary>
            Gets or sets the page index to display
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPageAxisView.GetViewRange(Nevron.GraphicsCore.NRange1DD,System.Boolean@)">
            <summary>
            Obtains the range displayed by the axis given the current content range
            </summary>
            <param name="range"></param>
            <param name="isZoomed"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NRangeAxisView">
            <summary>
            Summary description for NRangeAxisView.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeAxisView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeAxisView.#ctor(Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Initializer constructor
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:Nevron.Chart.NRangeAxisView.#ctor(Nevron.GraphicsCore.NRange1DD,System.Boolean,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="range"></param>
            <param name="useRangeBeginValue"></param>
            <param name="useRangeEndValue"></param>
        </member>
        <member name="P:Nevron.Chart.NRangeAxisView.UseRangeBeginValue">
            <summary>
            Gets or sets a value indicating whether this view will substitute the Begin value of the content range with the Begin value of the Range associated with this object.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeAxisView.UseRangeEndValue">
            <summary>
            Gets or sets a value indicating whether this view will substitute the End value of the content range with the End value of the Range associated with this object.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeAxisView.Range">
            <summary>
            Gets or sets the range of the view
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeAxisView.GetViewRange(Nevron.GraphicsCore.NRange1DD,System.Boolean@)">
            <summary>
            Obtains the range displayed by the axis given the current content range
            </summary>
            <param name="range"></param>
            <param name="isZoomed"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NTernaryAxis">
            <summary>
            Represents a ternary axis.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTernaryAxis.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTernaryAxis.Anchor">
            <summary>
            Gets or sets the axis anchor controlling how the axis is attached to the chart area.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTernaryAxis.Name">
            <summary>
            The name of the axis. 
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRangeSelectionLabel">
            <summary>
            Controls how empty data points are treated.
            </summary>
            <remarks>
            An instance of this object is assigned to each data series.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NRangeSelectionLabel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelectionLabel.Text">
            <summary>
            Gets or sets the label text
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelectionLabel.ContentAlignment">
            <summary>
            Gets or sets the content alignment of the label relative to the range selection
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelectionLabel.TextFitMode">
            <summary>
            Gets or sets the the text fit mode of the label.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelectionLabel.TextStyle">
            <summary>
            Gets/sets the label text style
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDataSeriesUIntList">
            <summary>
            Represents a series of double lists
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesUIntList.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesUIntList.#ctor(System.String)">
            <summary>
            Constructs a data series with the specified type and name
            </summary>
            <param name="name">name of the data series</param>
        </member>
        <member name="T:Nevron.Chart.ENSeriesDataChannelName">
            <summary>
            Enumerates all the possible series data channel names
            </summary>
        </member>
        <member name="F:Nevron.Chart.ENSeriesDataChannelName.XValueF">
            <summary>
            XValue
            </summary>
        </member>
        <member name="F:Nevron.Chart.ENSeriesDataChannelName.YValueF">
            <summary>
            YValue
            </summary>
        </member>
        <member name="F:Nevron.Chart.ENSeriesDataChannelName.ZValueF">
            <summary>
            ZValue
            </summary>
        </member>
        <member name="F:Nevron.Chart.ENSeriesDataChannelName.XValueD">
            <summary>
            XValue
            </summary>
        </member>
        <member name="F:Nevron.Chart.ENSeriesDataChannelName.YValueD">
            <summary>
            YValue
            </summary>
        </member>
        <member name="F:Nevron.Chart.ENSeriesDataChannelName.ZValueD">
            <summary>
            ZValue
            </summary>
        </member>
        <member name="F:Nevron.Chart.ENSeriesDataChannelName.Color">
            <summary>
            Color
            </summary>
        </member>
        <member name="T:Nevron.Chart.NMatrixSeriesData">
            <summary>
            Represents a matrix series data object
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMatrixSeriesData.RowCount">
            <summary>
            Returns the number of rows in the matrix
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMatrixSeriesData.ColumnCount">
            <summary>
            Returns the number of columns in the matrix
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMatrixSeriesData.GridSizeX">
            <summary>
            Returns the size of the data sorage in the X-dimension.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMatrixSeriesData.GridSizeZ">
            <summary>
            Returns the size of the data sorage in the Z-dimension.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NMatrixSeriesData.SetGridSize(System.Int32,System.Int32)">
            <summary>
            Sets the size of the data storage. A storage with size M x N is represented 
            by a surface with (M - 1) x (N - 1) cells.
            </summary>
            <param name="columnCount"></param>
            <param name="rowCount"></param>
        </member>
        <member name="M:Nevron.Chart.NMatrixSeriesData.Clear">
            <summary>
            Removes all data from the storage.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NMatrixSeriesData.SetSize(System.Int32,System.Int32)">
            <summary>
            Sets the new size of the matrix
            </summary>
            <param name="columnCount"></param>
            <param name="rowCount"></param>
        </member>
        <member name="T:Nevron.Chart.NSeriesData">
            <summary>
            Represents a series data object
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSeriesData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSeriesData.#ctor(Nevron.Chart.NSeriesData)">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesData.UseColors">
            <summary>
            Gets or sets whether the series must use custom colors
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesData.ColorOffset">
            <summary>
            Gets the offset of the color channel in words
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesData.Data">
            <summary>
            Gets the underlying data
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesData.DataItemSize">
            <summary>
            Gets the data item size in words
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSeriesData.IsPointerInBounds(System.Byte*,System.Byte*)">
            <summary>
            Returns true if the specified pointer is inside the memory range (bounds) of this series data
            </summary>
            <param name="pBasePointer"></param>
            <param name="pPointer"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NSeriesData.GetDataChannelPointer(Nevron.Chart.ENSeriesDataChannelName,System.Byte*,System.Int32)">
            <summary>
            Gets a pointers to the channel data with the specified name
            </summary>
            <param name="dataChannelName"></param>
            <param name="pDataPointer"></param>
            <param name="dataPointIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NSeriesData.OnDataChanged">
            <summary>
            Executed when data has changed
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesData.XmlData">
            <summary>
            Get / sets the data series
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSeriesData.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Nevron.Chart.NSeriesData.CreateNonSerializedObjects">
            <summary>
            Create non serialized objects
            </summary>
        </member>
        <member name="T:Nevron.Chart.NXYZVectorSeriesData">
            <summary>
            Represents an XYZ vector series data object
            </summary>
        </member>
        <member name="P:Nevron.Chart.NXYZVectorSeriesData.UseXValues">
            <summary>
            Specifies whether the series should use custom X positions for the data points.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NXYZVectorSeriesData.UseZValues">
            <summary>
            Specifies whether the series should use custom X positions for the data points.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NXYZVectorSeriesData.ClearValues">
            <summary>
            Sets the values in the pointSeries data to zero
            </summary>
        </member>
        <member name="M:Nevron.Chart.NXYZVectorSeriesData.ClearValues(System.Single)">
            <summary>
            Set the values in the pointSeries data to the specified value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.NXYZVectorSeriesData.SetXYZValue(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Sets the xyz position at the specified index
            </summary>
            <param name="index"></param>
            <param name="yValue"></param>
            <param name="xValue"></param>
            <param name="zValue"></param>
        </member>
        <member name="M:Nevron.Chart.NXYZVectorSeriesData.SetXYValue(System.Int32,System.Single,System.Single)">
            <summary>
            Sets the xyz position at the specified index
            </summary>
            <param name="index"></param>
            <param name="yValue"></param>
            <param name="xValue"></param>
        </member>
        <member name="M:Nevron.Chart.NXYZVectorSeriesData.SetXValue(System.Int32,System.Single)">
            <summary>
            Sets the X value at the specified index.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.NXYZVectorSeriesData.GetXValue(System.Int32)">
            <summary>
            Gets the X value at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NXYZVectorSeriesData.SetYValue(System.Int32,System.Single)">
            <summary>
            Sets the elevation value at the specified index.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.NXYZVectorSeriesData.GetYValue(System.Int32)">
            <summary>
            Gets the elevation value at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NXYZVectorSeriesData.SetZValue(System.Int32,System.Single)">
            <summary>
            Sets the Z value at the specified index.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.NXYZVectorSeriesData.GetZValue(System.Int32)">
            <summary>
            Gets the Z value at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NVectorSeriesDataXmlSurrogate">
            <summary>
            Represents a series data object
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVectorSeriesDataXmlSurrogate.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVectorSeriesDataXmlSurrogate.FromSeriesData(Nevron.Chart.NSeriesData)">
            <summary>
            
            </summary>
            <param name="seriesData"></param>
        </member>
        <member name="M:Nevron.Chart.NVectorSeriesDataXmlSurrogate.ToSeriesData(Nevron.Chart.NSeriesData)">
            <summary>
            
            </summary>
            <param name="seriesData"></param>
        </member>
        <member name="T:Nevron.Chart.NMatrixSeriesDataXmlSurrogate">
            <summary>
            Represents a series data object
            </summary>
        </member>
        <member name="M:Nevron.Chart.NMatrixSeriesDataXmlSurrogate.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NMatrixSeriesDataXmlSurrogate.FromSeriesData(Nevron.Chart.NSeriesData)">
            <summary>
            
            </summary>
            <param name="seriesData"></param>
        </member>
        <member name="M:Nevron.Chart.NMatrixSeriesDataXmlSurrogate.ToSeriesData(Nevron.Chart.NSeriesData)">
            <summary>
            
            </summary>
            <param name="seriesData"></param>
        </member>
        <member name="T:Nevron.Chart.NSeriesDataXmlSurrogate">
            <summary>
            Represents a series data object
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSeriesDataXmlSurrogate.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSeriesDataXmlSurrogate.FromSeriesData(Nevron.Chart.NSeriesData)">
            <summary>
            
            </summary>
            <param name="seriesData"></param>
        </member>
        <member name="M:Nevron.Chart.NSeriesDataXmlSurrogate.ToSeriesData(Nevron.Chart.NSeriesData)">
            <summary>
            
            </summary>
            <param name="seriesData"></param>
        </member>
        <member name="T:Nevron.Chart.NVectorSeriesData">
            <summary>
            Represents a vector series data object
            </summary>
        </member>
        <member name="P:Nevron.Chart.NVectorSeriesData.Count">
            <summary>
            Gets the count
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVectorSeriesData.EnsureCapacity(System.Int32)">
            <summary>
            Ensures that the storage has the specified capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Nevron.Chart.NVectorSeriesData.Clear">
            <summary>
            Removes all data from the storage.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVectorSeriesData.SetCapacity(System.Int32)">
            <summary>
            Sets the new capacity of the data
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Nevron.Chart.NVectorSeriesData.SetCount(System.Int32)">
            <summary>
            Sets the new count of the data
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Chart.NVectorSeriesData.SetColor(System.Int32,System.UInt32)">
            <summary>
            Sets the color at the specified index.
            </summary>
            <param name="index">index of the data point.</param>
            <param name="color">color value.</param>
            <remarks>
            Color is in ABGR format
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NVectorSeriesData.SetColor(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color at the specified index.
            </summary>
            <param name="index"></param>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Chart.NVectorSeriesData.GetColor(System.Int32)">
            <summary>
            Gets the color at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NFastLineSeries">
            <summary>
            Represents a fast line series.
            </summary>
            <seealso cref="T:Nevron.Chart.NSeries"/>
            <seealso cref="T:Nevron.Chart.NXYScatterSeries"/>
        </member>
        <member name="M:Nevron.Chart.NFastLineSeries.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFastLineSeries.DataPointOriginIndex">
            <summary>
            Gets or sets the data point origin index
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFastLineSeries.Data">
            <summary>
            Gets or sets the NGridSurfaceData object controlling the surface data storage.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFastLineSeries.StrokeStyle">
            <summary>
            Gets/sets the stroke of the line
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFastLineSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NFastLineSeries.MinMaxValid">
            <summary>
            Gets or sets whether the min max of the node is valid
            </summary>
        </member>
        <member name="T:Nevron.Chart.NFastLineSeriesData">
            <summary>
            Each NFastPointSeries instance has an associated NFastLineSeriesData object which
            represents the data storage for the series. The data storage is 
            one-dimensional and contains values and optionally xvalues, zvalues and color data.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFastLineSeriesData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFastLineSeriesData.#ctor(Nevron.Chart.NFastLineSeriesData)">
            <summary>
            Copy constructor
            </summary>
            <param name="pointSeriesData"></param>
        </member>
        <member name="M:Nevron.Chart.NFastLineSeriesData.Clone">
            <summary>
            Creates an identical copy of this NFastLineSeriesData object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NFastBarSeries">
            <summary>
            Represents a quick bar series.
            </summary>
            <seealso cref="T:Nevron.Chart.NSeries"/>
            <seealso cref="T:Nevron.Chart.NXYScatterSeries"/>
        </member>
        <member name="M:Nevron.Chart.NFastBarSeries.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFastBarSeries.BarWidthMode">
            <summary>
            Gets or set the the bar width mode when the bar is in scatter mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFastBarSeries.BarDepthMode">
            <summary>
            Gets or set the the bar depth mode when the bar is in scatter mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFastBarSeries.LogicalBarWidth">
            <summary>
            Gets or sets the logical bar width
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFastBarSeries.LogicalBarDepth">
            <summary>
            Gets or sets the logical bar depth
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFastBarSeries.BarWidth">
            <summary>
            Controls the width of the bars in NLength format, when the series is in X scatter mode.
            </summary>
            <remarks>
            By default set to 2 percent of the chart area.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NFastBarSeries.BarDepth">
            <summary>
            Controls the depth of the bars in NLength format, when the series is in Z scatter mode.
            </summary>
            <remarks>
            By default set to 2 percent of the chart area
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NFastBarSeries.WidthPercent">
            <summary>
            Controls the width of the bars in percents of the floor grid cell width.
            </summary>
            <remarks>
            By default set to 70.
            </remarks>
            <example>
            The following example changes the width percent to 50 (half of the cell).
            <code lang = 'VB'>
            bar.WidthPercent = 50
            </code>
            <code>
            bar.WidthPercent = 50;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NFastBarSeries.DepthPercent">
            <summary>
            Controls the depth of bars in percents of the floor grid cell depth.
            </summary>
            <remarks>
            By default set to 50.
            </remarks>
            <example>
            Increase the bars depth.
            <code lang = 'VB'>
            bar.DepthPercent = 65
            </code>
            <code>
            bar.DepthPercent = 65;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NFastBarSeries.Color">
            <summary>
            Controls the point color
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFastBarSeries.Origin">
            <summary>
            Specifies the bars origin value when the UseOrigin is set to true.
            </summary>
            <remarks>
            By default 0.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NFastBarSeries.Data">
            <summary>
            Gets or sets the NGridSurfaceData object controlling the surface data storage.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFastBarSeries.OriginMode">
            <summary>
            Specifies which value should be used as a bar origin.
            </summary>
            <remarks>
            If this property is set to SeriesOriginMode.CustomOrigin the 
            bar origin is specified by the Origin property. If this property is set to 
            SeriesOriginMode.MaxValue the origin is the max value of the bar series. If this 
            property is set to SeriesOriginMode.MinValue the origin is the min value of the bar series.
            <para>
            By default this property is set to SeriesOriginMode.CustomOrigin.
            </para>
            </remarks>
            <example>
            The following code displays a bar series with origin value 20.
            <code lang = 'VB'>
            bar.OriginMode = SeriesOriginMode.CustomOrigin
            bar.Origin = 20
            </code>
            <code>
            bar.OriginMode = SeriesOriginMode.CustomOrigin;
            bar.Origin = 20;
            </code>
            </example>
        </member>
        <member name="M:Nevron.Chart.NFastBarSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NFastBarSeries.MinMaxValid">
            <summary>
            Gets or sets whether the min max of the node is valid
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFastBarSeries.Render3D(Nevron.Chart.NChartRenderingContext3D)">
            <summary>
            Renders the series in 3D
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NFastBarSeries.Render2D(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Chart.NFastPointSeries">
            <summary>
            Represents a quick point series.
            </summary>
            <seealso cref="T:Nevron.Chart.NSeries"/>
            <seealso cref="T:Nevron.Chart.NXYScatterSeries"/>
        </member>
        <member name="M:Nevron.Chart.NFastPointSeries.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFastPointSeries.Color">
            <summary>
            Controls the point color
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFastPointSeries.Size">
            <summary>
            Controls the size of the value point marks.
            </summary>
            <remarks>
            This property specifies the points width, height and depth dimensions. 
            By default set to 4 percent of the chart size
            </remarks>
            <example>
            The following example increases the size of the points.
            <code lang = 'VB'>
            pointSeries.Size = New NLength(5.5F, NRelativeUnit.ParentPercentage)
            </code>
            <code>
            pointSeries.Size = New NLength(5.5F, NRelativeUnit.ParentPercentage);
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NFastPointSeries.Data">
            <summary>
            Gets or sets the NGridSurfaceData object controlling the surface data storage.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFastPointSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NFastPointSeries.MinMaxValid">
            <summary>
            Gets or sets whether the min max of the node is valid
            </summary>
        </member>
        <member name="T:Nevron.Chart.NFastBarSeriesData">
            <summary>
            Each NFastBarSeries instance has an associated NFastBarSeriesData object which
            represents the data storage for the series. The data storage is 
            one-dimensional and contains values and optionally xvalues, zvalues and color data.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFastBarSeriesData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFastBarSeriesData.#ctor(Nevron.Chart.NFastBarSeriesData)">
            <summary>
            Copy constructor
            </summary>
            <param name="pointSeriesData"></param>
        </member>
        <member name="M:Nevron.Chart.NFastBarSeriesData.Clone">
            <summary>
            Creates an identical copy of this NFastBarSeriesData object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NXYZScatterFastSeriesBase">
            <summary>
            Represents a base class for fast series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NXYZScatterFastSeriesBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NFastSeriesBase">
            <summary>
            Represents a base class for fast series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFastSeriesBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFastSeriesBase.EnableShaderRendering">
            <summary>
            Gets or sets whether the series will use shader rendering.
            </summary>
            <remarks>
            In this mode all surface computations are executed by the GPU. You should set this property to true when you have large surfaces and you want 
            the program to consume less memory as well as when displaying realtime surfaces.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NFastSeriesBase.GetAttributeByNameAt(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="attributeName"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NFastSeriesBase.BeforeRender3D(Nevron.Chart.NChartRenderingContext3D)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NFastSeriesBase.AfterRender3D(Nevron.Chart.NChartRenderingContext3D)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NFastSeriesBase.BeforeRender2D(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NFastSeriesBase.AfterRender2D(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NFastSeriesBase.EnsureScaledDataValid">
            <summary>
            Invalidates the render data
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFastSeriesBase.InvalidateRenderData">
            <summary>
            Invalidates the render data
            </summary>
        </member>
        <member name="F:Nevron.Chart.NFastSeriesBase.m_EnableShaderRendering">
            <summary>
            Whether shader rendering is enabled
            </summary>
        </member>
        <member name="T:Nevron.Chart.NFastPointSeriesData">
            <summary>
            Each NFastPointSeries instance has an associated NFastPointSeriesData object which
            represents the data storage for the series. The data storage is 
            one-dimensional and contains values and optionally xvalues, zvalues and color data.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFastPointSeriesData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFastPointSeriesData.#ctor(Nevron.Chart.NFastPointSeriesData)">
            <summary>
            Copy constructor
            </summary>
            <param name="pointSeriesData"></param>
        </member>
        <member name="M:Nevron.Chart.NFastPointSeriesData.Clone">
            <summary>
            Creates an identical copy of this NFastPointSeriesData object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NMatrixSurfaceSeries">
            <summary>
            Base class for the NGridSurfaceSreies and NMeshSurfaceSeries
            </summary>
        </member>
        <member name="M:Nevron.Chart.NMatrixSurfaceSeries.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMatrixSurfaceSeries.CellTriangulationMode">
            <summary>
            Defined the way in which surface grid cells are triangulated.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMatrixSurfaceSeries.MinMaxValid">
            <summary>
            Gets or sets whether the min max of the node is valid
            </summary>
        </member>
        <member name="M:Nevron.Chart.NMatrixSurfaceSeries.GetPointsFromIndices(System.Int32[],System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NMeshSurfaceSeries">
            <summary>
            Represents a mesh surface series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NMeshSurfaceSeries.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMeshSurfaceSeries.Data">
            <summary>
            Gets or sets the NGridSurfaceData object controlling the surface data storage.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMeshSurfaceSeries.MinMaxValid">
            <summary>
            Gets or sets whether the min max of the node is valid
            </summary>
        </member>
        <member name="M:Nevron.Chart.NMeshSurfaceSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NMeshSurfaceData">
            <summary>
            Each NMeshSurfaceSeries instance has an associated NMeshSurfaceData object which
            represents the data storage for the surface series. The data storage is 
            two-dimensional and contains XYZ position data.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NMeshSurfaceData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NMeshSurfaceData.#ctor(Nevron.Chart.NMeshSurfaceData)">
            <summary>
            Copy constructor
            </summary>
            <param name="surface"></param>
        </member>
        <member name="M:Nevron.Chart.NMeshSurfaceData.Clone">
            <summary>
            Creates an identical copy of this NGridSurfaceData object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NMeshSurfaceData.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the vector at the specified two-dimensional index.
            </summary>
            <param name="col">X-index of the data point.</param>
            <param name="row">Z-index of the data point.</param>
            <returns>the vector at the specified two dimensional index</returns>
        </member>
        <member name="M:Nevron.Chart.NMeshSurfaceData.FillFromNurbsSurface(Nevron.GraphicsCore.Nurbs.NNurbsSurface,System.Int32,System.Int32,Nevron.GraphicsCore.NVector3DD)">
            <summary>
            Fills the mesh surface data from the specified nurbs surface
            </summary>
            <param name="nurbsSurface"></param>
            <param name="xSamples"></param>
            <param name="ySamples"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Nevron.Chart.NMeshSurfaceData.SetValue(System.Int32,System.Int32,Nevron.GraphicsCore.NVector3DD)">
            <summary>
            Sets the xyz position at the specified grid indices
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <param name="vec"></param>
        </member>
        <member name="M:Nevron.Chart.NMeshSurfaceData.SetValue(System.Int32,System.Int32,Nevron.GraphicsCore.NVector3DF)">
            <summary>
            Sets the xyz position at the specified grid indices
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <param name="vec"></param>
        </member>
        <member name="M:Nevron.Chart.NMeshSurfaceData.SetValue(System.Int32,System.Int32,System.Object,System.Object,System.Object)">
            <summary>
            Sets the xyz position at the specified grid indices
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <param name="yValue"></param>
            <param name="xValue"></param>
            <param name="zValue"></param>
        </member>
        <member name="M:Nevron.Chart.NMeshSurfaceData.SetValue(System.Int32,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Sets the xyz position at the specified grid indices
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <param name="yValue"></param>
            <param name="xValue"></param>
            <param name="zValue"></param>
        </member>
        <member name="M:Nevron.Chart.NMeshSurfaceData.SetValue(System.Int32,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Sets the xyz position at the specified grid indices
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <param name="yValue"></param>
            <param name="xValue"></param>
            <param name="zValue"></param>
        </member>
        <member name="M:Nevron.Chart.NMeshSurfaceData.SetXValue(System.Int32,System.Int32,System.Single)">
            <summary>
            Sets the X value at the specified two-dimensional index.
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.NMeshSurfaceData.GetXValue(System.Int32,System.Int32)">
            <summary>
            Gets the X value at the specified two-dimensional index.
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NMeshSurfaceData.SetYValue(System.Int32,System.Int32,System.Single)">
            <summary>
            Sets the elevation value at the specified two-dimensional index.
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.NMeshSurfaceData.GetYValue(System.Int32,System.Int32)">
            <summary>
            Gets the elevation value at the specified two-dimensional index.
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NMeshSurfaceData.SetZValue(System.Int32,System.Int32,System.Single)">
            <summary>
            Sets the Z value at the specified two-dimensional index.
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.NMeshSurfaceData.GetZValue(System.Int32,System.Int32)">
            <summary>
            Gets the Z value at the specified two-dimensional index.
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NMeshSurfaceData.GetValue(System.Int32,System.Int32)">
            <summary>
            Gets the value (vector) at the specified position
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NMeshSurfaceData.InitFromBitmap(System.Drawing.Bitmap)">
            <summary>
            Initializes the grid surface data from a Bitmap image. 
            </summary>
            <param name="bitmap">The bitmap image that is used as a source of data.</param>
        </member>
        <member name="T:Nevron.Chart.NGridSurfaceData">
            <summary>
            Each NGridSurfaceSeries instance has an associated NGridSurfaceData object which
            represents the data storage for the surface series. The data storage is 
            two-dimensional and contains only elevation data.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGridSurfaceData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGridSurfaceData.#ctor(Nevron.Chart.NGridSurfaceData)">
            <summary>
            Copy constructor
            </summary>
            <param name="surface"></param>
        </member>
        <member name="M:Nevron.Chart.NGridSurfaceData.Clone">
            <summary>
            Creates an identical copy of this NGridSurfaceData object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NGridSurfaceData.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the elevation value at the specified two-dimensional index.
            </summary>
            <param name="col">X-index of the data point.</param>
            <param name="row">Z-index of the data point.</param>
            <returns>the surface elevation value at the specified two dimensional index</returns>
        </member>
        <member name="M:Nevron.Chart.NGridSurfaceData.ClearValues">
            <summary>
            Sets the values in the surface data to zero
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGridSurfaceData.ClearValues(System.Single)">
            <summary>
            Set the values in the surface data to the specified value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.NGridSurfaceData.SetValue(System.Int32,System.Int32,System.Single)">
            <summary>
            Sets the elevation value at the specified two-dimensional index.
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.NGridSurfaceData.SetValue(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the elevation value at the specified two-dimensional index.
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.NGridSurfaceData.SetValue(System.Int32,System.Int32,System.Object)">
            <summary>
            Sets the elevation value at the specified two-dimensional index.
            </summary>		
            <param name="col"></param>
            <param name="row"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.NGridSurfaceData.GetValue(System.Int32,System.Int32)">
            <summary>
            Gets the elevation value at the specified two-dimensional index.
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NGridSurfaceData.InitFromBitmap(System.Drawing.Bitmap)">
            <summary>
            Initializes the grid surface data from a Bitmap image. 
            </summary>
            <param name="bitmap">The bitmap image that is used as a source of data.</param>
        </member>
        <member name="M:Nevron.Chart.NGridSurfaceData.InitFromTriangles(System.Collections.Generic.ICollection{Nevron.Chart.NTriangle},Nevron.Chart.TriangleRasterizationMode,System.Int32,System.Int32,System.Int32,System.Int32,Nevron.GraphicsCore.NRectangleD@)">
            <summary>
            Inits the grid surface data from a set of triangles each having three vertices with associated 
            </summary>
            <param name="triangles"></param>
            <param name="rasterizationMode"></param>
            <param name="gridSizeX"></param>
            <param name="gridSizeY"></param>
            <param name="xResolution"></param>
            <param name="yResolution"></param>
            <param name="gridBounds"></param>
        </member>
        <member name="M:Nevron.Chart.NGridSurfaceData.InitFromTriangles(System.Collections.Generic.ICollection{Nevron.Chart.NColoredTriangle},Nevron.Chart.TriangleRasterizationMode,System.Int32,System.Int32,System.Int32,System.Int32,Nevron.GraphicsCore.NRectangleD@)">
            <summary>
            Inits the grid surface data from a set of triangles each having three vertices with associated 
            </summary>
            <param name="triangles"></param>
            <param name="rasterizationMode"></param>
            <param name="gridSizeX"></param>
            <param name="gridSizeY"></param>
            <param name="xResolution"></param>
            <param name="yResolution"></param>
            <param name="gridBounds"></param>
        </member>
        <member name="M:Nevron.Chart.NGridSurfaceData.InitFromPoints(System.Double[],System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,Nevron.GraphicsCore.NRectangleD@)">
            <summary>
            Inits the grid surface data from a set of points
            </summary>
            <param name="xValues"></param>
            <param name="yValues"></param>
            <param name="zValues"></param>
            <param name="gridSizeX"></param>
            <param name="gridSizeY"></param>
            <param name="xResolution"></param>
            <param name="yResolution"></param>
            <param name="gridBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NGridSurfaceData.InitFromPointsAndColors(System.Double[],System.Double[],System.Double[],System.Drawing.Color[],System.Int32,System.Int32,System.Int32,System.Int32,Nevron.GraphicsCore.NRectangleD@)">
            <summary>
            Inits the grid surface data from a set of points
            </summary>
            <param name="xValues"></param>
            <param name="yValues"></param>
            <param name="zValues"></param>
            <param name="colors"></param>
            <param name="gridSizeX"></param>
            <param name="gridSizeY"></param>
            <param name="xResolution"></param>
            <param name="yResolution"></param>
            <param name="gridBounds"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NGridSurfaceSeries">
            <summary>
            Represents a grid surface series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGridSurfaceSeries.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGridSurfaceSeries.Data">
            <summary>
            Gets or sets the NGridSurfaceData object controlling the surface data storage.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGridSurfaceSeries.OriginX">
            <summary>
            Gets or sets the X origin value of the surface. UseCustomXOriginAndStep must be set to 
            true for this property to take effect.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGridSurfaceSeries.OriginZ">
            <summary>
            Gets or sets the Z origin value of the surface. UseCustomZOriginAndStep must be set to 
            true for this property to take effect.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGridSurfaceSeries.StepX">
            <summary>
            Gets or sets the step of the surface grid in the X direction. UseCustomXOriginAndStep must be set to 
            true for this property to take effect.
            </summary>
            <remarks>
            Only positive values are allowed. Negative values are taken by absolute value.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NGridSurfaceSeries.StepZ">
            <summary>
            Gets or sets the step of the surface grid in the Z direction. UseCustomZOriginAndStep must be set to 
            true for this property to take effect.
            </summary>
            <remarks>
            Only positive values are allowed. Negative values are taken by absolute value.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NGridSurfaceSeries.UseCustomXOriginAndStep">
            <summary>
            Gets or sets a value that specifies how surface X values are calculated.
            </summary>
            <remarks>
            This property is kept for backward compatibility, use the XValuesMode property instead.
            Setting UseCustomXOriginAndStep to false is equivalent to XValuesMode = GridSurfaceValuesMode.Natural.
            Setting UseCustomXOriginAndStep to true is equivalent to XValuesMode = GridSurfaceValuesMode.OriginAndStep.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NGridSurfaceSeries.UseCustomZOriginAndStep">
            <summary>
            Gets or sets a value that specifies how surface Z values are calculated.
            </summary>
            <remarks>
            This property is kept for backward compatibility, use the ZValuesMode property instead.
            Setting UseCustomZOriginAndStep to false is equivalent to ZValuesMode = GridSurfaceValuesMode.Natural.
            Setting UseCustomZOriginAndStep to true is equivalent to ZValuesMode = GridSurfaceValuesMode.OriginAndStep.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NGridSurfaceSeries.XValuesMode">
            <summary>
            Specifies the mode for the surface X values.
            </summary>
            <remarks>
            If set to GridSurfaceValuesMode.Natural (default) the grid's X origin is 0 and the grid's step in the Z direction is equal to 1.
            If set to GridSurfaceValuesMode.OriginAndStep the X values of the surface data points are calculated from the OriginX and StepX values.
            If set to GridSurfaceValuesMode.CustomValues the X values are taken from the XValues data series.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NGridSurfaceSeries.ZValuesMode">
            <summary>
            Specifies the mode for the surface Z values.
            </summary>
            <remarks>
            If set to GridSurfaceValuesMode.Natural (default) the surface is positioned behind the last series along the Depth axis and the grid step in the Z direction is equal to 1.
            If set to GridSurfaceValuesMode.OriginAndStep the Z values of the surface data points are calculated from the OriginZ and StepZ values.
            If set to GridSurfaceValuesMode.CustomValues the Z values are taken from the ZValues data series.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NGridSurfaceSeries.XValues">
            <summary>
            Gets or sets the data series holding the custom X values for the grid surface.
            </summary>
            <remarks>
            The data series contains Double values. The values must be sorted in ascending order (otherwise the control sorts them internally).
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NGridSurfaceSeries.ZValues">
            <summary>
            Gets or sets the data series holding the custom Z values for the grid surface.
            </summary>
            <remarks>
            The data series contains Double values. The values must be sorted in ascending order (otherwise the control sorts them internally).
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NGridSurfaceSeries.GetContourForValue(System.Double)">
            <summary>
            Gets the contour for the specified y value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NGridSurfaceSeries.Get2DIntersections(Nevron.GraphicsCore.NPointD,Nevron.GraphicsCore.NPointD)">
            <summary>
            Gets the 2D interpolated intersections of the grid with the specified line
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NGridSurfaceSeries.Get3DIntersections(Nevron.GraphicsCore.NPointD,Nevron.GraphicsCore.NPointD)">
            <summary>
            Gets the 3D interpolated intersections of the grid with the specified line
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NGridSurfaceSeries.GetValueFromPosition(Nevron.GraphicsCore.NPointD)">
            <summary>
            Gets an interpolated value from position
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NGridSurfaceSeries.MinMaxValid">
            <summary>
            Gets or sets whether the min max of the node is valid
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGridSurfaceSeries.OnSeriesChanged(Nevron.Chart.NDataSeriesBase)">
            <summary>
            
            </summary>
            <param name="series"></param>
        </member>
        <member name="M:Nevron.Chart.NGridSurfaceSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NMatrixSurfaceSeriesData">
            <summary>
            The NMatrixSurfaceSeriesData is the base class for the grid and mesh surface series data objects
            </summary>
        </member>
        <member name="M:Nevron.Chart.NMatrixSurfaceSeriesData.#ctor(Nevron.Chart.NMatrixSurfaceSeriesData)">
            <summary>
            Copy constructor
            </summary>
            <param name="seriesData"></param>
        </member>
        <member name="M:Nevron.Chart.NMatrixSurfaceSeriesData.SetColor(System.Int32,System.Int32,System.UInt32)">
            <summary>
            Sets the color at the specified two-dimensional index.
            </summary>
            <param name="column">X-index of the data point.</param>
            <param name="row">Z-index of the data point.</param>
            <param name="color">color value.</param>
            <remarks>
            Color is in ABGR format
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NMatrixSurfaceSeriesData.SetColor(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color at the specified two-dimensional index.
            </summary>
            <param name="column"></param>
            <param name="row"></param>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Chart.NMatrixSurfaceSeriesData.GetColor(System.Int32,System.Int32)">
            <summary>
            Gets the color at the specified two-dimensional index.
            </summary>
            <param name="column"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NMatrixSurfaceSeriesData.InitFromBitmap(System.Drawing.Bitmap)">
            <summary>
            Initializes the grid surface data from a Bitmap image. 
            </summary>
            <param name="bitmap">The bitmap image that is used as a source of data.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nevron.Chart.NMatrixSurfaceSeriesData.OnDataChanged" -->
        <member name="T:Nevron.Chart.NSurfaceSeriesBase">
            <summary>
            Abstract base class for the NGridSurfaceSeries, NMeshSurfaceSeries and NTriangulatedSurfaceSeries. This class
            contains common functionality for the surface series like surface palette 
            management, control of the surface filling, frame, flat surface mode etc.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSurfaceSeriesBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSurfaceSeriesBase.GetAttributeByNameAt(System.String,System.Int32)">
            <summary>
            Gets an an attribute by its name and index
            </summary>
            <param name="attributeName">name of the attribute</param>
            <param name="index">index of the attribute</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="P:Nevron.Chart.NSurfaceSeriesBase.Palette">
            <summary>
            Gets or sets the custom palette associated with the surface. To make the 
            chart use the custom palette you have to set the AutomaticPalette property to false.
            </summary>
            <example>
            The following example enables the custom palette, clears it and adds 
            several new entries:
            <code lang = 'VB'>
            surface.AutomaticPalette = False
            surface.Palette.Clear()
            surface.Palette.Add(0.0, Color.Purple)
            surface.Palette.Add(1.5, Color.MediumSlateBlue)
            surface.Palette.Add(3.0, Color.CornflowerBlue)
            </code>
            <code>
            surface.AutomaticPalette = false;
            surface.Palette.Clear();
            surface.Palette.Add(0.0, Color.Purple);
            surface.Palette.Add(1.5, Color.MediumSlateBlue);
            surface.Palette.Add(3.0, Color.CornflowerBlue);
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSurfaceSeriesBase.SmoothPalette">
            <summary>
            When this property is enabled the zone colors gradate smoothly from one to another.
            </summary>
            <remarks>
            By default this property is set to false. This property is deprecated. Use Palette.SmoothPalette instead.
            </remarks>
            <example>
            The following code activates the smooth palette mode:
            <code lang = 'VB'>
            surface.SmoothPalette = True
            </code>
            <code>
            surface.SmoothPalette = true;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSurfaceSeriesBase.AutomaticPalette">
            <summary>
            When set to true the component uses automatically generated surface palette. 
            When set to False the component uses a custom defined palette (the Palette property 
            gets or sets the custom palette).
            </summary>
            <remarks>
            By default the automatic palette is enabled. This property is deprecated. Use Palette.Mode instead.
            </remarks>
            <example>
            The following code deactivates the automatic palette 
            and activates the custom palette:
            <code lang = 'VB'>
            surface.AutomaticPalette = False
            </code>
            <code>
            surface.AutomaticPalette = false;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSurfaceSeriesBase.SyncPaletteWithAxisScale">
            <summary>
            Synchronizes the number of palette entries in the automatic palette with 
            the current scale of the vertical axis on which the series is displayed. 
            Valid only when AutomaticPalette is set to true. Otherwise the PaletteSteps
            property is considered.
            </summary>
            <example>
            The code below disables the property, so that you can 
            specify the number of palette steps manually:
            <code lang = 'VB'>
            surface.SyncPaletteWithAxisScale = False
            </code>
            <code>
            surface.SyncPaletteWithAxisScale = false;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSurfaceSeriesBase.PaletteSteps">
            <summary>
            Controls the number of entries in the automatic palette if the SyncPaletteWithAxisScale is set to false.
            Valid only if AutomaticPalette is set to true.
            </summary>
            <example>
            The following code sets the number of automatic palette entries to 4:
            <code lang = 'VB'>
            surface.PaletteSteps = 4
            </code>
            <code>
            surface.PaletteSteps = 4;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSurfaceSeriesBase.AutoPaletteColors">
            <summary>
            Gets or sets an array of colors that are used for the automatic palette.
            Valid only if AutomaticPalette is set to true.
            </summary>
            <remarks>
            This property is deprecated. Use Palette.AutoPaletteColors
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NSurfaceSeriesBase.FrameStrokeStyle">
            <summary>
            Controls the appearance of the surface frame lines and dots.
            </summary>
            <remarks>
            The color of the frame lines is defined by the FrameStrokeStyle object only 
            when the FrameColorMode is set to SurfaceFrameColorMode.Uniform.
            </remarks>
            <example>
            The following code set the width of the frame lines to 2:
            <code lang = 'VB'>
            surface.FrameStrokeStyle.Width = 2
            </code>
            <code>
            surface.FrameStrokeStyle.Width = 2;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSurfaceSeriesBase.FillStyle">
            <summary>
            Controls the fill style applied to the surface. You can modify the surface 
            filling transparency, material properties like specular color, emissive color, 
            shininess, as well as apply textures, gradients and patterns to the surface.
            </summary>
            <example>
            The code below applies a texture to the surface:
            <code lang = 'VB'>
            surface.FillStyle = new NImageFillStyle("c:\texture.jpg")
            </code>
            <code>
            surface.FillStyle = new NImageFillStyle(@"c:\texture.jpg");
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSurfaceSeriesBase.FillMode">
            <summary>
            Controls the way in which the surface is filled. Currently there are two filling
            modes: zone filling and no filling.
            </summary>
            <example>
            The code below sets the fill mode to none. This mode is used for wireframe
            rendering of the surface series:
            <code lang = 'VB'>
            surface.FillMode = SurfaceFillMode.None;
            </code>
            <code>
            surface.FillMode = SurfaceFillMode.None;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSurfaceSeriesBase.FrameMode">
            <summary>
            Controls the surface frame mode. Supported values are:
            SurfaceFrameMode.None - no frame at all
            SurfaceFrameMode.Mesh - frame connecting the adjacent data points
            SurfaceFrameMode.Contour - contour lines at specific surface elevations
            SurfaceFrameMode.MeshContour - mixed mesh and contour frame
            SurfaceFrameMode.Dots - dots at the data points
            </summary>
            <example>
            The following code changes the frame mode to Dots:
            <code lang = 'VB'>
            surface.FrameMode = SurfaceFrameMode.Dots
            </code>
            <code>
            surface.FrameMode = SurfaceFrameMode.Dots;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSurfaceSeriesBase.FrameColorMode">
            <summary>
            Gets or sets the coloring mode for the surface frame lines.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSurfaceSeriesBase.ValueFormatter">
            <summary>
            Gets or sets the NValueFormatter object controlling the formatting of the elevation (Y) values.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSurfaceSeriesBase.DrawFlat">
            <summary>
            Draws the surface in flat mode (contour chart). The PositionMode 
            and PositionValue properties determine the vertical position of the surface.
            </summary>
            <example>
            The code below shows how to enable the flat mode:
            <code lang = 'VB'>
            surface.DrawFlat = True
            </code>
            <code>
            surface.DrawFlat = true;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSurfaceSeriesBase.DrawContourBorder">
            <summary>
            Whether to draw the contour border
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSurfaceSeriesBase.PositionMode">
            <summary>
            The PositionMode property controls the vertical position of the surface, 
            when it is rendered in flat mode (DrawFlat property is set to True).
            </summary>
            <example>
            The following code sets one of the available modes:
            <code lang = 'VB'>
            surface.PositionMode = SurfacePositionMode.AxisEnd
            </code>
            <code>
            surface.PositionMode = SurfacePositionMode.AxisEnd;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSurfaceSeriesBase.PositionValue">
            <summary>
            The PositionValue property specifies the value for the vertical position of the 
            surface when the DrawFlat property is set to True and the PositionMode
            is SurfacePositionMode.CustomValue.
            </summary>
            <example>
            The code below enables the custom value positioning and specifies the value where the
            flat surface will be placed.
            <code lang = 'VB'>
            surface.PositionMode = SurfacePositionMode.CustomValue
            surface.PositionValue = 1.2
            </code>
            <code>
            surface.PositionMode = SurfacePositionMode.CustomValue;
            surface.PositionValue = 1.2;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSurfaceSeriesBase.InteractivityStyles">
            <summary>
            Gets/sets the interactivity styles data series
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSurfaceSeriesBase.TexturePlaneMode">
            <summary>
            Gets or sets the current mode of the texture mapping plane. The texture mapping plane defines 
            how image and gradient fill styles are projected on the surface. The user can chose between 
            the XZ, XY and ZY planes.
            </summary>
            <remarks>
            The default texture plane is the XZ plane.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NSurfaceSeriesBase.CustomTexturePlane">
            <summary>
            Gets or sets the custom texture mapping plane.
            </summary>
            <remarks>
            The custom texture mapping plane is defined by three points in 3D space.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NSurfaceSeriesBase.ShadingMode">
            <summary>
            Gets or sets the surface shading mode.
            </summary>
            <remarks>
            The shading mode determines how the lighting calculations for the surface are performed.
            By default this property is set to ShadingMode.Flat. Currently it takes effect only for
            the NTriangulatedSurfaceSeries type.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NSurfaceSeriesBase.Isolines">
            <summary>
            Represents the collection of isolines
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSurfaceSeriesBase.AfterRender3D(Nevron.Chart.NChartRenderingContext3D)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Nevron.Chart.NSurfaceSeriesBase.MinMaxValid">
            <summary>
            Gets or sets whether the min max of the node is valid
            </summary>
        </member>
        <member name="F:Nevron.Chart.NSurfaceSeriesBase.m_DrawFlat">
            <summary>
            Whether the surface is rendered as flat
            </summary>
        </member>
        <member name="F:Nevron.Chart.NSurfaceSeriesBase.m_bDrawContourBorder">
            <summary>
            Whether to draw contour border around the surface
            </summary>
        </member>
        <member name="F:Nevron.Chart.NSurfaceSeriesBase.m_Palette">
            <summary>
            The surface palette
            </summary>
        </member>
        <member name="F:Nevron.Chart.NSurfaceSeriesBase.m_FillMode">
            <summary>
            The surface fill mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.NSurfaceSeriesBase.m_FrameMode">
            <summary>
            The surface frame mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.NSurfaceSeriesBase.m_FrameColorMode">
            <summary>
            The surface frame color mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.NSurfaceSeriesBase.m_PositionMode">
            <summary>
            The surface position mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.NSurfaceSeriesBase.m_dPositionValue">
            <summary>
            The surface position value mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.NSurfaceSeriesBase.m_TexturePlaneMode">
            <summary>
            The surface texture plane mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.NSurfaceSeriesBase.m_CustomTexturePlane">
            <summary>
            The surface custom texture plane mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.NSurfaceSeriesBase.m_ShadingMode">
            <summary>
            The surface shading mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.NSurfaceSeriesBase.m_FrameStrokeStyle">
            <summary>
            The surface frame stroke style
            </summary>
        </member>
        <member name="F:Nevron.Chart.NSurfaceSeriesBase.m_FillStyle">
            <summary>
            The surface fill style
            </summary>
        </member>
        <member name="F:Nevron.Chart.NSurfaceSeriesBase.m_ValueFormatter">
            <summary>
            The surface value formatter
            </summary>
        </member>
        <member name="F:Nevron.Chart.NSurfaceSeriesBase.m_InteractivityStyles">
            <summary>
            The surface interactivity style
            </summary>
        </member>
        <member name="F:Nevron.Chart.NSurfaceSeriesBase.m_Isolines">
            <summary>
            The surface isolines
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLineSegment">
            <summary>
            Represents a line segment
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLineSegment.DataPointIndex1">
            <summary>
            Gets the data point index of the line begin
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLineSegment.DataPointIndex2">
            <summary>
            Gets the data point index of the line end
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLineSegment.Id">
            <summary>
            Gets or sets the id of this triangle
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSurfaceTriangle.DataPointIndex1">
            <summary>
            Gets the data point index of the first triangle vertex
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSurfaceTriangle.DataPointIndex2">
            <summary>
            Gets the data point index of the second triangle vertex
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSurfaceTriangle.DataPointIndex3">
            <summary>
            Gets the data point index of the trird triangle vertex
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSurfaceTriangle.DataPointIndices">
            <summary>
            Gets the data point indices of the triangle that is currently hit
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSurfaceTriangle.Id">
            <summary>
            Gets or sets the id of this triangle
            </summary>
        </member>
        <member name="T:Nevron.Chart.NIndicesSurfaceData">
            <summary>
            Each NTriangulatedSurfaceSeries instance has an associated NTrianguatedSurface object which
            represents the data storage for the surface series. The data storage is 
            one-dimensional and contains XYZ position data as well as optionional color per position.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NIndicesSurfaceData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NIndicesSurfaceData.#ctor(Nevron.Chart.NIndicesSurfaceData)">
            <summary>
            Copy constructor
            </summary>
            <param name="surface"></param>
        </member>
        <member name="M:Nevron.Chart.NIndicesSurfaceData.Clone">
            <summary>
            Creates an identical copy of this NGridSurfaceData object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NIndicesSurfaceData.Add(System.UInt32[])">
            <summary>
            Adds the specified vectors to the surface
            </summary>
            <param name="indices"></param>
        </member>
        <member name="M:Nevron.Chart.NIndicesSurfaceData.Add(System.UInt32)">
            <summary>
            Adds the specified index to the data
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Chart.NIndicesSurfaceData.SetAt(System.Int32,System.UInt32)">
            <summary>
            Sets the value at the specified index.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.NIndicesSurfaceData.GetAt(System.Int32)">
            <summary>
            Gets the value at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NVertexSurfaceDataBase">
            <summary>
            Each NTriangulatedSurfaceSeries instance has an associated NTrianguatedSurface object which
            represents the data storage for the surface series. The data storage is 
            one-dimensional and contains XYZ position data as well as optionional color per position.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.#ctor(Nevron.Chart.NVertexSurfaceDataBase)">
            <summary>
            Copy constructor
            </summary>
            <param name="surface"></param>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.Clone">
            <summary>
            Creates an identical copy of this NGridSurfaceData object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.AddValues(Nevron.GraphicsCore.NVector3DD[])">
            <summary>
            Adds the specified vectors to the surface
            </summary>
            <param name="vectors"></param>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.AddValues(Nevron.GraphicsCore.NVector3DF[])">
            <summary>
            Adds the specified vectors to the surface
            </summary>
            <param name="vectors"></param>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.AddValue(Nevron.GraphicsCore.NVector3DD)">
            <summary>
            Adds the specified value to the data
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.AddValue(Nevron.GraphicsCore.NVector3DF)">
            <summary>
            Adds the specified value to the data
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.AddValue(System.Double,System.Double,System.Double)">
            <summary>
            Adds the specified value to the data
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.AddValue(System.Single,System.Single,System.Single)">
            <summary>
            Adds the specified value to the data
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.AddValueColor(Nevron.GraphicsCore.NVector3DD,System.Drawing.Color)">
            <summary>
            Adds the specified value and color to the data
            </summary>
            <param name="vector"></param>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.AddValueColor(Nevron.GraphicsCore.NVector3DF,System.Drawing.Color)">
            <summary>
            Adds the specified value and color to the data
            </summary>
            <param name="vector"></param>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.AddValueColor(System.Double,System.Double,System.Double,System.Drawing.Color)">
            <summary>
            Adds the specified value and color to the data
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.AddValueColor(System.Single,System.Single,System.Single,System.Drawing.Color)">
            <summary>
            Adds the specified value and color to the data
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.SetValue(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Sets the value at the specified index.
            </summary>
            <param name="index"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.SetValue(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Sets the value at the specified index.
            </summary>
            <param name="index"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.SetValue(System.Int32,Nevron.GraphicsCore.NVector3DD)">
            <summary>
            Sets the value at the specified index.
            </summary>
            <param name="index"></param>
            <param name="vector"></param>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.SetValue(System.Int32,Nevron.GraphicsCore.NVector3DF)">
            <summary>
            Sets the value at the specified index.
            </summary>
            <param name="index"></param>
            <param name="vector"></param>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.GetValue(System.Int32)">
            <summary>
            Gets the value at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.SetXValue(System.Int32,System.Single)">
            <summary>
            Sets the X value at the specified index.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.GetXValue(System.Int32)">
            <summary>
            Gets the X value at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.SetYValue(System.Int32,System.Single)">
            <summary>
            Sets the elevation value at the specified index.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.GetYValue(System.Int32)">
            <summary>
            Gets the elevation value at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.SetZValue(System.Int32,System.Single)">
            <summary>
            Sets the Z value at the specified index.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.GetZValue(System.Int32)">
            <summary>
            Gets the Z value at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.GetVertex(System.Int32)">
            <summary>
            Gets the vertex at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceDataBase.SetVertex(System.Int32,Nevron.GraphicsCore.NVector3DF)">
            <summary>
            Sets the vertex at the specified index
            </summary>
            <param name="index"></param>
            <param name="vertex"></param>
        </member>
        <member name="T:Nevron.Chart.NVertexSurfaceData">
            <summary>
            Each NTriangulatedSurfaceSeries instance has an associated NTrianguatedSurface object which
            represents the data storage for the surface series. The data storage is 
            one-dimensional and contains XYZ position data as well as optionional color per position.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceData.#ctor(Nevron.Chart.NVertexSurfaceData)">
            <summary>
            Copy constructor
            </summary>
            <param name="surface"></param>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceData.Clone">
            <summary>
            Creates an identical copy of this NGridSurfaceData object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NTriangulatedSurfaceData">
            <summary>
            Each NTriangulatedSurfaceSeries instance has an associated NTrianguatedSurface object which
            represents the data storage for the surface series. The data storage is 
            one-dimensional and contains XYZ position data as well as optionional color per position.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTriangulatedSurfaceData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTriangulatedSurfaceData.#ctor(Nevron.Chart.NTriangulatedSurfaceData)">
            <summary>
            Copy constructor
            </summary>
            <param name="surface"></param>
        </member>
        <member name="M:Nevron.Chart.NTriangulatedSurfaceData.Clone">
            <summary>
            Creates an identical copy of this NGridSurfaceData object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NTriangulatedSurfaceSeries">
            <summary>
            Represents a triangulated surface series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTriangulatedSurfaceSeries.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTriangulatedSurfaceSeries.Data">
            <summary>
            Gets or sets the NGridSurfaceData object controlling the surface data storage.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTriangulatedSurfaceSeries.MinMaxValid">
            <summary>
            Gets or sets whether the min max of the node is valid
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTriangulatedSurfaceSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NVertexSurfaceSeries">
            <summary>
            Represents a triangulated surface series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceSeries.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NVertexSurfaceSeries.Data">
            <summary>
            Gets or sets the NGridSurfaceData object controlling the surface data storage.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NVertexSurfaceSeries.Indices">
            <summary>
            Gets or sets the NGridSurfaceData object controlling the surface data storage.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NVertexSurfaceSeries.VertexPrimitive">
            <summary>
            Gets or sets the vertex primitive
            </summary>
        </member>
        <member name="P:Nevron.Chart.NVertexSurfaceSeries.UseIndices">
            <summary>
            Whether to use the indices data or use automatically generated indices
            </summary>
        </member>
        <member name="P:Nevron.Chart.NVertexSurfaceSeries.MinMaxValid">
            <summary>
            Gets or sets whether the min max of the node is valid
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVertexSurfaceSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NSeriesClip">
            <summary>
            Controls how clipping is applied relative to the series contents
            </summary>
            <remarks>
            This object is relevant for Cartesian, Polar and Radar charts.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NSeriesClip.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesClip.EnableHorizontalMinClipping">
            <summary>
            Gets or sets whether horizontal minimum clipping is enabled
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesClip.EnableHorizontalMaxClipping">
            <summary>
            Gets or sets whether horizontal maximum clipping is enabled
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesClip.HorizontalMinClipValue">
            <summary>
            Gets or sets the horizontal minimum clipping value
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesClip.HorizontalMaxClipValue">
            <summary>
            Gets or sets the horizontal maximum clipping value
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesClip.EnableVerticalMinClipping">
            <summary>
            Gets or sets whether vertical minimum clipping is enabled
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesClip.EnableVerticalMaxClipping">
            <summary>
            Gets or sets whether vertical maximum clipping is enabled
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesClip.VerticalMinClipValue">
            <summary>
            Gets or sets the vertical minimum clipping value
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesClip.VerticalMaxClipValue">
            <summary>
            Gets or sets the vertical maximum clipping value
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesClip.EnableDepthMinClipping">
            <summary>
            Gets or sets whether vertical minimum clipping is enabled
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesClip.EnableDepthMaxClipping">
            <summary>
            Gets or sets whether vertical maximum clipping is enabled
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesClip.DepthMinClipValue">
            <summary>
            Gets or sets the depth minimum clipping value
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesClip.DepthMaxClipValue">
            <summary>
            Gets or sets the depth maximum clipping value
            </summary>
        </member>
        <member name="M:Nevron.Chart.NColoredTriangle.#ctor(Nevron.GraphicsCore.NVector3DD,Nevron.GraphicsCore.NVector3DD,Nevron.GraphicsCore.NVector3DD,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializer constructor
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="colorA"></param>
            <param name="colorB"></param>
            <param name="colorC"></param>
        </member>
        <member name="F:Nevron.Chart.NColoredTriangle.A">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.NColoredTriangle.B">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.NColoredTriangle.C">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.NColoredTriangle.ColorA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.NColoredTriangle.ColorB">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.NColoredTriangle.ColorC">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTriangle.#ctor(Nevron.GraphicsCore.NVector3DD,Nevron.GraphicsCore.NVector3DD,Nevron.GraphicsCore.NVector3DD)">
            <summary>
            Initializer constructor
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
        </member>
        <member name="F:Nevron.Chart.NTriangle.A">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.NTriangle.B">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.NTriangle.C">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTriangulatedHeatMapSeries.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTriangulatedHeatMapSeries.Values">
            <summary>
            Gets or sets the data series holding the Y (elevation) values of the data points.
            </summary>
            <remarks>
            The data series contains Double values.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NTriangulatedHeatMapSeries.XValues">
            <summary>
            Gets or sets the data series holding the X values of the data points.
            </summary>
            <remarks>
            The data series contains Double values.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NTriangulatedHeatMapSeries.YValues">
            <summary>
            Gets or sets the data series holding the Y values of the data points.
            </summary>
            <remarks>
            The data series contains Double values.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NTriangulatedHeatMapSeries.Colors">
            <summary>
            Gets or sets the data series holding the custom colors of the data points.
            </summary>
            <remarks>
            This data series is used only when custom colors are used for the surface 
            frame lines or for the surface filling.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NTriangulatedHeatMapSeries.GetAttributeByNameAt(System.String,System.Int32)">
            <summary>
            Gets an an attribute by its name and index
            </summary>
            <param name="attributeName">name of the attribute</param>
            <param name="index">index of the attribute</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="P:Nevron.Chart.NTriangulatedHeatMapSeries.MinMaxValid">
            <summary>
            Gets or sets whether the min max of the node is valid
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTriangulatedHeatMapSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NTriangulatedHeatMapSeries.CacheDataItemsCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTriangulatedHeatMapSeries.CacheMinMaxInfo(System.Int32)">
            <summary>
            
            </summary>
            <param name="nIndexZ"></param>
        </member>
        <member name="M:Nevron.Chart.NHeatMapSeriesBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapSeriesBase.BorderStyle">
            <summary>
            Gets or sets the border style applied to the heat map outer border.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapSeriesBase.ValueFormatter">
            <summary>
            Gets or sets the NValueFormatter object controlling the formatting of the elevation (Y) values.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapSeriesBase.Palette">
            <summary>
            Gets or sets the palette assocaited with the heat map
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapSeriesBase.ContourDisplayMode">
            <summary>
            The contour display mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapSeriesBase.ContourColorMode">
            <summary>
            The contour color mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapSeriesBase.ContourPathMode">
            <summary>
            Gets / sets the contour path mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapSeriesBase.ShowFill">
            <summary>
            Whether to show the heat map fill
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapSeriesBase.ContourStrokeStyle">
            <summary>
            The contour stroke style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapSeriesBase.ContourDotSize">
            <summary>
            The contour dot size
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapSeriesBase.InterpolateImage">
            <summary>
            Gets or sets a value indicating whether to interpolate the rendering of the generated heat map
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapSeriesBase.ContourLabelStyle">
            <summary>
            The contour label style
            </summary>
        </member>
        <member name="M:Nevron.Chart.NHeatMapSeriesBase.GetAttributeByNameAt(System.String,System.Int32)">
            <summary>
            Gets an an attribute by its name and index
            </summary>
            <param name="attributeName">name of the attribute</param>
            <param name="index">index of the attribute</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NHeatMapSeriesBase.Render2D(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NHeatMapSeriesBase.GetClipBounds(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            Gets the current clip bounds
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NHeatMapSeriesBase.RemoveOverlappingLabels">
            <summary>
            Removes the overlapping labels in the contour
            </summary>
        </member>
        <member name="F:Nevron.Chart.NHeatMapSeriesBase.m_BorderStyle">
            <summary>
            The border style
            </summary>
        </member>
        <member name="F:Nevron.Chart.NHeatMapSeriesBase.m_ContourDisplayMode">
            <summary>
            The contour display mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.NHeatMapSeriesBase.m_ContourColorMode">
            <summary>
            The contour color mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.NHeatMapSeriesBase.m_ContourPathMode">
            <summary>
            The contour path mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.NHeatMapSeriesBase.m_ShowFill">
            <summary>
            Whether to show the heat map fill
            </summary>
        </member>
        <member name="F:Nevron.Chart.NHeatMapSeriesBase.m_ContourStrokeStyle">
            <summary>
            The contour stroke style
            </summary>
        </member>
        <member name="F:Nevron.Chart.NHeatMapSeriesBase.m_ContourDotSize">
            <summary>
            The contour dot size
            </summary>
        </member>
        <member name="F:Nevron.Chart.NHeatMapSeriesBase.m_ValueFormatter">
            <summary>
            Formatter for elevation values
            </summary>
        </member>
        <member name="F:Nevron.Chart.NHeatMapSeriesBase.m_InterpolateImage">
            <summary>
            Whether to interpolate the image
            </summary>
        </member>
        <member name="F:Nevron.Chart.NHeatMapSeriesBase.m_ContourLabelStyle">
            <summary>
            The contour label style
            </summary>
        </member>
        <member name="F:Nevron.Chart.NHeatMapSeriesBase.m_Palette">
            <summary>
            The custom (user specified palette)
            </summary>
        </member>
        <member name="F:Nevron.Chart.NHeatMapSeriesBase.m_bHasEmptyDataPoints">
            <summary>
            Whether the data contains empty data points
            </summary>
        </member>
        <member name="F:Nevron.Chart.NHeatMapSeriesBase.m_RanderCacheValid">
            <summary>
            Whether the render cache is valid
            </summary>
        </member>
        <member name="F:Nevron.Chart.NHeatMapSeriesBase.m_CachedFillBitmap">
            <summary>
            The cached fill bitmap
            </summary>
        </member>
        <member name="F:Nevron.Chart.NHeatMapSeriesBase.m_CachedFillBitmapSize">
            <summary>
            The cached fill bitmap size
            </summary>
        </member>
        <member name="F:Nevron.Chart.NHeatMapSeriesBase.m_CachedLevelPaths">
            <summary>
            The cached level paths
            </summary>
        </member>
        <member name="F:Nevron.Chart.NHeatMapSeriesBase.m_CachedBorderPaths">
            <summary>
            The cached border path
            </summary>
        </member>
        <member name="M:Nevron.Chart.NArrowShape2D.#ctor(Nevron.Chart.ArrowheadShape,Nevron.GraphicsCore.NSizeF,Nevron.GraphicsCore.NSizeF,System.Single,System.Single,Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="shape"></param>
            <param name="minArrowHeadSize"></param>
            <param name="maxArrowHeadSize"></param>
            <param name="arrowHeadHeightFactor"></param>
            <param name="arrowHeadWidthFactor"></param>
            <param name="fillStyle"></param>
            <param name="strokeStyle"></param>
        </member>
        <member name="T:Nevron.Chart.NVectorLengthScale">
            <summary>
            Represents a vector length scale
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVectorLengthScale.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NVectorLengthScale.Mode">
            <summary>
            Gets or set the bubble scale mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NVectorLengthScale.TextAlignment">
            <summary>
            Gets or sets the text alignement relative to the vector 
            </summary>
        </member>
        <member name="T:Nevron.Chart.NBubbleSizeScale">
            <summary>
            Represents a bubble scale
            </summary>
        </member>
        <member name="M:Nevron.Chart.NBubbleSizeScale.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBubbleSizeScale.Mode">
            <summary>
            Gets or set the bubble scale mode
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLegendSizeScale">
            <summary>
            Represents a bubble scale
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendSizeScale.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendSizeScale.Steps">
            <summary>
            Gets or sets the number of bubble scale steps
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendSizeScale.RoundValues">
            <summary>
            Gets or sets whether to round the values of the bubble scale
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendSizeScale.UseOrigin">
            <summary>
            Whether the custom scale will use the custom origin
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendSizeScale.Origin">
            <summary>
            Gets or sets the origin value of the scale. Has effect if the UseOrigin is set to true.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendSizeScale.StrokeStyle">
            <summary>
            Controls the bubble scale stroke style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendSizeScale.TextStyle">
            <summary>
            Controls the bubble scale stroke style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendSizeScale.TableCellOffset">
            <summary>
            Gets or set the bubble scale cell mode (in case the mode is table)
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendSizeScale.TextOffset">
            <summary>
            Gets or set the bubble scale text offset
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendSizeScale.ValueFormatter">
            <summary>
            The value formatter
            </summary>
        </member>
        <member name="T:Nevron.Chart.NStockGroupingBuilder">
            <summary>
            Represents a class that creates sotck groups from a passed stock series
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStockGroupingBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStockGroupingBuilder.CreateGroups(Nevron.Chart.NStockSeries,Nevron.Chart.NChartRenderingContext)">
            <summary>
            Creates the groups for the specified stock series
            </summary>
            <param name="stockSeries"></param>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Chart.NTexturePlane">
            <summary>
            This type represents a custom texture mapping plane for the surface series. It contains three 
            3-dimensional vectors that define the plane.
            </summary>
        </member>
        <member name="F:Nevron.Chart.NTexturePlane.v1">
            <summary>
            Vector 1
            </summary>
        </member>
        <member name="F:Nevron.Chart.NTexturePlane.v2">
            <summary>
            Vector 2
            </summary>
        </member>
        <member name="F:Nevron.Chart.NTexturePlane.v3">
            <summary>
            Vector 3
            </summary>
        </member>
        <member name="T:Nevron.Chart.NTernaryPointSeries">
            <summary>
            Represents a ternary point series.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTernaryPointSeries.Shape">
            <summary>
            Controls the bubble style.
            </summary>
            <remarks>
            By default set to Ellipse.
            </remarks>
            <example>
            The following code changes the bubbles style to sphere.
            <code lang = 'VB'>
            bubble.BubbleShape = PointShape.Sphere
            </code>
            <code>
            bubble.BubbleShape = PointShape.Sphere;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NTernaryPointSeries.Size">
            <summary>
            Controls the point size.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTernaryPointSeries.CustomShape">
            <summary>
            Gets or set a custom shape object that is used for display of data points.
            </summary>
            <remarks>
            This property is regarded when the value of the BubbleShape property is set to PointShape.Custom.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NTernaryPointSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NTernaryBubbleSeries">
            <summary>
            Represents a ternary bubble series.
            </summary>
            <seealso cref="T:Nevron.Chart.NSeries"/>
            <seealso cref="T:Nevron.Chart.NXYScatterSeries"/>
        </member>
        <member name="M:Nevron.Chart.NTernaryBubbleSeries.GetDataSeriesInfos">
            <summary>
            Gets the data series infos
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NTernaryBubbleSeries.Shape">
            <summary>
            Controls the bubble style.
            </summary>
            <remarks>
            By default set to Ellipse.
            </remarks>
            <example>
            The following code changes the bubbles style to sphere.
            <code lang = 'VB'>
            bubble.BubbleShape = PointShape.Sphere
            </code>
            <code>
            bubble.BubbleShape = PointShape.Sphere;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NTernaryBubbleSeries.MinSize">
            <summary>
            Controls the minimal bubble size.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTernaryBubbleSeries.MaxSize">
            <summary>
            Controls the maximal bubble size.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTernaryBubbleSeries.Sizes">
            <summary>
            Gets or sets the data series containing the bubble sizes.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTernaryBubbleSeries.CustomShape">
            <summary>
            Gets or set a custom shape object that is used for display of data points.
            </summary>
            <remarks>
            This property is regarded when the value of the BubbleShape property is set to PointShape.Custom.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NTernaryBubbleSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NTernaryChart">
            <summary>
            The NTernaryChart type represents a chart with a polar coordinate system that can display 
            polar line and point charts.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTernaryChart.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTernaryChart.RecalcLayout(Nevron.Chart.NChartRenderingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Chart.NDataSeriesUInt">
            <summary>
            Represents a series of type uint
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesUInt.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesUInt.#ctor(System.String)">
            <summary>
            Constructs a data series with the specified type and name
            </summary>
            <param name="name">name of the data series</param>
        </member>
        <member name="T:Nevron.Chart.NAutoLegend">
            <summary>
            Controls the representation of the associated series in the chart legend.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoLegend.Format">
            <summary>
            Defines the format string for the legend texts.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoLegend.TextStyle">
            <summary>
            Defines the text style used to display the legend entries.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoLegend.MaxTextWidth">
            <summary>
            Gets or sets the maximum width of text in the legend cell when the text fit mode is set to wrap
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoLegend.TextFitMode">
            <summary>
            Gets or sets the text fit mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoLegend.ShadowStyle">
            <summary>
            Defines the text style used to display the series legend entries.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoLegend.ContentAlignment">
            <summary>
            Gets or sets the content alignment of the cell
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoLegend.AlwaysIncludeMarkSize">
            <summary>
            Gets or sets whether the cell will always include the mark size in measurement regardless of whether it has a mark or not
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoLegend.DisplayOnLegend">
            <summary>
            Specifies the legend on which the series information is displayed.
            </summary>
            <remarks>
            When set to null the serie will obtain the legend index from the chart DisplayOnLegend property.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NAutoLegend.UsePaletteRange">
            <summary>
            Whether the palette will use a fixed range or the automatically computed range of the series values
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoLegend.PaletteRange">
            <summary>
            The palette range when UsePaletteRange is set to true
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoLegend.PaletteScalePosition">
            <summary>
            Gets or sets the palette scale position
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoLegend.PaletteScaleStepMode">
            <summary>
            Gets or sets the palette scale step mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoLegend.PaletteOrientation">
            <summary>
            Gets or sets the palette orientation
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoLegend.PaletteScaleConfigurator">
            <summary>
            Gets or sets the custom palette scale configurator used to configure the scale of the palette
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoLegend.PaletteLength">
            <summary>
            Specifies the length of the palette
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoLegend.PaletteWidth">
            <summary>
            Gets or sets the palette width
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoLegend.PaletteCellMargins">
            <summary>
            Gets or sets the margins of this legend item
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoLegend.PaletteLegendMode">
            <summary>
            Determines the mode in which the legend is filled with information about the node palette
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoLegend.Attributes">
            <summary>
            Gets an array of the child attributes of this attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NAutoLegend.GetAttributeByName(System.String)">
            <summary>
            Gets a child or descendant attribute by its name
            </summary>
            <param name="attributeName">child name or full attribute name</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NAutoLegend.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NAutoLegend.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
            <summary>
            Sets a child or descendant attribute by its name
            </summary>
            <param name="attributeName"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:Nevron.Chart.NAnnotationSeries.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnnotationSeries.GraphicsPath">
            <summary>
            Gets or sets the displayed graphics path.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnnotationSeries.FillStyle">
            <summary>
            Gets or sets the default fill style applied to the series.
            </summary>
            <remarks>
            The NFillStyle object accessible through this method specifies the default 
            filling of the series data points. This fill style can be replaced for each
            individual data point by adding NFillStyle objects to the FillStyles 
            data series.
            </remarks>
            <example>
            The following code will set the default filling to green solid color.
            <code lang = 'VB'>
            series.FillStyle = new NColorFillStyle(Color.Green)
            </code>
            <code>
            series.FillStyle = new NColorFillStyle(Color.Green);
            </code>
            </example>
            <seealso cref="T:Nevron.GraphicsCore.NFillStyle"/>
        </member>
        <member name="P:Nevron.Chart.NAnnotationSeries.StrokeStyle">
            <summary>
            Gets or sets the default stroke style applied to the series borders.
            </summary>
            <remarks>
            The NStrokeStyle object accessible through this method specifies the default 
            border style of the series data points. This border style can be replaced for 
            each individual data point by adding NStrokeStyle objects to the BorderStyles 
            data series.
            </remarks>
            <example>
            The following code will set the color of the default border to blue.
            <code lang = 'VB'>
            series.StrokeStyle.Color = Color.Blue
            </code>
            <code>
            series.StrokeStyle.Color = Color.Blue;
            </code>
            </example>
            <seealso cref="T:Nevron.GraphicsCore.NStrokeStyle"/>
        </member>
        <member name="M:Nevron.Chart.NAnnotationSeries.GetAttributeByNameAt(System.String,System.Int32)">
            <summary>
            Gets an an attribute by its name and index
            </summary>
            <param name="attributeName">name of the attribute</param>
            <param name="index">index of the attribute</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NAnnotationSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NAnnotationSeries.Render2D(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Chart.NLevelContour">
            <summary>
            Represents a level contour
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLevelContour.Count">
            <summary>
            Gets the number of points in the contour
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLevelContour.Item(System.Int32)">
            <summary>
            Gets or sets the point at index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NLevelPath">
            <summary>
            Represents a level path
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGraphicsPathSeries.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGraphicsPathSeries.GraphicsPath">
            <summary>
            Gets or sets the displayed graphics path.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGraphicsPathSeries.FillStyle">
            <summary>
            Gets or sets the default fill style applied to the series.
            </summary>
            <remarks>
            The NFillStyle object accessible through this method specifies the default 
            filling of the series data points. This fill style can be replaced for each
            individual data point by adding NFillStyle objects to the FillStyles 
            data series.
            </remarks>
            <example>
            The following code will set the default filling to green solid color.
            <code lang = 'VB'>
            series.FillStyle = new NColorFillStyle(Color.Green)
            </code>
            <code>
            series.FillStyle = new NColorFillStyle(Color.Green);
            </code>
            </example>
            <seealso cref="T:Nevron.GraphicsCore.NFillStyle"/>
        </member>
        <member name="P:Nevron.Chart.NGraphicsPathSeries.StrokeStyle">
            <summary>
            Gets or sets the default stroke style applied to the series borders.
            </summary>
            <remarks>
            The NStrokeStyle object accessible through this method specifies the default 
            border style of the series data points. This border style can be replaced for 
            each individual data point by adding NStrokeStyle objects to the BorderStyles 
            data series.
            </remarks>
            <example>
            The following code will set the color of the default border to blue.
            <code lang = 'VB'>
            series.StrokeStyle.Color = Color.Blue
            </code>
            <code>
            series.StrokeStyle.Color = Color.Blue;
            </code>
            </example>
            <seealso cref="T:Nevron.GraphicsCore.NStrokeStyle"/>
        </member>
        <member name="M:Nevron.Chart.NGraphicsPathSeries.GetAttributeByNameAt(System.String,System.Int32)">
            <summary>
            Gets an an attribute by its name and index
            </summary>
            <param name="attributeName">name of the attribute</param>
            <param name="index">index of the attribute</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NGraphicsPathSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NGraphicsPathSeries.Render2D(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Chart.NContourLabelStyle">
            <summary>
            Controls the appearance of a contour labels label.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NContourLabelStyle.#ctor">
            <summary>
            Creates a new data label style with default settings.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NContourLabelStyle.Visible">
            <summary>
            Controls the visibility of the data label.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NContourLabelStyle.AllowLabelToFlip">
            <summary>
            Whether the label is allowed to flip
            </summary>
        </member>
        <member name="P:Nevron.Chart.NContourLabelStyle.ClipContour">
            <summary>
            Whether the label should clip the contour line it annotates
            </summary>
        </member>
        <member name="P:Nevron.Chart.NContourLabelStyle.LabelClipInflate">
            <summary>
            Controls the inflate of the label size when clipping the label
            </summary>
        </member>
        <member name="P:Nevron.Chart.NContourLabelStyle.LabelDistance">
            <summary>
            The height of the scrollbar in NLength format
            </summary>
        </member>
        <member name="P:Nevron.Chart.NContourLabelStyle.Format">
            <summary>
            Gets or sets the format string of the data labels.
            </summary>
            <remarks>
            With the help of the format string you can specify what content 
            must be displayed in the contour labels labels. 
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NContourLabelStyle.TextStyle">
            <summary>
            Gets or sets the text style applied to the data labels.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NContourLabelStyle.Attributes">
            <summary>
            Gets an array of the child attributes of this attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NContourLabelStyle.GetAttributeByName(System.String)">
            <summary>
            Gets a child or descendant attribute by its name
            </summary>
            <param name="attributeName">child name or full attribute name</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NContourLabelStyle.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NContourLabelStyle.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
            <summary>
            Sets a child or descendant attribute by its name
            </summary>
            <param name="attributeName"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:Nevron.Chart.NContourLabelStyle.OnDrawPreviewBackground(Nevron.GraphicsCore.IN2DDevice,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Draws the background of the preview for this appearance style.
            </summary>
            <param name="device"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:Nevron.Chart.NContourLabelStyle.OnDrawPreview(Nevron.GraphicsCore.IN2DDevice,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Draws the preview for this appearance style.
            </summary>
            <param name="device"></param>
            <param name="size"></param>
        </member>
        <member name="M:Nevron.Chart.NContourLabelStyle.GetDescription">
            <summary>
            Returns a short description of this style.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NContourLabelStyle.GetPaintableRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NLengthConverter)">
            <summary>
            Obtains the paintable rectangle associated with this appearance style
            </summary>
            <param name="shapeRect"></param>
            <param name="lengthConverter"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NFibonacciArcs">
            <summary>
            Represents the Fibonacci Arcs line study. 
            </summary>
            <remarks>
            Fibonacci arcs are created by drawing an invisible trendline between two points, and then 
            drawing three curves that intersect this trendline at the key Fibonacci levels of 38.2%, 50% and 61.8%.
            Fibonacci Arcs are considered to represent potential support and resistance levels. Fibonacci Arcs 
            and Fibonacci Fans are usually plotted together on the chart. Support and resistance levels are 
            determined by the points of intersection of these lines.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NFibonacciArcs.#ctor">
            <summary>
            Creates a new instance of the NFibonacciArcs type.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFibonacciArcs.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NFibonacciArcs.RenderTexts2D(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Chart.NFibonacciFans">
            <summary>
            Represents the Fibonacci Fans line study.
            </summary>
            <remarks>
            A trend line is drawn between two extreme points. Then an invisible vertical line is drawn 
            through the second extreme point. Three trend lines are drawn from the first extreme point, 
            so that they intersect the invisible vertical line at Fibonacci levels of 38.2%, 50%, and 61.8%.
            These lines are considered to represent support and resistance levels. For getting a more 
            precise forecast, it is recommended to use other Fibonacci instruments along with the Fan.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NFibonacciFans.#ctor">
            <summary>
            Creates a new instance of the NFibonacciFans type.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFibonacciFans.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NFibonacciRetracements">
            <summary>
            Represents the Fibonacci Retracements line study.
            </summary>
            <remarks>
            Fibonacci Retracements are nine horizontal lines intersecting the trend line between two points at 
            Fibonacci levels of 0.0%, 23.6%, 38.2%, 50%, 61.8%, 100%, 161.8%, 261.8%, and 423.6%. After a 
            significant change, prices often return to their previous levels correcting an essential part 
            of their initial movement. Prices often face support/resistance at the level of Fibonacci 
            Retracements or near them in the course of such a movement.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NFibonacciRetracements.#ctor">
            <summary>
            Creates a new instance of the NFibonacciRetracements type.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFibonacciRetracements.RetracementsStrokeStyle">
            <summary>
            Gets or sets the stroke style applied to the retracement lines.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFibonacciRetracements.Infinite">
            <summary>
            Gets or sets a boolean value indicating whether the retracements are displayed 
            as infinite lines over the X dimension.
            </summary>
            <remarks>
            By default this property is set to true.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NFibonacciRetracements.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NFibonacciRetracements.RenderTexts2D(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Chart.NQuadrantLines">
            <summary>
            Represents the Quadrant Lines line study.
            </summary>
            <remarks>
            Quadrant Lines are a series of horizontal lines that divide the space between highest and lowest 
            values into four equal sections. They are primarily intended to aid in the visual inspection 
            of price movements.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NQuadrantLines.#ctor">
            <summary>
            Creates a new instance of the NQuadrantLines type.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NQuadrantLines.CentralLineStrokeStyle">
            <summary>
            Gets or sets the stroke style applied to the 50% line.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NQuadrantLines.Infinite">
            <summary>
            Gets or sets a boolean value indicating whether the quadrant lines are displayed 
            as infinite lines over the X dimension.
            </summary>
            <remarks>
            By default this property is set to true.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NQuadrantLines.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NRetracementLineStudy">
            <summary>
            Base for all line studies that have multiple retracement values
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRetracementLineStudy.RetracementValues">
            <summary>
            Gets or sets the text style applied to the line study texts.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRetracementLineStudy.LabelValueFormatter">
            <summary>
            Gets or sets the value formatter used to format the labels displayed by the line study
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRetracementLineStudy.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NRetracementLineStudy.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NRetracementLineStudy.CacheMinMaxInfo(System.Int32)">
            <summary>
            
            </summary>
            <param name="nIndexZ"></param>
        </member>
        <member name="T:Nevron.Chart.NSpeedResistanceLines">
            <summary>
            Represents the Speed Resistance Lines line study.
            </summary>
            <remarks>
            Speed Resistance Lines (also called 1/3 - 2/3 lines) are a series of trendlines that divide 
            a price move into three equal sections. They are similar in construction and interpretation 
            to Fibonacci Fans.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NSpeedResistanceLines.#ctor">
            <summary>
            Creates a new instance of the NSpeedResistanceLines type.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSpeedResistanceLines.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NTernarySeries">
            <summary>
            Represents a ternary series
            </summary>
            <seealso cref="T:Nevron.Chart.NSeries"/>
            <seealso cref="T:Nevron.Chart.NXYScatterSeries"/>
        </member>
        <member name="M:Nevron.Chart.NTernarySeries.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTernarySeries.AValues">
            <summary>
            Gets or sets the Data Series that holds the A values of the data points. Same as calling values
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTernarySeries.BValues">
            <summary>
            Gets or sets the Data Series that holds the B values of the data points.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTernarySeries.CValues">
            <summary>
            Gets or sets the Data Series that holds the C values of the data points.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTernarySeries.NormalizationValue">
            <summary>
            Gets or sets the value to which all A, B, C values are normalized
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTernarySeries.CAxes">
            <summary>
            Gets or sets the vertical axis ids this series is displayed on.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTernarySeries.DisplayOnAxis(System.Int32,System.Boolean)">
            <summary>
            Instruct the chart whether to scale the series on the specified axis.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTernarySeries.GetDataSeriesInfos">
            <summary>
            Gets the data series infos
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NPolarRangeSeries">
            <summary>
            Represents a range series.
            </summary>
            <remarks>
            You can create an instance of this class with the help of the
            Add method of the NSeriesCollection class.
            <code lang = 'VB'>
            Dim rangeSeries As NPolarRangeSeries =  chart.Series.Add(SeriesType.Range)
            </code>
            <code>
            NPolarRangeSeries rangeSeries = chart.Series.Add(SeriesType.Range);
            </code>
            </remarks>
            <seealso cref="T:Nevron.Chart.NSeries"/>
            <seealso cref="T:Nevron.Chart.NXYScatterSeries"/>
            <seealso cref="T:Nevron.Chart.NXYZScatterSeries"/>
        </member>
        <member name="M:Nevron.Chart.NPolarRangeSeries.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPolarRangeSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NPolarRangeSeriesBase">
            <summary>
            Abstract base class for Polar Range and Vector series.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPolarRangeSeriesBase.Y2Values">
            <summary>
            Gets or sets the Data Series that holds the Y values of the vector/range end points.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPolarRangeSeriesBase.X2Values">
            <summary>
            Gets or sets the Data Series that holds the X values of the vector end points.
            </summary>
            <remarks>
            The X2Values are taken into account only if the UseXValues property is set to true.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NPolarRangeSeriesBase.GetDataSeriesInfos">
            <summary>
            Gets the data series infos
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NPolarVectorSeries">
            <summary>
            Reprsents a polar vector series
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPolarVectorSeries.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPolarVectorSeries.ArrowheadShape">
            <summary>
            Gets or sets the shape of the arrowhead.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPolarVectorSeries.ArrowheadWidthFactor">
            <summary>
            Gets or sets a value in the range [0, 1] that controls the arrowhead width.
            The width is relative to the vector length.
            </summary>
            <remarks>
            By default the arrowhead height factor is set to 0.05, which means that the arrowhead 
            height is 5 percent of the vector length in model units.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NPolarVectorSeries.ArrowheadHeightFactor">
            <summary>
            Gets or sets a value in the range [0, 1] that controls the arrowhead height.
            The height is relative to the vector length.
            </summary>
            <remarks>
            By default the arrowhead height factor is set to 0.1, which means that the arrowhead 
            height is one tenth of the vector length in model units.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NPolarVectorSeries.MinArrowHeadSize">
            <summary>
            Gets or sets the min size of the vector arrowhead in NSize format.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPolarVectorSeries.MaxArrowHeadSize">
            <summary>
            Gets or sets the max size of the vector arrowhead in NSize format.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPolarVectorSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NQuickPointSeries">
            <summary>
            Represents a quick point series.
            </summary>
            <seealso cref="T:Nevron.Chart.NSeries"/>
            <seealso cref="T:Nevron.Chart.NXYScatterSeries"/>
        </member>
        <member name="M:Nevron.Chart.NQuickPointSeries.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NQuickPointSeries.Color">
            <summary>
            Controls the point color
            </summary>
        </member>
        <member name="P:Nevron.Chart.NQuickPointSeries.Colors">
            <summary>
            Gets/sets the fill styles data series. This data series contains 
            individual fill styles for the data items.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NQuickPointSeries.PointShape">
            <summary>
            Controls the point shape
            </summary>
            <remarks>
            By default set to Bar
            </remarks>
            <example>
            The following code changes the shape of the points.
            <code lang = 'VB'>
            point.PointShape = PointShape.Sphere
            </code>
            <code>
            point.PointShape = PointShape.Sphere;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NQuickPointSeries.Size">
            <summary>
            Controls the size of the value point marks.
            </summary>
            <remarks>
            This property specifies the points width, height and depth dimensions. 
            By default set to 4 percent of the chart size
            </remarks>
            <example>
            The following example increases the size of the points.
            <code lang = 'VB'>
            pointSeries.Size = New NLength(5.5F, NRelativeUnit.ParentPercentage)
            </code>
            <code>
            pointSeries.Size = New NLength(5.5F, NRelativeUnit.ParentPercentage);
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NQuickPointSeries.AntialiasShapes">
            <summary>
            Controls whether 2D shapes must be antialiased.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NQuickPointSeries.Values">
            <summary>
            Gets or sets the Values data series.
            </summary>
            <remarks>
            The Values data series is of type double and is used by all derived 
            classes. It stores the most important information of a series. 
            For example the NPieSeries stores the values of the pies, 
            and the NBarSeries strores the values of the bars.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NQuickPointSeries.UseXValues">
            <summary>
            Specifies whether the series should use custom X positions for the data points.
            </summary>
            <remarks>
            You must manually change the mode of the horizontal axis on which the series is 
            displayed in order to properly scale it.
            </remarks>
            <example>
            The following code displays a XY scatter point.
            <code lang = 'VB'>
            Dim point As NPointSeries = CType(chart.Series.Add(SeriesType.Point), NPointSeries)
            chart.Axis(StandardAxis.PrimaryX).ScaleConfigurator = New NNumericScaleConfigurator()
            point.UseXValues = True
            point.Add(12, 34)
            point.Add(32, 12)
            point.Add(12, 34)
            ...
            </code>
            <code>
            NPointSeries point = (NPointSeries)chart.Series.Add(SeriesType.Point);
            chart.Axis(StandardAxis.PrimaryX).ScaleConfigurator = new NNumericScaleConfigurator();
            point.UseXValues = true;
            point.Add(12, 34);
            point.Add(32, 12);
            point.Add(12, 34);
            ...
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NQuickPointSeries.XValues">
            <summary>
            Gets or sets the Data Series that holds the X values of the data points.
            </summary>
            <remarks>
            The XValues are taken into account only if the UseXValues property is set to true.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NQuickPointSeries.UseZValues">
            <summary>
            Specifies whether custom Z positions should be used.
            </summary>
            <remarks>
            If this property is set to true the data items use the 
            coordinates contained in the ZValues data series as their depth 
            coordinate. It is recommended to switch the scale mode of the depth 
            axis to one of the value scale modes.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NQuickPointSeries.ZValues">
            <summary>
            Gets or sets the Data Series that holds the Z values of the series data points.
            </summary>
            <remarks>
            The ZValues are taken into account only if the UseZValues property is set to true.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NQuickPointSeries.AtomsCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.NQuickPointSeries.GetAtomAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NQuickPointSeries.GetAttributeByNameAt(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="attributeName"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NQuickPointSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NTernarySeriesCollection">
            <summary>
            Represents a collection of ternary series
            </summary>
        </member>
        <member name="T:Nevron.Chart.NSurfaceIsoline">
            <summary>
            Reprsents a surface isoline
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSurfaceIsoline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSurfaceIsoline.#ctor(System.Double,Nevron.GraphicsCore.NStrokeStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="value"></param>
            <param name="strokeStyle"></param>
        </member>
        <member name="P:Nevron.Chart.NSurfaceIsoline.Value">
            <summary>
            Gets or sets the value of the isoline
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSurfaceIsoline.StrokeStyle">
            <summary>
            Gets or set the stroke of the isoline
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSurfaceIsoline.ParentNode">
            <summary>
            Obtains the parent node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSurfaceIsoline.RootNode">
            <summary>
            Obtains the root of this node
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSurfaceIsoline.Equals(System.Object)">
            <summary>
            Determines whether the light sources are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NSurfaceIsoline.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NSurfaceIsolineCollection">
            <summary>
            Represents a collection of surface isolines
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSurfaceIsolineCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSurfaceIsolineCollection.Add(Nevron.Chart.NSurfaceIsoline)">
            <summary>
            Adds a isoline to the collection.
            </summary>
            <param name="isoline">The isoline object to be added.</param>
        </member>
        <member name="M:Nevron.Chart.NSurfaceIsolineCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the isoline at the specified index.
            </summary>
            <param name="index">The index of the isoline to be removed.</param>
        </member>
        <member name="P:Nevron.Chart.NSurfaceIsolineCollection.Item(System.Int32)">
            <summary>
            Retrieves the NSurfaceIsoline object at the specified index.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSurfaceIsolineCollection.Clear">
            <summary>
            Removes all isolines
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSurfaceIsolineCollection.Count">
            <summary>
            Gets the number of isolines in the collection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSurfaceIsolineCollection.Clone">
            <summary>
            Creates an identical copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NSurfaceIsolineCollection.ParentNode">
            <summary>
            Obtains the parent node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSurfaceIsolineCollection.RootNode">
            <summary>
            Obtains the root of this node
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSurfaceIsolineCollection.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NSurfaceIsolineCollection.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NPolygonLineIntersector">
            <summary>
            Represents an intersector that can get the intersections of a line and a polygon
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPolygonLineIntersector.#ctor(Nevron.GraphicsCore.NPolygonF)">
            <summary>
            Initializer constructor
            </summary>
            <param name="polygon"></param>
        </member>
        <member name="M:Nevron.Chart.NPolygonLineIntersector.#ctor(System.Collections.Generic.List{Nevron.GraphicsCore.NPointF})">
            <summary>
            Initializer constructor
            </summary>
            <param name="polygon"></param>
        </member>
        <member name="M:Nevron.Chart.NPolygonLineIntersector.IntersectsWithRange(System.Single,System.Single,System.Single)">
            <summary>
            Returns true if the polygon vertical profile intersects with the specified x range at the specified y value
            </summary>
            <param name="y"></param>
            <param name="xMin"></param>
            <param name="xMax"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NPolygonLineIntersector.IntersectWithHorizontalLine(System.Single,System.Collections.Generic.List{System.Single})">
            <summary>
            Returns the polygon interections with 
            </summary>
            <param name="y"></param>
            <param name="intersections"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NTernaryWall.Name">
            <summary>
            The name of the wall. 
            </summary>
        </member>
        <member name="T:Nevron.Chart.NTimeInfo">
            <summary>
            Represents time information
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTimeInfo.#ctor(System.DateTime)">
            <summary>
            Initializer constructor
            </summary>
            <param name="dateTime"></param>
        </member>
        <member name="M:Nevron.Chart.NTimeInfo.#ctor(System.TimeSpan)">
            <summary>
            Initializer constructor
            </summary>
            <param name="timeSpan"></param>
        </member>
        <member name="T:Nevron.Chart.NVectorLengthScaleCellData">
            <summary>
            Represents a legend bubble data item.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVectorLengthScaleCellData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVectorLengthScaleCellData.#ctor(Nevron.Chart.NVectorLengthScale,Nevron.Chart.NArrowShape2D,Nevron.GraphicsCore.NRange1DF,Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Initializer constructor
            </summary>
            <param name="vectorScale"></param>
            <param name="arrowShape"></param>
            <param name="sizeRange"></param>
            <param name="valueRange"></param>
        </member>
        <member name="M:Nevron.Chart.NVectorLengthScaleCellData.#ctor(Nevron.Chart.NVectorLengthScale,Nevron.Chart.NArrowShape2D,Nevron.GraphicsCore.NRange1DL,Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Initializer constructor
            </summary>
            <param name="vectorScale"></param>
            <param name="arrowShape"></param>
            <param name="sizeRange"></param>
            <param name="valueRange"></param>
        </member>
        <member name="M:Nevron.Chart.NVectorLengthScaleCellData.AddLevel(System.Double)">
            <summary>
            Adds a new level to the scale
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Nevron.Chart.NLegendSizeScaleCellData">
            <summary>
            Represents a legend bubble data item.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendSizeScaleCellData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendSizeScaleCellData.#ctor(Nevron.Chart.NLegendSizeScale,Nevron.GraphicsCore.NRange1DF,Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Initializer constructor
            </summary>
            <param name="bubbleScale"></param>
            <param name="sizeRange"></param>
            <param name="valueRange"></param>
        </member>
        <member name="M:Nevron.Chart.NLegendSizeScaleCellData.#ctor(Nevron.Chart.NLegendSizeScale,Nevron.GraphicsCore.NRange1DL,Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Initializer constructor
            </summary>
            <param name="bubbleScale"></param>
            <param name="sizeRange"></param>
            <param name="valueRange"></param>
        </member>
        <member name="P:Nevron.Chart.NLegendSizeScaleCellData.Scale">
            <summary>
            Gets / sets the stroke style of the bubbles
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendSizeScaleCellData.Draw(Nevron.Chart.NChartRenderingContext2D,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="rcBounds"></param>
        </member>
        <member name="M:Nevron.Chart.NLegendSizeScaleCellData.AddLevel(System.Double)">
            <summary>
            Adds a new level to the scale
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.NLegendSizeScaleCellData.GetSizeFromValue(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NLegendSizeScaleCellData.GetSizeRange(Nevron.GraphicsCore.NLengthConverter)">
            <summary>
            Gets the size range of this cell data
            </summary>
            <param name="lengthConverter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NLegendSizeScaleLevel.#ctor(Nevron.Chart.NLegendSizeScaleCellData,System.String,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="scaleCellData"></param>
            <param name="text"></param>
            <param name="vectorLength"></param>
        </member>
        <member name="T:Nevron.Chart.NBubbleSizeScaleCellData">
            <summary>
            Represents a legend bubble data item.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NBubbleSizeScaleCellData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NBubbleSizeScaleCellData.#ctor(Nevron.Chart.NBubbleSizeScale,Nevron.Chart.PointShape,Nevron.SmartShapes.NSmartShape,Nevron.GraphicsCore.NRange1DF,Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Initializer constructor
            </summary>
            <param name="bubbleScale"></param>
            <param name="shape"></param>
            <param name="customShape"></param>
            <param name="sizeRange"></param>
            <param name="valueRange"></param>
        </member>
        <member name="M:Nevron.Chart.NBubbleSizeScaleCellData.#ctor(Nevron.Chart.NBubbleSizeScale,Nevron.Chart.PointShape,Nevron.SmartShapes.NSmartShape,Nevron.GraphicsCore.NRange1DL,Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Initializer constructor
            </summary>
            <param name="bubbleScale"></param>
            <param name="shape"></param>
            <param name="customShape"></param>
            <param name="sizeRange"></param>
            <param name="valueRange"></param>
        </member>
        <member name="P:Nevron.Chart.NBubbleSizeScaleCellData.Shape">
            <summary>
            Gets or sets the shape of the bubble scale levels
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBubbleSizeScaleCellData.CustomShape">
            <summary>
            Gets or set a custom shape object that is used for bubble scale levels.
            </summary>
            <remarks>
            This property is regarded when the value of the Shape property is set to PointShape.Custom.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NBubbleSizeScaleCellData.AddLevel(System.Double)">
            <summary>
            Adds a new level to the scale
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Nevron.Chart.NLegendBoxCellData">
            <summary>
            Reprsents a legend box cell data.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendBoxCellData.#ctor">
            <summary>
            Initializer contructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendBoxCellData.Margins">
            <summary>
            Gets or sets the margins of this legend item
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendBoxCellData.GetEffectiveMargins">
            <summary>
            Gets the effective margins. 
            </summary>
            <returns></returns>
            <remarks>
            Gets the effective margins. This method works only after the control has been recalculated
            </remarks>
        </member>
        <member name="T:Nevron.Chart.NNearestSeriesValueSnapper">
            <summary>
            Represents a value snapper that snaps values to the nearest value of the passed series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNearestSeriesValueSnapper.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNearestSeriesValueSnapper.#ctor(Nevron.Chart.NDataSeriesDouble,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="dataSeries"></param>
            <param name="dataSeriesIsOrdered"></param>
        </member>
        <member name="P:Nevron.Chart.NNearestSeriesValueSnapper.DataSeriesIsOrdered">
            <summary>
            Gets or sets the snapping step
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNearestSeriesValueSnapper.DataSeries">
            <summary>
            Specifies the data series to snap values to
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNearestSeriesValueSnapper.DataSeriesUniqueId">
            <summary>
            Gets or sets the data series unique id
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNearestSeriesValueSnapper.SnapValue(System.Double)">
            <summary>
            Snaps a value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NTableInterlaceStyle">
            <summary>
            Represents a table horizontal or vertical interlace style.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTableInterlaceStyle.#ctor">
            <summary>
            Creates a new table interlace style with default settings.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTableInterlaceStyle.Type">
            <summary>
            The type of the interlace style (horizontal or vertical).
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTableInterlaceStyle.FillStyle">
            <summary>
            Controls the fill style of the interlace style.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTableInterlaceStyle.Begin">
            <summary>
            The begin row or column of this interlace style.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTableInterlaceStyle.Infinite">
            <summary>
            Whether or not this style is repeated infinitely along the table grid or not.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTableInterlaceStyle.End">
            <summary>
            The end row or column of this interlace style if Infinite is set to false.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTableInterlaceStyle.Length">
            <summary>
            The length in rows or columns of each interlace stripe.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTableInterlaceStyle.Interval">
            <summary>
            The interval (gap) between two consecutive interlace stripes.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NTableInterlaceStylesCollection">
            <summary>
            Contains legend interlace styles.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTableInterlaceStylesCollection.#ctor">
            <summary>
            Creates a new empty NTableInterlaceStylesCollection object.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTableInterlaceStylesCollection.Name">
            <summary>
            User defined name of the node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTableInterlaceStylesCollection.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLegendPaletteAxis">
            <summary>
            Represents a legend palette axis
            </summary>
        </member>
        <member name="T:Nevron.Chart.NReferenceAxisRangeCollection">
            <summary>
            Represents a collection of NReferenceAxisRange objects
            </summary>
        </member>
        <member name="M:Nevron.Chart.NReferenceAxisRangeCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NStockGroup">
            <summary>
            Represents a group of stock items
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStockGroup.XRange">
            <summary>
            Gets the X range of this group
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStockGroup.HighValue">
            <summary>
            The high value
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStockGroup.LowValue">
            <summary>
            The low value
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStockGroup.OpenValue">
            <summary>
            The open value
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStockGroup.OpenXValue">
            <summary>
            The x value of the open value
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStockGroup.CloseValue">
            <summary>
            The close value
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStockGroup.CloseXValue">
            <summary>
            The xvalue of the current close value
            </summary>
        </member>
        <member name="T:Nevron.Chart.INPaletteObserver">
            <summary>
            Implemented by palette observers
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLegendPaletteCellData">
            <summary>
            Represents a legend data item.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendPaletteCellData.#ctor(Nevron.Chart.NPalette,Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Initializer constructor
            </summary>
            <param name="palette"></param>
            <param name="range"></param>
        </member>
        <member name="P:Nevron.Chart.NLegendPaletteCellData.ScalePosition">
            <summary>
            Gets or sets the palette scale position
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendPaletteCellData.Orientation">
            <summary>
            Gets or sets the palette orientation
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendPaletteCellData.PaletteScaleStepMode">
            <summary>
            Gets or sets the palette scale step mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendPaletteCellData.PaletteScaleConfigurator">
            <summary>
            Gets or sets the custom palette scale configurator used to configure the scale of the palette
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendPaletteCellData.Length">
            <summary>
            Specifies the length of the palette
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendPaletteCellData.PaletteWidth">
            <summary>
            Gets or sets the palette width
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendPaletteCellData.PaletteAxis">
            <summary>
            Gets or sets the palette width
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendPaletteCellData.Range">
            <summary>
            Gets or sets the range displayed by this axis
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendPaletteCellData.Palette">
            <summary>
            Gets or sets the range displayed by this axis
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLegendCellData">
            <summary>
            Reprsents a legend header or footer.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendCellData.#ctor">
            <summary>
            Initializer contructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendCellData.BackgroundFillStyle">
            <summary>
            Gets or sets the fill style applied to the legend item background
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendCellData.InteractivityStyle">
            <summary>
            The interactivity style associated with the legend cell
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendCellData.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NLegendCellData.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="T:Nevron.Chart.INCellData">
            <summary>
            Summary description for INGridControl.
            </summary>
        </member>
        <member name="M:Nevron.Chart.INCellData.Measure(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            Measures the cell
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.INCellData.Draw(Nevron.Chart.NChartRenderingContext2D,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Draws the cell
            </summary>
            <param name="context"></param>
            <param name="rcBounds"></param>
        </member>
        <member name="M:Nevron.Chart.INCellData.WriteToImageMap(Nevron.GraphicsCore.INImageMapWriter,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Writes the cell to an image map
            </summary>
            <param name="htmlMapWriter"></param>
            <param name="rcBounds"></param>
        </member>
        <member name="T:Nevron.Chart.NGroupTreeMapNodeLegend">
            <summary>
            Represents the properties used to create the group legend
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGroupTreeMapNodeLegend.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGroupTreeMapNodeLegend.Mode">
            <summary>
            Determines the mode in which the legend is filled with information about the node.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGroupTreeMapNodeLegend.Order">
            <summary>
            The order in which legend items generated by the series are included in the legend.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NTreeMapChart">
            <summary>
            The NTreeMapChart class represents a hierarchial tree map chart
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTreeMapChart.#ctor">
            <summary>
            Default Contructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTreeMapChart.UsePlotAspect">
            <summary>
            Gets or set a value how the aspect is calculated when operating in Fit mode. 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTreeMapChart.RootTreeMapNode">
            <summary>
            Gets or sets the root tree map node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTreeMapChart.InvalidChangeFillStyle">
            <summary>
            Gets or sets the fill style applied to value nodes that have invalid change value
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTreeMapChart.RecalcLayout(Nevron.Chart.NChartRenderingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Chart.NRangeDataPoint">
            <summary>
            This class represents a data point that can be used with the range and vector series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeDataPoint.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new range or vector data point.
            </summary>
            <param name="X1">Data point begin X</param>
            <param name="Y1">Data point begin Y</param>
            <param name="Z1">Data point begin Z</param>
            <param name="X2">Data point end X</param>
            <param name="Y2">Data point end Y</param>
            <param name="Z2">Data point end Z</param>
        </member>
        <member name="M:Nevron.Chart.NRangeDataPoint.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Creates a new range or vector data point.
            </summary>
            <param name="X1">Data point begin X</param>
            <param name="Y1">Data point begin Y</param>
            <param name="Z1">Data point begin Z</param>
            <param name="X2">Data point end X</param>
            <param name="Y2">Data point end Y</param>
            <param name="Z2">Data point end Z</param>
            <param name="fillStyle">Data point fill style</param>
        </member>
        <member name="M:Nevron.Chart.NRangeDataPoint.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Nevron.GraphicsCore.NStrokeStyle)">
            <summary>
            Creates a new range or vector data point.
            </summary>
            <param name="X1">Data point begin X</param>
            <param name="Y1">Data point begin Y</param>
            <param name="Z1">Data point begin Z</param>
            <param name="X2">Data point end X</param>
            <param name="Y2">Data point end Y</param>
            <param name="Z2">Data point end Z</param>
            <param name="strokeStyle">Data point stroke style</param>
        </member>
        <member name="M:Nevron.Chart.NRangeDataPoint.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle)">
            <summary>
            Creates a new range or vector data point.
            </summary>
            <param name="X1">Data point begin X</param>
            <param name="Y1">Data point begin Y</param>
            <param name="Z1">Data point begin Z</param>
            <param name="X2">Data point end X</param>
            <param name="Y2">Data point end Y</param>
            <param name="Z2">Data point end Z</param>
            <param name="fillStyle">Data point fill style</param>
            <param name="strokeStyle">Data point stroke style</param>
        </member>
        <member name="T:Nevron.Chart.NDataSeriesInteractivityStyle">
            <summary>
            Represents a series of type NInteractivityStyle
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesInteractivityStyle.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesInteractivityStyle.#ctor(System.String)">
            <summary>
            Constructs a data series with the specified type and name
            </summary>
            <param name="name">name of the data series</param>
        </member>
        <member name="T:Nevron.Chart.NInfinityDataPoints">
            <summary>
            Controls how infinity values are treated.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NInfinityDataPoints.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NInfinityDataPoints.ValueMode">
            <summary>
            Controls the way in which infinity data points are treated.
            </summary>
            <remarks>
            By default set to Skip which discards infinity data points from 
            being interpolated or replaced with a custom value.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NInfinityDataPoints.PositiveInfinityCustomValue">
             <summary>
             Defines a custom value that replaces positive infinity values
             </summary>
             <remarks>
            By default set to 0, meaning that positive infinity data points are displayed as zeros.
             </remarks>
        </member>
        <member name="P:Nevron.Chart.NInfinityDataPoints.NegativeInfinityCustomValue">
            <summary>
            Defines a custom value that replaces negative infinity values
            </summary>
            <remarks>
            By default set to 0, meaning that negative infinity data points are displayed as zeros.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NInfinityDataPoints.NegativeInfinityLabel">
            <summary>
            Defines the label that is displayed for missing values.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NInfinityDataPoints.PositiveInfinityLabel">
            <summary>
            Defines the label that is displayed for missing values.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDataSeriesAnimationsStyle">
            <summary>
            Represents a series of type NAnimationsStyle
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesAnimationsStyle.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesAnimationsStyle.#ctor(System.String)">
            <summary>
            Constructs a data series with the specified type and name
            </summary>
            <param name="name">name of the data series</param>
        </member>
        <member name="T:Nevron.Chart.NDataSeriesBoolean">
            <summary>
            Represents a series of type boolean
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesBoolean.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesBoolean.#ctor(System.String)">
            <summary>
            Constructs a data series with the specified type and name
            </summary>
            <param name="name">name of the data series</param>
        </member>
        <member name="T:Nevron.Chart.NDataSeriesColor">
            <summary>
            Represents a series of type coloe
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesColor.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesColor.#ctor(System.String)">
            <summary>
            Constructs a data series with the specified type and name
            </summary>
            <param name="name">name of the data series</param>
        </member>
        <member name="T:Nevron.Chart.NDataSeriesDataLabelStyle">
            <summary>
            Represents a series of type NDataLabelStyle
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDataLabelStyle.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDataLabelStyle.#ctor(System.String)">
            <summary>
            Constructs a data series with the specified type and name
            </summary>
            <param name="name">name of the data series</param>
        </member>
        <member name="T:Nevron.Chart.NDataSeriesDouble">
            <summary>
            Represents a series of type double
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.#ctor(System.String)">
            <summary>
            Constructs a data series with the specified type and name
            </summary>
            <param name="name">name of the data series</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.Clone">
            <summary>
            Creates a copy of the data series.
            </summary>
            <returns>an identical data series</returns>
        </member>
        <member name="P:Nevron.Chart.NDataSeriesDouble.ValueFormatter">
            <summary>
            Gets or sets the NValueFormatter object controlling the 
            formatting of the values contained in the data series.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataSeriesDouble.EmptyDataPoints">
            <summary>
            Gets or sets the NEmptyDataPoints object controlling the way in which empty data points are analyzed.
            </summary>
            <remarks>
            Only data series of type Double support this property.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NDataSeriesDouble.InfinityDataPoints">
            <remarks>
            Only data series of type Double support this property.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.Add(System.Double)">
            <summary>
            Adds a double value to the data series.
            </summary>
            <param name="value">the double value to be added</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.Add(System.DateTime)">
            <summary>
            Adds a DateTime value to the data series.
            </summary>
            <param name="value">the DateTime value to be added</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.Add(System.TimeSpan)">
            <summary>
            Adds a TimeSpan value to the data series.
            </summary>
            <param name="value">the DateTime value to be added</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.SetValue(System.Int32,System.Double)">
            <summary>
            Sets a double value at the specified index.
            </summary>
            <param name="index">the index of the value</param>
            <param name="value">the double value to be set</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.SetValue(System.Int32,System.DateTime)">
            <summary>
            Sets a DateTime value at the specified index.
            </summary>
            <param name="index">the index of the value</param>
            <param name="value">the DateTime value to be set</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.SetValue(System.Int32,System.TimeSpan)">
            <summary>
            Sets a TimeSpan value at the specified index.
            </summary>
            <param name="index">the index of the value</param>
            <param name="value">the TimeSpan value to be set</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.InsertValue(System.Int32,System.Double)">
            <summary>
            Inserts a double value at the specified index.
            </summary>
            <param name="index">the index of the value</param>
            <param name="value">the double value to be inserted</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.InsertValue(System.Int32,System.DateTime)">
            <summary>
            Inserts a DateTime value at the specified index.
            </summary>
            <param name="index">the index of the value</param>
            <param name="value">the DateTime value to be inserted</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.InsertValue(System.Int32,System.TimeSpan)">
            <summary>
            Inserts a DateTime value at the specified index.
            </summary>
            <param name="index">the index of the value</param>
            <param name="value">the TimeSpan value to be inserted</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.GetDoubleValue(System.Int32)">
            <summary>
            Gets the double value at the specified index.
            </summary>
            <remarks>
            The value is returned without applying interpolation for empty or infinity values.
            </remarks>
            <param name="index">the index of the value to obtain</param>
            <returns>the double value at the specified index</returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.AddRange(System.Double[])">
            <summary>
            Adds the elements of the specified double array to the end of the data series. 
            </summary>
            <param name="data">Input array of double values</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.FindValue(System.Double)">
            <summary>
            Finds the index of the first value contained in the data series which is equal to valueToFind.
            </summary>
            <exception cref="T:System.Exception">thrown if the data series does not contain double values</exception>
            <remarks>
            Note that this methods operates only on data series, which contain double values.
            </remarks>
            <param name="valueToFind">double value to find</param>
            <returns>index of the value within the data series. -1 if the search failed</returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.FindValue(System.Double,System.Int32)">
            <summary>
            Finds the index of the first value contained in the data series which is equal to valueToFind.
            </summary>
            <exception cref="T:System.ArgumentException">thrown if the start index is negative</exception>
            <exception cref="T:System.Exception">thrown if the data series does not contain double values</exception>
            <remarks>
            Note that this methods operates only on data series, which contain double values.
            </remarks>
            <param name="valueToFind">double value to find</param>
            <param name="startIndex">index from which to begin the search</param>
            <returns>index of the value within the data series. -1 if the search failed</returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.FindClosestValue(System.Double,System.Boolean)">
            <summary>
            Finds the index of the value closest to the specified value
            </summary>
            <param name="value"></param>
            <param name="seriesIsOrdered">whether the series values are ordered</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.GetFirstNonEmptyIndex">
            <summary>
            Gets the first non empty index
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.GetLastNonEmptyIndex">
            <summary>
            Gets the last non empty index
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.GetNextNonEmptyIndex(System.Int32)">
            <summary>
            Gets the next index which contains non empty value
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.GetPrevNonEmptyIndex(System.Int32)">
            <summary>
            Gets the previous index which contains non empty values
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.FindMaxValue">
            <summary>
            Finds the index of the maximum value contained in the data series. 
            </summary>
            <exception cref="T:System.Exception">thrown if the data series does not contain double values</exception>
            <remarks>
            Note that this method operates only on data series, which contain double values.
            </remarks>
            <returns>the index of the max value. -1 if data series is empty.</returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.FindMinValue">
            <summary>
            Finds the index of the minimum value contained in the data series.
            </summary>
            <exception cref="T:System.Exception">thrown if the data series does not contain double values</exception>
            <remarks>
            Note that this method operates only on data series, which contain double values.
            </remarks>
            <returns>index of the min value within the data series. -1 if data series is empty.</returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.Filter(Nevron.Chart.CompareMethod,System.Double)">
            <summary>
            Obtains a data series subset containing only the indexes of the values which match the specified criteria.
            </summary>
            <remarks>
            Each value in the collection is compared using compareMethod with the value specified by compareValue. 
            If the comparison succeeds the index of the value is added in the subset.
            </remarks>
            <param name="compareMethod">the used comparison method</param>
            <param name="compareValue">the comparison value</param>
            <returns>reference to the resulting data set</returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.FillRandomRange(System.Random,System.Int32,System.Double,System.Double)">
            <summary>
            Fills a data series with itemCount random double values in the range defined by the "from" and "to" parameters.
            </summary>
            <param name="random">random number generator</param>
            <param name="itemCount">count of random items</param>
            <param name="from">the random values will be greater or equal than this value</param>
            <param name="to">the random values will be smaller or equal than this value</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.Evaluate(System.String,Nevron.Chart.NDataSeriesSubset)">
             <summary>
             This method evaluates a single argument function on the specified data series subset.
             </summary>
             <param name="singleArgumentFormula">
             This argument supports the following string constants:
             <list type="table">
             
             <item>
             <term>MIN</term>
             <description>returns the minimum value contained in the subset</description>
             </item>
             
             <item>
             <term>MAX</term>
             <description>returns the maximum value contained in the subset</description>
             </item>
             
             <item>
             <term>AVE</term>
             <description>returns the average value of the subset</description>
             </item>
             
             <item>
             <term>SUM</term>
             <description>returns the sum of all values contained in the subset</description>
             </item>
             
             <item>
             <term>ABSSUM</term>
             <description>returns the absolute sum of all values contained in the subset</description>
             </item>		
             
             <item>
             <term>FIRST</term>
             <description>returns the data series value at the first index in the subset</description>
             </item>				
             
             <item>
             <term>LAST</term>
             <description>returns the data series value at the last index in the subset</description>
             </item>				
            
             </list>
             </param>
             <param name="subset">subset in the data series on which to perform the evaluation</param>
             <returns>the result of the evaluation</returns>
             <example>
             The following code calculates the sum of the values contained in a data series.
             <code lang = 'VB'>
             Dim subset As NDataSeriesSubset =  New NDataSeriesSubset() 
             subset.AddRange(0, dataseries.Count - 1)
             Dim sum As Double =  dataseries.Evaluate("SUM",subset)
             </code>
             <code>
             NDataSeriesSubset subset = new NDataSeriesSubset();
             subset.AddRange(0, dataseries.Count - 1);
             double sum = dataseries.Evaluate("SUM", subset);
             </code>
             </example>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.GetDataGridColumnStyle">
            <summary>
            Returns a data grid column style which can be used for the visual editing of the data series.
            </summary>
            <remarks>
            The returned column style is adjusted to represent the value formatting settings of the data series.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDouble.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the elements of the specified collection to the end 
            of the data series. The operation is type safe.
            </summary>
            <param name="collection">source collection</param>
            <exception cref="T:System.ArgumentNullException">c is a null reference</exception>
            <exception cref="T:System.ArgumentException">The enumerator of the collection cannot be obtained</exception>
            <exception cref="T:System.Exception">The collection contains an incompatible object</exception>
        </member>
        <member name="T:Nevron.Chart.NDataSeriesDoubleList">
            <summary>
            Represents a series of double lists
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDoubleList.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesDoubleList.#ctor(System.String)">
            <summary>
            Constructs a data series with the specified type and name
            </summary>
            <param name="name">name of the data series</param>
        </member>
        <member name="T:Nevron.Chart.NDataSeriesFillStyle">
            <summary>
            Represents a series of type NFillStyle
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesFillStyle.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesFillStyle.#ctor(System.String)">
            <summary>
            Constructs a data series with the specified type and name
            </summary>
            <param name="name">name of the data series</param>
        </member>
        <member name="T:Nevron.Chart.NDataSeriesMarkerStyle">
            <summary>
            Represents a series of type NMarkerStyle
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesMarkerStyle.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesMarkerStyle.#ctor(System.String)">
            <summary>
            Constructs a data series with the specified type and name
            </summary>
            <param name="name">name of the data series</param>
        </member>
        <member name="T:Nevron.Chart.NDataSeriesString">
            <summary>
            Represents a series of type string
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesString.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesString.#ctor(System.String)">
            <summary>
            Constructs a data series with the specified type and name
            </summary>
            <param name="name">name of the data series</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesString.FindString(System.String)">
            <summary>
            Finds the index of the first string contained in the data series which is equal to stringToFind.
            </summary>
            <exception cref="T:System.Exception">thrown if the data series does not contain string values</exception>
            <remarks>
            Note that this methods operates only on data series, which contain string values.
            </remarks>
            <param name="stringToFind">string to find</param>
            <returns>index of the string within the data series. -1 if the search failed</returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesString.FindString(System.String,System.Int32)">
            <summary>
            Finds the index of the first string contained in the data series which is equal to stringToFind.
            </summary>
            <exception cref="T:System.ArgumentException">thrown if the start index is negative</exception>
            <exception cref="T:System.Exception">thrown if the data series does not contain string values</exception>
            <remarks>
            Note that this methods operates only on data series, which contain string values.
            </remarks>
            <param name="stringToFind">string to find</param>
            <param name="startIndex">index to start from</param>
            <returns>index od the string within the data series. -1 if the search failed</returns>
        </member>
        <member name="T:Nevron.Chart.NDataSeriesStrokeStyle">
            <summary>
            Represents a series of type NStrokeStyle
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesStrokeStyle.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesStrokeStyle.#ctor(System.String)">
            <summary>
            Constructs a data series with the specified type and name
            </summary>
            <param name="name">name of the data series</param>
        </member>
        <member name="T:Nevron.Chart.NDataSeriesTag">
            <summary>
            Represents a series of type object
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesTag.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesTag.#ctor(System.String)">
            <summary>
            Constructs a data series with the specified type and name
            </summary>
            <param name="name">name of the data series</param>
        </member>
        <member name="T:Nevron.Chart.NListDataSeries">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.NListDataSeries.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NListDataSeries.#ctor(Nevron.Chart.DataSeriesType,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="T:Nevron.Chart.NDataSeriesXmlSurrogate">
            <summary>
            Provides surrogate XML serialization for data series
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDoubleDataSeriesXmlSurrogate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.NUIntDataSeriesXmlSurrogate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.NIndexedDataSeriesXmlSurrogate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.NInfinityDataPointsAppearance">
            <summary>
            Controls the appearance of the Infinity data points. An instance of this class is attached to every series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NInfinityDataPointsAppearance.#ctor">
            <summary>
            Default contructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NInfinityDataPointsAppearance.FillStyle">
            <summary>
            Controls the fill style applied to the Infinity data points.
            </summary>
            <remarks>
            Infinity data points which are filled with this fill style when the 
            AppearanceMode property is set to Special.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NInfinityDataPointsAppearance.BorderStyle">
            <summary>
            Controls the stroke style applied to the Infinity data points.
            </summary>
            <remarks>
            Infinity data points are displayed with this stroke style when the 
            AppearanceMode property is set to Special.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NInfinityDataPointsAppearance.MarkerStyle">
            <summary>
            Controls the appearance of the Infinity data points markers.
            </summary>
            <remarks>
            Infinity data point markers are displayed with this marker style if the 
            MarkerMode property is set to Special.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NInfinityDataPointsAppearance.DataLabelStyle">
            <summary>
            Gets or sets an object that controls the appearance of the Infinity data points labels.
            </summary>
            <remarks>
            Infinity data point labels are displayed with this label style if the 
            DataLabelMode property is set to Special.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NInfinityDataPointsAppearance.AppearanceMode">
            <summary>
            Specifies the appearance mode for the Infinity data points.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NInfinityDataPointsAppearance.MarkerMode">
            <summary>
            Specifies the marker mode for Infinity data points.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NInfinityDataPointsAppearance.DataLabelMode">
            <summary>
            Specifies the label mode for Infinity data points.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NInfinityDataPointsAppearance.Attributes">
            <summary>
            Gets an array of the child attributes of this attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NInfinityDataPointsAppearance.GetAttributeByName(System.String)">
            <summary>
            Gets a child or descendant attribute by its name
            </summary>
            <param name="attributeName">child name or full attribute name</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NInfinityDataPointsAppearance.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NInfinityDataPointsAppearance.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
            <summary>
            Sets a child or descendant attribute by its name
            </summary>
            <param name="attributeName"></param>
            <param name="attribute"></param>
        </member>
        <member name="T:Nevron.Chart.NDataSeriesInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.NHeatMapSeries.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapSeries.InterpolateImageEdges">
            <summary>
            Gets or sets a value indicating whether to interpolate the image edges when rendering with smoothing
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapSeries.GridDisplayMode">
            <summary>
            The heat map grid style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapSeries.GridStrokeStyle">
            <summary>
            The heat map grid style stroke 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapSeries.Data">
            <summary>
            Gets or sets the NHeatMapData object controlling the heat map data storage.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapSeries.OriginX">
            <summary>
            Gets or sets the X origin value of the heat map. 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapSeries.OriginY">
            <summary>
            Gets or sets the Y origin value of the heat map. 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapSeries.StepX">
            <summary>
            Gets or sets the step of the heat map in the X direction
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapSeries.StepY">
            <summary>
            Gets or sets the step of the heat map in the Y direction
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapSeries.XValuesMode">
            <summary>
            Specifies the mode for the heat map X values.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapSeries.YValuesMode">
            <summary>
            Specifies the mode for the heatmap Y values.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapSeries.GridDotSize">
            <summary>
            The grid dot size
            </summary>
        </member>
        <member name="M:Nevron.Chart.NHeatMapSeries.Get2DIntersections(Nevron.GraphicsCore.NPointD,Nevron.GraphicsCore.NPointD)">
            <summary>
            Gets the 2D interpolated intersections of the grid with the specified line
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NHeatMapSeries.Get3DIntersections(Nevron.GraphicsCore.NPointD,Nevron.GraphicsCore.NPointD)">
            <summary>
            Gets the 3D interpolated intersections of the grid with the specified line
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NHeatMapSeries.GetValueFromPosition(Nevron.GraphicsCore.NPointD)">
            <summary>
            Gets an interpolated value from position
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NHeatMapSeries.GetAttributeByNameAt(System.String,System.Int32)">
            <summary>
            Gets an an attribute by its name and index
            </summary>
            <param name="attributeName">name of the attribute</param>
            <param name="index">index of the attribute</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="P:Nevron.Chart.NHeatMapSeries.MinMaxValid">
            <summary>
            Gets or sets whether the min max of the node is valid
            </summary>
        </member>
        <member name="M:Nevron.Chart.NHeatMapSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NHeatMapSeries.CacheMinMaxInfo(System.Int32)">
            <summary>
            
            </summary>
            <param name="nIndexZ"></param>
        </member>
        <member name="M:Nevron.Chart.NCustomSeries.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomSeries.GetAttributeByNameAt(System.String,System.Int32)">
            <summary>
            Gets an an attribute by its name and index
            </summary>
            <param name="attributeName">name of the attribute</param>
            <param name="index">index of the attribute</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="P:Nevron.Chart.NCustomSeries.Callback">
            <summary>
            Assign a value to this property to provide custom rendering and calculation code.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NHeatMapData">
            <summary>
            Each NHeatMap series has an associated NHeatMapData object which
            represents the data storage for the heat map series. The data storage is 
            two-dimensional and contains only elevation data.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NHeatMapData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NHeatMapData.#ctor(Nevron.Chart.NHeatMapData)">
            <summary>
            Copy contructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Chart.NHeatMapData.Clone">
            <summary>
            Creates an identical copy of this NHeatMapData object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NHeatMapData.GridSizeX">
            <summary>
            Gets or sets the size of the data sorage in the X-dimension.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapData.GridSizeY">
            <summary>
            Gets or sets the size of the data sorage in the Y-dimension.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapData.Values">
            <summary>
            Gets or set the values array of the heat map
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHeatMapData.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the elevation value at the specified two-dimensional index.
            </summary>
            <param name="indexX">X-index of the data point.</param>
            <param name="indexY">Y-index of the data point.</param>
            <returns>the elevation value at the specified two dimensional index</returns>
        </member>
        <member name="M:Nevron.Chart.NHeatMapData.SetValue(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the elevation value at the specified two-dimensional index.
            </summary>
            <param name="indexX">X-index of the data point.</param>
            <param name="indexY">Y-index of the data point.</param>
            <param name="value">Elevation value.</param>
        </member>
        <member name="M:Nevron.Chart.NHeatMapData.GetDoubleValue(System.Int32,System.Int32)">
            <summary>
            Gets the elevation value at the specified two-dimensional index.
            </summary>
            <param name="indexX">X-index of the data point.</param>
            <param name="indexY">Y-index of the data point.</param>
            <returns>the surface elevation value at the specified two dimensional index</returns>
        </member>
        <member name="M:Nevron.Chart.NHeatMapData.SetValue(System.Int32,System.Int32,System.Object)">
            <summary>
            Sets the elevation value at the specified two-dimensional index.
            </summary>
            <param name="indexX">X-index of the data point.</param>
            <param name="indexY">Y-index of the data point.</param>
            <param name="elevation">Elevation value.</param>
        </member>
        <member name="M:Nevron.Chart.NHeatMapData.GetValue(System.Int32,System.Int32)">
            <summary>
            Gets the elevation value at a apecified two-dimensional index.
            </summary>
            <param name="indexX">X-index of the data point.</param>
            <param name="indexY">Y-index of the data point.</param>
            <returns>Elevation value. Can be either a double value or DBNull.Value</returns>
        </member>
        <member name="M:Nevron.Chart.NHeatMapData.SetGridSize(System.Int32,System.Int32)">
            <summary>
            Sets the size of the data storage. A storage with size M x N is represented 
            by a surface with (M - 1) x (N - 1) cells.
            </summary>
            <param name="sizeX"></param>
            <param name="sizeY"></param>
        </member>
        <member name="M:Nevron.Chart.NHeatMapData.Clear">
            <summary>
            Removes all data from the storage.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NHeatMapData.SetValues(System.Double)">
            <summary>
            Sets the values in the storage to the specified value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.NHeatMapData.InitFromBitmap(System.Drawing.Bitmap)">
            <summary>
            Initializes the grid surface data from a Bitmap image. 
            </summary>
            <param name="bitmap">The bitmap image that is used as a source of data.</param>
        </member>
        <member name="M:Nevron.Chart.NHeatMapData.OnDataChanged">
            <summary>
            Notifies the chart that the data has changed
            </summary>
        </member>
        <member name="T:Nevron.Chart.TreeMapNodeLabelFitMode">
            <summary>
            Enumerates the tree map label fit modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.TreeMapNodeLabelFitMode.Hide">
            <summary>
            Automatically hides the label if its size exceeds the size of node
            </summary>
        </member>
        <member name="F:Nevron.Chart.TreeMapNodeLabelFitMode.Wrap">
            <summary>
            Wraps the label
            </summary>
        </member>
        <member name="F:Nevron.Chart.TreeMapNodeLabelFitMode.Trim">
            <summary>
            Trims the label
            </summary>
        </member>
        <member name="F:Nevron.Chart.TreeMapNodeLabelFitMode.AutoScale">
            <summary>
            Automatically scales the label so that it fits the bounds of the node
            </summary>
        </member>
        <member name="T:Nevron.Chart.TreeMapNodeSortOrder">
            <summary>
            Enumerates the sort order of child tree map nodes
            </summary>
        </member>
        <member name="F:Nevron.Chart.TreeMapNodeSortOrder.Default">
            <summary>
            Default sort order (inherited from the parent node or Descending)
            </summary>
        </member>
        <member name="F:Nevron.Chart.TreeMapNodeSortOrder.Descending">
            <summary>
            Child tree map nodes are sorted in descending order
            </summary>
        </member>
        <member name="F:Nevron.Chart.TreeMapNodeSortOrder.Ascending">
            <summary>
            Child tree map nodes are sorted in ascending order
            </summary>
        </member>
        <member name="T:Nevron.Chart.TreeMapHorizontalFillMode">
            <summary>
            Enumerates the horizontal fill modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.TreeMapHorizontalFillMode.Default">
            <summary>
            Default horizontal fill mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.TreeMapHorizontalFillMode.LeftToRight">
            <summary>
            Horizontal filling is left to right
            </summary>
        </member>
        <member name="F:Nevron.Chart.TreeMapHorizontalFillMode.RightToLeft">
            <summary>
            Horizontal filling is right to left
            </summary>
        </member>
        <member name="T:Nevron.Chart.TreeMapVerticalFillMode">
            <summary>
            Enumerates the vertical fill modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.TreeMapVerticalFillMode.Default">
            <summary>
            Default vertical fill mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.TreeMapVerticalFillMode.TopToBottom">
            <summary>
            Vertical filling is done top to bottom
            </summary>
        </member>
        <member name="F:Nevron.Chart.TreeMapVerticalFillMode.BottomToTop">
            <summary>
            Vertical filling is done bottom to top
            </summary>
        </member>
        <member name="T:Nevron.Chart.NGroupTreeMapNode">
            <summary>
            Represents a group of tree map nodes
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGroupTreeMapNode.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGroupTreeMapNode.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="label"></param>
        </member>
        <member name="M:Nevron.Chart.NGroupTreeMapNode.#ctor(System.String,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="label"></param>
            <param name="fillStyle"></param>
        </member>
        <member name="P:Nevron.Chart.NGroupTreeMapNode.ValueFormatter">
            <summary>
            Gets or sets the NValueFormatter object controlling the formatting of the node values.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGroupTreeMapNode.PercentValueFormatter">
            <summary>
            Gets or sets the NValueFormatter object controlling the formatting 
            of the X-values.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGroupTreeMapNode.HorizontalFillMode">
            <summary>
            Gets or sets the horizontal fill mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGroupTreeMapNode.VerticalFillMode">
            <summary>
            Gets or sets the vertical fill mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGroupTreeMapNode.SortOrder">
            <summary>
            Gets or sets the sort order
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGroupTreeMapNode.LabelAlignment">
            <summary>
            The label vertical alignment
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGroupTreeMapNode.Palette">
            <summary>
            Gets or sets the palette of this node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGroupTreeMapNode.ChangePaletteMode">
            <summary>
            Defines how child nodes change values are mapped against the palette
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGroupTreeMapNode.Legend">
            <summary>
            Gets / sets the tree map node group legend object that controls how the group items are displayed on a legend 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGroupTreeMapNode.ChildNodes">
            <summary>
            Gets or sets the child nodes of node
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGroupTreeMapNode.GetChildFromId(System.Int32)">
            <summary>
            Obtains a child element by its id
            </summary>
            <param name="id">id of the node</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Chart.NGroupTreeMapNode.GetChildFromUniqueId(System.Guid)">
            <summary>
            Obtains a child element by its unique id
            </summary>
            <param name="uid">unique id of the element</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Chart.NGroupTreeMapNode.GetDescendantFromId(System.Int32,System.Int32)">
            <summary>
            Obtains a element node by its id
            </summary>
            <param name="id">id of the element</param>
            <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Chart.NGroupTreeMapNode.GetDescendantFromUniqueId(System.Guid,System.Int32)">
            <summary>
            Obtains a child element by its unique id
            </summary>
            <param name="uid">unique id of the node</param>
            <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Chart.NGroupTreeMapNode.IndexOfChild(Nevron.Dom.INNode)">
            <summary>
            Gets the index of the specified node in the container
            </summary>
            <param name="node">the node to locate</param>
            <returns>index of the node</returns>
        </member>
        <member name="M:Nevron.Chart.NGroupTreeMapNode.GetChildAt(System.Int32)">
            <summary>
            Gets the child node at the specified index
            </summary>
            <param name="index">index</param>
            <returns>node at the specified index</returns>
        </member>
        <member name="M:Nevron.Chart.NGroupTreeMapNode.SetChildIndex(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Sets a new index of the specified child node
            </summary>
            <param name="node">node whose index to change</param>
            <param name="index">new index</param>
            <returns>previous node index</returns>
        </member>
        <member name="M:Nevron.Chart.NGroupTreeMapNode.IsChild(Nevron.Dom.INNode)">
            <summary>
            Determines whether the specified node is a child node for this container
            </summary>
            <param name="node">node to check</param>
            <returns>true if it is a child node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Chart.NGroupTreeMapNode.ChildrenCount(Nevron.Filters.INFilter)">
            <summary>
            Returns the number of child nodes which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <returns>children count, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Chart.NGroupTreeMapNode.Children(Nevron.Filters.INFilter)">
            <summary>
            Obtains the child nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Chart.NGroupTreeMapNode.AccumulateChildren(Nevron.Filters.INFilter,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the children contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="list">list to which to append the child nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Chart.NGroupTreeMapNode.IsDescendant(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Queries whether the specified node is a descendant of this node
            </summary>
            <param name="node">node to look for</param>
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>true if the node is a descendant node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Chart.NGroupTreeMapNode.DescendantsCount(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Returns the number of descendant nodes, which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>count of descendants, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Chart.NGroupTreeMapNode.Descendants(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Obtains the descentant nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Chart.NGroupTreeMapNode.AccumulateDescendants(Nevron.Filters.INFilter,System.Int32,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the descendants contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <param name="list">list to which to append the descendant nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Chart.NGroupTreeMapNode.GetEnumerator(Nevron.Filters.INFilter)">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Chart.NGroupTreeMapNode.GetEnumerator">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <returns>node enumerator</returns>
        </member>
        <member name="T:Nevron.Chart.NTreeMapNodeCollection">
            <summary>
            Represents a collection of NTreeMapNode objects.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTreeMapNodeCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTreeMapNodeCollection.Item(System.Int32)">
            <summary>
            Strongly typed indexer
            </summary>
        </member>
        <member name="T:Nevron.Chart.NValueTreeMapNode">
            <summary>
            A tree map node that represents a series of three map nodes
            </summary>
        </member>
        <member name="M:Nevron.Chart.NValueTreeMapNode.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NValueTreeMapNode.#ctor(System.Double,System.Double,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="value"></param>
            <param name="change"></param>
            <param name="label"></param>
        </member>
        <member name="M:Nevron.Chart.NValueTreeMapNode.#ctor(System.Double,System.Double,System.String,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="value"></param>
            <param name="change"></param>
            <param name="label"></param>
            <param name="fillStyle"></param>
        </member>
        <member name="P:Nevron.Chart.NValueTreeMapNode.Value">
            <summary>
            Gets or sets the value of this node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NValueTreeMapNode.Change">
            <summary>
            Gets or sets the change of this node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NValueTreeMapNode.ChangeValueType">
            <summary>
            Gets or sets whether the change is an absolute or percentage value.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NTreeMapNode">
            <summary>
            Base class for all tree map nodes
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTreeMapNode.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTreeMapNode.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="label"></param>
        </member>
        <member name="M:Nevron.Chart.NTreeMapNode.#ctor(System.String,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="label"></param>
            <param name="fillStyle"></param>
        </member>
        <member name="P:Nevron.Chart.NTreeMapNode.Valid">
            <summary>
            Gets whether this node is valid
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTreeMapNode.Bounds">
            <summary>
            Gets the bounds of this node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTreeMapNode.Margins">
            <summary>
            Gets or sets the margins of the node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTreeMapNode.Padding">
            <summary>
            Gets or sets the margins of the node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTreeMapNode.StrokeStyle">
            <summary>
            Gets or sets the stroke of the node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTreeMapNode.FillStyle">
            <summary>
            Gets or sets the border of the node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTreeMapNode.LabelTextStyle">
            <summary>
            Gets or sets the label text style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTreeMapNode.LabelFitModes">
            <summary>
            Gets or sets the label fit modes
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTreeMapNode.MinAutoScale">
            <summary>
            Gets or sets the minimum auto scale that is allowed before the label is hidden
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTreeMapNode.Format">
            <summary>
            Gets or sets the format string of the label displayed by the node.
            </summary>
            <remarks>
            With the help of the format string you can specify what content 
            must be displayed in the data labels. The formatting commands 
            depend on the series.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NTreeMapNode.LegendFormat">
            <summary>
            The format string used to format the text displayed on the legend
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTreeMapNode.Label">
            <summary>
            The label of this node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTreeMapNode.InteractivityStyle">
            <summary>
            Gets or sets the interactivity style of this node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTreeMapNode.ParentGroupNode">
            <summary>
            Gets the parent tree map node of this node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTreeMapNode.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NTreeMapNode.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="F:Nevron.Chart.NTreeMapNode.m_Bounds">
            <summary>
            The node bounds
            </summary>
        </member>
        <member name="T:Nevron.Chart.NChartLabelLayoutSettings">
            <summary>
            Controls options related to data label layout on a per chart level.
            </summary>
            <remarks>
            This object is relevant for Cartesian, Polar and Radar charts.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NChartLabelLayoutSettings.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartLabelLayoutSettings.EnableInitialPositioning">
            <summary>
            Gets or sets a value indicating whether initial label positioning is enabled.
            </summary>
            <remarks>
            If this property is set to true the control automatically chooses an initial position for each label so that 
            there are minimum overlaps. The layout selects one of positions that are proposed by the series that owns the label.
            In case this property is set to false, the default position is used for each label.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NChartLabelLayoutSettings.RemoveOverlappedLabels">
            <summary>
            Gets or sets a property indicating whether labels that overlap after initial label positioning should be removed from display.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartLabelLayoutSettings.EnableLabelAdjustment">
            <summary>
            Gets or sets a value indicating whether label position adjustment is enabled.
            </summary>
            <remarks>
            If this property is set to true the control adjusts the label positions after the initial placement.
            Labels can be moved in any direction to avoid overlapping.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NChartLabelLayoutSettings.MaxLayoutItems">
            <summary>
            Specifies the maximum number of items (labels and obstacles) that can be processed by the automatic layout system.
            </summary>
            <remarks>
            If the number of layout items in the chart exceeds this value, automatic layout is not performed.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NChartLabelLayoutSettings.MinLabelDistance">
            <summary>
            Gets or sets the length of the minimum label distance in case labels are instructed to not overlap
            </summary>
        </member>
        <member name="T:Nevron.Chart.NSeriesLabelLayoutSettings">
            <summary>
            Controls options related to data label layout on a per series level.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSeriesLabelLayoutSettings.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesLabelLayoutSettings.EnableDataPointSafeguard">
            <summary>
            Gets or sets a value indicating whether data points of this series are protected from being overlapped by labels.
            </summary>
            <remarks>
            If this property is set to false the data points of this series can be overlapped by data labels.
            Otherwise the data points protect their characteristic points (like min and max) from being overlapped.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NSeriesLabelLayoutSettings.DataPointSafeguardSize">
            <summary>
            Specifies the size of the safeguard area that protects data points from being overlaped by labels.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesLabelLayoutSettings.LabelLocations">
            <summary>
            Gets or sets an array that contains possible initial label locations that are used by the label layout system.
            </summary>
            <remarks>
            The locations are taken into account when the EnableInitialPositioning property of the chart's LabelLayoutSettings object is set to true 
            and the UseLabelLocations property is set to true. If the initial label positioning is disabled for this chart or for this series, then 
            the standard label location is used for each label, as specified by the relevant NDataLabelStyle object.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NSeriesLabelLayoutSettings.UseLabelLocations">
            <summary>
            Gets or sets a value indicating whether the initial locations in the LabelLocations collection should be used.
            </summary>
            <remarks>
            This property can enable or disable the initial label positioning on a per-series basis. If initial positioning is disabled
            the initial location of each label is specified by the respective NDataLabelStyle object.
            </remarks> 
        </member>
        <member name="P:Nevron.Chart.NSeriesLabelLayoutSettings.InvertLocationsForInvertedDataPoints">
            <summary>
            Gets or sets a value indicating whether label locations should be inverted vertically for data points with inverted vertical orientation.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesLabelLayoutSettings.OutOfBoundsLocationMode">
            <summary>
            Specifies the treatment mode for locations that fall partially out of the plot bounds.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesLabelLayoutSettings.InvertLocationsIfIgnored">
            <summary>
            Gets or sets a value indicating whether proposed label locations should be inverted if all of them are outside the chart bounds and are ignored.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NXYAreaSeries">
            <summary>
            Abstract base class for Area, Smooth Area and High-Low.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NXYAreaSeries.#ctor">
            <summary>
            Default Contructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NXYAreaSeries.Palette">
            <summary>
            Gets or sets the palette assocaited with the area
            </summary>
        </member>
        <member name="P:Nevron.Chart.NXYAreaSeries.DepthPercent">
            <summary>
            Controls the depth of the area in percent of the floor grid cell's depth.
            </summary>
            <remarks>
            By default this property is set to 50.
            </remarks>
            <example>
            The following code sets the area depth percent to 70.
            <code lang = 'VB'>
            area.DepthPercent = 70
            </code>
            <code>
            area.DepthPercent = 70;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NXYAreaSeries.DropLines">
            <summary>
            Controls the visibility of the vertical area lines.
            </summary>
            <remarks>
            Area series can be configured to show vertical lines between the 
            displayed area segments. This property controls the visibility of these lines. 
            By default set to false.
            </remarks>
            <example>
            The following code will show the high low drop lines.
            <code lang = 'VB'>
            area.DropLines = True
            </code>
            <code>
            hilow.DropLines = true;
            </code>
            </example>
        </member>
        <member name="T:Nevron.Chart.NPolarAreaSeries">
            <summary>
            Represents a Polar Area series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPolarAreaSeries.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPolarAreaSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NPolarLineSeries">
            <summary>
            Represents a Polar Line series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPolarLineSeries.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPolarLineSeries.SamplingMode">
            <summary>
            Whether or not the line series will use sampling
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPolarLineSeries.FilterType">
            <summary>
            The type of filtering used by the line series
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPolarLineSeries.SampleDistance">
            <summary>
            Gets the sample distance when the series uses sampling
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPolarLineSeries.CloseContour">
            <summary>
            Gets or sets a value indicating whether the series forms a closed contour.
            </summary>
            <remarks>
            If this property is set to true the first and the 
            last data point are connected by a line segment.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NPolarLineSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NPolarPointSeries">
            <summary>
            Represents a Polar Point series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPolarPointSeries.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPolarPointSeries.PointShape">
            <summary>
            Controls the point shape
            </summary>
            <remarks>
            By default set to Bar
            </remarks>
            <example>
            The following code changes the shape of the points.
            <code lang = 'VB'>
            point.PointShape = PointShape.Sphere
            </code>
            <code>
            point.PointShape = PointShape.Sphere;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NPolarPointSeries.Size">
            <summary>
            Controls the size of the value point marks.
            </summary>
            <remarks>
            This property specifies the points width, height and depth dimensions. 
            By default set to 4 percent of the chart size
            </remarks>
            <example>
            The following example increases the size of the points.
            <code lang = 'VB'>
            pointSeries.Size = New NLength(5.5F, NRelativeUnit.ParentPercentage)
            </code>
            <code>
            pointSeries.Size = New NLength(5.5F, NRelativeUnit.ParentPercentage);
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NPolarPointSeries.SphereDetail">
            <summary>
            When the point shape is set to Sphere this property controls the level 
            of detail of the spheres.
            </summary>
            <remarks>
            The default level of detail is set to Highest. You can decrease the level 
            of detail to speed-up rendering when displaying multiple data points.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NPolarPointSeries.CustomShape">
            <summary>
            Gets or set a custom shape object that is used for display of data points.
            </summary>
            <remarks>
            This property is regarded when the value of the BubbleShape property is set to PointShape.Custom.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NPolarPointSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NCrossPolarAxisAnchor">
            <summary>
            Represents an axis anchor crossing the polar axis attached to it to either a value on
            another polar axis or a model coordinate.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCrossPolarAxisAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCrossPolarAxisAnchor.#ctor(Nevron.Chart.PolarAxisOrientation)">
            <summary>
            Initializer constructor
            </summary>
            <param name="axisOrientation"></param>
        </member>
        <member name="M:Nevron.Chart.NCrossPolarAxisAnchor.#ctor(Nevron.Chart.PolarAxisOrientation,Nevron.Chart.NAxisCrossing)">
            <summary>
            Initialzer constructor
            </summary>
            <param name="axisOrientation"></param>
            <param name="axisCrossing"></param>
        </member>
        <member name="P:Nevron.Chart.NCrossPolarAxisAnchor.Crossings">
            <summary>
            Gets or sets the axis crossing associated with anchor
            </summary>
            <remarks>
            The axis crossing collection can contain an unlimited number of crossings however only the
            first two valid crossings will be regarded by the anchor
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NCrossPolarAxisAnchor.PolarAxisOrientation">
            <summary>
            Gets or sets the orientation of the axis attached to this crossing anchor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDockPolarAxisAnchor">
            <summary>
            Represents a polar axis anchor, docking the polar axis attached to it to one of the polar
            chart dock zones
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDockPolarAxisAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDockPolarAxisAnchor.#ctor(Nevron.Chart.PolarAxisDockZone)">
            <summary>
            Initializer constructor
            </summary>
            <param name="dockZone"></param>
        </member>
        <member name="M:Nevron.Chart.NDockPolarAxisAnchor.#ctor(Nevron.Chart.PolarAxisDockZone,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="dockZone"></param>
            <param name="createNewZoneLevel"></param>
        </member>
        <member name="M:Nevron.Chart.NDockPolarAxisAnchor.#ctor(Nevron.Chart.PolarAxisDockZone,System.Boolean,System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="dockZone"></param>
            <param name="createNewZoneLevel"></param>
            <param name="beginPercent"></param>
            <param name="endPercent"></param>
        </member>
        <member name="M:Nevron.Chart.NDockPolarAxisAnchor.#ctor(Nevron.Chart.PolarAxisDockZone,System.Boolean,Nevron.Chart.RulerOrientation,System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="dockZone"></param>
            <param name="createNewZoneLevel"></param>
            <param name="rulerOrientation"></param>
            <param name="beginPercent"></param>
            <param name="endPercent"></param>
        </member>
        <member name="P:Nevron.Chart.NDockPolarAxisAnchor.DockZone">
            <summary>
            Gets or sets the polar axis dock zone where this anchor will dock the 
            axis attached to it
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDockPolarAxisAnchor.SynchronizeRulerOrientation">
            <summary>
            Gets or sets a value indicating whether this anchor should synchronize the 
            ruler orientation of the axis with the axis zone
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDockPolarAxisAnchor.BeforeSpace">
            <summary>
            Specifies spacing of the level before the other levels in the zone (if any)
            </summary>
            <remarks>
            This property takes effect only when the property CreateNewZoneLevel is set to true.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NDockPolarAxisAnchor.AfterSpace">
            <summary>
            Specifies spacing that should be leaved after the level of the axis before other 
            levels are added in the zone.
            </summary>
            <remarks>
            This property takes effect only when the property CreateNewZoneLevel is set to true.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NDockPolarAxisAnchor.CreateNewZoneLevel">
            <summary>
            Gets or sets a value indicating whether this anchor will create a new 
            zone level for the axis or use the last created one.
            </summary>
            <remarks>
            If there are no levels in the zone the anchor will always create a zone 
            level. Note that the BeforeSpace and AfterSpace properties depend on the 
            value of this property.
            </remarks>
        </member>
        <member name="F:Nevron.Chart.NDockPolarAxisAnchor.m_BeforeSpace">
            <summary>
            Spacing of the level before content starts
            </summary>
        </member>
        <member name="F:Nevron.Chart.NDockPolarAxisAnchor.m_AfterSpace">
            <summary>
            Spacing of the level after content ends
            </summary>
        </member>
        <member name="T:Nevron.Chart.NPolarAxisAnchor">
            <summary>
            The base for all polar axis anchors
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPolarAxisAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPolarAxisAnchor.#ctor(System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="beginPercent"></param>
            <param name="endPercent"></param>
        </member>
        <member name="P:Nevron.Chart.NPolarAxisAnchor.PaintReflection">
            <summary>
            Controls whether the axis will paint the reflection.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NPolarAxis">
            <summary>
            Represents a polar axis.
            </summary>
            <remarks>
            The chart has one polar axis on which all polar series are always scaled
            The following code obtains the polar axis of the chart
            <code lang = 'VB'>
            Dim polarAxis As NPolarAxis = CType(NChart.Axis(StandardAxis.Polar), NPolarAxis)
            </code>
            <code>
            NPolarAxis polarAxis = (NPolarAxis)NChart.Axis(StandardAxis.Polar);
            </code>
            The polar axis exposes polar specific functionality.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NPolarAxis.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPolarAxis.#ctor(System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="valueOrAngle"></param>
        </member>
        <member name="P:Nevron.Chart.NPolarAxis.Anchor">
            <summary>
            Gets or sets the axis anchor controlling how the axis is attached to the chart area.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPolarAxis.Name">
            <summary>
            The name of the axis. 
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRadarAxis">
            <summary>
            Represents a radar axis.
            </summary>
            <remarks>
            The chart has one radar axis on which all radar series are always scaled
            The following code obtains the radar axis of the chart
            <code lang = 'VB'>
            Dim radarAxis As NRadarAxis = CType(chart.Axis(StandardAxis.Radar), NRadarAxis)
            </code>
            <code>
            NRadarAxis radarAxis = (NRadarAxis)chart.Axis(StandardAxis.Radar);
            </code>
            The radar axis exposes radar specific functionality.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NRadarAxis.Title">
            <summary>
            Gets or sets the title of the axis
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadarAxis.TitleTextStyle">
            <summary>
            Gets/sets the text style of the title
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadarAxis.TitleOffset">
            <summary>
            Gets or sets the offset of the title from the axis scale
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadarAxis.TitleAngle">
            <summary>
            Gets or sets the angle of the title text
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadarAxis.TitleFitMode">
            <summary>
            Gets or sets the radar title fit mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadarAxis.TitlePositionMode">
            <summary>
            Gets or sets the radar title position mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadarAxis.TitleMaxWidth">
            <summary>
            Gets or sets the maximum width of the axis title
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadarAxis.TitleAutomaticAlignment">
            <summary>
            Whether the axis title uses automatic (left, right, center) alignment depending on the axis orientation
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadarAxis.Anchor">
            <summary>
            Gets or sets the axis anchor controlling how the axis is attached to the chart area.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadarAxis.Name">
            <summary>
            The name of the axis. 
            </summary>
        </member>
        <member name="T:Nevron.Chart.NKagiData">
            <summary>
            Represents a kagi data segment
            </summary>
        </member>
        <member name="P:Nevron.Chart.NKagiData.DataIndex">
            <summary>
            The data index of this kagi data
            </summary>
        </member>
        <member name="P:Nevron.Chart.NKagiData.TrendDirection">
            <summary>
            The trend direction 1 means positive, -1 negative
            </summary>
        </member>
        <member name="P:Nevron.Chart.NKagiData.PriorHigh">
            <summary>
            The prior segment high
            </summary>
        </member>
        <member name="P:Nevron.Chart.NKagiData.PriorLow">
            <summary>
            The prior segment low
            </summary>
        </member>
        <member name="P:Nevron.Chart.NKagiData.X">
            <summary>
            The segment calculated x value
            </summary>
        </member>
        <member name="P:Nevron.Chart.NKagiData.Y">
            <summary>
            The segment calculated y value
            </summary>
        </member>
        <member name="P:Nevron.Chart.NKagiData.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NKagiData.GetAttributeByName(System.String)">
            <summary>
            Gets a child or descendant attribute by its name
            </summary>
            <param name="attributeName">child name or full attribute name</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NKagiData.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NKagiData.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
            <summary>
            Sets a child or descendant attribute by its name
            </summary>
            <param name="attributeName"></param>
            <param name="attribute"></param>
        </member>
        <member name="T:Nevron.Chart.NKagiEnumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.NKagiEnumerator.#ctor(Nevron.Chart.NKagiSeries)">
            <summary>
            Initializer constructor
            </summary>
            <param name="series"></param>
        </member>
        <member name="P:Nevron.Chart.NKagiEnumerator.Current">
            <summary>
            Gets the current kagi data
            </summary>
        </member>
        <member name="M:Nevron.Chart.NKagiEnumerator.MoveNext">
            <summary>
            Advances the enumerator to next position
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NKagiEnumerator.Reset">
            <summary>
            Resets the enumerator
            </summary>
        </member>
        <member name="T:Nevron.Chart.NPointAndFigureData">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPointAndFigureData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointAndFigureData.DataIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointAndFigureData.ColumnIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointAndFigureData.ColumnDirection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointAndFigureData.HiValueIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointAndFigureData.LowValueIndex">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.NPointAndFigureEnumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPointAndFigureEnumerator.#ctor(Nevron.Chart.NPointAndFigureSeries)">
            <summary>
            
            </summary>
            <param name="series"></param>
        </member>
        <member name="P:Nevron.Chart.NPointAndFigureEnumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPointAndFigureEnumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NPointAndFigureEnumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRenkoData">
            <summary>
            Represents renko data object
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRenkoData.BeginY">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRenkoData.EndY">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRenkoData.BoxCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRenkoData.Direction">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRenkoData.DirectionChanged">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLineBreakData">
            <summary>
            Represents line break data
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLineBreakData.HighY">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLineBreakData.LowY">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLineBreakData.Direction">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLineBreakData.DirectionChanged">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLineBreakEnumerator">
            <summary>
            Line Break Enumerator
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLineBreakEnumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLineBreakEnumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NRadarAreaSeries">
            <summary>
            Represents a radar area series.
            </summary>
            <remarks>
            To display a Radar Area series you have to create an instance of this type and 
            add it to the series collection of a Radar chart.
            <code lang = 'VB'>
            Dim radarArea As New NRadarAreaSeries
            radarChart.Series.Add(radarArea)
            </code>
            <code>
            NRadarAreaSeries radarArea = new NRadarAreaSeries();
            radarChart.Series.Add(radarArea);
            </code>
            </remarks>
            <seealso cref="T:Nevron.Chart.NSeries"/>
        </member>
        <member name="M:Nevron.Chart.NRadarAreaSeries.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadarAreaSeries.MultiAreaMode">
            <summary>
            Controls the combine mode of the radar area series.
            </summary>
            <remarks>
            This property determines the way in which this series interacts with 
            other radar area series in the smae chart. 
            By default set to MultiAreaMode.Series
            </remarks>
            <example>
            The following code will create a stack area chart.
            <code lang = 'VB'>
            Dim area1 As NAreaSeries =  Chart.Series.Add(SeriesType.Area) 
            Dim area2 As NAreaSeries =  Chart.Series.Add(SeriesType.Area) 
            area1.Add(12)
            area1.Add(24)
            area1.Add(42)
            area2.Add(24)
            area2.Add(34)
            area2.Add(16)
            area2.MultiAreaMode = MultiAreaMode.Stacked
            </code>
            <code>
            NAreaSeries area1 = Chart.Series.Add(SeriesType.Area);
            NAreaSeries area2 = Chart.Series.Add(SeriesType.Area);
            area1.Add(12);
            area1.Add(24);
            area1.Add(42);
            area2.Add(24);
            area2.Add(34);
            area2.Add(16);
            area2.MultiAreaMode = MultiAreaMode.Stacked; 
            </code>
            </example>
            <seealso cref="T:Nevron.Chart.MultiAreaMode"/>
        </member>
        <member name="M:Nevron.Chart.NRadarAreaSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NRadarLineSeries">
            <summary>
            Represents a radar line series.
            </summary>
            <remarks>
            To display a Radar Line series you have to create an instance of this type and 
            add it to the series collection of a Radar chart.
            <code lang = 'VB'>
            Dim radarLine As New NRadarLineSeries
            radarChart.Series.Add(radarLine)
            </code>
            <code>
            NRadarLineSeries radarLine = new NRadarLineSeries();
            radarChart.Series.Add(radarLine);
            </code>
            </remarks>
            <seealso cref="T:Nevron.Chart.NSeries"/>
        </member>
        <member name="M:Nevron.Chart.NRadarLineSeries.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRadarLineSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NRangeSeries">
            <summary>
            Represents a range series.
            </summary>
            <remarks>
            You can create an instance of this class with the help of the
            Add method of the NSeriesCollection class.
            <code lang = 'VB'>
            Dim rangeSeries As NRangeSeries =  chart.Series.Add(SeriesType.Range)
            </code>
            <code>
            NRangeSeries rangeSeries = chart.Series.Add(SeriesType.Range);
            </code>
            </remarks>
            <seealso cref="T:Nevron.Chart.NSeries"/>
            <seealso cref="T:Nevron.Chart.NXYScatterSeries"/>
            <seealso cref="T:Nevron.Chart.NXYZScatterSeries"/>
        </member>
        <member name="M:Nevron.Chart.NRangeSeries.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeSeries.GetDataSeriesInfos">
            <summary>
            Gets the data series infos
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NRangeSeries.Shape">
            <summary>
            Controls the shape of the data points.
            </summary>
            <remarks>
            By default set to Bar
            </remarks>
            <example>
            The following code changes the style of the shapes.
            <code lang = 'VB'>
            shapeSeries.Shape = BarShape.Cone
            </code>
            <code>
            shapeSeries.Shape = BarShape.Cone;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NRangeSeries.BarEdgePercent">
            <summary>
            Controls the edge percent of smooth edge bars and cut edge bars. 
            The edge percent must be between 0 and 50.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSeries.HasTopEdge">
            <summary>
            Controls the visibility of the top edge of smooth edge bars and cut edge bars.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSeries.HasBottomEdge">
            <summary>
            Controls the visibility of the bottom edge of smooth edge bars and cut edge bars.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NRangeSeriesBase">
            <summary>
            Abstract base class for Range and Vector series.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSeriesBase.Y2Values">
            <summary>
            Gets or sets the Data Series that holds the Y values of the vector end points.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSeriesBase.X2Values">
            <summary>
            Gets or sets the Data Series that holds the X values of the vector end points.
            </summary>
            <remarks>
            The X2Values are taken into account only if the UseXValues property is set to true.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NRangeSeriesBase.Z2Values">
            <summary>
            Gets or sets the Data Series that holds the Z values of the vector end points.
            </summary>
            <remarks>
            The Z2Values are taken into account only if the UseZValues property is set to true.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NRangeSeriesBase.GetDataSeriesInfos">
            <summary>
            Gets the data series infos
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NVectorSeries">
            <summary>
            Represents a vector series.
            </summary>
            <remarks>
            You can create an instance of this class with the help of the
            Add method of the NSeriesCollection class.
            <code lang = 'VB'>
            Dim vectorSeries As NVectorSeries =  chart.Series.Add(SeriesType.Vector)
            </code>
            <code>
            NVectorSeries vectorSeries = chart.Series.Add(SeriesType.Vector);
            </code>
            </remarks>
            <seealso cref="T:Nevron.Chart.NSeries"/>
            <seealso cref="T:Nevron.Chart.NXYScatterSeries"/>
            <seealso cref="T:Nevron.Chart.NXYZScatterSeries"/>
        </member>
        <member name="M:Nevron.Chart.NVectorSeries.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NVectorSeries.ArrowheadShape">
            <summary>
            Gets or sets the shape of the arrowhead.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NVectorSeries.ArrowheadWidthFactor">
            <summary>
            Gets or sets a value in the range [0, 1] that controls the arrowhead width.
            The width is relative to the vector length.
            </summary>
            <remarks>
            By default the arrowhead height factor is set to 0.05, which means that the arrowhead 
            height is 5 percent of the vector length in model units.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NVectorSeries.ArrowheadHeightFactor">
            <summary>
            Gets or sets a value in the range [0, 1] that controls the arrowhead height.
            The height is relative to the vector length.
            </summary>
            <remarks>
            By default the arrowhead height factor is set to 0.1, which means that the arrowhead 
            height is one tenth of the vector length in model units.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NVectorSeries.Mode">
            <summary>
            Gets or sets the vector series mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NVectorSeries.MinArrowHeadSize">
            <summary>
            Gets or sets the min size of the vector arrowhead in NSize format.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NVectorSeries.MaxArrowHeadSize">
            <summary>
            Gets or sets the max size of the vector arrowhead in NSize format.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NVectorSeries.MinVectorLength">
            <summary>
            Controls the minimal vector size.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NVectorSeries.MaxVectorLength">
            <summary>
            Controls the maximal vector size.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NVectorSeries.VectorLengthScale">
            <summary>
            Gets or sets the vector length scale
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVectorSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NCircularRimStyle">
            <summary>
            Represents circular rim style
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCircularRimStyle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCircularRimStyle.#ctor(Nevron.Chart.CircularRimPattern,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="pattern"></param>
            <param name="patternDepth"></param>
        </member>
        <member name="M:Nevron.Chart.NCircularRimStyle.#ctor(Nevron.Chart.CircularRimPattern,Nevron.GraphicsCore.NLength,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="pattern"></param>
            <param name="offset"></param>
            <param name="patternDepth"></param>
        </member>
        <member name="P:Nevron.Chart.NCircularRimStyle.Visible">
            <summary>
            Gets or sets the visibility of the rim
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCircularRimStyle.Offset">
            <summary>
            Gets or sets the offset of the rim from the circle radius
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCircularRimStyle.PatternDepth">
            <summary>
            Gets or sets the depth of the rim pattern
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCircularRimStyle.FillStyle">
            <summary>
            Gets or sets the fill style applied to the knob background.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCircularRimStyle.StrokeStyle">
            <summary>
            Gets or sets the stroke style applied to the knob background
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCircularRimStyle.ShadowStyle">
            <summary>
            Gets or sets the shadow style of the rim
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCircularRimStyle.PatternRepeatCount">
            <summary>
            Gets the repeat count of the rim pattern
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCircularRimStyle.Pattern">
            <summary>
            Gets or sets the rim pattern of this knob
            </summary>
        </member>
        <member name="T:Nevron.Chart.NKnobIndicator">
            <summary>
            Represents a knob value indicator
            </summary>
        </member>
        <member name="M:Nevron.Chart.NKnobIndicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NKnobIndicator.#ctor(Nevron.Chart.IndicatorPaintOrder)">
            <summary>
            Initializer constructor
            </summary>
            <param name="paintOrder"></param>
        </member>
        <member name="P:Nevron.Chart.NKnobIndicator.MarkerShape">
            <summary>
            Gets or set the shape of the marker
            </summary>
        </member>
        <member name="P:Nevron.Chart.NKnobIndicator.MarkerSize">
            <summary>
            Gets or sets the marker size
            </summary>
        </member>
        <member name="P:Nevron.Chart.NKnobIndicator.MarkerPaintOrder">
            <summary>
            Gets or set the marker paint order relative to the inner and outer knob rims.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NKnobIndicator.MarkerOffset">
            <summary>
            Gets or sets the marker offset from the outer rim of the knob
            </summary>
        </member>
        <member name="P:Nevron.Chart.NKnobIndicator.OuterRimStyle">
            <summary>
            Gets or sets the offset of the inner radius of the knob from the knob rim
            </summary>
            <summary>
            Gets or sets the style of the outer knob rim
            </summary>
        </member>
        <member name="P:Nevron.Chart.NKnobIndicator.InnerRimStyle">
            <summary>
            Gets or sets the style of the inner knob rim
            </summary>
        </member>
        <member name="P:Nevron.Chart.NKnobIndicator.PaintEffect">
            <summary>
            Gets or sets the paint effect applied after the knob is painted
            </summary>
        </member>
        <member name="P:Nevron.Chart.NKnobIndicator.PaintEffectOffset">
            <summary>
            Gets or sets the offset of the paint effect from the outer knob rim
            </summary>
        </member>
        <member name="T:Nevron.Chart.NGaugeBackgroundAdorner">
            <summary>
            The base of all effects that can be applied after a shape or panel is painted on
            a 2D drawing surface
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGaugeBackgroundAdorner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGaugeBackgroundAdorner.#ctor(Nevron.Chart.GaugeBackroundAdornerShape)">
            <summary>
            Initializer constructor
            </summary>
            <param name="shape"></param>
        </member>
        <member name="P:Nevron.Chart.NGaugeBackgroundAdorner.Shape">
            <summary>
            Gets/sets the paint effect shape
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGaugeBackgroundAdorner.PaintOrder">
            <summary>
            Controls the background adorner paint order
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGaugeBackgroundAdorner.CornerRounding">
            <summary>
            Gets/sets the corner rounding when Shape is RoundedRect
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGaugeBackgroundAdorner.FillStyle">
            <summary>
            Gets or sets the adorner fill style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGaugeBackgroundAdorner.StrokeStyle">
            <summary>
            Get/sets the adorner border style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGaugeBackgroundAdorner.Margins">
            <summary>
            Gets or sets the margins of the adorner relative to the gauge background
            </summary>
        </member>
        <member name="T:Nevron.Chart.NGaugeCollection">
            <summary>
            Holds all label objects contained in the panels tree.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGaugeCollection.#ctor(Nevron.Chart.NRootPanel)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rootPanel"></param>
        </member>
        <member name="M:Nevron.Chart.NGaugeCollection.GetAt(System.Int32)">
            <summary>
            Returns the NGaugePanel object at at the specified index in the collection.
            </summary>
            <param name="index">index of the legend in the collection</param>
            <returns>a reference to the watermark</returns>
        </member>
        <member name="P:Nevron.Chart.NGaugeCollection.Item(System.Int32)">
            <summary>
            collection indexer method
            </summary>
        </member>
        <member name="T:Nevron.Chart.NNumericDisplayCollection">
            <summary>
            Holds all label objects contained in the panels tree.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNumericDisplayCollection.#ctor(Nevron.Chart.NRootPanel)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rootPanel"></param>
        </member>
        <member name="M:Nevron.Chart.NNumericDisplayCollection.GetAt(System.Int32)">
            <summary>
            Returns the NNumericDisplayPanel object at at the specified index in the collection.
            </summary>
            <param name="index">index of the legend in the collection</param>
            <returns>a reference to the watermark</returns>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplayCollection.Item(System.Int32)">
            <summary>
            collection indexer method
            </summary>
        </member>
        <member name="T:Nevron.Chart.NIndicatorState">
            <summary>
            Represents a state indicator inside a state indicator panel
            </summary>
        </member>
        <member name="M:Nevron.Chart.NIndicatorState.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NIndicatorState.ShapeSizeMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NIndicatorState.Orientation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NIndicatorState.HorzAlignment">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NIndicatorState.VertAlignment">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NIndicatorState.Gap">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NIndicatorState.Shape">
            <summary>
            Gets or set the shape of the marker
            </summary>
        </member>
        <member name="P:Nevron.Chart.NIndicatorState.Text">
            <summary>
            Gets or sets the state text
            </summary>
        </member>
        <member name="P:Nevron.Chart.NIndicatorState.ShapeSize">
            <summary>
            Gets or sets the size of the shape
            </summary>
        </member>
        <member name="P:Nevron.Chart.NIndicatorState.TextSizeInflate">
            <summary>
            Gets or sets the text size inflate
            </summary>
            <remarks>
            This property is regarded only when the shape size mode is set to SameAsText
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NIndicatorState.TextStyle">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRangeIndicatorState">
            <summary>
            Represents a state indicator inside a state indicator panel
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeIndicatorState.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeIndicatorState.Range">
            <summary>
            Gets or sets the range of values in which the state is active
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRangeIndicatorStateCollection">
            <summary>
            Represents a collection of NStateIndicator objects.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeIndicatorStateCollection.Item(System.Int32)">
            <summary>
            Typed collection indexer
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeIndicatorStateCollection.Name">
            <summary>
            User defined name of the node
            </summary>
        </member>
        <member name="T:Nevron.Chart.NStateIndicatorCollection">
            <summary>
            Holds all label objects contained in the panels tree.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStateIndicatorCollection.#ctor(Nevron.Chart.NRootPanel)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rootPanel"></param>
        </member>
        <member name="M:Nevron.Chart.NStateIndicatorCollection.GetAt(System.Int32)">
            <summary>
            Returns the NStateIndicatorPanel object at at the specified index in the collection.
            </summary>
            <param name="index">index of the legend in the collection</param>
            <returns>a reference to the watermark</returns>
        </member>
        <member name="P:Nevron.Chart.NStateIndicatorCollection.Item(System.Int32)">
            <summary>
            collection indexer method
            </summary>
        </member>
        <member name="T:Nevron.Chart.NStateIndicatorPanel">
            <summary>
            Summary description for NIndicatorPanel.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStateIndicatorPanel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStateIndicatorPanel.ActiveStateMode">
            <summary>
            Gets or sets the active state mode of the indicator
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStateIndicatorPanel.Value">
            <summary>
            Gets or sets the value of the state indicator
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStateIndicatorPanel.DefaultState">
            <summary>
            Gets or sets the default state indicator state
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStateIndicatorPanel.States">
            <summary>
            Gets or sets the indicators attached to this gauge panel
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStateIndicatorPanel.Orientation">
            <summary>
            Gets or sets the state indicator panel expand mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStateIndicatorPanel.CellGap">
            <summary>
            Gets or sets the size of the cells in the contained in the display
            </summary>
            <summary>
            Gets or sets the gap between cells contained in the display
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStateIndicatorPanel.InteractivityStyle">
            <summary>
            Gets or sets the interactivity style associated with this panel
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStateIndicatorPanel.AnimationsStyle">
            <summary>
            Gets or sets the animation style
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStateIndicatorPanel.RecalcLayout(Nevron.Chart.NChartRenderingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Nevron.Chart.NStateIndicatorPanel.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NStateIndicatorPanel.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NStateIndicatorPanel.Measure(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NSizeF)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="maxSize"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NCalendarRule">
            <summary>
            The base for the week and month day calendar rules
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCalendarRule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCalendarRule.#ctor(Nevron.NDateTimeRange)">
            <summary>
            Initializer constructor
            </summary>
            <param name="range"></param>
        </member>
        <member name="P:Nevron.Chart.NCalendarRule.Schedule">
            <summary>
            Gets or sets the daily schedule associated with this rule
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCalendarRule.Range">
            <summary>
            Gets or set the range this rule applies to
            </summary>
        </member>
        <member name="T:Nevron.Chart.NCalendarRuleCollection">
            <summary>
            Represents a collection of calendar rules
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCalendarRuleCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDailySchedule">
            <summary>
            Represents a daily schedule
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDailySchedule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDailySchedule.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDailySchedule.EmptyTicks">
            <summary>
            Returns the number of empty ticks in this schedule
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDailySchedule.NonEmptyTicks">
            <summary>
            Returns the number of non empty ticks in this schedule
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDailySchedule.AddTicks(System.Int64@,System.Int64)">
            <summary>
            Adds the specified number of ticks to the tick
            </summary>
            <param name="tick"></param>
            <param name="ticksToAdd"></param>
            <returns>Returns the number of ticks that this schedule was not able to accomodate</returns>
        </member>
        <member name="M:Nevron.Chart.NDailySchedule.ForwardSnapTick(System.Int64)">
            <summary>
            Snaps the tick to the next non empty range if tick is not 
            contained in a non-empty range
            </summary>
            <param name="tick"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDailySchedule.BackwardSnapTick(System.Int64)">
            <summary>
            Snaps the tick to the last non empty tick if tick is not contained in a nonempty range.
            Returns zero if no non-empty ranges exist before tick.
            </summary>
            <param name="tick"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDailySchedule.GetEmptyTicksBefore(System.Int64)">
            <summary>
            Gets the empty ticks before range
            </summary>
            <param name="tick"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDailySchedule.GetTotalTicksFromNonEmptyTicks(System.Int64)">
            <summary>
            Gets the total ticks that elapsed from day unil non empty "tick" is reached
            </summary>
            <param name="tick"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDailySchedule.IsEmptyAt(System.Int64)">
            <summary>
            Returns true if the schedule is empty at the specified tick
            </summary>
            <param name="tick"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDailySchedule.SetHourRange(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Marks the specified hour range as empty or full
            </summary>
            <param name="startHour"></param>
            <param name="endHour"></param>
            <param name="empty"></param>
        </member>
        <member name="M:Nevron.Chart.NDailySchedule.SetTickRange(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Marks the specified tick range as empty or full
            </summary>
            <param name="startTick"></param>
            <param name="endTick"></param>
            <param name="empty"></param>
        </member>
        <member name="M:Nevron.Chart.NDailySchedule.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDailySchedule.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDailyScheduleEnumerator.#ctor(Nevron.Chart.NDailySchedule)">
            <summary>
            Initializer constructor
            </summary>
            <param name="schedule"></param>
        </member>
        <member name="M:Nevron.Chart.NDailyScheduleEnumerator.Reset">
            <summary>
            Resets the enumerator in the beginning
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDailyScheduleEnumerator.GetNextRange(Nevron.Chart.NTickRange@,System.Boolean@)">
            <summary>
            Gets the next tick range in the schedule
            </summary>
            <param name="range"></param>
            <param name="empty"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDateTimeRangeRule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDateTimeRangeRule.#ctor(Nevron.NDateTimeRange,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="range"></param>
            <param name="working"></param>
        </member>
        <member name="P:Nevron.Chart.NDateTimeRangeRule.Working">
            <summary>
            Whether the rule results in working or non working days
            </summary>
        </member>
        <member name="T:Nevron.Chart.NMonthDayRule">
            <summary>
            Represents month of day rule
            </summary>
        </member>
        <member name="M:Nevron.Chart.NMonthDayRule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NMonthDayRule.#ctor(Nevron.Chart.MonthBit,System.Int32,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="month"></param>
            <param name="day"></param>
            <param name="working"></param>
        </member>
        <member name="P:Nevron.Chart.NMonthDayRule.Working">
            <summary>
            Whether the rule results in working or non working days
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMonthDayRule.MonthCount">
            <summary>
            Gets the number of marked months 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMonthDayRule.Months">
            <summary>
            Gets or sets the month bit mask
            </summary>
            <remarks>
            You can also individually 
            </remarks>	
        </member>
        <member name="P:Nevron.Chart.NMonthDayRule.Day">
            <summary>
            Gets or sets the day
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMonthDayRule.January">
            <summary>
            Gets or set a value indicating whether the month day applies to the month of January
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMonthDayRule.February">
            <summary>
            Gets or set a value indicating whether the month day applies to the month of February
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMonthDayRule.March">
            <summary>
            Gets or set a value indicating whether the month day applies to the month of March
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMonthDayRule.April">
            <summary>
            Gets or set a value indicating whether the month day applies to the month of April
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMonthDayRule.May">
            <summary>
            Gets or set a value indicating whether the month day applies to the month of May
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMonthDayRule.June">
            <summary>
            Gets or set a value indicating whether the month day applies to the month of June
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMonthDayRule.July">
            <summary>
            Gets or set a value indicating whether the month day applies to the month of July
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMonthDayRule.August">
            <summary>
            Gets or set a value indicating whether the month day applies to the month of August
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMonthDayRule.September">
            <summary>
            Gets or set a value indicating whether the month day applies to the month of September
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMonthDayRule.October">
            <summary>
            Gets or set a value indicating whether the month day applies to the month of October
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMonthDayRule.November">
            <summary>
            Gets or set a value indicating whether the month day applies to the month of November
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMonthDayRule.December">
            <summary>
            Gets or set a value indicating whether the month day applies to the month of December
            </summary>
        </member>
        <member name="T:Nevron.Chart.NTickRange">
            <summary>
            Represents a range of ticks in a daily schedule
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTickRange.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializer constructor
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
        </member>
        <member name="P:Nevron.Chart.NTickRange.IsNormalized">
            <summary>
            Returns true if the range is normalized.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTickRange.Length">
            <summary>
            Returns the tick length of this range
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTickRange.Contains(System.Int64)">
            <summary>
            Returns true if the range contains the tick
            </summary>
            <param name="tick"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NWeekDayRule">
            <summary>
            Represents a day of week rule
            </summary>
        </member>
        <member name="M:Nevron.Chart.NWeekDayRule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NWeekDayRule.#ctor(Nevron.Chart.WeekDayBit)">
            <summary>
            Initializer constructor
            </summary>
            <param name="weekDays"></param>
        </member>
        <member name="P:Nevron.Chart.NWeekDayRule.WeekDays">
            <summary>
            Gets or sets the weekdays bit mask
            </summary>
            <remarks>
            You can also modify individual bits in the mask using the shortcut properties - Monday, Tuesday, Wednesday etc.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NWeekDayRule.Monday">
            <summary>
            The day Monday.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NWeekDayRule.Tuesday">
            <summary>
            The day Tuesday.  
            </summary>
        </member>
        <member name="P:Nevron.Chart.NWeekDayRule.Wednesday">
            <summary>
            The day Wednesday.  
            </summary>
        </member>
        <member name="P:Nevron.Chart.NWeekDayRule.Thursday">
            <summary>
            The day Thursday
            </summary>
        </member>
        <member name="P:Nevron.Chart.NWeekDayRule.Friday">
            <summary>
            The day Friday.  
            </summary>
        </member>
        <member name="P:Nevron.Chart.NWeekDayRule.Saturday">
            <summary>
            The day Saturday
            </summary>
        </member>
        <member name="P:Nevron.Chart.NWeekDayRule.Sunday">
            <summary>
            The day Sunday
            </summary>
        </member>
        <member name="T:Nevron.Chart.NWorkCalendar">
            <summary>
            Represents a calendar defining rules for working days and hours.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NWorkCalendar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NWorkCalendar.Rules">
            <summary>
            Gets or sets the working rules in the calendar
            </summary>
        </member>
        <member name="P:Nevron.Chart.NWorkCalendar.LCID">
            <summary>
            Culture identifier that provides the calendar for this work calendar
            </summary>
        </member>
        <member name="M:Nevron.Chart.NWorkCalendar.CreateTimeline(Nevron.NDateTimeRange)">
            <summary>
            Creates a timeline from the specified date time range
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NAngularScaleConfigurator">
            <summary>
            Represents a scale configurator that will configure the scale to display angular values.
            </summary>
            <remarks>
            By default the scale will try to decorate the major ticks using a divisor step for the 
            specified cycle length. For example if you specifiy 90 degrees for cycle length the steps that will be 
            considered are 1, 2, 3, 5, 6, 9, 10, 15, 18, 30, 45 and 90 as they represent the possible
            divisors of 90. 
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NAngularScaleConfigurator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAngularScaleConfigurator.CustomStep">
            <summary>
            Specifies the major ticks custom step when the mode is set to CustomStep.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAngularScaleConfigurator.CustomStepXML">
            <summary>
            Implements angle serialization in XML
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAngularScaleConfigurator.CustomSteps">
            <summary>
            Specifies the major ticks custom steps when the mode is set to IrregularSteps.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAngularScaleConfigurator.CustomMinorTicks">
            <summary>
            Specifies the minor ticks when AutoMinor ticks is set to false
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAngularScaleConfigurator.CustomMajorTicks">
            <summary>
            Gets or sets the array of major ticks.
            </summary>
            <remarks>
            When the current axis scale is switched in manual major tick mode 
            you can specify the values at which major ticks are displayed.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NAngularScaleConfigurator.CycleLength">
            <summary>
            Gets or sets the cycle length of the scale. 
            </summary>
            <remarks>
            The scale uses this enum to find a divisor suitable for this length. For angular scales
            this results in proper scale decoration on PI half, PI and 2 * PI. 
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NAngularScaleConfigurator.CycleLengthXML">
            <summary>
            Implements angle serialization in XML
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAngularScaleConfigurator.AngleUnit">
            <summary>
            Gets or sets the angle unit for scale decoration
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAngularScaleConfigurator.AngleUnitXML">
            <summary>
            Implements angle unit serialization in XML
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAngularScaleConfigurator.CustomStepProvider">
            <summary>
            Gets or sets a custom step provider
            </summary>
        </member>
        <member name="T:Nevron.Chart.NCustomTableScaleRow">
            <summary>
            Represents a custom table scale row
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomTableScaleRow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCustomTableScaleRow.Items">
            <summary>
            Gets or sets the items to display in this row
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCustomTableScaleRow.LeftHeader">
            <summary>
            Gets or sets the left row hearder
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCustomTableScaleRow.RightHeader">
            <summary>
            Gets or sets the right row header
            </summary>
        </member>
        <member name="T:Nevron.Chart.NSeriesTableScaleRow">
            <summary>
            Represents a table scale row
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSeriesTableScaleRow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesTableScaleRow.Series">
            <summary>
            Gets or sets the series displayed on this table row
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesTableScaleRow.RowItemDisplayMode">
            <summary>
            Gets or sets the display mode of table data items
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesTableScaleRow.ShowLeftRowHeader">
            <summary>
            Gets or sets whether to show the left row headers
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesTableScaleRow.ShowRightRowHeader">
            <summary>
            Gets or sets whether to show the right row headers
            </summary>
        </member>
        <member name="T:Nevron.Chart.NTableScaleRow">
            <summary>
            Represents a table scale row
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTableScaleRow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTableScaleRow.LeftHeaderLabelStyle">
            <summary>
            Gets or sets the left header label style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTableScaleRow.RightHeaderLabelStyle">
            <summary>
            Gets or sets the left header label style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTableScaleRow.LabelStyle">
            <summary>
            Gets or sets the data label style
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTableScaleRow.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="T:Nevron.Chart.NTableScaleRowCollection">
            <summary>
            Represents a collection of table scale rows
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTableScaleRowCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NTableScaleConfigurator">
            <summary>
            Represents a table scale configurator 
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTableScaleConfigurator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTableScaleConfigurator.HorizontalBorderStyle">
            <summary>
            Gets or sets the horizontal border style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTableScaleConfigurator.VerticalBorderStyle">
            <summary>
            Gets or sets the vertical border style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTableScaleConfigurator.CellMargins">
            <summary>
            The margins of the cell content from the grid lines
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTableScaleConfigurator.TextOffset">
            <summary>
            The offset of the the text from the margin bounds.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTableScaleConfigurator.MarkSize">
            <summary>
            The size of the legend items marks
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTableScaleConfigurator.MarkYOffset">
            <summary>
            The offset of the the text from the margin bounds.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTableScaleConfigurator.InterlaceStyles">
            <summary>
            The interlace style of the legend 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTableScaleConfigurator.Rows">
            <summary>
            Gets or sets the rows in the table
            </summary>
        </member>
        <member name="F:Nevron.Chart.NTableScaleConfigurator.m_HorizontalBorderStyle">
            <summary>
            The maximum number of data items inside a row
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleDecorationAttribute">
            <summary>
            The base of all scale decoration attributes
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleDecorationAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleDecorationAttribute.PartId">
            <summary>
            Controls the id order of the label
            </summary>
            <remarks>
            This value can be used to hit test labels
            </remarks>
        </member>
        <member name="T:Nevron.Chart.NTimeSpanScaleConfigurator">
            <summary>
            Represents a time scale.
            </summary>
            <remarks>
            This class inherits all functionality of its base class (NStandardScaleConfigurator) and adds support for time scales.
            For more information please refer to the Time Scale topic in the Users Guide.
            </remarks>
            <seealso cref="T:Nevron.Chart.NStandardScaleConfigurator"/>
        </member>
        <member name="P:Nevron.Chart.NTimeSpanScaleConfigurator.Origin">
            <summary>
            Specifies the time span of the major tick origin when the UseOrigin property is set to true.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimeSpanScaleConfigurator.CustomStep">
            <summary>
            Specifies the time span step when the major tick mode is set to TimeSpan.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimeSpanScaleConfigurator.CustomSteps">
            <summary>
            Specifies the time span steps when the major tick mode is set to TimeSpans.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimeSpanScaleConfigurator.CustomStepProvider">
            <summary>
            Gets or sets a custom step provider
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimeSpanScaleConfigurator.CustomMajorTicks">
            <summary>
            Gets or sets the array of custom major ticks.
            </summary>
            <remarks>
            When the current axis scale is switched in manual major tick mode 
            you can specify the values at which major ticks are displayed.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NTimeSpanScaleConfigurator.CustomMinorTicks">
            <summary>
            Specifies the minor ticks when AutoMinor ticks is set to false
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimeSpanScaleConfigurator.AutoDateTimeUnits">
            <summary>
            Gets or sets the date time units that are allowed when the scale is 
            scaling automatically
            </summary>
            <remarks>
            By default the scale will contain all possible date time units including: 
            Century, Decade, Year, HalfYear, Quarter, Month, Week, Day, HalfDay, Hour, Minute,
            Second and Millisecond.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NTimeSpanScaleConfigurator.EnableUnitSensitiveFormatting">
            <summary>
            Gets or sets a value indicating whether the scale should use a date time unit sensitive
            formatting depending on the date time unit selected by the scale for automatic labels.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimeSpanScaleConfigurator.DateTimeUnitFormatterPairs">
            <summary>
            Gets or sets a collection of date time unit and associated formatter
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTimeSpanScaleConfigurator.InitFrom(Nevron.Chart.NScaleConfigurator)">
            <summary>
            Copies the settings of another scale configurator
            </summary>
            <param name="scaleConfigurator"></param>
        </member>
        <member name="M:Nevron.Chart.NTimeSpanScaleConfigurator.GetTickRangeInflator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NTimeUnitFormatterPair">
            <summary>
            Represents a pair of a date time unit (day, month, quarter etc.) and associated formatting
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTimeUnitFormatterPair.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTimeUnitFormatterPair.#ctor(Nevron.NTimeUnit,Nevron.Dom.NTimeSpanValueFormatter)">
            <summary>
            Initializer constructor
            </summary>
            <param name="unit"></param>
            <param name="formatter"></param>
        </member>
        <member name="M:Nevron.Chart.NTimeUnitFormatterPair.#ctor(Nevron.NTimeUnit,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="unit"></param>
            <param name="format"></param>
        </member>
        <member name="M:Nevron.Chart.NTimeUnitFormatterPair.#ctor(Nevron.NTimeUnit,Nevron.TimeSpanValueFormat)">
            <summary>
            Initializer constructor
            </summary>
            <param name="unit"></param>
            <param name="format"></param>
        </member>
        <member name="P:Nevron.Chart.NTimeUnitFormatterPair.Unit">
            <summary>
            Gets or sets 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimeUnitFormatterPair.Formatter">
            <summary>
            Gets or sets the date time value formatter associated with the DateTime unit
            </summary>
        </member>
        <member name="T:Nevron.Chart.NTimeUnitFormatterPairCollection">
            <summary>
            Represents a collection of NTimeUnitFormatterPair objects
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTimeUnitFormatterPairCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimeUnitFormatterPairCollection.WeekFormatter">
            <summary>
            Gets or sets the formatter for the week unit.  
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimeUnitFormatterPairCollection.DayFormatter">
            <summary>
            Gets or sets the formatter for the day unit.  
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimeUnitFormatterPairCollection.HalfDayFormatter">
            <summary>
            Gets or sets the formatter for the half of a day unit.  
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimeUnitFormatterPairCollection.HourFormatter">
            <summary>
            Gets or sets the formatter for the hour unit
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimeUnitFormatterPairCollection.MinuteFormatter">
            <summary>
            Gets or sets the formatter for the minute unit.  
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimeUnitFormatterPairCollection.SecondFormatter">
            <summary>
            Gets or sets the formatter for the second unit
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimeUnitFormatterPairCollection.MillisecondFormatter">
            <summary>
            Gets or sets the formatter for the millisecond unit. 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimeUnitFormatterPairCollection.TickFormatter">
            <summary>
            Gets or sets the formatter for the tick unit
            </summary>
        </member>
        <member name="T:Nevron.Chart.NTimelineScaleConfigurator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTimelineScaleConfigurator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimelineScaleConfigurator.TickMode">
            <summary>
            Gets or sets the style of labels generated by the first row
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimelineScaleConfigurator.MinTickDistance">
            <summary>
            Gets or sets the minimum distance between of ticks on the scale when major tick mode is Auto and max tick count mode is MaxDensity
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimelineScaleConfigurator.MaxTickCount">
            <summary>
            Gets or sets the number of ticks when tick mode is auto and max tick count mode is MaxCount
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimelineScaleConfigurator.CustomStep">
            <summary>
            Specifies the time span step when tick mode is set to TimeSpan.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimelineScaleConfigurator.AutoDateTimeUnits">
            <summary>
            Gets or sets the date time units that are allowed when the scale is 
            scaling automatically
            </summary>
            <remarks>
            By default the scale will contain all possible date time units including: 
            Century, Decade, Year, HalfYear, Quarter, Month, Week, Day, HalfDay, Hour, Minute,
            Second and Millisecond.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NTimelineScaleConfigurator.AutoDateTimeUnitsXml">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimelineScaleConfigurator.EnableCalendar">
            <summary>
            Gets or sets a value indicating whether the timeline should
            use the calendar settings, allow you skip days and time from 
            scale transform and calculation
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimelineScaleConfigurator.Calendar">
            <summary>
            Gets the calendar used to determine between working and non working days and time.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimelineScaleConfigurator.Rows">
            <summary>
            Gets the rows contained in this timeline scale configurator
            </summary>
        </member>
        <member name="T:Nevron.Chart.NTimelineScaleRow">
            <summary>
            The base of the range and value timeline scale rows
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTimelineScaleRow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimelineScaleRow.Visible">
            <summary>
            Gets or set the visibility of this timeline scale row
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimelineScaleRow.TickMode">
            <summary>
            Gets or sets the style of labels generated by this row
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimelineScaleRow.MinTickDistance">
            <summary>
            Gets or sets the minimum distance between of ticks on the scale when major tick mode is Auto and max tick count mode is MaxDensity
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimelineScaleRow.MaxTickCount">
            <summary>
            Gets or sets the number of ticks when tick mode is auto and max tick count mode is MaxCount
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimelineScaleRow.CustomStep">
            <summary>
            Specifies the time span step when tick mode is set to TimeSpan.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimelineScaleRow.UseGridStyle">
            <summary>
            Gets or sets a value indicating whether to use the grid line style specified by this row or the 
            default major grid line style specified from the configurator
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimelineScaleRow.GridStyle">
            <summary>
            Gets or sets the style controlling the major grid lines displayed by the scale
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimelineScaleRow.EnableUnitSensitiveFormatting">
            <summary>
            Gets or sets a value indicating whether the labels in this row must use a date time unit 
            sensitive formatting depending on the date time unit selected to decorate the row.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTimelineScaleRow.LabelValueFormatter">
            <summary>
            Gets or sets the value formatter used to format the values of the 
            labels creates in this row
            </summary>
            <remarks>
            This property has effect only when EnableUnitSensitiveFormatting is set to false
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NTimelineScaleRow.DateTimeUnitFormatterPairs">
            <summary>
            Gets or sets a collection of date time unit and associated formatter
            </summary>
            <remarks>
            This property has effect only when EnableUnitSensitiveFormatting is set to true
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NTimelineScaleRow.DateTimeUnitFormatterPairsXML">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTimelineScaleRow.SetPredefinedFormattingForRow(System.Int32)">
            <summary>
            Sets a predefined formatting for a specified row number
            </summary>
            <param name="rowNumber">a value in the range [0, 2]</param>
        </member>
        <member name="M:Nevron.Chart.NTimelineScaleRow.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="T:Nevron.Chart.NTimelineScaleRowCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTimelineScaleRowCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRangeTimelineScaleConfigurator">
            <summary>
            Represents a scale configurator that will produce a timeline scale of multiple levels
            decorated with date / time range labels 
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeTimelineScaleConfigurator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeTimelineScaleConfigurator.CreateSeparatorForEachRow">
            <summary>
            Gets or sets a value indicating whether a ruler separator should be
            created for each row in the scale
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeTimelineScaleConfigurator.LevelTopPadding">
            <summary>
            Gets or sets the top padding applied to the scale levels comprising the range
            timeline scale
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeTimelineScaleConfigurator.LevelBottomPadding">
            <summary>
            Gets or set the bottom padding applied to the scale levels comprising the range
            timeline scale
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeTimelineScaleConfigurator.FirstRow">
            <summary>
            Gets the first row of the timeline
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeTimelineScaleConfigurator.SecondRow">
            <summary>
            Gets the second row of the timeline
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeTimelineScaleConfigurator.ThirdRow">
            <summary>
            Gets the third row of the timeline
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRangeTimelineScaleRow">
            <summary>
            Represents a row of date / time labels in a range timeline scale
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeTimelineScaleRow.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeTimelineScaleRow.LabelStyle">
            <summary>
            Gets or sets the style of labels generated by this row
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeTimelineScaleRow.SetPredefinedFormattingForRow(System.Int32)">
            <summary>
            Sets a predefined formatting for a specified row number
            </summary>
            <param name="rowNumber">a value in the range [0, 2]</param>
        </member>
        <member name="T:Nevron.Chart.NValueTimelineScaleConfigurator">
            <summary>
            Represents a scale configurator that will produce a timeline scale decorated with date / time value labels 
            </summary>
        </member>
        <member name="M:Nevron.Chart.NValueTimelineScaleConfigurator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NValueTimelineScaleConfigurator.FirstRow">
            <summary>
            Gets the first row of the timeline
            </summary>
        </member>
        <member name="P:Nevron.Chart.NValueTimelineScaleConfigurator.SecondRow">
            <summary>
            Gets the second row of the timeline
            </summary>
        </member>
        <member name="P:Nevron.Chart.NValueTimelineScaleConfigurator.ThirdRow">
            <summary>
            Gets the third row of the timeline
            </summary>
        </member>
        <member name="T:Nevron.Chart.NValueTimelineScaleRow">
            <summary>
            Represents a row of date / time labels in a value timeline scale
            </summary>
        </member>
        <member name="M:Nevron.Chart.NValueTimelineScaleRow.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NValueTimelineScaleRow.LabelStyle">
            <summary>
            Gets or sets the style of labels generated by this row
            </summary>
        </member>
        <member name="P:Nevron.Chart.NValueTimelineScaleRow.OuterTickStyle">
            <summary>
            Gets or sets the tick style controlling the apperance of outer ticks generated by this row, when UseTickStyle is set to true
            </summary>
        </member>
        <member name="P:Nevron.Chart.NValueTimelineScaleRow.InnerTickStyle">
            <summary>
            Gets or sets the tick style controlling the apperance of inner ticks generated by this row
            </summary>
        </member>
        <member name="M:Nevron.Chart.NValueTimelineScaleRow.SetPredefinedFormattingForRow(System.Int32)">
            <summary>
            Sets a predefined formatting for a specified row number
            </summary>
            <param name="rowNumber">a value in the range [0, 2]</param>
        </member>
        <member name="T:Nevron.Chart.NCustomSampledScaleDecorator">
            <summary>
            Represents a custom sampled scale decorator
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomSampledScaleDecorator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomSampledScaleDecorator.#ctor(Nevron.Chart.NRangeSampler)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeSampler"></param>
        </member>
        <member name="M:Nevron.Chart.NCustomSampledScaleDecorator.DecorateRanges(System.Collections.Generic.List{Nevron.GraphicsCore.NRange1DD})">
            <summary>
            Called to decorate the list of ranges
            </summary>
            <param name="ranges"></param>
        </member>
        <member name="T:Nevron.Chart.NCustomTickRangeInflator">
            <summary>
            FIX
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomTickRangeInflator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomTickRangeInflator.#ctor(System.Double[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="customTicks"></param>
        </member>
        <member name="P:Nevron.Chart.NCustomTickRangeInflator.CustomTicks">
            <summary>
            Gets or sets the range sampler associated with this range inflator
            </summary>
        </member>
        <member name="T:Nevron.Chart.NClampedRangeSampler">
            <summary>
            Represents a range sampler that will always clamp the incoming value to a fixed range
            </summary>
        </member>
        <member name="M:Nevron.Chart.NClampedRangeSampler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NClampedRangeSampler.#ctor(Nevron.Chart.NRangeSampler,Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeSampler"></param>
            <param name="range"></param>
        </member>
        <member name="T:Nevron.Chart.NAutoTimeSpanStepProvider">
            <summary>
            An automatic time span step provider.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAutoTimeSpanStepProvider.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAutoTimeSpanStepProvider.#ctor(Nevron.Chart.NMaxStepCountProvider)">
            <summary>
            Initilizer constructor
            </summary>
            <param name="maxStepCountProvider"></param>
        </member>
        <member name="M:Nevron.Chart.NAutoTimeSpanStepProvider.#ctor(Nevron.Chart.NMaxStepCountProvider,Nevron.NTimeUnit[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="maxStepCountProvider"></param>
            <param name="timeUnits"></param>
        </member>
        <member name="P:Nevron.Chart.NAutoTimeSpanStepProvider.TimeUnits">
            <summary>
            Gets or sets the time units used by the provider
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoTimeSpanStepProvider.StepBases">
            <summary>
            Gets or sets the step bases
            </summary>
        </member>
        <member name="T:Nevron.Chart.NCascadeAutoTimeSpanStepProvider">
            <summary>
            A date time step provider that will provide a step based on a master, slave date time step provide pair
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCascadeAutoTimeSpanStepProvider.#ctor(Nevron.Chart.NTimeSpanStepProvider,Nevron.Chart.NAutoTimeSpanStepProvider)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NCascadeAutoDateTimeStepProvider">
            <summary>
            A date time step provider that will provide a step based on a master, slave date time step provide pair
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCascadeAutoDateTimeStepProvider.#ctor(Nevron.Chart.NDateTimeStepProvider,Nevron.Chart.NAutoDateTimeStepProvider)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NCustomTimeSpanStepProvider">
            <summary>
            Represents a custom time span step provider
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomTimeSpanStepProvider.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomTimeSpanStepProvider.#ctor(Nevron.NTimeSpan)">
            <summary>
            Initializer constructor
            </summary>
            <param name="step"></param>
        </member>
        <member name="P:Nevron.Chart.NCustomTimeSpanStepProvider.Steps">
            <summary>
            Gets or sets a time span list to be used as steps
            </summary>
        </member>
        <member name="T:Nevron.Chart.NTimeSpanStepProvider">
            <summary>
            Base class for a custom integer step provider
            </summary>
        </member>
        <member name="T:Nevron.Chart.NTimeSpanStepRangeSampler">
            <summary>
            Samples the given range with time span step
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTimeSpanStepRangeSampler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTimeSpanStepRangeSampler.#ctor(Nevron.Chart.NTimeSpanStepProvider)">
            <summary>
            Initializer constructor
            </summary>
            <param name="stepProvider"></param>
        </member>
        <member name="P:Nevron.Chart.NTimeSpanStepRangeSampler.UseCustomOrigin">
            <summary>
            Gets or sets a value indicating whether to use the CustomOrigin property.
            </summary>
            <value><c>true</c> if use custom origin; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nevron.Chart.NTimeSpanStepRangeSampler.CustomOrigin">
            <summary>
            Gets or sets the custom origin of the sampler
            </summary>
            <remarks>
            This property has effect only when UseCustomOrigin is set to true
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NTimeSpanStepRangeSampler.StepProvider">
            <summary>
            Gets or sets the step provider associated with this sampler
            </summary>
            <value>The step provider.</value>
        </member>
        <member name="F:Nevron.Chart.NTimeSpanStepRangeSampler.m_UseCustomOrigin">
            custom origin
        </member>
        <member name="T:Nevron.Chart.NNumericDoubleStepRangeSampler">
            <summary>
            Samples the given range with double step
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNumericDoubleStepRangeSampler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNumericDoubleStepRangeSampler.#ctor(Nevron.Chart.NNumericStepProvider)">
            <summary>
            Initializer constructor
            </summary>
            <param name="numericStepProvider"></param>
        </member>
        <member name="P:Nevron.Chart.NNumericDoubleStepRangeSampler.UseCustomOrigin">
            <summary>
            Gets or sets a value indicating whether to use the CustomOrigin property.
            </summary>
            <value><c>true</c> if use custom origin; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nevron.Chart.NNumericDoubleStepRangeSampler.CustomOrigin">
            <summary>
            Gets or sets the custom origin of the sampler
            </summary>
            <remarks>
            This property has effect only when UseCustomOrigin is set to true
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NNumericDoubleStepRangeSampler.StepProvider">
            <summary>
            Gets or sets the step provider associated with this sampler
            </summary>
            <value>The step provider.</value>
        </member>
        <member name="F:Nevron.Chart.NNumericDoubleStepRangeSampler.m_UseCustomOrigin">
            custom origin
        </member>
        <member name="T:Nevron.Chart.NNumericDynamicStepRangeSampler">
            <summary>
            Samples the given range with dynamic precision (double or decimal)
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNumericDynamicStepRangeSampler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNumericDynamicStepRangeSampler.#ctor(Nevron.Chart.NNumericStepProvider)">
            <summary>
            Initializer constructor
            </summary>
            <param name="numericStepProvider"></param>
        </member>
        <member name="P:Nevron.Chart.NNumericDynamicStepRangeSampler.UseCustomOrigin">
            <summary>
            Gets or sets a value indicating whether to use the CustomOrigin property.
            </summary>
            <value><c>true</c> if use custom origin; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nevron.Chart.NNumericDynamicStepRangeSampler.CustomOrigin">
            <summary>
            Gets or sets the custom origin of the sampler
            </summary>
            <remarks>
            This property has effect only when UseCustomOrigin is set to true
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NNumericDynamicStepRangeSampler.StepProvider">
            <summary>
            Gets or sets the step provider associated with this sampler
            </summary>
            <value>The step provider.</value>
        </member>
        <member name="F:Nevron.Chart.NNumericDynamicStepRangeSampler.m_UseCustomOrigin">
            custom origin
        </member>
        <member name="T:Nevron.Chart.NOffsetValueTranfrom">
            <summary>
            Summary description for NOffsetValueTranfrom.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NOffsetValueTranfrom.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NOffsetValueTranfrom.#ctor(System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="offset"></param>
        </member>
        <member name="T:Nevron.Chart.NAxisMarker">
            <summary>
            Base of all axis markers.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisMarker.#ctor">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisMarker.InteractivityStyle">
            <summary>
            The interactivity style associated with the axis attribute.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisMarker.AnimationsStyle">
            <summary>
            Gets or sets the animation style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisMarker.Text">
            <summary>
            Gets or sets the text displayed by the const line
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisMarker.TextStyle">
            <summary>
            Gets or sets the NTextStyle object applied to the const line text.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisMarker.TextAlignment">
            <summary>
            Gets or sets the label fit mode when BoundsMode is set to Fit
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisMarker.TextOffset">
            <summary>
            Gets or sets the offset of the text from the text location specified by TextContentAlignment
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisMarker.StrokeStyle">
            <summary>
            Gets or sets the stroke style applied to the marker.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisMarker.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NAxisMarker.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="T:Nevron.Chart.NAxisStripe">
            <summary>
            Each axis stripe displayed by the chart axes is represented by an instance of this class.
            </summary>
            <remarks>
            The class has properties controlling the stripe begin and end values as well as 
            its appearance. See the Axis Stripes topic for more information.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NAxisStripe.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisStripe.From">
            <summary>
            Specifies the begin value of the axis stripe.
            </summary>
            <remarks>
            By default set to 0
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NAxisStripe.To">
            <summary>
            Specifies the end value of the axis stripe.
            </summary>
            <remarks>
            By default set to 0
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NAxisStripe.ShowAtWalls">
            <summary>
            Gets or sets an array which specifies the walls that display the axis stripe.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisStripe.FillStyle">
            <summary>
            Gets/sets the fill style of the stripe
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisStripe.ReferenceRanges">
            <summary>
            Gets or sets a collection of value ranges on reference axes. Each entry determines the span 
            of the stripe along the respective axis.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisStripe.IncludeFromValueInAxisRange">
            <summary>
            Whether to include the stripe From value in the axis range
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisStripe.IncludeToValueInAxisRange">
            <summary>
            Whether to include the stripe end value in the axis range
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisStripe.GetShowAtWall(Nevron.Chart.ChartWallType)">
            <summary>
            Check whether the stripe is shown on the specified chart wall.
            </summary>
            <param name="wall">specifies the chart wall</param>
            <returns>true if the stripe is shown, false if not</returns>
        </member>
        <member name="M:Nevron.Chart.NAxisStripe.SetShowAtWall(Nevron.Chart.ChartWallType,System.Boolean)">
            <summary>
            Show the stripe on the specified chart wall.
            </summary>
            <exception cref="T:System.ArgumentException">Raised if a chart wall, which is invalid for this stipe was specified</exception>
            <remarks>
            The component will raise an exception if you try to display the stripe on an invalid wall.
            <para>
            For the vertical axis stripes allowed chart walls are the vertical walls.
            </para>
            <para>
            For the horizontal axis stripes allowed chart walls are the back, front and floor walls.
            </para>
            <para>
            For the depth axis stripes allowed chart walls are the left, rigth and floor walls.
            </para>
            </remarks>
            <param name="wall">specifies the chart wall</param>
            <param name="show">specifies whether to show the stripe or not</param>
        </member>
        <member name="T:Nevron.Chart.NAxisStripeCollection">
            <summary>
            Represents a collection of NAxisStripe objects.
            </summary>
            <remarks>
            An instance of this class is accessible with the help of the Stripes property of the NAxis class.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NAxisStripeCollection.Add(System.Double,System.Double)">
            <summary>
            Adds a new axis stripe and returns a reference to it.
            </summary>
            <param name="dFrom">stripe begin value</param>
            <param name="dTo">stripe end value</param>
            <returns>a reference to the newly created stripe</returns>
        </member>
        <member name="P:Nevron.Chart.NAxisStripeCollection.Item(System.Int32)">
            <summary>
            Typed collection indexer
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisStripeCollection.Name">
            <summary>
            User defined name of the node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisStripeCollection.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAxisConstLine">
            <summary>
            Represents a constant line
            </summary>
            <remarks>
            Constant lines are displayed at specific axis values. You can control 
            various aspects of the const line with the help of this class.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NAxisConstLine.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisConstLine.Mode">
            <summary>
            Controls the style of the constant line
            </summary>
            <remarks>
            By default set to Line.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NAxisConstLine.ShowAtWalls">
            <summary>
            Gets or sets an array which specifies the walls that display the const line.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisConstLine.FillStyle">
            <summary>
            Gets or sets the fill style used by the constant line (valid only if the Style is set to Plane)
            </summary>
            <remarks>
            The fill style is used when the const line is visulized in Plane style
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NAxisConstLine.ReferenceRanges">
            <summary>
            Gets or sets a collection of value ranges on reference axes. Each entry determines the span 
            of the const line along the respective axis.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisConstLine.IncludeInAxisRange">
            <summary>
            Whether to include the constline value in the axis range
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisConstLine.GetShowAtWall(Nevron.Chart.ChartWallType)">
            <summary>
            Check whether the const line is displayed on the specified chart wall.
            </summary>
            <param name="wall">specifies the chart wall</param>
            <returns>true if the const line is displayed, false if not</returns>
        </member>
        <member name="M:Nevron.Chart.NAxisConstLine.SetShowAtWall(Nevron.Chart.ChartWallType,System.Boolean)">
            <summary>
            Show the const line on the specified chart wall.
            </summary>
            <remarks>
            <para>
            For Y axis const lines the following chart walls are allowed: left, rigth, back and front.
            </para>
            <para>
            For X axis const lines the following chart walls are allowed: back, front, floor and top.
            </para>
            <para>
            For Z axis const lines the following chart walls are allowed: left, rigth, floor and top.
            </para>
            </remarks>
            <param name="wall">specifies the chart wall</param>
            <param name="show">specifies whether to show the const line or not</param>
        </member>
        <member name="P:Nevron.Chart.NAxisConstLine.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NAxisConstLine.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="P:Nevron.Chart.NAxisConstLine.Name">
            <summary>
            User defined name of the node
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAxisConstLineCollection">
            <summary>
            Represents a collection of NAxisConstLine objects.
            </summary>
            <remarks>
            Each axis has an instance of this object, which holds the constant lines displayed on the axis. It is accessible with the help of the ConstLines method of the NAxis object. See the Const Lines topic for more information.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NAxisConstLineCollection.Name">
            <summary>
            User defined name of the node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisConstLineCollection.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisConstLineCollection.Add">
            <summary>
            Adds a const line to the collection and returns the new NAxisConstLine object.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisConstLineCollection.Item(System.Int32)">
            <summary>
            Typed collection indexer
            </summary>
        </member>
        <member name="T:Nevron.Chart.NReferenceAxisRange">
            <summary>
            Represents a range on a reference axis.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NReferenceAxisRange.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NReferenceAxisRange.#ctor(Nevron.Chart.NAxis,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="axis"></param>
            <param name="beginValue"></param>
            <param name="endValue"></param>
        </member>
        <member name="P:Nevron.Chart.NReferenceAxisRange.Axis">
            <summary>
            The axis to attach to.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NReferenceAxisRange.BeginValue">
            <summary>
            Gets or sets the begin value of the axis range
            </summary>
        </member>
        <member name="P:Nevron.Chart.NReferenceAxisRange.EndValue">
            <summary>
            Gets or sets the end value of the axis range
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAxisCursor">
            <summary>
            Represents an axis cursor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisCursor.#ctor">
            <summary>
            Creates a new axis cursor with default settings.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisCursor.AllowDragging">
            <summary>
            Gets or sets a property indicating whether the cursor allows dragging via the mouse.
            </summary>
            <remarks>
            Set to true by default.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NAxisCursor.BeginValue">
            <summary>
            Begin value for the cursor line.
            </summary>
            <remarks>
            This value is mapped on the axis specified by the BeginEndAxis property and 
            determines the starting point for the const line.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NAxisCursor.EndValue">
            <summary>
            End value for the cursor line.
            </summary>
            <remarks>
            This value is mapped on the axis specified by the BeginEndAxis property and 
            determines the ending point for the cursor line.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NAxisCursor.BeginEndAxis">
            <summary>
            Specifies the axis on which the Begin and End values are mapped. 
            </summary>
            <remarks>
            For cursor lines of the vertical axes this can be only a horizontal axis.
            <para>
            For cursor lines of the horizontal axes this can be only a vertical axis.
            </para>
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NAxisCursor.EnableBeginEnd">
            <summary>
            Specifies whether to use the specified starting and ending values of the cursor line.
            </summary>
            <remarks>
            For example - the cursor lines of the vertical axes are parallel to the 
            horizontal axes and by default they have the length of the chart width. 
            With the help of the Begin and End values the user can make a cursor line 
            to spread only over a definite range of the categories axis.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NAxisCursor.ValueSnapper">
            <summary>
            Defines how to snap cursor value to axis ticks and ruler.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisCursor.SynchronizeOnMouseAction">
            <summary>
            Synchronizes the axis cursor position when a mouse event occurs.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisCursor.EnableKeyboardMove">
            <summary>
            Allows the user to move this cursor with the keyboard
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisCursor.Step">
            <summary>
            The horizontal move step.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisCursor.MoveLeftShortcut">
            <summary>
            The keyboard command associated with left move.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisCursor.MoveRightShortcut">
            <summary>
            The keyboard command associated with right move.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisCursor.ScrollToValue">
            <summary>
            When set to true the cursor will automaticlly scroll the axes in order to accomodate the new x,y value.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisCursor.SetValue(System.Double)">
            <summary>
            Sets the current axis cursor position in scale units
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Chart.NAxisCursor.SetValueFromViewPoint(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NPointF)">
            <summary>
            Sets the current position in view coordinates.
            </summary>
            <param name="context"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NAxisCursor.AlignSlaves">
            <summary>
            Aligns all slaves cursors with this cursors.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisCursor.AlignToMaster(Nevron.Chart.INMaster)">
            <summary>
            Aligns this axis cursor to the master axis cursor.
            </summary>
            <param name="master"></param>
        </member>
        <member name="M:Nevron.Chart.NAxisCursor.ReplaceForeignUniqueIds(System.Collections.Hashtable,System.Boolean)">
            <summary>
            Replaces any foreign unique ids (references to other nodes)
            </summary>
            <param name="mapUIds">map of uids which is used to find the new foreign uid value</param>
            <param name="makeNotFoundEmpty">indicates whether the not found foreign uids must be set to Guid.Empty</param>
        </member>
        <member name="M:Nevron.Chart.NAxisCursorCollection.#ctor">
            <summary>
            Creates a new empty interactivity operations collection.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisCursorCollection.Name">
            <summary>
            User defined name of the node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisCursorCollection.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLineAxisMarker">
            <summary>
            Base class for all line axis markers.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLineAxisMarker.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NLineAxisMarker.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="T:Nevron.Chart.NValueAxisMarker">
            <summary>
            Represents an axis marker.
            </summary>
            <remarks>
            This is the base class of the NAxisCursor and NAxisConstLine markers 
            which are displayed at specific axis values. You can control various 
            properties of the marker.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NValueAxisMarker.Value">
            <summary>
            Controls the value of the axis marker.
            </summary>
            <remarks>
            The axis marker is displayed at this value on the corresponding axis.
            </remarks>
            <example>
            The following example displays a const line at value 5 of the PrimaryY axis.
            <code lang = 'VB'>
            Dim line As NAxisConstLine =  NChart.Axes(StandardAxis.PrimaryY).ConstLines.Add() 
            line.Value = 5
            </code>
            <code>
            NAxisConstLine line = NChart.Axes(StandardAxis.PrimaryY).ConstLines.Add();
            line.Value = 5;
            </code>
            </example>
        </member>
        <member name="E:Nevron.Chart.NValueAxisMarker.ValueChanged">
            <summary>
            Occurs when the horizontal cursor value has changed.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NValueAxisMarker.OnValueChanged">
            <summary>
            Raises the ValueChanged event
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAxis">
             <summary>
             The NAxis class is the base class of all axes displayed on charts.
             </summary>
             <remarks>
             Each axis displayed by the Nevron Chart for .NET component is represented by a class derived from this class. 
             You can obtain a reference to a standard chart axis with the help of the 
             Axis method of the <see cref="T:Nevron.Chart.NChart"/> class. The following code 
             obtains a reference to the PrimaryY axis.
             <code lang = 'VB'>
             Dim axis As NAxis = NChart.Axis(StandardAxis.PrimaryY);
             </code>
             <code>
             NAxis axis = NChart.Axis(StandardAxis.PrimaryY);
             </code>
             A reference to a custom axis can be obtained with the help of the second override of the Axis mehtod which receives a Int32 parameter which is the axis id. 
             The following code demonstrates this.
             <code lang = 'VB'>
             ' create a custom vertical axis
             Dim axis As NAxis =  NChart.Axes.AddCustomAxis(AxisOrientation.Vertical,AxisDockZone.FrontRight) 
             ' save the axis id 
             Dim nAxisId As Integer =  axis.AxisId 
             ...
             ' obtain a reference to the axis with the saved id
             Dim customAxis As NAxis =  NChart.Axis(nAxisId)
             </code>
             <code>
             // create a custom vertical axis
             NAxis axis = NChart.Axes.AddCustomAxis(AxisOrientation.Vertical, AxisDockZone.FrontRight);
             // save the axis id 
             int nAxisId = axis.AxisId;
             ...
             // obtain a reference to the axis with the saved id
             NAxis customAxis = NChart.Axis(nAxisId);
             </code>
             
             The NAxis class implements support for the following axis features:
             <list type="bullet">
             <item>
            		<term>axis identification</term>
            		<description>each has has an unique id accessible from the AxisId readonly property</description> 
            	</item>
            	
            	<item>
            		<term>appearance control</term>
            		<description>
            		A set of properties control the visual appearance of the axis. The most 
            		important ones are AxisShape, Border, FillStyle and Width
            		</description>
            	</item>
            		
            	<item>	
            		<term>scale control</term>
            		<description>
            		You can control the axis scale mode as well as access the axis scale 
            		object responsible for the respective scaling. The scale mode is 
            		determined by the ScaleMode property. You can obtain a reference to 
            		the associated scale object with the help of the DimensionScale, 
            		NumericScale, LogarithmicScale and DataTimeScale properties respectively.
            		</description>
            	</item>	
            		
            	<item>	
            		<term>major and minor tick control</term>
            		<description>You can control the appearance and the length of the major and minor ticks.</description>
            	</item>	
            		
            	<item>	
            		<term>major and minor gridline control</term>
            		<description>You can control the appearance of the major and minor gridlines as well as control on which chart walls they are displayed</description>
            	</item>	
            		
            	<item>	
            		<term>position control</term>
            		<description>
            		You can specify the position of the axis. The PredefinedPosition 
            		property specifies a predefined axis position, while the 
            		PositionOffset property determines an offset from this position.
            		</description> 
            	</item>	
            		
            	<item>	
            		<term>text format control</term>
            		<description>You can control the formatting of the values. The ValueFormatter property controls the applied formatting.</description>
            	</item>
            		
            	<item>
            		<term>title</term>
            		<description>
            		You can specify a title string as well as control its appearance.
            		The Title property determines the axis title string. You can control 
            		the appearance of the axis title with the help of the NTextStyle 
            		object accessible from the TitleTextStyle property.
            		</description>
            	</item>
            	
            	<item>
            		<term>stagger control</term>
            		<description>you can display the axis texts in stagger mode and control various aspects of this vizualization method. The stagger mode is enabled when the StaggerTexts property is set to true.</description> 
            	</item>
            
            	<item>
            		<term>access to the associated constant lines</term>
            		<description>you can access the collection of contant lines associated with this axis with the help of the ConstLines property</description> 
            	</item>
            	
            	<item>
            		<term>access to the associated stripe lines</term>
            		<description>you can access the collection of stripe lines associated with this axis with the help of the Stripes property</description>
            	</item>
             </list>
             </remarks>
             <seealso cref="T:Nevron.Chart.NChart"/>
             <seealso cref="T:Nevron.Chart.StandardAxis"/>
             <seealso cref="T:Nevron.Chart.AxisDockZone"/>
             <seealso cref="T:Nevron.Chart.AxisOrientation"/>
        </member>
        <member name="M:Nevron.Chart.NAxis.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxis.AxisId">
            <summary>
            Retrieves the axis identificator - an unique number associated with each axis.
            </summary>
            <remarks>
            The axis IDs of the standard axes are the same as their corresponding values
            from the StandardAxis enumeration.
            </remarks>
            <example>
            The following code obtains the id of a custom axis.
            <code lang = 'VB'>
            ' create a custom vertical axis
            Dim axis As NAxis =  NChart.Axes.AddCustomAxis(AxisOrientation.Vertical,AxisDockZone.FrontRight) 
            ' save the axis id 
            Dim axisId As Integer =  axis.AxisId
            </code>
            <code>
            // create a custom vertical axis
            NAxis axis = NChart.Axes.AddCustomAxis(AxisOrientation.Vertical, AxisDockZone.FrontRight);
            // save the axis id 
            int axisId = axis.AxisId;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NAxis.ScrollBar">
            <summary>
            Obtains a reference to the scrollbar attached to this axis.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxis.Cursors">
            <summary>
            Gets or sets the collection of axis cursors.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxis.ConstLines">
            <summary>
            Gets or sets the collection of axis const lines.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxis.Stripes">
            <summary>
            Gets or sets the collection of axis stripes.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxis.Anchor">
            <summary>
            Gets or sets the axis anchor controlling how the axis is attached to the chart area.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxis.View">
            <summary>
            Gets or sets the axis view object controlling the visible range of values displayed by this axis
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxis.PagingView">
            <summary>
            Gets or sets the axis paging view. 
            </summary>
            <remarks>
            When set to null no axis will display the range specified by the NAxisView object.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NAxis.SeriesRange">
            <summary>
            Returns the series range (the range of values displayed by the series on this axis)
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxis.ContentRange">
            <summary>
            Returns the content range of this axis (the range of values displayed by the axis after range inflation) 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxis.ViewRange">
            <summary>
            Returns the view range of this axis.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxis.TimelineViewRange">
            <summary>
            Returns the view range of this axis in non working time
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxis.PageRange">
            <summary>
            Returns the page range of this axis.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxis.ClipMode">
            <summary>
            Gets or sets the axis clipping mode
            </summary>
            <remarks>
            The axis clipping mode determines when series content scaled on the particular axis
            should be clipped according to the axis range. The default value of this property is Auto
            indicating that the axis view or paging view will automatically decide whether clipping is 
            required.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NAxis.IsUsed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxis.HitTestAxisWallDecorations">
            <summary>
            Whether axis wall decorations are hit testable or considered part of the wall.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxis.UseRangeInflateWhenZoomed">
            <summary>
            Whether to apply range inflate when the axis is zoomed
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxis.UseSeriesInflateWhenZoomed">
            <summary>
            Whether to apply range inflate when the axis is zoomed
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxis.SetPredefinedTextLayout(Nevron.Chart.PredefinedTextLayout)">
            <summary>
            Sets a predefined layout for the axis texts. A predefined text layout is a 
            specific combination of text offset, alignment, orientation and stagger.
            </summary>
            <param name="layout">The desired layout</param>
        </member>
        <member name="M:Nevron.Chart.NAxis.IsCustomAxis">
            <summary>
            Returns true if this is a custom axis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NAxis.HitTest(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NRectangleF,System.Boolean,System.Collections.Generic.List{Nevron.Dom.INNode})">
            <summary>
            Performs a hit test.
            </summary>
            <param name="context"></param>
            <param name="rect"></param>
            <param name="containOrIntersect"></param>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.Chart.NAxis.Clone">
            <summary>
            Creates an identical copy of this axis object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NAxis.PreOrderPaint3D(Nevron.Chart.NChartRenderingContext3D)">
            <summary>
            Render in 3D.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Nevron.Chart.NAxis.AlignSlaves">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxis.Slaves">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxis.AlignToMaster(Nevron.Chart.INMaster)">
            <summary>
            Aligns this axis to the master axis.
            </summary>
            <param name="master"></param>
        </member>
        <member name="P:Nevron.Chart.NAxis.Name">
            <summary>
            The name of the axis. 
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxis.ReplaceForeignUniqueIds(System.Collections.Hashtable,System.Boolean)">
            <summary>
            Replaces any foreign unique ids (references to other nodes)
            </summary>
            <param name="mapUIds">map of uids which is used to find the new foreign uid value</param>
            <param name="makeNotFoundEmpty">indicates whether the not found foreign uids must be set to Guid.Empty</param>
        </member>
        <member name="M:Nevron.Chart.NAxis.OnRangeChanged(Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Fired when the scrollbar large change has changed
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxis.OnReset">
            <summary>
            Fired when the scrollbar reset buttons was pressed
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxis.GetAxisViewBounds(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NRectangleF@,System.Boolean)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="bounds"></param>
            <param name="useZoneBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NAxis.GetAxisScrollbarBounds(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NRectangleF@)">
            <summary>
            Returns the scrollbar bounds. If the scrollbar is not visible the function still works and returns a rect with no width or height depending on the axis orientation.
            </summary>
            <param name="context"></param>
            <param name="scrollbarBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NAxis.CalculateAxis(Nevron.Chart.NChartRenderingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NAxisGroup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCartesianAxis.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCartesianAxis.Anchor">
            <summary>
            Gets or sets the axis anchor controlling how the axis is attached to the chart area.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAxisPagingView">
            <summary>
            Represents a view used by the axis scrollbar
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisPagingView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisPagingView.Enabled">
            <summary>
            Gets or sets a value indicating whether this view is enabled or not
            </summary>
            <remarks>
            When set to false no paging is applied on the calculated axis scale range
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NAxisPagingView.AutoSmallChange">
            <summary>
            Gets or sets a value indicating whether the paging view will automatically 
            calculate the small step for auto scrolling
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisPagingView.MinPageLength">
            <summary>
            Gets or sets the mimimum page length the axis paging view can zoom to
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisPagingView.AutoSmallChangeFactor">
            <summary>
            Gets or sets a value controlling the size of the auto small change
            relative to the current length of the view
            </summary>
            <remarks>
            By default this value is set to ten meaning that the view will calculate the 
            small change based on numeric or date time step calculator with max count of ten.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NAxisPagingView.ResetMode">
            <summary>
            Gets or sets the paging view reset mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisPagingView.ZoomedRanges">
            <summary>
            Gets or sets the previously zoomed ranged
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisPagingView.ViewRange">
            <summary>
            Gets or sets the range in normal space (that is space with non working days and ticks)
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisPagingView.ZoomIn(Nevron.GraphicsCore.NRange1DD,System.Double)">
            <summary>
            Zooms in the axis in order to display the specified axis range.
            </summary>
            <param name="axisRange"></param>
            <param name="dMinPageSize"></param>
        </member>
        <member name="M:Nevron.Chart.NAxisPagingView.ZoomOut(Nevron.GraphicsCore.NRange1DD,System.Double)">
            <summary>
            Zooms out the axis in order to display the specified axis range
            </summary>
            <param name="axisRange"></param>
            <param name="dMinPageSize"></param>
        </member>
        <member name="M:Nevron.Chart.NAxisPagingView.SetRange(Nevron.GraphicsCore.NRange1DD,System.Boolean)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <param name="allowAutoEnable"></param>
        </member>
        <member name="M:Nevron.Chart.NAxisPagingView.Reset">
            <summary>
            Resets the view to the last valid range
            </summary>
            <remarks>
            This method depends on the view reset mode
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NAxisPagingView.ConfigureAxisPagingInternal(Nevron.GraphicsCore.NRange1DD,System.Boolean)">
            <summary>
            
            </summary>
            <param name="range"></param>
            <param name="allowAutoEnable"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NAxisPagingView.IsInverted">
            <summary>
            Returns true of the scrollbar should use inverted logic
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NAxisPagingView.DoLargeLeftScroll">
            <summary>
            Called when the user has requested a left scroll
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisPagingView.DoLargeRightScroll">
            <summary>
            Called when the user has requested a right scroll
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisPagingView.DoSmallLeftScroll">
            <summary>
            Called when the user has requested a left scroll
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisPagingView.DoSmallRightScroll">
            <summary>
            Called when the user has requested a right scroll
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisPagingView.GetRightLargeChange">
            <summary>
            Returns the right large change
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NAxisPagingView.GetLeftLargeChange">
            <summary>
            Returns the left large change
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NAxisPagingView.Scroll(System.Double)">
            <summary>
            Scrolls the axis with the specified step
            </summary>
            <param name="step"></param>
        </member>
        <member name="M:Nevron.Chart.NAxisPagingView.ScrollToValue(System.Double)">
            <summary>
            Scrolls the axis in order to show the specified value
            </summary>
            <param name="axisValue"></param>
        </member>
        <member name="P:Nevron.Chart.NAxisPagingView.TimelineMinimum">
            <summary>
            Gets the minimum scrollable value in timeline space
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisPagingView.TimelineMaximum">
            <summary>
            Gets the maximum scrollable value in timeline space
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisPagingView.TimelineEndValue">
            <summary>
            Gets the end value in timeline space
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisPagingView.TimelineBeginValue">
            <summary>
            Gets the current begin value in timeline space
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisPagingView.BeginValue">
            <summary>
            Gets the begin value in normal space
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisPagingView.EndValue">
            <summary>
            Gets the current end value in normal space
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisPagingView.Minimum">
            <summary>
            Gets the miminum scrollable value
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisPagingView.Maximum">
            <summary>
            Gets the maximum scrollable value
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDateTimeAxisPagingView">
            <summary>
            Represents a date / time axis paging view
            </summary>
            <remarks>
            This type of view allows you to natively scroll through an axis in date time format by 
            preserving the specifics of date time ranges - for example scrolling one month to the 
            left or scrolling one month to the right results in different begin value because months
            have variable number of days.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NDateTimeAxisPagingView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDateTimeAxisPagingView.#ctor(System.DateTime,Nevron.NDateTimeSpan)">
            <summary>
            Initializer constructor
            </summary>
            <param name="beginDate"></param>
            <param name="length"></param>
        </member>
        <member name="P:Nevron.Chart.NDateTimeAxisPagingView.SmallChange">
            <summary>
            Gets or sets the small change used by the scrollbar in NDateTimeSpan format.
            </summary>
            <remarks>
            This property has effect only when the AutoSmallChange is set to false.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NDateTimeAxisPagingView.Begin">
            <summary>
            Gets or sets the begin value of the page view
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeAxisPagingView.Length">
            <summary>
            Gets or sets the length of the view
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeAxisPagingView.MinAutoSmallChange">
            <summary>
            Gets or sets the minimum automatic small change.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDateTimeAxisPagingView.GetRightLargeChange">
            <summary>
            Returns the right large change
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDateTimeAxisPagingView.GetLeftLargeChange">
            <summary>
            Returns the left large change
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NNumericAxisPagingView">
            <summary>
            Summary description for NNumericAxisPagingView.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNumericAxisPagingView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNumericAxisPagingView.#ctor(Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Initializer constructor
            </summary>
            <param name="range"></param>
        </member>
        <member name="P:Nevron.Chart.NNumericAxisPagingView.SmallChange">
            <summary>
            Gets or sets the small change used by the scrollbar.
            </summary>
            <remarks>
            This property has effect only when the AutoSmallChange is set to false.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NNumericAxisPagingView.Begin">
            <summary>
            Gets or sets the begin value of the page view
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericAxisPagingView.Length">
            <summary>
            Gets or sets the length of the view
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericAxisPagingView.MinAutoSmallChange">
            <summary>
            Gets or sets the minimum automatic small change.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNumericAxisPagingView.GetRightLargeChange">
            <summary>
            Returns the right large change
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NNumericAxisPagingView.GetLeftLargeChange">
            <summary>
            Returns the left large change
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NBoxAndWhiskersDataPoint">
            <summary>
            This class represents a box and whiskers data point.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NBoxAndWhiskersDataPoint.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new box and whiskers data point.
            </summary>
            <param name="upperBoxValue">upper box value</param>
            <param name="lowerBoxValue">lower box value</param>
            <param name="upperWhiskerValue">upper whisker value</param>
            <param name="lowerWhiskerValue">lower whisker value</param>
        </member>
        <member name="M:Nevron.Chart.NBoxAndWhiskersDataPoint.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double[])">
            <summary>
            Creates a new box and whiskers data point.
            </summary>
            <param name="upperBoxValue">upper box value</param>
            <param name="lowerBoxValue">lower box value</param>
            <param name="upperWhiskerValue">upper whisker value</param>
            <param name="lowerWhiskerValue">lower whisker value</param>
            <param name="medianValue">median value</param>
            <param name="averageValue">average value</param>
            <param name="outlierValues">an array of outlier values</param>
        </member>
        <member name="M:Nevron.Chart.NBoxAndWhiskersDataPoint.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double[],System.Double)">
            <summary>
            Creates a new box and whiskers data point.
            </summary>
            <param name="upperBoxValue">upper box value</param>
            <param name="lowerBoxValue">lower box value</param>
            <param name="upperWhiskerValue">upper whisker value</param>
            <param name="lowerWhiskerValue">lower whisker value</param>
            <param name="medianValue">median value</param>
            <param name="averageValue">average value</param>
            <param name="outlierValues">an array of outlier values</param>
            <param name="x">data point X value</param>
        </member>
        <member name="M:Nevron.Chart.NBoxAndWhiskersDataPoint.#ctor(Nevron.Chart.NDataSeriesDouble,System.Boolean,System.Boolean)">
            <summary>
            Creates a new box and whiskers data point and initializes it from a data series of double values.
            </summary>
            <remarks>
            This constructor automatically calculates the data point values based on the distribution 
            of the values in the "data" parameter.
            </remarks>
            <param name="data">data series of double values used to initialize the box and whiskers data point</param>
            <param name="calculateAverage">A boolean flag that indicates whether the average value should be calculated</param>
            <param name="calculateOutliers">A boolean flag that indicates whether the outlier values should be initialized</param>
        </member>
        <member name="T:Nevron.Chart.NBubbleDataPoint">
            <summary>
            This class represents a bubble series data point.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NBubbleDataPoint.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new bubble data point
            </summary>
            <param name="value">data point value</param>
            <param name="size">data point size</param>
        </member>
        <member name="M:Nevron.Chart.NBubbleDataPoint.#ctor(System.Double,System.Double,System.String)">
            <summary>
            Creates a new bubble data point
            </summary>
            <param name="value">data point value</param>
            <param name="size">data point size</param>
            <param name="label">data point label</param>
        </member>
        <member name="M:Nevron.Chart.NBubbleDataPoint.#ctor(System.Double,System.Double,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Creates a new bubble data point
            </summary>
            <param name="value">data point value</param>
            <param name="size">data point size</param>
            <param name="fillStyle">data point fill style</param>
        </member>
        <member name="M:Nevron.Chart.NBubbleDataPoint.#ctor(System.Double,System.Double,System.String,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Creates a new bubble data point
            </summary>
            <param name="value">data point value</param>
            <param name="size">data point size</param>
            <param name="label">data point label</param>
            <param name="fillStyle">data point fill style</param>
        </member>
        <member name="M:Nevron.Chart.NBubbleDataPoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new bubble data point (used in XY scatters)
            </summary>
            <param name="x">data point X value</param>
            <param name="y">data point Y value</param>
            <param name="size">data point size</param>
        </member>
        <member name="M:Nevron.Chart.NBubbleDataPoint.#ctor(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Creates a new bubble data point (used in XY scatters)
            </summary>
            <param name="x">data point X value</param>
            <param name="y">data point Y value</param>
            <param name="size">data point size</param>
            ><param name="label">data point label</param>
        </member>
        <member name="M:Nevron.Chart.NBubbleDataPoint.#ctor(System.Double,System.Double,System.Double,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Creates a new bubble data point (used in XY scatters)
            </summary>
            <param name="x">data point X value</param>
            <param name="y">data point Y value</param>
            <param name="size">data point size</param>
            ><param name="fillStyle">data point fill style</param>
        </member>
        <member name="M:Nevron.Chart.NBubbleDataPoint.#ctor(System.Double,System.Double,System.Double,System.String,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Creates a new bubble data point (used in XY scatters)
            </summary>
            <param name="x">data point X value</param>
            <param name="y">data point Y value</param>
            <param name="size">data point size</param>
            <param name="label">data point label</param>
            <param name="fillStyle">data point fill style</param>
        </member>
        <member name="T:Nevron.Chart.NDataPoint">
            <summary>
            A data point is a logical union of values that are displayed as a 
            particular object in the chart. Data points are represented by instances 
            of the NDataPoint class.
            </summary>
            <remarks>
            NDataPoint objects are not premanently stored in the chart. They are 
            only used to transfer the series values from your application to the 
            chart. Internally the data is stored in data series.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NDataPoint.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataPoint.#ctor(System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="value">data point value</param>
        </member>
        <member name="M:Nevron.Chart.NDataPoint.#ctor(System.Double,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="value">data point value</param>
            <param name="label"></param>
        </member>
        <member name="M:Nevron.Chart.NDataPoint.#ctor(System.Double,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="value">data point value</param>
            <param name="fillStyle">data point fill style</param>
        </member>
        <member name="M:Nevron.Chart.NDataPoint.#ctor(System.Double,System.String,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="value">data point value</param>
            <param name="label">data point label</param>
            <param name="fillStyle">data point fill style</param>
        </member>
        <member name="M:Nevron.Chart.NDataPoint.#ctor(System.Double,System.String,Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="value">data point value</param>
            <param name="label">data point label</param>
            <param name="fillStyle">data point fill style</param>
            <param name="strokeStyle">data point stroke style</param>
        </member>
        <member name="M:Nevron.Chart.NDataPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializer constructor (used by XY scatters)
            </summary>
            <param name="x">data point x value</param>
            <param name="y">data point y value</param>
        </member>
        <member name="M:Nevron.Chart.NDataPoint.#ctor(System.Double,System.Double,System.String)">
            <summary>
            Initializer constructor (used by XY scatters)
            </summary>
            <param name="x">data point x value</param>
            <param name="y">data point y value</param>
            <param name="label">data point label</param>
        </member>
        <member name="M:Nevron.Chart.NDataPoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializer constructor (used by XYZ scatters)
            </summary>
            <param name="x">data point x value</param>
            <param name="y">data point y value</param>
            <param name="z">data point z value</param>
        </member>
        <member name="M:Nevron.Chart.NDataPoint.#ctor(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Initializer constructor (used by XYZ scatters)
            </summary>
            <param name="x">data point x value</param>
            <param name="y">data point y value</param>
            <param name="z">data point z value</param>
            <param name="label">data point label</param>
        </member>
        <member name="P:Nevron.Chart.NDataPoint.Item(Nevron.Chart.DataPointValue)">
            <summary>
            Gets/sets the specific data point value identified by the indexer argument
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataPoint.Clear">
            <summary>
            Clears the data point (makes it empty).
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataPoint.ValidFillStyle">
            <summary>
            Determines whether the data point contains a valid fill style (e.g. whether fill style was specified)
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataPoint.ValidStrokeStyle">
            <summary>
            Determines whether the data point contains a valid stroke style (e.g. whether stroke style was specified)
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataPoint.ValidMarkerStyle">
            <summary>
            Determines whether the data point contains a valid marker style (e.g. whether marker style was specified)
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataPoint.ValidDataLabelStyle">
            <summary>
            Determines whether the data point contains a valid data label style (e.g. whether data label style was specified)
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataPoint.ValidInteractivityStyle">
            <summary>
            Determines whether the data point contains a valid interactivity style (e.g. whether interactivity style was specified)
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataPoint.ValidTag">
            <summary>
            Determines whether the data point contains a valid tag (e.g. whether tag was specified)
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataPoint.ValidAnimationsStyle">
            <summary>
            Determines whether the data point contains a valid animations style (e.g. whether animation was specified)
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataPoint.IndexInSeries">
            <summary>
            Gets the index of the data point in the series
            </summary>
            <remarks>
            Valid only if the data point was composed by a series. Otherwise equal to -1
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NDataPoint.GetValueValid(Nevron.Chart.DataPointValue)">
            <summary>
            Gets whether the specified value is value
            </summary>
            <param name="dataPointValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDataPoint.SetValueValid(Nevron.Chart.DataPointValue,System.Boolean)">
            <summary>
            Sets whether the specified value is valid
            </summary>
            <param name="dataPointValue"></param>
            <param name="valid"></param>
        </member>
        <member name="P:Nevron.Chart.NDataPoint.Id">
            <summary>
            Gets or sets the id of this data point
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataPoint.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NDataPoint.GetAttributeByName(System.String)">
            <summary>
            Gets a child or descendant attribute by its name
            </summary>
            <param name="attributeName">child name or full attribute name</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NDataPoint.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NDataPoint.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
            <summary>
            Sets a child or descendant attribute by its name
            </summary>
            <param name="attributeName"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:Nevron.Chart.NDataPoint.FormatTooltip(System.String)">
            <summary>
            Formats the specified tooltip format string
            </summary>
            <param name="tooltip">tooltip format string</param>
            <returns>formatted tooltip</returns>
        </member>
        <member name="T:Nevron.Chart.NErrorBarDataPoint">
            <summary>
            This class represents an error bar data point.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NErrorBarDataPoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new error bar data point.
            </summary>
            <param name="valueY">data point Y value</param>
            <param name="upperErrorY">upper Y error value</param>
            <param name="lowerErrorY">lower Y error value</param>
        </member>
        <member name="M:Nevron.Chart.NErrorBarDataPoint.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new error bar data point.
            </summary>
            <param name="valueX">data point X value</param>
            <param name="upperErrorX">upper X error value</param>
            <param name="lowerErrorX">lower X error value</param>
            <param name="valueY">data point Y value</param>
            <param name="upperErrorY">upper Y error value</param>
            <param name="lowerErrorY">lower Y error value</param>
        </member>
        <member name="M:Nevron.Chart.NErrorBarDataPoint.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new error bar data point.
            </summary>
            <param name="valueX">data point X value</param>
            <param name="upperErrorX">upper X error value</param>
            <param name="lowerErrorX">lower X error value</param>
            <param name="valueY">data point Y value</param>
            <param name="upperErrorY">upper Y error value</param>
            <param name="lowerErrorY">lower Y error value</param>
            <param name="valueZ">data point Z value</param>
            <param name="upperErrorZ">upper Z error value</param>
            <param name="lowerErrorZ">lower Z error value</param>
        </member>
        <member name="T:Nevron.Chart.NFloatBarDataPoint">
            <summary>
            This class represents a floating bar data point.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFloatBarDataPoint.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new float bar data point.
            </summary>
            <param name="begin">data point begin value</param>
            <param name="end">data point end value</param>
        </member>
        <member name="M:Nevron.Chart.NFloatBarDataPoint.#ctor(System.Double,System.Double,System.String)">
            <summary>
            Creates a new float bar data point.
            </summary>
            <param name="begin">data point begin value</param>
            <param name="end">data point end value</param>
            <param name="label">data point label</param>
        </member>
        <member name="M:Nevron.Chart.NFloatBarDataPoint.#ctor(System.Double,System.Double,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Creates a new float bar data point.
            </summary>
            <param name="begin">data point begin value</param>
            <param name="end">data point end value</param>
            <param name="fillStyle">data point fill style</param>
        </member>
        <member name="M:Nevron.Chart.NFloatBarDataPoint.#ctor(System.Double,System.Double,System.String,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Creates a new float bar data point
            </summary>
            <param name="begin">data point begin value</param>
            <param name="end">data point end value</param>
            <param name="label">data point label</param>
            <param name="fillStyle">data point fill style</param>
        </member>
        <member name="T:Nevron.Chart.NFunnelDataPoint">
            <summary>
            This class represents a funnel data point.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFunnelDataPoint.#ctor(System.Double,System.Double)">
            <summary>
            Creates a funnel data point.
            </summary>
            <param name="value">funnel value</param>
            <param name="xsize">x size</param>
        </member>
        <member name="M:Nevron.Chart.NFunnelDataPoint.#ctor(System.Double,System.Double,System.String)">
            <summary>
            Creates a funnel data point.
            </summary>
            <param name="value">funnel value</param>
            <param name="xsize">x size</param>
            <param name="label">data point label</param>
        </member>
        <member name="M:Nevron.Chart.NFunnelDataPoint.#ctor(System.Double,System.Double,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Creates a funnel data point.
            </summary>
            <param name="value">funnel value</param>
            <param name="xsize">x size</param>
            <param name="fillStyle">data point fill style</param>
        </member>
        <member name="M:Nevron.Chart.NFunnelDataPoint.#ctor(System.Double,System.Double,System.String,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Creates a funnel data point.
            </summary>
            <param name="value">funnel value</param>
            <param name="xsize">x size</param>
            <param name="label">data point label</param>
            <param name="fillStyle">data point fill style</param>
        </member>
        <member name="T:Nevron.Chart.NHighLowDataPoint">
            <summary>
            This class represents a high-low data point.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NHighLowDataPoint.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new high-low data point
            </summary>
            <param name="high">data point high value</param>
            <param name="low">data point low value</param>
        </member>
        <member name="M:Nevron.Chart.NHighLowDataPoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new high-low data point
            </summary>
            <param name="high">data point high value</param>
            <param name="low">data point low value</param>
            <param name="x">data point x value</param>
        </member>
        <member name="M:Nevron.Chart.NHighLowDataPoint.#ctor(System.Double,System.Double,System.DateTime)">
            <summary>
            Creates a new high-low data point
            </summary>
            <param name="high">data point high value</param>
            <param name="low">data point low value</param>
            <param name="dt">data point x value as DateTime</param>
        </member>
        <member name="T:Nevron.Chart.NPieDataPoint">
            <summary>
            This class represents a pie data point.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPieDataPoint.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new pie data point.
            </summary>
            <param name="value">pie value</param>
            <param name="detachment">pie detachment</param>
        </member>
        <member name="M:Nevron.Chart.NPieDataPoint.#ctor(System.Double,System.Double,System.String)">
            <summary>
            Creates a new pie data point.
            </summary>
            <param name="value">pie value</param>
            <param name="detachment">pie detachment</param>
            <param name="label">pie label</param>
        </member>
        <member name="M:Nevron.Chart.NPieDataPoint.#ctor(System.Double,System.Double,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Creates a new pie data point.
            </summary>
            <param name="value">pie value</param>
            <param name="detachment">pie detachment</param>
            <param name="fillStyle">pie fill style</param>
        </member>
        <member name="M:Nevron.Chart.NPieDataPoint.#ctor(System.Double,System.Double,System.String,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Creates a new pie data point.
            </summary>
            <param name="value">pie value</param>
            <param name="detachment">pie detachment</param>
            <param name="label">pie label</param>
            <param name="fillStyle">pie fill style</param>
        </member>
        <member name="T:Nevron.Chart.NPolarDataPoint">
            <summary>
            This class represents a polar series data point.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPolarDataPoint.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new polar data point.
            </summary>
            <param name="radius">data point radius</param>
            <param name="angle">data point angle</param>
        </member>
        <member name="M:Nevron.Chart.NPolarDataPoint.#ctor(System.Double,System.Double,System.String)">
            <summary>
            Creates a new polar data point.
            </summary>
            <param name="radius">data point radius</param>
            <param name="angle">data point angle</param>
            <param name="label">data point label</param>
        </member>
        <member name="T:Nevron.Chart.NShapeDataPoint">
            <summary>
            This class represents a shape series data point.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NShapeDataPoint.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new shape data point.
            </summary>
            <param name="valueX">data point X value</param>
            <param name="valueY">data point Y value</param>
            <param name="valueZ">data point Z value</param>
            <param name="sizeX">data point X size</param>
            <param name="sizeY">data point Y size</param>
            <param name="sizeZ">data point Z size</param>
        </member>
        <member name="M:Nevron.Chart.NShapeDataPoint.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Creates a new shape data point.
            </summary>
            <param name="valueX">data point X value</param>
            <param name="valueY">data point Y value</param>
            <param name="valueZ">data point Z value</param>
            <param name="sizeX">data point X size</param>
            <param name="sizeY">data point Y size</param>
            <param name="sizeZ">data point Z size</param>
            <param name="label">data point label</param>
        </member>
        <member name="M:Nevron.Chart.NShapeDataPoint.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Creates a new shape data point.
            </summary>
            <param name="valueX">data point X value</param>
            <param name="valueY">data point Y value</param>
            <param name="valueZ">data point Z value</param>
            <param name="sizeX">data point X size</param>
            <param name="sizeY">data point Y size</param>
            <param name="sizeZ">data point Z size</param>
            <param name="fillStyle">data point fill style</param>
        </member>
        <member name="M:Nevron.Chart.NShapeDataPoint.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Creates a new shape data point.
            </summary>
            <param name="valueX">data point X value</param>
            <param name="valueY">data point Y value</param>
            <param name="valueZ">data point Z value</param>
            <param name="sizeX">data point X size</param>
            <param name="sizeY">data point Y size</param>
            <param name="sizeZ">data point Z size</param>
            <param name="label">data point label</param>
            <param name="fillStyle">data point fill style</param>
        </member>
        <member name="T:Nevron.Chart.NStockDataPoint">
            <summary>
            This class represents a stock data point.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStockDataPoint.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new stock data point.
            </summary>
            <param name="open">stock open value</param>
            <param name="high">stock high value</param>
            <param name="low">stock low value</param>
            <param name="close">stock close value</param>
        </member>
        <member name="M:Nevron.Chart.NStockDataPoint.#ctor(System.Double,System.Double,System.Double,System.Double,System.DateTime)">
            <summary>
            Creates a new stock data point.
            </summary>
            <param name="open">stock open value</param>
            <param name="high">stock high value</param>
            <param name="low">stock low value</param>
            <param name="close">stock close value</param>
            <param name="dt">stock data point x value as DateTime</param>
        </member>
        <member name="T:Nevron.Chart.NDataSeries`1">
            <summary>
            Represents a named and typed set of values used by the Nevron Chart for .NET Series.
            </summary>
            <remarks>
            The data series is in its nature a typed ArrayList with a powerful set
            of operations for finding, filtering and filling from different sources. 
            Please refer to the topics contained in the Data Manipulation book for more information.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.#ctor(Nevron.Chart.DataSeriesType,System.String)">
            <summary>
            Constructs a data series with the specified type and name
            </summary>
            <param name="type"></param>
            <param name="name">name of the data series</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.Clone">
            <summary>
            Creates a copy of the data series.
            </summary>
            <returns>an identical data series</returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.Add(System.Object)">
            <summary>
            Adds an object to the end of the data series.
            </summary>
            <remarks>
            The specified object type must be compatible 
            with the type of objects contained in the data series.
            </remarks>
            <param name="value"></param>
            <returns>The index at which the value has been added.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the type of the specifed object is not compatible with the type of objects contained in the collection.</exception>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item at the specified index.
            </summary>
            <param name="index">index at which to insert the item</param>
            <param name="value">item value</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.IndexOf(System.Object)">
            <summary>
            Finds the index of the first occurance of the specified item within the data series.
            </summary>
            <param name="value"></param>
            <returns>index of the item in the data series, or -1 if the item is not found in this series</returns>
        </member>
        <member name="P:Nevron.Chart.NDataSeries`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when the type of the specified object is not compatible with the type of the collection</exception>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NDataSeries`1.Count">
            <summary>
            The number of elements contained in the Collection.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataSeries`1.IsSynchronized">
            <summary>
            true if access to the ICollection is synchronized (thread-safe); otherwise, false.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataSeries`1.SyncRoot">
            <summary>
            An object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the Collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.Clear">
            <summary>
            Removes all items from the data series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.Contains(System.Object)">
            <summary>
            Determines whether the data series contains the specified item
            </summary>
            <param name="value"></param>
            <returns>true if contained, otherwise false</returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.Remove(System.Object)">
            <summary>
            Removes the specified item from the data series
            </summary>
            <param name="value">item value</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the data series
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Nevron.Chart.NDataSeries`1.IsFixedSize">
            <summary>
            Determines whether the data series is with fixed size
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataSeries`1.IsReadOnly">
            <summary>
            Determines whether the data series is read only
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.GetValueForIndex(System.Int32)">
            <summary>
            Gets the value for the specified index.
            </summary>
            <remarks>
            This method analyzes empty data points in accordance with the settings 
            specified by the attached NEmptyDataPoints object. 
            It is only applicable for data series of type Double.
            </remarks>
            <param name="index">the index in request</param>
            <returns>
            The value at the specified index, or DBNull.Value if the value is not present (is empty)
            </returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the elements of the specified collection to the end 
            of the data series. The operation is type safe.
            </summary>
            <param name="collection">source collection</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.AddRange(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Adds the elements of the specified list to the end of the data series. The operation is type safe.
            </summary>
            <param name="list"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.SetRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Copies the elements of a collection over a range of elements in the Data Series.
            </summary>
            <param name="index">index to begin from</param>
            <param name="collection">source collection</param>
            <exception cref="T:System.ArgumentNullException">c cannot be a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero or index plus the number of elements in c is greater than Count.</exception>
            <exception cref="T:System.ArgumentException">The enumerator of the collection cannot be obtained</exception>
            <exception cref="T:System.Exception">The collection contains an incompatible object</exception>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.SetRange(System.Int32,System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Copies the elements of a list over a range of elements in the Data Series.
            </summary>
            <param name="index"></param>
            <param name="list"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items from the data series
            </summary>
            <param name="index">starting index</param>
            <param name="count">count of items to remove</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets the items in the specified range
            </summary>
            <param name="index">starting index</param>
            <param name="count">count of items in range</param>
            <returns>items in range</returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Inserts a range of items in the data series after the specified index
            </summary>
            <param name="index">index after which to insert the range</param>
            <param name="collection">collection representing the items, which must be inserted</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.ExtractSubset(Nevron.Chart.NDataSeriesSubset)">
            <summary>
            Removes the indexes which are not contained in the specified subset.
            </summary>
            <param name="subset">subset to be extracted</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.RemoveSubset(Nevron.Chart.NDataSeriesSubset)">
            <summary>
            Removes the indexes contained in the specified data series subset from the data series.
            </summary>
            <param name="subset">subset to be removed</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.Sort(Nevron.Chart.DataSeriesSortOrder)">
            <summary>
            Sorts the values in the order specified by the order argument.
            </summary>
            <param name="order">specifies the desired order</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.Sort(Nevron.Chart.DataSeriesSortOrder,System.Collections.IComparer)">
            <summary>
            Sorts the values in the order specified by the order argument using the specified comparer.
            </summary>
            <param name="order">specifies the desired order</param>
            <param name="comparer">comparer to use when sorting</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.FillRandom(System.Random,System.Int32)">
            <summary>
            Fills the data series with random data.
            </summary>
            <remarks>
            In the case of a data series containing Double values the data ranges from 0 to 100.
            </remarks>
            <param name="random">random number generator</param>
            <param name="itemCount">count of random items</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.FillFromDataReader(System.Data.IDataReader,System.String)">
            <summary>
            The data series is filled from the specified column of the OleDbDataReader.
            </summary>
            <param name="dataReader">the reader to read from</param>
            <param name="columnName">the column name</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.FillFromEnumerable(System.Collections.IEnumerable)">
            <summary>
            The data series is filled from the enumerator which is obtained from the specified enumerable interface.
            </summary>
            <param name="enumerable">the enumerable interface to fill from</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.FillFromDataTable(System.Data.DataTable,System.String)">
            <summary>
            The data series is filled with the objects contained in columnName of the specified DataTable.
            </summary>
            <param name="table">the source DataTable</param>
            <param name="columnName">the name of the source column</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.FillFromDataView(System.Data.DataView,System.String)">
            <summary>
            The data series is filled with the objects contained in columnName of the specified DataView.
            </summary>
            <remarks>
            </remarks>
            <param name="view">the source data view</param>
            <param name="columnName">the name of the source column</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeries`1.ContainsEmptyDataPoints">
            <summary>
            Returns true if the series contains empty data points
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NDataSeries`1.Capacity">
            <summary>
            Gets or sets the capacity of the data series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesBase.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesBase.#ctor(Nevron.Chart.DataSeriesType,System.String)">
            <summary>
            Creates a new data series with the specified type and name.
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="P:Nevron.Chart.NDataSeriesBase.DataSeriesType">
            <summary>
            Determines the type of objects contained in this data series.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataSeriesBase.DataSeriesTypeXML">
            <summary>
            Determines the type of objects contained in this data series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesBase.GetDataGridColumnStyle">
            <summary>
            Returns a data grid column style which can be used for visual editing of the data series.
            </summary>
            <remarks>
            The returned column style is adjusted to represent the value formatting settings of the data series.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesBase.ExtractSubset(Nevron.Chart.NDataSeriesSubset)">
            <summary>
            Removes the indexes which are not contained in the specified subset.
            </summary>
            <param name="subset">subset to be extracted</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesBase.RemoveSubset(Nevron.Chart.NDataSeriesSubset)">
            <summary>
            Removes the indexes contained in the specified data series subset from the data series.
            </summary>
            <param name="subset">subset to be removed</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesBase.Clear">
            <summary>
            Clears the data series
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataSeriesBase.Count">
            <summary>
            Gets the number of items in this series
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDataSeriesCollection">
            <summary>
            Represents a logically bound set of data series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesCollection.#ctor">
            <summary>
            Creates an empty data series collection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesCollection.Add(Nevron.Chart.NDataSeriesBase,Nevron.Chart.DataSeriesMask)">
            <summary>
            Adds a new data series in the collection
            </summary>
            <param name="dataSeries">data series to add</param>
            <param name="mask">mask identifying the data series usage</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesCollection.Clear">
            <summary>
            Clears the collection (removes all contained data series)
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataSeriesCollection.Item(System.Int32)">
            <summary>
            Gets the data series at the specified index
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesCollection.GetMask(System.Int32)">
            <summary>
            Gets the data series mask at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the data series at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of data series from the collection
            </summary>
            <param name="index">starting index</param>
            <param name="count">count of data series to remove</param>
        </member>
        <member name="P:Nevron.Chart.NDataSeriesCollection.Count">
            <summary>
            Obtains the data series count
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesCollection.FindByName(System.String)">
            <summary>
            Queries for the data series with the specifed name
            </summary>
            <param name="name">data series name to look for</param>
            <returns>
            reference to the first NDataSeriesBase with the specified name, 
            null if a data series with that name does not exist
            </returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesCollection.FindByMask(Nevron.Chart.DataSeriesMask)">
            <summary>
            Finds the index data series which corresponds to the specified mask
            </summary>
            <param name="mask">data series mask</param>
            <returns>index of the data series, or -1 if it was not found</returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesCollection.Sort(System.Int32,Nevron.Chart.DataSeriesSortOrder)">
            <summary>
            Sorts the contained data series in the specified sort manner. 
            </summary>
            <remarks>
            The sort is performed on the data series specified by the 
            masterDataSeries parameter.
            </remarks>
            <param name="masterDataSeries">specifies the index of the data series, which is used as sort key</param>
            <param name="order">the desired data series order</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesCollection.Sort(System.Int32,Nevron.Chart.DataSeriesSortOrder,System.Collections.IComparer)">
            <summary>
            Sorts the contained data series in the specified sort manner, by using a specified comparer.
            </summary>
            <remarks>
            The sort is performed on the data series specified by the masterDataSeries parameter.
            </remarks>
            <param name="masterDataSeries">specifies the index of the data series, which is used as sort key</param>
            <param name="order">the desired order</param>
            <param name="comparer">custom coparer object</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesCollection.FillFromDataReader(System.Data.IDataReader,System.String[])">
            <summary>
            Fills the contained data series from the OleDbDataReader column names specified 
            by the arrColumnNames array.
            </summary>
            <param name="dataReader">the reader</param>
            <param name="arrColumnNames">array containing the imported column names</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesCollection.FillFromDataTable(System.Data.DataTable,System.String[])">
            <summary>
            Fills the contained data series from the DataTable column names specified 
            by the arrColumnNames array.
            </summary>
            <param name="table">the source data table</param>
            <param name="arrColumnNames">array with the imported column names</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesCollection.FillFromDataView(System.Data.DataView,System.String[])">
            <summary>
            Fills the contained data series from the DataView column names specified 
            by the arrColumnNames array.
            </summary>
            <param name="view">the source data view</param>
            <param name="arrColumnNames">array with the imported column names</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesCollection.ExportToDataTable(System.String)">
            <summary>
            Exports the collection to a data table.
            </summary>
            <remarks>
            Each data series is exported as a separate column in the data table. 
            The name of the column is the name of the respecitve data series.
            </remarks>
            <param name="tableName">specifies the name of the data table</param>
            <returns>the created data table</returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesCollection.RemoveSubset(Nevron.Chart.NDataSeriesSubset)">
            <summary>
            Removes the specified subset from all contained data series.
            </summary>
            <remarks>
            The indexes contained in the argument subset are removed from all data 
            series contained in the collection.
            </remarks>
            <param name="subset">the subset to be removed</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesCollection.ExtractSubset(Nevron.Chart.NDataSeriesSubset)">
            <summary>
            Removes the indexes which are not contained in the specified subset.
            </summary>
            <remarks>
            The indexes not contained in the argument subset are removed from all data 
            series contained in the collection.
            </remarks>
            <param name="subset">the subset to be extracted</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesCollection.IsAligned">
            <summary>
            Checks whether the data series contained in the collection have the 
            same length.
            </summary>
            <returns>true if the series have equal sizes otherwise false</returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesCollection.Align">
            <summary>
            Aligns the data series contained in the collection
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDataSeriesGrid">
            <summary>
            A grid which can be used for the visual editing of the series data series
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesGrid.#ctor">
            <summary>
            Creates a new NDataSeriesGrid object
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesGrid.UpdateSeries(Nevron.Chart.NSeriesBase)">
            <summary>
            Saves the information contained in the grid from the DataGrid DataView.
            </summary>
            <param name="series">series to save to</param>
            <returns>true if the update was successful, otherwise false</returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesGrid.UpdateFromSeries(Nevron.Chart.NSeriesBase)">
            <summary>
            Updates the grid with the data contained in the series
            </summary>
            <param name="series"></param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesGrid.GetDataSeries(Nevron.Chart.NSeriesBase)">
            <summary>
            Returns a collection of the data series which the grid will edit
            </summary>
            <remarks>
            Override this function if you want to hide some data series from editing 
            or want to change the order of the data series.
            </remarks>
            <param name="series"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NDataSeriesGrid.IncludedSeries">
            <summary>
            Controls the included data series
            </summary>
            <remarks>
            By default set to All
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NDataSeriesGrid.ExcludedSeries">
            <summary>
            Controls the exculded data series
            </summary>
            <remarks>
            By default set to None
            </remarks>
        </member>
        <member name="T:Nevron.Chart.NDataSeriesSubset">
            <summary>
            Represents a set of indexes in a data series.
            </summary>
            <remarks>
            An instance of this class is often used as an argument to functions 
            operating only on specific subsets of the data series. 
            The class provides functionality for the standard set operation (Combine, Intersect, Subtract etc.)
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesSubset.#ctor">
            <summary>
            Constructs an empty subset
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesSubset.GetEnumerator">
            <summary>
            Obtains a NDataSeriesSubsetEnumerator object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesSubset.Clone">
            <summary>
            Creates an identical copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesSubset.ToString">
            <summary>
            Renders the subset in a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesSubset.Clear">
            <summary>
            Removes all indexes contained in the subset.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesSubset.AddIndex(System.Int32)">
            <summary>
            Adds a new index in the subset.
            </summary>
            <param name="index">the index to be added</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesSubset.AddRange(System.Int32,System.Int32)">
            <summary>
            Adds a range of indexes in the subset.
            </summary>
            <param name="beginIndex">begining index</param>
            <param name="endIndex">endind index (included in the range)</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesSubset.RemoveIndex(System.Int32)">
            <summary>
            Removes the specified index from this subset.
            </summary>
            <param name="index">index to remove</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesSubset.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes the specified range of indexes from the subset.
            </summary>
            <param name="beginIndex">begin index</param>
            <param name="endIndex">ending index (included in the removed indexes)</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesSubset.FromSubset(Nevron.Chart.NDataSeriesSubset)">
            <summary>
            Initializes the subset from another subset.
            </summary>
            <param name="sourceSubset">the source subset</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesSubset.Contains(System.Int32)">
            <summary>
            Determines whether the subset contains the specified index.
            </summary>
            <param name="index">the index to look for</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesSubset.Combine(Nevron.Chart.NDataSeriesSubset)">
            <summary>
            Combines the currently contained indexes with the indexes contained in a specified subset.
            </summary>
            <remarks>
            The result of the operation is this subset.
            </remarks>
            <param name="subset">subset to combine with</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesSubset.Intersect(Nevron.Chart.NDataSeriesSubset)">
            <summary>
            After the operation the subset will contain only indexes that were 
            contained in both this subset and in the argument subset.
            </summary>
            <param name="subset">argument subset</param>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesSubset.Subtract(Nevron.Chart.NDataSeriesSubset)">
            <summary>
            After the operation the subset will contain only indexes that were 
            contained in this subset and were not members of the argument subset.
            </summary>
            <param name="subset">argument subset</param>
        </member>
        <member name="T:Nevron.Chart.NDataSeriesSubsetEnumerator">
            <summary>
            Enumerator returned by the GetEnumerator() method of the NDataSeriesSubset class.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesSubsetEnumerator.#ctor(Nevron.Chart.NDataSeriesSubset)">
            <summary>
            Constructs a new enumerator connected to the specified subset.
            </summary>
            <param name="subset"></param>
        </member>
        <member name="P:Nevron.Chart.NDataSeriesSubsetEnumerator.Current">
            <summary>
            Gets the current index.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesSubsetEnumerator.MoveNext">
            <summary>
            Moves to the next index in a subset.
            </summary>
            <returns>true if the last record was not reached, otherwise false</returns>
        </member>
        <member name="M:Nevron.Chart.NDataSeriesSubsetEnumerator.Reset">
            <summary>
            Resets the enumerator to the begining of the enumerated state.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NEmptyDataPoints">
            <summary>
            Controls how empty data points are treated.
            </summary>
            <remarks>
            An instance of this object is assigned to each data series.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NEmptyDataPoints.ValueMode">
            <summary>
            Controls the way in which empty data points are treated.
            </summary>
            <remarks>
            By default set to Skip which discards empty data points from 
            being interpolated or replaced with a custom value.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NEmptyDataPoints.CustomValue">
            <summary>
            Defines a custom value that replaces the empty values. This 
            replacement occurs only when the ValueMode property is set to 
            EmptyDataPointsValueMode.CustomValue.
            </summary>
            <remarks>
            By default set to 0, which means that empty data points are displayed as zeros.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NEmptyDataPoints.Label">
            <summary>
            Defines the label that is displayed for missing values.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NIndexedAttributeSeries">
            <summary>
            The NIndexedAttributeSeries is an indexed data series that is 
            used to contain attributes like fill styles, stroke styles, 
            interactivity styles, etc.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NIndexedAttributeSeries.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NIndexedAttributeSeries.#ctor(Nevron.Chart.DataSeriesType,System.String)">
            <summary>
            Creates a new indexed attribute container with the specified data type and name.
            </summary>
            <param name="type">
            specifies the type of the data that will be contained in the data series
            </param>
            <param name="name">specifies the data series name</param>
        </member>
        <member name="M:Nevron.Chart.NIndexedAttributeSeries.Clear">
            <summary>
            Removes all items from the data series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NIndexedAttributeSeries.Clone">
            <summary>
            Creates a copy of the data series.
            </summary>
            <returns>an identical data series</returns>
        </member>
        <member name="P:Nevron.Chart.NIndexedAttributeSeries.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NIndexedAttributeSeries.GetAttributeByName(System.String)">
            <summary>
            Gets a child or descendant attribute by its name
            </summary>
            <param name="attributeName">child name or full attribute name</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NIndexedAttributeSeries.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
            <summary>
            Sets a child or descendant attribute by its name
            </summary>
            <param name="attributeName"></param>
            <param name="attributeValue"></param>
        </member>
        <member name="M:Nevron.Chart.NIndexedAttributeSeries.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="T:Nevron.Chart.NIndexedDataSeries">
            <summary>
            Indexed data series are map-like collections that are designed to 
            store chart data in a memory-efficient way. Each collection item is a 
            key and value pair, where the key is the data point index. Indexed data 
            series are primarily used to store complex data types. They are represented 
            by the NIndexedDataSeries class.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NIndexedDataSeries.#ctor(Nevron.Serialization.INShellConstructorParameter)">
            <summary>
            Shell constructor.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Chart.NIndexedDataSeries.#ctor(Nevron.Chart.DataSeriesType,System.String)">
            <summary>
            Creates a new indexed data series with the specified data type and name.
            </summary>
            <param name="type">
            specifies the type of the data that will be contained 
            in the data series
            </param>
            <param name="name">specifies the data series name</param>
        </member>
        <member name="P:Nevron.Chart.NIndexedDataSeries.StorageType">
            <summary>
            Gets or sets the storage type of this series
            </summary>
        </member>
        <member name="P:Nevron.Chart.NIndexedDataSeries.Item(System.Int32)">
            <summary>
            Gets or sets the value associated with a specific key. The key 
            should be the index of the value within the data series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NIndexedDataSeries.Add(System.Int32,System.Object)">
            <summary>
            Adds an item (key-value pair) to the data series.
            </summary>
            <remarks>
            You can use this method instead of the indexer in case you have to 
            add multiple data items one after another. This method is faster, 
            but is not as safe as the indexer. You have to make sure that the key 
            parameter that you pass is unique within the collection.<br />
            </remarks>
            <param name="key">the index of the data point</param>
            <param name="value">
            The actual data point value. If this parameter is null or DBNull.Value,
            the item is not added to the data series.
            </param>
        </member>
        <member name="M:Nevron.Chart.NIndexedDataSeries.Remove(System.Int32)">
            <summary>
            Removes the item with the specified key from the collection. Keys after the specified key will be shifted by -1.
            </summary>
            <param name="key">identifies the item to be removed</param>
        </member>
        <member name="M:Nevron.Chart.NIndexedDataSeries.RemoveNoShift(System.Int32)">
            <summary>
            Removes the item with the specified key from the collection, without shifting the other keys
            </summary>
            <param name="key">identifies the item to be removed</param>
        </member>
        <member name="M:Nevron.Chart.NIndexedDataSeries.ShiftKeys(System.Int32,System.Int32)">
            <summary>
            Shifts the keys after the speicified key with the specified shift
            </summary>
            <param name="key"></param>
            <param name="shift"></param>
        </member>
        <member name="M:Nevron.Chart.NIndexedDataSeries.Clear">
            <summary>
            Removes all items from the data series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NIndexedDataSeries.ExtractSubset(Nevron.Chart.NDataSeriesSubset)">
            <summary>
            Removes the indexes which are not contained in the specified subset.
            </summary>
            <param name="subset">subset to be extracted</param>
        </member>
        <member name="M:Nevron.Chart.NIndexedDataSeries.RemoveSubset(Nevron.Chart.NDataSeriesSubset)">
            <summary>
            Removes the indexes contained in the specified data series subset.
            </summary>
            <param name="subset">subset to be removed</param>
        </member>
        <member name="M:Nevron.Chart.NIndexedDataSeries.GetValueKey(System.Object)">
            <summary>
            Returns the key of the first encountered value that 
            matches the parameter.
            </summary>
            <param name="value">the value to find</param>
            <returns>-1 if the value is not found in the data series.</returns>
        </member>
        <member name="P:Nevron.Chart.NIndexedDataSeries.Count">
            <summary>
            The number of elements contained in the Collection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NIndexedDataSeries.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NIndexedDataSeries.Clone">
            <summary>
            Creates a copy of the data series.
            </summary>
            <returns>an identical data series</returns>
        </member>
        <member name="T:Nevron.Chart.NSelectDataAdapterForm">
            <summary>
            Summary description for NSelectDataAdapterForm.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSelectDataAdapterForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLineStudy">
            <summary>
            Represents a line study. NLineStudy is is derived from NSeriesBase and is the 
            base class for all line studies. It provides common functionality
            for the line studies like anchor selection, stroke style and text style.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLineStudy.TrendLineMode">
            <summary>
            Controls the display mode of the trendline.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLineStudy.IncludeInMinMaxCalculation">
            <summary>
            Gets or sets whether to include the retracements in the min max calculation
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLineStudy.ShowTexts">
            <summary>
            Controls the visibility of the line study texts.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLineStudy.StrokeStyle">
            <summary>
            Gets or sets the stroke style applied to the line study.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLineStudy.TextStyle">
            <summary>
            Gets or sets the text style applied to the line study texts.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLineStudy.BeginPoint">
            <summary>
            Gets or sets the begin point of the line study
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLineStudy.EndPoint">
            <summary>
            Gets or sets the end point of the line study
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLineStudy.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NLineStudy.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NLineStudy.GetAttributeByNameAt(System.String,System.Int32)">
            <summary>
            Gets an an attribute by its name and index
            </summary>
            <param name="attributeName">name of the attribute</param>
            <param name="index">index of the attribute</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NLineStudy.CacheMinMaxInfo(System.Int32)">
            <summary>
            
            </summary>
            <param name="nIndexZ"></param>
        </member>
        <member name="T:Nevron.Chart.NTrendLine">
            <summary>
            Represents the Trendline line study.
            </summary>
            <remarks>
            The trendline is a straight line that connects two price points and depicts the general direction 
            in which a security is headed. It extends into the future to act as a line of support or resistance.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NTrendLine.#ctor">
            <summary>
            Creates a new instance of the NTrendLine type.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTrendLine.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NCartesianChart">
            <summary>
            The NCartesianChart type represents a chart with a Cartesian coordinate system 
            that can display series like bar, area, line, point, surface, etc.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCartesianChart.#ctor">
            <summary>
            Default Contructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCartesianChart.Fit3DAxisContent">
            <summary>
            Gets or set a value indicating whether 3D chart axis content 
            should be fitted in the chart panel content area.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCartesianChart.Fit2DAxisContent">
            <summary>
            Gets or set a value indicating whether 2D chart axis content 
            should be fitted in the chart panel content area.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCartesianChart.Fit2DAxisContentMode">
            <summary>
            Controls how the 2D chart axis content should be fitted in the chart panel content area
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCartesianChart.UsePlotAspect">
            <summary>
            Gets or set a value how the aspect is calculated when operating in Fit mode. 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCartesianChart.RangeSelections">
            <summary>
            Gets or sets the range selections collection of the chart.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCartesianChart.MinDockZoneMargins">
            <summary>
            Gets or sets the minimum dock zone sizes in 2D
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCartesianChart.MaxDockZoneMargins">
            <summary>
            Gets or sets the maximum dock zone sizes in 2D
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCartesianChart.DisableContentAreaPixelSnapping">
            <summary>
            Gets or sets whether the content area will be pixel snapped
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCartesianChart.DisableAutomaticAxisPlaneSwitching">
            <summary>
            Gets or sets whether to disable automatic axis plane switching
            </summary>
            <remarks>
            When in 3D mode the control will automatically detect the plane that has best visibililty in order to display axis ticks and other decorations.
            This propoerty allows you to disable this feature.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NCartesianChart.PlotArea">
            <summary>
            Gets the plot area of this chart
            </summary>
            <remarks>
            This property contains valid value after the document layout has been been performed
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NCartesianChart.GetAxisDockZoneSize(Nevron.Chart.AxisDockZone)">
            <summary>
            Gets the size of the specified dock zone
            </summary>
            <param name="dockZone"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NCartesianChart.IsPlotZoomed(System.Int32,System.Int32)">
            <summary>
            Returns true if either the x or y axis is zoomed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NCartesianChart.GetModelLineFromViewPoint(Nevron.GraphicsCore.NPointF,System.Int32,System.Int32,System.Int32,Nevron.GraphicsCore.NLine3DF@)">
            <summary>
            Gets a line in model coordinates that corresponds to the specified view point
            </summary>
            <param name="pointView"></param>
            <param name="horizontalAxisId"></param>
            <param name="verticalAxisId"></param>
            <param name="depthAxisId"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NCartesianChart.RecalcLayout(Nevron.Chart.NChartRenderingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NCartesianChart.GetPanelOffsetFromSide(Nevron.Chart.PanelSide)">
            <summary>
            
            </summary>
            <param name="side"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NCartesianChart.SetOffsetsFromSide(Nevron.Chart.NChartRenderingContext,Nevron.Chart.PanelSide,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="side"></param>
            <param name="rootOffset"></param>
            <param name="panelOffset"></param>
        </member>
        <member name="T:Nevron.Chart.NChart">
            <summary>
            NChart is the primary object controlling a chart displayed in the control canvas. 
            This is the base class for different charting types like Cartesian Chart, Pie Chart, 
            Polar Chart, etc. It provides basic functionality like control over the chart dimensions,
            projection and light model. It also exposes the series, axes and walls collections.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChart.Enable3D">
            <summary>
            Gets or sets a value indicating whether the chart will paint 
            in 2D or 3D mode.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChart.DisplayAxesOnTop">
            <summary>
            Gets or sets a value indicating whether axes are displayed after the content
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChart.Width">
            <summary>
            Controls the width of the chart in model units.
            </summary>
            <remarks>
            By default set to 70.
            </remarks>
            <example>
            Increase the width of the chart:
            <code lang = 'VB'>
            chart.Width = 72.0
            </code>
            <code>
            chart.Width = 72.0;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NChart.Height">
            <summary>
            Controls the chart area height in model units.
            </summary>
            <remarks>
            By default set to 55.
            </remarks>
            <example>
            Increase the height of the chart:
            <code lang = 'VB'>
            chart.Height = 57.0
            </code>
            <code>
            chart.Height = 57.0;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NChart.Depth">
            <summary>
            Controls the chart area depth in model units.
            </summary>
            <remarks>
            By default set to 15.0.
            </remarks>
            <example>
            Increase the chart depth:
            <code lang = 'VB'>
            chart.Depth = 16.0
            </code>
            <code>
            chart.Depth = 16.0;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NChart.Series">
            <summary>
            Gets or sets the series collection of the NChart object.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChart.LightModel">
            <summary>
            Gets or sets the NLightModel object controlling the chart context lighting.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChart.Projection">
            <summary>
            Gets or sets the NProjection object controlling the projection of the context.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChart.LabelLayout">
            <summary>
            Gets or sets a NChartLabelLayoutSettings object controlling the automatic data label layout features of the chart.
            </summary>
            <remarks>
            The settings provided by this object are relevant for Cartesian, Polar and Radar charts.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NChart.Axes">
            <summary>
            Obtains a reference to the collection of chart axes.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChart.Walls">
            <summary>
            Obtains a reference to the collection of chart walls.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChart.DisplayOnLegend">
            <summary>
            Specifies the the legend on which the chart information is displayed.
            </summary>
            <remarks>
            By default set to null.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NChart.PlotArea">
            <summary>
            Gets the plot area of this chart
            </summary>
            <remarks>
            This property contains valid value after the document layout has been been performed
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NChart.Axis(Nevron.Chart.StandardAxis)">
            <summary>
            Obtains a reference to a standard chart axis.
            </summary>
            <remarks>
            The chart has five standard axes - two vertical, two horizontal and one depth axis. 
            See the Axis Overview topic in the Users Guide for more information.
            </remarks>
            <param name="type">The requested standard axis</param>>
            <returns>Reference to the specified axis</returns>
        </member>
        <member name="M:Nevron.Chart.NChart.Axis(System.Int32)">
            <summary>
            Obtains a reference to a chart axis with the specified id.
            </summary>
            <param name="nAxisId">the id of the axis</param>
        </member>
        <member name="M:Nevron.Chart.NChart.Wall(Nevron.Chart.ChartWallType)">
            <summary>
            Obtains a reference to a standard chart wall.
            </summary>
            <param name="type">specifies the chart wall</param>
        </member>
        <member name="M:Nevron.Chart.NChart.SetPredefinedChartStyle(Nevron.Chart.PredefinedChartStyle)">
            <summary>
            Applies a predefined chart style.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChart.TransformModelToView(Nevron.GraphicsCore.NVector3DF,Nevron.GraphicsCore.NVector3DF@)">
            <summary>
            Converts a model point in the chart model space to view point.
            </summary>
            <param name="vecModelPoint"></param>
            <param name="vecClientPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NChart.TransformViewToModel(Nevron.GraphicsCore.NVector3DF,Nevron.GraphicsCore.NVector3DF@)">
            <summary>
            Converts a point in control view coordinates to chart model coordinates
            </summary>
            <param name="vecViewPoint"></param>
            <param name="vecModelPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NChart.TransformViewToModel(Nevron.Chart.NAxis,Nevron.Chart.NAxis,Nevron.Chart.NAxis,System.Single,System.Drawing.Point,Nevron.GraphicsCore.NVector3DF@)">
            <summary>
            Transforms a client point to a point in model space. 
            </summary>
            <param name="horzAxis"></param>
            <param name="vertAxis"></param>
            <param name="depthAxis"></param>
            <param name="fDepthValue"></param>
            <param name="ptViewPoint"></param>
            <param name="vecModelPoint"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NChart.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NChart.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NChart.HitTest(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NRectangleF,System.Boolean,System.Collections.Generic.List{Nevron.Dom.INNode})">
            <summary>
            Performs a hit test.
            </summary>
            <param name="context"></param>
            <param name="rect"></param>
            <param name="containOrIntersect"></param>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.Chart.NChart.OnAnchorChanged">
            <summary>
            Called when an axis anchor has changed
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChart.OnScaleChanged">
            <summary>
            Called when a scale has changed
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChart.ProvideContentForScale(Nevron.Chart.NScale)">
            <summary>
            Returns a list of INScaleContents that scale on the specified scale
            </summary>
            <param name="scale"></param>
            <returns>null if none</returns>
        </member>
        <member name="M:Nevron.Chart.NChart.Clone">
            <summary>
            Creates an identical copy of this chart object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NChartCollection">
            <summary>
            Represents a collection of NChart objects.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartCollection.#ctor(Nevron.Chart.NRootPanel)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rootPanel"></param>
        </member>
        <member name="M:Nevron.Chart.NChartCollection.Add(Nevron.Chart.NChart)">
            <summary>
            Adds a new NChart to the collection and returns a reference to it.
            </summary>
            <returns>reference to the newly created chart</returns>
        </member>
        <member name="P:Nevron.Chart.NChartCollection.Item(System.Int32)">
            <summary>
            Collection indexer method
            </summary>
        </member>
        <member name="T:Nevron.Chart.NChartControlEditorUC">
            <summary>
            Summary description for NChartControlEditorUC.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartControlEditorUC.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartControlEditorUC.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NFunnelChart">
            <summary>
            The NFunnelChart type is intended for display of Funnel charts.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFunnelChart.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NPieChart">
            <summary>
            The NPieChart type is intended for display of pie charts. It doesn't have any axes or walls. 
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPieChart.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPieChart.BeginAngle">
            <summary>
            Controls the begin angle of the pie segments.
            </summary>
            <remarks>
            By default set to 0.
            </remarks>
            <example>
            The following code will instruct the pie series to display the first pie 
            from 90 degrees.
            <code lang = 'VB'>
            pieSeries.BeginAngle = 90
            </code>
            <code>
            pieSeries.BeginAngle = 90;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NPieChart.TotalAngle">
            <summary>
            Controls the total angle displayed as a pie. 
            </summary>
            <remarks>
            By default 360.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NPieChart.ClockwiseDirection">
            <summary>
            Controls the direction in which pie segments expand
            </summary>
            <remarks>
            By default this property is set to false (counter-clockwise direction).
            Please note that this setting does not affect the order of the data point legend data items (when the attached NSeriesLegend is switched in DataPoints mode).
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NPieChart.Radius">
            <summary>
            Controls the radius of the pie. By default set to 100% of the parent
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPieChart.InnerRadius">
            <summary>
            Controls the inner radius of the pie when the style is torus. By default set to 80% of the parent
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPieChart.RecalcLayout(Nevron.Chart.NChartRenderingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NPieChart.PreOrderPaint2D(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NPieChart.PreOrderPaint3D(Nevron.Chart.NChartRenderingContext3D)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NPieChart.PostOrderPaint2D(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Chart.NPolarChart">
            <summary>
            The NPolarChart type represents a chart with a polar coordinate system that can display 
            polar line and point charts.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPolarChart.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPolarChart.CartesianDockZonesOffset">
            <summary>
            Gets or sets a value controlling the offset of the four cartesian dock zones holding value axes
            from the outer rim of the polar
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPolarChart.MinDockZoneMargins">
            <summary>
            Gets or sets the minimum dock zone sizes in 2D
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPolarChart.Fit2DAxisContent">
            <summary>
            Gets or set a value indicating whether 2D polar axis content should be fitted in the chart panel content area.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPolarChart.MaxDockZoneMargins">
            <summary>
            Gets or sets the maximum dock zone sizes in 2D
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPolarChart.GetDockZoneWidth(Nevron.Chart.PolarAxisDockZone)">
            <summary>
            Gets the width of the specified dock zone
            </summary>
            <param name="dockZone"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NPolarChart.RecalcLayout(Nevron.Chart.NChartRenderingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NPolarChart.TransformRadialModelToChartModel(Nevron.GraphicsCore.NPointF)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NPolarChart.TransformViewToRadialModel(Nevron.GraphicsCore.NPointF)">
            <summary>
            Transforms a point from chart view space to radial model coordinates
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Chart.NPolarChart.m_CartesianDockZonesOffset">
            <summary>
            Dock offset for side axes
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRadarChart">
            <summary>
            The NRadarChart type is intended for display of radar charts.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRadarChart.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadarChart.RadarMode">
            <summary>
            Gets or sets the mode in which the radar chart operates.
            </summary>
            <remarks>
            You can choose between Single Measure mode (all Radar axes display 
            the same quantative scale) and Multi Measure mode (each Radar axis displays 
            a different quantative scale). By default the chart operates in Single Measure mode.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NRadarChart.RecalcLayout(Nevron.Chart.NChartRenderingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Chart.NRadialChart">
            <summary>
            Base class for polar and radar charts
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRadialChart.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadialChart.BeginAngle">
            <summary>
            Gets or sets the begin angle
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadialChart.InnerRadius">
            <summary>
            Gets or sets the height of the ruler in NLength format.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadialChart.Radius">
            <summary>
            Get the chart radius
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadialChart.Center">
            <summary>
            Gets the center of the chart
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRadialChart.TransformViewToModelPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NVennChart">
            <summary>
            The NVennChart type is intended for display of Venn diagrams.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVennChart.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVennChart.RecalcLayout(Nevron.Chart.NChartRenderingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Chart.NRangeSelection">
            <summary>
            Represents a range selection.
            </summary>
            <remarks>
            Range selections are used to dynamically highlight an area on set of two axes.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NRangeSelection.#ctor">
            <summary>
            Creates a new range selection attached to the default horizontal and vertical axes
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeSelection.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new range selection attached to the specified horizontal and vertical axes
            </summary>
            <param name="horizontalAxisId"></param>
            <param name="verticalAxisId"></param>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.Visible">
            <summary>
            Controls the visibility of the range selection.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.PaintInverted">
            <summary>
            Gets or sets whether to paint an inverted range selection. 
            </summary>
            <remarks>
            When painting inverted the range selection will fill the whole area enclosed by the horizontal and vertical axes except the area selected by the range selection.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.ShowGrippers">
            <summary>
            Gets or sets whether to show grippers
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.HorizontalAxisId">
            <summary>
            The axis id of the horizontal axis.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.VerticalAxisId">
            <summary>
            The axis id of the vertical axis.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.PreserveAspectRatio">
            <summary>
            Whether to preserve the aspect ratio of the selection relative to the chart area.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.ZoomOutResetsAxis">
            <summary>
            When set to true zooming out will reset the axes to their original state
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.AllowPan">
            <summary>
            Gets or sets whether to allow panning
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.AllowHorizontalResize">
            <summary>
            Gets or sets whether to allow horizontal resize
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.AllowVerticalResize">
            <summary>
            Gets or sets whether to allow vertical resize
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.HorizontalValueSnapper">
            <summary>
            Defines how to snap horizontal scale coordinates to axis ticks and ruler.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.VerticalValueSnapper">
            <summary>
            Defines how to snap vertical scale coordinates to axis ticks and ruler.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.HorizontalAxisRange">
            <summary>
            The horizontal axis range in scale coordinates.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.VerticalAxisRange">
            <summary>
            The vertical axis range in scale coordinates.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.FillStyle">
            <summary>
            The fill style of the range selection.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.BorderStyle">
            <summary>
            The border style of the range selection.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.GripperFillStyle">
            <summary>
            Gets or sets the fill style of the gripper
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.GripperPressedFillStyle">
            <summary>
            Gets or sets the pressed fill style of the gripper
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.GripperHoverFillStyle">
            <summary>
            Gets or sets the hover fill style of the gripper
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.GripperStrokeStyle">
            <summary>
            Gets or sets the gripper stoke style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.GripperPressedStrokeStyle">
            <summary>
            Gets or sets the gripper pressed stoke style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.GripperHoverStrokeStyle">
            <summary>
            Gets or sets the gripper hover stoke style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.Label">
            <summary>
            The label of the range selection.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.InteractivityStyle">
            <summary>
            The interactivity style associated with the axis attribute.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.EnableMouseDrag">
            <summary>
            When set to true the range selection can be dragged using the NDataZoomTool.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.MinHorizontalPageSize">
            <summary>
            Gets or sets the horizontal minimal page size that this range selection can apply
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.MinVerticalPageSize">
            <summary>
            Gets or sets the minimal vertical page size that this range selection can apply
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.HorizontalAscendingZoom">
            <summary>
            Gets a value indicating whether moving the mouse in the positive direction relative to the horizontal axis produces a zoom in.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.VerticalAscendingZoom">
            <summary>
            Gets a value indicating whether moving the mouse in the positive direction relative to the vertical axis produces a zoom in.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.GripperSize">
            <summary>
            Gets or sets the gripper size
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.DragMode">
            <summary>
            Gets the current drag mode
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeSelection.ZoomOut">
            <summary>
            Zooms out the horizontal and vertical axes associated with this selection
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeSelection.ZoomIn">
            <summary>
            Zooms in the horizontal and vertical axes associated with this selection
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeSelection.IsZoomIn">
            <summary>
            Returns true if the range selection is in ZoomIn state
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NRangeSelection.SetAxisRanges(Nevron.GraphicsCore.NRange1DD,Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Set the horizontal and vertical axis ranges
            </summary>
            <param name="horizontalAxisRange"></param>
            <param name="verticalAxisRange"></param>
        </member>
        <member name="M:Nevron.Chart.NRangeSelection.SetRangeFromFactor(System.Double)">
            <summary>
            Sets the range selection range from a zoom factor (specified as a value from 0 to 1 from 
            the respective horizontal or vertical axis)
            </summary>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NRangeSelection.SetRangeFromCenterPointAndFactor(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NPointF,System.Double)">
            <summary>
            Sets the range selection range from a specified centerPoint and zoom factor (specified as a value from 0 to 1 from 
            the respective horizontal or vertical axis)
            </summary>
            <param name="context"></param>
            <param name="centerPoint"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NRangeSelection.SetRangeFromViewPoints(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NPointF)">
            <summary>
            Sets the horizontal and vertical axis ranges of this selection to match the specified begin and end view points.
            </summary>
            <param name="context"></param>
            <param name="beginPoint"></param>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="E:Nevron.Chart.NRangeSelection.HorizontalAxisRangeChanged">
            <summary>
            Occurs when the horizontal range has changed.
            </summary>
        </member>
        <member name="E:Nevron.Chart.NRangeSelection.VerticalAxisRangeChanged">
            <summary>
            Occurs when the vertical range has changed.
            </summary>
        </member>
        <member name="E:Nevron.Chart.NRangeSelection.DragModeChanged">
            <summary>
            Occurs when the range selection drag mode has changed
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeSelection.OnDragModeChanged">
            <summary>
            Raises the DragModeChanged event
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeSelection.OnHoronztalAxisRangeChanged">
            <summary>
            Raises the HoronztalAxisValueChanged event
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeSelection.OnVerticalAxisRangeChanged">
            <summary>
            Raises the HoronztalAxisValueChanged event
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelection.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NRangeSelection.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NRangeSelection.AlignSlaves">
            <summary>
            Aligns all slaves cursors with this cursors.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeSelection.AlignToMaster(Nevron.Chart.INMaster)">
            <summary>
            Aligns this range selection to the master range selection.
            </summary>
            <param name="master"></param>
        </member>
        <member name="M:Nevron.Chart.NRangeSelection.ReplaceForeignUniqueIds(System.Collections.Hashtable,System.Boolean)">
            <summary>
            Replaces any foreign unique ids (references to other nodes)
            </summary>
            <param name="mapUIds">map of uids which is used to find the new foreign uid value</param>
            <param name="makeNotFoundEmpty">indicates whether the not found foreign uids must be set to Guid.Empty</param>
        </member>
        <member name="M:Nevron.Chart.NRangeSelection.RepaintOverlay">
            <summary>
            Repaints the overlay
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeSelectionCollection.#ctor">
            <summary>
            Creates a new empty interactivity operations collection.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelectionCollection.Name">
            <summary>
            User defined name of the node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeSelectionCollection.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDataLabelStyle">
            <summary>
            Controls the appearance of a data point label.
            </summary>
            <remarks>
            An instance of this class is associated with each NSeries derived series. 
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NDataLabelStyle.#ctor">
            <summary>
            Creates a new data label style with default settings.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataLabelStyle.Visible">
            <summary>
            Controls the visibility of the data label.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataLabelStyle.VertAlign">
            <summary>
            Controls the vertical data label alignment relative to the data point bound.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataLabelStyle.ArrowLength">
            <summary>
            Controls the length of the arrow connecting the data point and the text label.
            </summary>
            <remarks>
            By default set to 4.0f.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NDataLabelStyle.ArrowPointerLength">
            <summary>
            Controls the length of the arrow pointer pointing to the data label text.
            </summary>
            <remarks>
            By default set to 0. Note that not all series data points have arrow pointers. 
            Currently only the pie series in spider mode use this value.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NDataLabelStyle.Format">
            <summary>
            Gets or sets the format string of the data labels.
            </summary>
            <remarks>
            With the help of the format string you can specify what content 
            must be displayed in the data labels. The formatting commands 
            depend on the series.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NDataLabelStyle.TextStyle">
            <summary>
            Gets or sets the text style applied to the data labels.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataLabelStyle.ArrowStrokeStyle">
            <summary>
            Gets or sets the stroke style applied to the data label arrows.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataLabelStyle.FitMode">
            <summary>
            Gets or sets the the fit mode of pie data labels
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDataLabelStyle.MaxWidth">
            <summary>
            Gets or sets the maximum width of the data label
            </summary>
            <remarks>
            This propery has effect only when FitMode is set to Wrap
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NDataLabelStyle.Attributes">
            <summary>
            Gets an array of the child attributes of this attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDataLabelStyle.GetAttributeByName(System.String)">
            <summary>
            Gets a child or descendant attribute by its name
            </summary>
            <param name="attributeName">child name or full attribute name</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NDataLabelStyle.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NDataLabelStyle.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
            <summary>
            Sets a child or descendant attribute by its name
            </summary>
            <param name="attributeName"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:Nevron.Chart.NDataLabelStyle.OnDrawPreviewBackground(Nevron.GraphicsCore.IN2DDevice,Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Draws the background of the preview for this appearance style.
            </summary>
            <param name="device"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:Nevron.Chart.NDataLabelStyle.OnDrawPreview(Nevron.GraphicsCore.IN2DDevice,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Draws the preview for this appearance style.
            </summary>
            <param name="device"></param>
            <param name="size"></param>
        </member>
        <member name="M:Nevron.Chart.NDataLabelStyle.GetDescription">
            <summary>
            Returns a short description of this style.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NDataLabelStyle.GetPaintableRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NLengthConverter)">
            <summary>
            Obtains the paintable rectangle associated with this appearance style
            </summary>
            <param name="shapeRect"></param>
            <param name="lengthConverter"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NEmptyDataPointsAppearance">
            <summary>
            Controls the appearance of the empty data points. An instance of this class is attached to every series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NEmptyDataPointsAppearance.#ctor">
            <summary>
            Default contructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NEmptyDataPointsAppearance.FillStyle">
            <summary>
            Controls the fill style applied to the empty data points.
            </summary>
            <remarks>
            Empty data points which are filled with this fill style when the 
            AppearanceMode property is set to Special.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NEmptyDataPointsAppearance.BorderStyle">
            <summary>
            Controls the stroke style applied to the empty data points.
            </summary>
            <remarks>
            Empty data points are displayed with this stroke style when the 
            AppearanceMode property is set to Special.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NEmptyDataPointsAppearance.MarkerStyle">
            <summary>
            Controls the appearance of the empty data points markers.
            </summary>
            <remarks>
            Empty data point markers are displayed with this marker style if the 
            MarkerMode property is set to Special.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NEmptyDataPointsAppearance.DataLabelStyle">
            <summary>
            Gets or sets an object that controls the appearance of the empty data points labels.
            </summary>
            <remarks>
            Empty data point labels are displayed with this label style if the 
            DataLabelMode property is set to Special.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NEmptyDataPointsAppearance.AppearanceMode">
            <summary>
            Specifies the appearance mode for the empty data points.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NEmptyDataPointsAppearance.MarkerMode">
            <summary>
            Specifies the marker mode for empty data points.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NEmptyDataPointsAppearance.DataLabelMode">
            <summary>
            Specifies the label mode for empty data points.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NEmptyDataPointsAppearance.Attributes">
            <summary>
            Gets an array of the child attributes of this attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NEmptyDataPointsAppearance.GetAttributeByName(System.String)">
            <summary>
            Gets a child or descendant attribute by its name
            </summary>
            <param name="attributeName">child name or full attribute name</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NEmptyDataPointsAppearance.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NEmptyDataPointsAppearance.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
            <summary>
            Sets a child or descendant attribute by its name
            </summary>
            <param name="attributeName"></param>
            <param name="attribute"></param>
        </member>
        <member name="T:Nevron.Chart.NMarkerStyle">
            <summary>
            Controls the appearance of a data point marker.
            </summary>
            <remarks>
            You can obtain a reference to an instance of this class through the 
            MarkerStyle property of the <see cref="T:Nevron.Chart.NSeries"/> class. 
            By default the markers are not displayed.
            <para>
            The following code obtains a reference to the default 
            NMarkerStyle object associated with a series.
            <code lang = 'VB'>
            Dim markerStyle As NMarkerStyle =  series.MarkerStyle
            </code>
            <code>
            NMarkerStyle markerStyle = series.MarkerStyle;
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NMarkerStyle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NMarkerStyle.#ctor(Nevron.Chart.PointShape,Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="shape"></param>
            <param name="fillStyle"></param>
            <param name="borderStyle"></param>
        </member>
        <member name="M:Nevron.Chart.NMarkerStyle.#ctor(Nevron.Chart.PointShape,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="shape"></param>
            <param name="fillStyle"></param>
        </member>
        <member name="P:Nevron.Chart.NMarkerStyle.Visible">
            <summary>
            Controls the visibility of the data point markers
            </summary>
            <remarks>
            By default set to false
            </remarks>
            <example>
            The following code shows the markers of a line series.
            <code lang = 'VB'>
            lineSeries.MarkerStyle.Visible = True
            </code>
            <code>
            lineSeries.MarkerStyle.Visible = true;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NMarkerStyle.PointShape">
            <summary>
            Defines the style of the data point markers
            </summary>
            <remarks>
            By default set to Bar
            </remarks>
            <example>
            The following code displays a line series with sphere marks
            <code lang = 'VB'>
            line.MarkerStyle.Visible = True
            line.MarkerStyle.PointShape = PointShape.Sphere
            </code>
            <code>
            line.MarkerStyle.Visible = true;
            line.MarkerStyle.PointShape = PointShape.Sphere;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NMarkerStyle.Width">
            <summary>
            Controls the width of the data point marker in NLength format
            </summary>
            <remarks>
            By default set to 2.5 percent of the chart area
            </remarks>
            <example>
            The following code increases the width of a line series marks
            <code lang = 'VB'>
            line.MarkerStyle.Width = new NLength(2.75F, NRelativeUnit.ParentPercentage)
            </code>
            <code>
            line.MarkerStyle.Width = new NLength(2.75F, NRelativeUnit.ParentPercentage);
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NMarkerStyle.Height">
            <summary>
            Controls the height of the data point marker in NLength format
            </summary>
            <remarks>
            By default set to 2.5 percent of the chart area
            </remarks>
            <example>
            The following code increases the height of a line series marks
            <code lang = 'VB'>
            line.MarkerStyle.Height = new NLength(2.75F, NRelativeUnit.ParentPercentage)
            </code>
            <code>
            line.MarkerStyle.Height = new NLength(2.75F, NRelativeUnit.ParentPercentage);
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NMarkerStyle.Depth">
            <summary>
            Controls the depth of the data point marker in model units
            </summary>
            <remarks>
            By default set to 2.5 percent of the chart area
            </remarks>
            <example>
            The following code increases the depth of a line series marks
            <code lang = 'VB'>
            line.MarkerStyle.Depth = new NLength(2.75F, NRelativeUnit.ParentPercentage)
            </code>
            <code>
            line.MarkerStyle.Depth = new NLength(2.75F, NRelativeUnit.ParentPercentage);
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NMarkerStyle.MaxWidth">
            <summary>
            Gets or sets the maximum width of the data point marker in model units
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMarkerStyle.MaxHeight">
            <summary>
            Gets or sets the maximum height of the data point marker in model units
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMarkerStyle.MaxDepth">
            <summary>
            Gets or sets the maximum depth of the data point marker in model units
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMarkerStyle.MinWidth">
            <summary>
            Gets or sets the minimum width of the data point marker in model units
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMarkerStyle.MinHeight">
            <summary>
            Gets or sets the minimum height of the data point marker in model units
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMarkerStyle.MinDepth">
            <summary>
            Gets or sets the minimum depth of the data point marker in model units
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMarkerStyle.AutoDepth">
            <summary>
            When set to true the component automatically determines the marker depth
            </summary>
            <remarks>
            If this property is set to true the value of the Depth property is ignored
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NMarkerStyle.VertAlign">
            <summary>
            Controls the vertical alignment of the data point markers
            </summary>
            <remarks>
            By default set to Top
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NMarkerStyle.FillStyle">
            <summary>
            Gets or sets the fill style applied to the data point markers.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMarkerStyle.BorderStyle">
            <summary>
            Gets or sets the stroke style applied to the data point markers.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NMarkerStyle.CustomShape">
            <summary>
            Gets or set a custom shape object that is used for display of markers.
            </summary>
            <remarks>
            This property is regarded when the value of the PointShape property is set to PointShape.Custom.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NMarkerStyle.Attributes">
            <summary>
            Gets an array of the child attributes of this attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NMarkerStyle.GetAttributeByName(System.String)">
            <summary>
            Gets a child or descendant attribute by its name
            </summary>
            <param name="attributeName">child name or full attribute name</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NMarkerStyle.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NMarkerStyle.SetAttributeByName(System.String,Nevron.Dom.INAttribute)">
            <summary>
            Sets a child or descendant attribute by its name
            </summary>
            <param name="attributeName"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:Nevron.Chart.NMarkerStyle.OnDrawPreview(Nevron.GraphicsCore.IN2DDevice,Nevron.GraphicsCore.NSizeF)">
            <summary>
            Draws the preview for this appearance style.
            </summary>
            <param name="device"></param>
            <param name="size"></param>
        </member>
        <member name="M:Nevron.Chart.NMarkerStyle.GetDescription">
            <summary>
            Returns a short description of this style.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NMarkerStyle.GetPaintableRect(Nevron.GraphicsCore.NRectangleF,Nevron.GraphicsCore.NLengthConverter)">
            <summary>
            Obtains the paintable rectangle associated with this appearance style
            </summary>
            <param name="shapeRect"></param>
            <param name="lengthConverter"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NSeriesLegend">
            <summary>
            Controls the representation of the associated series in the chart legend.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesLegend.Mode">
            <summary>
            Determines the mode in which the legend is filled with information about the series.
            </summary>
            <remarks>
            By default it set to Series.
            </remarks>
            <example>
            The following code fills the legend with the data points displayed by a bar series.
            <code lang = 'VB'>
            bar.Legend.Mode = SeriesLegendMode.DataPoints
            </code>
            <code>
            bar.Legend.Mode = SeriesLegendMode.DataPoints;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSeriesLegend.Order">
            <summary>
            The order in which legend items generated by the series are included in the legend.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesLegend.InheritSeriesShadowColor">
            <summary>
            When set to true the legend entries created from the series will inherit the series shadow color.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesLegend.InheritSeriesShadowType">
            <summary>
            When set to true the legend entries created from the series will inherit the series shadow type.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAreaSeries">
            <summary>
            Displays an area series.
            </summary>
            <remarks>
            The NAreaSeries inherits all functionality of its base NXYScatterSeries 
            and displays area segments connecting the adjacent data points. The area begins 
            from an origin value which can be manually specified or calculated automatically.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NAreaSeries.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAreaSeries.MultiAreaMode">
            <summary>
            Controls the mode of the area series.
            </summary>
            <remarks>
            This property determines the way in which the area series interacts with the other created area series. 
            By default set to MultiAreaMode.Series
            </remarks>
            <example>
            The following code will create a stack area chart.
            <code lang = 'VB'>
            Dim area1 As NAreaSeries =  Chart.Series.Add(SeriesType.Area) 
            Dim area2 As NAreaSeries =  Chart.Series.Add(SeriesType.Area) 
            area1.Add(12)
            area1.Add(24)
            area1.Add(42)
            area2.Add(24)
            area2.Add(34)
            area2.Add(16)
            area2.MultiAreaMode = MultiAreaMode.Stacked
            </code>
            <code>
            NAreaSeries area1 = Chart.Series.Add(SeriesType.Area);
            NAreaSeries area2 = Chart.Series.Add(SeriesType.Area);
            area1.Add(12);
            area1.Add(24);
            area1.Add(42);
            area2.Add(24);
            area2.Add(34);
            area2.Add(16);
            area2.MultiAreaMode = MultiAreaMode.Stacked; 
            </code>
            </example>
            <seealso cref="T:Nevron.Chart.MultiAreaMode"/>
        </member>
        <member name="P:Nevron.Chart.NAreaSeries.SamplingMode">
            <summary>
            Whether or not the line series will use sampling
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAreaSeries.SampleDistance">
            <summary>
            Gets the sample distance when the series uses sampling
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAreaSeries.AllowNegativeStackValues">
            <summary>
            Whether the series allows negative stack values 
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAreaSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NAreaSeriesBase">
            <summary>
            Abstract base class for Area series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAreaSeriesBase.#ctor">
            <summary>
            Default Contructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAreaSeriesBase.OriginMode">
            <summary>
            Specifies which value should be used as an area origin.
            </summary>
            <remarks>
            If this property is set to SeriesOriginMode.CustomOrigin the 
            area origin is specified by the Origin property. If this property is set to 
            SeriesOriginMode.MaxValue the origin is the max value of the area. If this property is 
            set to SeriesOriginMode.MinValue the origin is the min value of the area.
            <para>
            By default this property is set to SeriesOriginMode.CustomOrigin.
            </para>
            </remarks>
            <example>
            The following code displays an area with origin value 20.
            <code lang = 'VB'>
            area.OriginMode = SeriesOriginMode.CustomOrigin
            area.Origin = 20
            </code>
            <code>
            area.OriginMode = SeriesOriginMode.CustomOrigin;
            area.Origin = 20;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NAreaSeriesBase.Origin">
            <summary>
            Specifies the area origin value.
            </summary>
            <remarks>
            This property specifies the origin value when the OriginMode is set to CustomOrigin.
            The default origin value is 0.
            </remarks>
            <example>
            The following code displays an area with origin value 20.
            <code lang = 'VB'>
            area.OriginMode = SeriesOriginMode.CustomOrigin
            area.Origin = 20
            </code>
            <code>
            area.OriginMode = SeriesOriginMode.CustomOrigin;
            area.Origin = 20;
            </code>
            </example>
        </member>
        <member name="M:Nevron.Chart.NAreaSeriesBase.StoreAreaMinMaxY(System.Double,System.Double,System.Boolean)">
            <summary>
            
            </summary>
            <param name="dMinY"></param>
            <param name="dMaxY"></param>
            <param name="hasDataPointsInXRange"></param>
        </member>
        <member name="T:Nevron.Chart.NBarSeries">
            <summary>
            Represents a bar series.
            </summary>
            <remarks>
            You can create an instance of this class with the help of the 
            Add method of the NSeriesCollection class.
            <code lang = 'VB'>
            Dim barSeries As NBarSeries =  NChart.Series.Add(SeriesType.Bar)
            </code>
            <code>
            NBarSeries barSeries = NChart.Series.Add(SeriesType.Bar);
            </code>
            </remarks>
            <seealso cref="T:Nevron.Chart.NSeries"/>
        </member>
        <member name="M:Nevron.Chart.NBarSeries.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBarSeries.ErrorStrokeStyle">
            <summary>
            Controls the stroke style of the errors
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBarSeries.MultiBarMode">
            <summary>
            Controls the mode of the bar series.
            </summary>
            <remarks>
            Defines the behaviour of the series in case multiple bar series are created. 
            By default set to Series which means that the bar series is displayed in separate depth space.
            </remarks>
            <example>
            The following example creates a stack bar chart.
            <code lang = 'VB'>
            Dim bar1 As NBarSeries =  NChart1.Series.Add(SeriesType.Bar) 
            Dim bar2 As NBarSeries =  NChart1.Series.Add(SeriesType.Bar) 
            bar2.MultiBarMode = MultiBarMode.Stacked
            </code>
            <code>
            NBarSeries bar1 = NChart1.Series.Add(SeriesType.Bar);
            NBarSeries bar2 = NChart1.Series.Add(SeriesType.Bar);
            bar2.MultiBarMode = MultiBarMode.Stacked;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NBarSeries.OriginMode">
            <summary>
            Specifies which value should be used as a bar origin.
            </summary>
            <remarks>
            If this property is set to SeriesOriginMode.CustomOrigin the 
            bar origin is specified by the Origin property. If this property is set to 
            SeriesOriginMode.MaxValue the origin is the max value of the bar series. If this 
            property is set to SeriesOriginMode.MinValue the origin is the min value of the bar series.
            <para>
            By default this property is set to SeriesOriginMode.CustomOrigin.
            </para>
            </remarks>
            <example>
            The following code displays a bar series with origin value 20.
            <code lang = 'VB'>
            bar.OriginMode = SeriesOriginMode.CustomOrigin
            bar.Origin = 20
            </code>
            <code>
            bar.OriginMode = SeriesOriginMode.CustomOrigin;
            bar.Origin = 20;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NBarSeries.Origin">
            <summary>
            Specifies the bars origin value when the UseOrigin is set to true.
            </summary>
            <remarks>
            By default 0.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NBarSeries.ShowLowerError">
            <summary>
            Controls the visibility of the lower errors. This property takes 
            effect when the UseXValues property is set to true.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBarSeries.ShowUpperError">
            <summary>
            Controls the visibility of the upper errors. This property takes 
            effect when the UseXValues property is set to true.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBarSeries.LowerErrors">
            <summary>
            Gets or sets the data series containing the lower error values.
            </summary>
            <remarks>
            The data series is of type Double.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NBarSeries.UpperErrors">
            <summary>
            Gets or sets the data series containing the upper errors.
            </summary>
            <remarks>
            The data series is of type Double.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NBarSeries.ErrorWidthPercent">
            <summary>
            Specifies the width percent of the bars
            </summary>
            <remarks>
            By default 0.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NBarSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NBarSeries.GetDataSeriesInfos">
            <summary>
            Gets the data series infos
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NBarSeriesBase">
            <summary>
            Abstract base class for Bar series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NBarSeriesBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBarSeriesBase.ShowConnectorLines">
            <summary>
            Gets or sets whether to draw a connector line between bars
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBarSeriesBase.ConnectorLineStrokeStyle">
            <summary>
            Gets or sets the stroke style of connector lines
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBarSeriesBase.Palette">
            <summary>
            Gets or sets the palette assocaited with the bars
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBarSeriesBase.PaletteColorMode">
            <summary>
            Gets or set the the bar width mode when the bar is in scatter mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBarSeriesBase.BarWidthMode">
            <summary>
            Gets or set the the bar width mode when the bar is in scatter mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBarSeriesBase.LogicalBarWidth">
            <summary>
            Gets or sets the logical bar width
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBarSeriesBase.BarWidth">
            <summary>
            Controls the width of the bars in NLength format, when the series is in X scatter mode.
            </summary>
            <remarks>
            By default set to 2 percent of the chart area.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NBarSeriesBase.BarDepth">
            <summary>
            Controls the depth of the bars in NLength format, when the series is in Z scatter mode.
            </summary>
            <remarks>
            By default set to 2 percent of the chart area
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NBarSeriesBase.WidthPercent">
            <summary>
            Controls the width of the bars in percents of the floor grid cell width.
            </summary>
            <remarks>
            By default set to 70.
            </remarks>
            <example>
            The following example changes the width percent to 50 (half of the cell).
            <code lang = 'VB'>
            bar.WidthPercent = 50
            </code>
            <code>
            bar.WidthPercent = 50;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NBarSeriesBase.DepthPercent">
            <summary>
            Controls the depth of bars in percents of the floor grid cell depth.
            </summary>
            <remarks>
            By default set to 50.
            </remarks>
            <example>
            Increase the bars depth.
            <code lang = 'VB'>
            bar.DepthPercent = 65
            </code>
            <code>
            bar.DepthPercent = 65;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NBarSeriesBase.GapPercent">
            <summary>
            Controls the gap between cluster bars in percents of the floor grid cell width.
            </summary>
            <remarks>
            By default set to 0 (no gap).
            </remarks>
            <example>
            The following example creates a gap between the adjacent bars of a cluster bar chart.
            <code lang = 'VB'>
            Dim bar1 As NBarSeries =  NChart.Series.Add(SeriesType.Bar)
            Dim bar2 As NBarSeries =  NChart.Series.Add(SeriesType.Bar)
            bar2.MultiBarMode = MultiBarMode.Clustered
            bar1.GapPercent = 10
            bar2.GapPercent = 10
            </code>
            <code>
            NBarSeries bar1 = NChart.Series.Add(SeriesType.Bar);
            NBarSeries bar2 = NChart.Series.Add(SeriesType.Bar);
            bar2.MultiBarMode = MultiBarMode.Clustered;
            bar1.GapPercent = 10;
            bar2.GapPercent = 10;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NBarSeriesBase.BarShape">
            <summary>
            Controls the shape of the bars.
            </summary>
            <remarks>
            If this property is set to SmoothEdgeBar or CutEdgeBar 
            you can control the edge percent and whether the bar top 
            and bottom ends are smoothed or cut. This is done with the help of 
            the BarEdgePercent, HasTop and HasBottom properties respectively.
            </remarks>
            <example>
            The following example displays a smooth edge bar chart with edge 
            30% on top and bottom.
            <code lang = 'VB'>
            bar.BarShape = BarShape.SmoothEdgeBar
            bar.BarEdgePercent = 30
            bar.HasTopEdge = True
            bar.HasBottomEdge = True
            </code>
            <code>
            bar.BarShape = BarShape.SmoothEdgeBar;
            bar.BarEdgePercent = 30;
            bar.HasTopEdge = true;
            bar.HasBottomEdge = true;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NBarSeriesBase.BarEdgePercent">
            <summary>
            Controls the edge percent of smooth edge bars and cut edge bars. 
            The edge percent must be between 0 and 50.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBarSeriesBase.HasTopEdge">
            <summary>
            Controls the visibility of the top edge of smooth edge 
            bars and cut edge bars.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBarSeriesBase.HasBottomEdge">
            <summary>
            Controls the visibility of the bottom edge of smooth edge 
            bars and cut edge bars.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBarSeriesBase.FillRoundingModeX">
            <summary>
            Controls the X rounding mode of the bar geometry for data items that have no border.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBarSeriesBase.FillRoundingModeY">
            <summary>
            Controls the Y rounding mode of the bar geometry for data items that have no border.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBarSeriesBase.EnableXPixelSnapping">
            <summary>
            Whether to enable pixel snapping for bar x values
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBarSeriesBase.EnableYPixelSnapping">
            <summary>
            Whether to enable pixel snapping for bar y values
            </summary>
        </member>
        <member name="T:Nevron.Chart.NBoxAndWhiskersSeries">
            <summary>
            Represents a box and whiskers series.
            </summary>
            <remarks>
            You can create an instance of this class with the help of the 
            Add method of the NSeriesCollection class.
            <code lang = 'VB'>
            Dim boxAndWhiskers As NBoxAndWhiskersSeries = chart.Series.Add(SeriesType.BoxAndWhiskers)
            </code>
            <code>
            NBoxAndWhiskersSeries boxAndWhiskers = (NBoxAndWhiskersSeries)chart.Series.Add(SeriesType.BoxAndWhiskers);
            </code>
            </remarks>
            <seealso cref="T:Nevron.Chart.NSeries"/>
        </member>
        <member name="M:Nevron.Chart.NBoxAndWhiskersSeries.GetDataSeriesInfos">
            <summary>
            Gets the data series infos
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NBoxAndWhiskersSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NBoxAndWhiskersSeries.UpperBoxValues">
            <summary>
            Gets or sets the data series containing the upper box values.
            </summary>
            <remarks>
            The data series is of type Double.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NBoxAndWhiskersSeries.LowerBoxValues">
            <summary>
            Gets or sets the data series containing the lower box values.
            </summary>
            <remarks>
            The data series is of type Double.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NBoxAndWhiskersSeries.UpperWhiskerValues">
            <summary>
            Gets or sets the data series containing the upper whisker values.
            </summary>
            <remarks>
            The data series is of type Double.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NBoxAndWhiskersSeries.LowerWhiskerValues">
            <summary>
            Gets or sets the data series containing the lower whisker values.
            </summary>
            <remarks>
            The data series is of type Double.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NBoxAndWhiskersSeries.MedianValues">
            <summary>
            Gets or sets the data series containing the median values.
            </summary>
            <remarks>
            The data series is of type Double.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NBoxAndWhiskersSeries.AverageValues">
            <summary>
            Gets or sets the data series containing the average values.
            </summary>
            <remarks>
            The data series is of type Double.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NBoxAndWhiskersSeries.OutlierValues">
            <summary>
            Gets or sets the data series containing the outlier values.
            </summary>
            <remarks>
            The data series is of type DoubleList. Each item in this data series is a list of double values.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NBoxAndWhiskersSeries.BoxWidth">
            <summary>
            Gets or sets the width of the boxes in NLength format, when the series operates in X scatter mode.
            </summary>
            <remarks>
            By default set to 2 percentages of the chart area.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NBoxAndWhiskersSeries.BoxWidthPercent">
            <summary>
            Gets or sets the width of the boxes in percents of the floor grid cell width.
            </summary>
            <remarks>
            By default set to 70.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NBoxAndWhiskersSeries.WhiskersWidthPercent">
            <summary>
            Gets or sets the width of the whiskers in percents of the box width.
            </summary>
            <remarks>
            By default set to 50.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NBoxAndWhiskersSeries.OutliersSize">
            <summary>
            Gets or sets the size of the oulier points in NLength format.
            </summary>
            <remarks>
            By default set to 1 percent of the chart area.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NBoxAndWhiskersSeries.WhiskersStrokeStyle">
            <summary>
            Gets or sets the stroke style applied to the whiskers.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBoxAndWhiskersSeries.AverageStrokeStyle">
            <summary>
            Gets or sets the stroke style applied to the average line.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBoxAndWhiskersSeries.MedianStrokeStyle">
            <summary>
            Gets or sets the stroke style applied to the median line.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBoxAndWhiskersSeries.OutliersBorderStyle">
            <summary>
            Gets or sets the stroke style applied to the borders of the outlier points.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBoxAndWhiskersSeries.OutliersFillStyle">
            <summary>
            Gets or sets the fill style applied to the outlier points.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NBubbleSeries">
            <summary>
            Represents a bubble series.
            </summary>
            <remarks>
            You can create an instance of this class with the help of the 
            Add method of the NSeriesCollection class.
            <code lang = 'VB'>
            Dim bubbleSeries As NBubbleSeries =  NChart.Series.Add(SeriesType.Bubble)
            </code>
            <code>
            NBubbleSeries bubbleSeries = NChart.Series.Add(SeriesType.Bubble);
            </code>
            </remarks>
            <seealso cref="T:Nevron.Chart.NXYScatterSeries"/>
        </member>
        <member name="M:Nevron.Chart.NBubbleSeries.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NBubbleSeries.GetDataSeriesInfos">
            <summary>
            Gets the data series infos
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NBubbleSeries.BubbleShape">
            <summary>
            Controls the bubble style.
            </summary>
            <remarks>
            By default set to Ellipse.
            </remarks>
            <example>
            The following code changes the bubbles style to sphere.
            <code lang = 'VB'>
            bubble.BubbleShape = PointShape.Sphere
            </code>
            <code>
            bubble.BubbleShape = PointShape.Sphere;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NBubbleSeries.MinSize">
            <summary>
            Controls the minimal bubble size.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBubbleSeries.MaxSize">
            <summary>
            Controls the maximal bubble size.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBubbleSeries.Sizes">
            <summary>
            Gets or sets the data series containing the bubble sizes.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBubbleSeries.CustomShape">
            <summary>
            Gets or set a custom shape object that is used for display of data points.
            </summary>
            <remarks>
            This property is regarded when the value of the BubbleShape property is set to PointShape.Custom.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NBubbleSeries.Palette">
            <summary>
            Gets or sets the palette assocaited with the bubbles
            </summary>
        </member>
        <member name="P:Nevron.Chart.NBubbleSeries.BubbleSizeScale">
            <summary>
            Gets or sets the bubble scale
            </summary>
        </member>
        <member name="M:Nevron.Chart.NBubbleSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NErrorBarSeries">
            <summary>
            Represents an error bar series.
            </summary>
            <remarks>
            You can create an instance of this class with the help of the 
            Add method of the NSeriesCollection class.
            <code lang = 'VB'>
            Dim errorBar As NErrorBarSeries = chart.Series.Add(SeriesType.ErrorBar)
            </code>
            <code>
            NErrorBarSeries errorBar = (NErrorBarSeries)chart.Series.Add(SeriesType.ErrorBar);
            </code>
            </remarks>
            <seealso cref="T:Nevron.Chart.NSeries"/>
        </member>
        <member name="M:Nevron.Chart.NErrorBarSeries.GetDataSeriesInfos">
            <summary>
            Gets the data series infos
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NErrorBarSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NErrorBarSeries.SizeX">
            <summary>
            Controls the size of the X error limit lines in NLength format.
            </summary>
            <remarks>
            By default set to 2.5f percent of the parent area.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NErrorBarSeries.SizeY">
            <summary>
            Controls the size of the Y error lines in NLength format.
            </summary>
            <remarks>
            By default set to 2.5 percent of the parent area.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NErrorBarSeries.SizeZ">
            <summary>
            Controls the size of the Z error limit lines in NLength format.
            </summary>
            <remarks>
            By default set to 2.5% of the parent area.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NErrorBarSeries.ShowLowerErrorX">
            <summary>
            Controls the visibility of the lower X errors. This property takes 
            effect when the UseXValues property is set to true.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NErrorBarSeries.ShowUpperErrorX">
            <summary>
            Controls the visibility of the upper X errors. This property takes 
            effect when the UseXValues property is set to true.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NErrorBarSeries.ShowLowerErrorY">
            <summary>
            Controls the visibility of the lower Y errors.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NErrorBarSeries.ShowUpperErrorY">
            <summary>
            Controls the visibility of the upper Y errors.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NErrorBarSeries.ShowLowerErrorZ">
            <summary>
            Controls the visibility of the lower Z errors. This property takes 
            effect when the UseZValues property is set to true.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NErrorBarSeries.ShowUpperErrorZ">
            <summary>
            Controls the visibility of the upper Z errors. This property takes 
            effect when the UseZValues property is set to true.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NErrorBarSeries.LowerErrorsX">
            <summary>
            Gets or sets the data series containing the lower X error values.
            </summary>
            <remarks>
            The data series is of type Double.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NErrorBarSeries.UpperErrorsX">
            <summary>
            Gets or sets the data series containing the upper X errors.
            </summary>
            <remarks>
            The data series is of type Double.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NErrorBarSeries.LowerErrorsY">
            <summary>
            Gets or sets the data series containing the lower Y errors.
            </summary>
            <remarks>
            The data series is of type Double.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NErrorBarSeries.UpperErrorsY">
            <summary>
            Gets or sets the data series containing the upper Y errors.
            </summary>
            <remarks>
            The data series is of type Double.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NErrorBarSeries.LowerErrorsZ">
            <summary>
            Gets or sets the data series containing the lower Z errors.
            </summary>
            <remarks>
            The data series is of type Double.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NErrorBarSeries.UpperErrorsZ">
            <summary>
            Gets or sets the data series containing the upper Z errors.
            </summary>
            <remarks>
            The data series is of type Double.
            </remarks>
        </member>
        <member name="T:Nevron.Chart.NFloatBarSeries">
            <summary>
            Represents a floating bar series.
            </summary>
            <remarks>
            You can create an instance of this class with the help of the 
            Add method of the NSeriesCollection class.
            <code lang = 'VB'>
            Dim floatBarSeries As NFloatBarSeries = NChart.Series.Add(SeriesType.FloatBar)
            </code>
            <code>
            NFloatBarSeries floatBarSeries = NChart.Series.Add(SeriesType.FloatBar);
            </code>
            </remarks>
            <seealso cref="T:Nevron.Chart.NSeries"/>
        </member>
        <member name="M:Nevron.Chart.NFloatBarSeries.GetDataSeriesInfos">
            <summary>
            Gets the data series infos
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NFloatBarSeries.MultiFloatBarMode">
            <summary>
            Controls the combination mode of the float bar series.
            </summary>
            <remarks>
            Floating bar series can cluster with other bar or 
            floating bar series.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NFloatBarSeries.BeginValues">
            <summary>
            Gets or sets the data series holding the float bar begin values.
            </summary>
            <remarks>
            The data series is of type Double
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NFloatBarSeries.EndValues">
            <summary>
            Gets or sets the data series holding the floating bars end values.
            </summary>
            <remarks>
            The data series is of type Double
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NFloatBarSeries.NextTasks">
            <summary>
            Gets or sets the next task(s)s (used when the float bar is used to reprsent a gantt chart)
            </summary>
            <remarks>
            The data series is of type Double
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NFloatBarSeries.ShowGanttConnectorLines">
            <summary>
            Gets or sets whether to draw a connector line between the previous bar end and the current bar begin
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFloatBarSeries.GanttConnectorLineOffset">
            <summary>
            Gets or sets the offset the gantt connector line from the bar
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFloatBarSeries.GanttConnectorLineStrokeStyle">
            <summary>
            Gets or sets the stroke style of end / begin connector lines
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFloatBarSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NFunnelSeries">
            <summary>
            Represents a funnel series.
            </summary>
            <remarks>
            You can create an instance of this class with the help of the 
            Add method of the NSeriesCollection class.
            <code lang = 'VB'>
            Dim funnelSeries As NFunnelSeries = chart.Series.Add(SeriesType.Funnel)
            </code>
            <code>
            NFunnelSeries funnelSeries = (NFunnelSeries)chart.Series.Add(SeriesType.Funnel);
            </code>
            </remarks>
            <seealso cref="T:Nevron.Chart.NSeries"/>
        </member>
        <member name="M:Nevron.Chart.NFunnelSeries.GetDataSeriesInfos">
            <summary>
            Gets the data series infos
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NFunnelSeries.NeckHeightPercent">
            <summary>
            Gets or sets the height of the funnel neck.
            </summary>
            <remarks>
            The height of the funnel neck is measured in percents of the chart height.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NFunnelSeries.NeckWidthPercent">
            <summary>
            Gets or sets the width of the funnel neck.
            </summary>
            <remarks>
            The width of the funnel neck is measured in percents of the chart width.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NFunnelSeries.FunnelPointGap">
            <summary>
            Gets or sets the size of the gap between funnel data points.
            </summary>
            <remarks>
            The default value is 0.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NFunnelSeries.UseXSizes">
            <summary>
            Specifies whether the series should use custom values for the data points X sizes.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NFunnelSeries.XSizes">
            <summary>
            Gets or sets the data series that contains the X sizes of the funnel data points.
            </summary>
            <remarks>
            Custom X size values are used only when the UseXSizes property is set to true.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NFunnelSeries.LabelMode">
            <summary>
            Gets or sets the funnel data point label mode.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFunnelSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NHighLowSeries">
            <summary>
            Displays a high low series.
            </summary>
            <remarks>
            The NHighLowSeries inherits all functionality of its base NXYScatterSeries 
            and displays area segments connecting the adjacent data points.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NHighLowSeries.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NHighLowSeries.GetDataSeriesInfos">
            <summary>
            Gets the data series infos
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NHighLowSeries.AppearanceMode">
            <summary>
            Controls the appearance mode of the high low series.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHighLowSeries.HighValues">
            <summary>
            Gets or sets the data series containing the high values.
            </summary>
            <remarks>
            The data series is of type Double and refers to the Values series.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NHighLowSeries.LowValues">
            <summary>
            Gets or sets the data series containing the low values.
            </summary>
            <remarks>
            The data series is of type Double
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NHighLowSeries.HighFillStyle">
            <summary>
            Gets or sets the fill style applied to the high areas.
            </summary>
            <remarks>
            High areas are areas for which the high value is greater than the low value.
            </remarks>
            <example>
            The following code will display the high areas in blue color.
            <code>
            highlow.HighFillStyle = new NColorFillStyle(Color.Blue);
            </code>
            </example>
            <seealso cref="T:Nevron.GraphicsCore.NFillStyle"/>
        </member>
        <member name="P:Nevron.Chart.NHighLowSeries.HighBorderStyle">
            <summary>
            Gets or sets the stroke style applied to the high area borders.
            </summary>
            <remarks>
            High areas are areas for which the high value is larger than the low value.
            </remarks>
            <example>
            The following code will display the high areas with green border color.
            <code>
            highlow.HighBorderStyle.Color= Color.Green;
            </code>
            </example>
            <seealso cref="T:Nevron.GraphicsCore.NStrokeStyle"/>
        </member>
        <member name="P:Nevron.Chart.NHighLowSeries.LowFillStyle">
            <summary>
            Gets or sets the fill style applied to the low areas.
            </summary>
            <remarks>
            Low areas are areas for which the high value is smaller than the low value.
            </remarks>
            <example>
            The following code will display the low areas in magenta color.
            <code>
            highlow.LowFillStyle = new NColorFillStyle(Color.Magenta);
            </code>
            </example>
            <seealso cref="T:Nevron.GraphicsCore.NFillStyle"/>
        </member>
        <member name="P:Nevron.Chart.NHighLowSeries.LowBorderStyle">
            <summary>
            Gets or sets the stroke style applied to the low areas.
            </summary>
            <remarks>
            Low areas are areas for which the high value is smaller than the low value.
            </remarks>
            <example>
            The following code will display the low areas with red border color.
            <code>
            highlow.LowBorderStyle.Color = Color.Red;
            </code>
            </example>
            <seealso cref="T:Nevron.GraphicsCore.NStrokeStyle"/>
        </member>
        <member name="P:Nevron.Chart.NHighLowSeries.HighLabel">
            <summary>
            Specifies the label of the high data points.
            </summary>
            <remarks>
            High data points are data points for which the high value is larger that the low value
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NHighLowSeries.LowLabel">
            <summary>
            Specified the label of the low data points.
            </summary>
            <remarks>
            Low data points are data points for which the high value is smaller that the low value
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NHighLowSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NKagiSeries">
            <summary>
            Represents a Kagi series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NKagiSeries.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NKagiSeries.ReversalAmount">
            <summary>
            Gets or sets the reversal amount for the kagi chart.
            </summary>
            <remarks>
            Price moves in the opposite direction to the current column's direction are ignored 
            if the amount of the change is below the reversal amount.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NKagiSeries.ReversalAmountInPercents">
            <summary>
            Gets or sets a boolean value that indicates whether the reversal amount is specified in percents.
            </summary>
            <remarks>
            If the property is set to true, the reversal amount is specified in percents of the current price.
            Otherwise the reversal amount is specified as a fixed value.
            By default this property is set to false.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NKagiSeries.UpStrokeStyle">
            <summary>
            Gets or sets the stroke style applied to the uptrend lines.
            </summary>
            <remarks>
            Usually the lines that represent a rally are displayed as thick lines.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NKagiSeries.DownStrokeStyle">
            <summary>
            Get or sets the stroke style applied to the downtrend lines.
            </summary>
            <remarks>
            Usually the lines that represent a decline are displayed as thin lines.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NKagiSeries.GetXYValues(System.Boolean,Nevron.Chart.NDataSeriesDouble,Nevron.Chart.NDataSeriesDouble)">
            <summary>
            Gets the x / y values in this series
            </summary>
            <param name="begin"></param>
            <param name="xValues"></param>
            <param name="yValues"></param>
        </member>
        <member name="M:Nevron.Chart.NKagiSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NLineSeries">
            <summary>
            Represents a line series.
            </summary>
            <remarks>
            You can create an instance of this class with the help of the
            Add method of the NSeriesCollection class.
            <code lang = 'VB'>
            Dim lineSeries As NLineSeries =  NChart.Series.Add(SeriesType.Line)
            </code>
            <code>
            NLineSeries lineSeries = NChart.Series.Add(SeriesType.Line);
            </code>
            </remarks>
            <seealso cref="T:Nevron.Chart.NSeries"/>
            <seealso cref="T:Nevron.Chart.NXYScatterSeries"/>
        </member>
        <member name="P:Nevron.Chart.NLineSeries.LineSegmentShape">
            <summary>
            Controls the shape of the line segments.
            </summary>
            <remarks>
            By default set to Line.
            </remarks>
            <example>
            The following code will display a line series with tape style.
            <code lang = 'VB'>
            line.LineSegmentShape = LineSegmentShape.Tape
            </code>
            <code>
            line.LineSegmentShape = LineSegmentShape.Tape;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NLineSeries.DepthPercent">
            <summary>
            Controls the depth of the line in percents of the series depth when the 
            LineSegmentShape is set to Tape, Tube or Ellipsoid.
            </summary>
            <remarks>
            By default set to 50.
            </remarks>
            <example>
            The following example increases the depth of the line.
            <code lang = 'VB'>
            line.DepthPercent = 60
            </code>
            <code>
            line.DepthPercent = 60;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NLineSeries.LineSize">
            <summary>
            If the line segment shape is tube or ellipsoid, this property gets or 
            sets the diameter of the cross section of the tubes / ellipsiods in 
            NLength format.
            If the line segment shape is tape and the series works in Z scatter mode,
            this property gets or sets the depth of the tape in model units.
            If the line segment shape is simple line, this property doesn't take effect.
            </summary>
            <remarks>
            By default set to 2 percentages of the chart area.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NLineSeries.MultiLineMode">
            <summary>
            Controls the multi line mode of the line series.
            </summary>
            <remarks>
            By default set to Series.
            </remarks>
            <example>
            The following code creates a stack line chart.
            <code lang = 'VB'>
            Dim line1 As NLineSeries =  NChart.Series.Add(SeriesType.Line) 
            Dim line2 As NLineSeries =  NChart.Series.Add(SeriesType.Line) 
            line2.MultiLineMode = MultiLineMode.Stacked
            </code>
            <code>
            NLineSeries line1 = NChart.Series.Add(SeriesType.Line);
            NLineSeries line2 = NChart.Series.Add(SeriesType.Line);
            line2.MultiLineMode = MultiLineMode.Stacked;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NLineSeries.PolylineRenderMode">
            <summary>
            Controls the polyline render mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLineSeries.CurveTension">
            <summary>
            Controls the polyline curve tension (when PolylineRenderMode is set to Curve)
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLineSeries.IntersectWithXValue(System.Double)">
            <summary>
            Returns the visible intersections of this line series with the specified x scale value
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NLineSeries.IntersectWithYValue(System.Double)">
            <summary>
            Returns the visible intersections of this line series with the specified y scale value
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NLineSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NLineSeriesBase">
            <summary>
            Abstract base class for all Line series
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLineSeriesBase.SamplingMode">
            <summary>
            Whether or not the line series will use sampling
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLineSeriesBase.FilterType">
            <summary>
            The type of filtering used by the line series
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLineSeriesBase.SampleDistance">
            <summary>
            Gets the sample distance when the series uses sampling
            </summary>
        </member>
        <member name="T:Nevron.Chart.NPriceChartSeries">
            <summary>
            The base series for all price charts (Kagi, Renko and Three Line Break)
            </summary>
        </member>
        <member name="T:Nevron.Chart.NSeries">
            <summary>
            NSeries is the base class of all 
            series with one dimensional value arrays.
            </summary>
            <remarks>
            The NSeries class inherits all functionality of the NSeriesBase 
            class and adds support for the following features:
            <list type="bullet">
            
            <item>
            <term>control over the appearance of the series</term>
            <description>
            Implemented by the FillStyle and BorderStyle properties.
            </description>
            </item>
            
            <item>
            <term>control over the series data labels</term>
            <description>
            Implemented by the DataLabelStyle and DataLabelStyles properties
            </description>
            </item>
            
            <item>
            <term>control over the series markers</term>
            <description>
            Implemented by the MarkerStyle and the MarkerStyles properties.
            </description>
            </item>
            
            <item>
            <term>control over the series interactivity</term>
            <description>
            Implemented by the NInteractivityStyle and the NInteractivityStyles properties.</description>
            </item>
            
            <item>
            <term>support for Values and Labels data series</term>
            <description>accessible by the Values and Labels properties respectively.</description>
            </item>
            
            <item>
            <term>control over the series interactivity</term>
            <description>implemented by the attached NSeriesInteractivity object accessible from the Interactivity property.</description>
            </item>
            
            <item>
            <term>support for total, percent, cumulative and index format commands</term>
            <description>
            you can use the &lt;total&gt;, &lt;percent&gt;, &lt;cumulative&gt; and &lt;index&gt; 
            formatting commands in the Format property of the NDataLabelStyle and NSeriesLegend classes 
            if you wants to display the total, percent, cumulative or index value respectively
            </description>
            </item>
            
            <item>
            <term>control over the formatting of the total, percent, cumulative and index formatting commands</term>
            <description>
            you can access the repsective NValueFormatter object from the 
            TotalValueFormatter, PercentValueFormatter, CumulativeValueFormatter 
            and IndexValueFormatter properties.
            </description>
            </item>
            
            <item>
            <term>helper methods for feeding data to the data series</term>
            <description>the Add methods have different sets of data series values and thus support different data feeding scenarios</description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NSeries.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeries.DataPointOriginIndex">
            <summary>
            Gets or sets the data point origin index
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeries.EmptyDataPointsAppearance">
            <summary>
            Gets or sets the <see cref="T:Nevron.Chart.NEmptyDataPointsAppearance"/> 
            object controlling the appearance of the empty data points.
            </summary>
            <example>
            The following code shows all empty data points as markers
            <code lang = 'VB'>
            bar.EmptyDataPointsAppearance.Mode = EmptyDataPointsAppearanceMode.Marker
            </code>
            <code>
            bar.EmptyDataPointsAppearance.Mode = EmptyDataPointsAppearanceMode.Marker;
            </code>
            </example> 
        </member>
        <member name="P:Nevron.Chart.NSeries.Clip">
            <summary>
            Gets or sets the object controlling the visible box of the series data. You can use this object to clip parts of the series content.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeries.InfinityDataPointsAppearance">
            <summary>
            Gets or sets the <see cref="T:Nevron.Chart.NInfinityDataPointsAppearance"/> 
            object controlling the appearance of infinite data points.
            </summary>
            <example>
            The following code shows all empty data points as markers
            <code lang = 'VB'>
            bar.InfinityDataPointsAppearance.Mode = InfintyDataPointsAppearanceMode.Marker
            </code>
            <code>
            bar.InfinityDataPointsAppearance.Mode = InfintyDataPointsAppearanceMode.Marker;
            </code>
            </example> 
        </member>
        <member name="P:Nevron.Chart.NSeries.FillStyle">
            <summary>
            Gets or sets the default fill style applied to the series.
            </summary>
            <remarks>
            The NFillStyle object accessible through this method specifies the default 
            filling of the series data points. This fill style can be replaced for each
            individual data point by adding NFillStyle objects to the FillStyles 
            data series.
            </remarks>
            <example>
            The following code will set the default filling to green solid color.
            <code lang = 'VB'>
            series.FillStyle = new NColorFillStyle(Color.Green)
            </code>
            <code>
            series.FillStyle = new NColorFillStyle(Color.Green);
            </code>
            </example>
            <seealso cref="T:Nevron.GraphicsCore.NFillStyle"/>
        </member>
        <member name="P:Nevron.Chart.NSeries.BorderStyle">
            <summary>
            Gets or sets the default stroke style applied to the series borders.
            </summary>
            <remarks>
            The NStrokeStyle object accessible through this method specifies the default 
            border style of the series data points. This border style can be replaced for 
            each individual data point by adding NStrokeStyle objects to the BorderStyles 
            data series.
            </remarks>
            <example>
            The following code will set the color of the default border to blue.
            <code lang = 'VB'>
            series.BorderStyle.Color = Color.Blue
            </code>
            <code>
            series.BorderStyle.Color = Color.Blue;
            </code>
            </example>
            <seealso cref="T:Nevron.GraphicsCore.NStrokeStyle"/>
        </member>
        <member name="P:Nevron.Chart.NSeries.DataLabelStyle">
            <summary>
            Gets or sets the NDataLabelStyle object controlling the 
            default appearance of the data point labels.
            </summary>
            <remarks>
            The data labels are explanatory texts displayed for the series data points. 
            The NDataLabelStyle class controls their appearance, format, alignment and other related features.
            </remarks>
            <example>
            The following code will display the value and the the label of a data point.
            <code lang = 'VB'>
            series.DataLabelStyle.Format = "&lt;value&gt; &lt;label&gt;"
            </code>
            <code>
            series.DataLabelStyle.Format = "&lt;value&gt; &lt;label&gt;";
            </code>
            </example>
            <seealso cref="T:Nevron.Chart.NDataLabelStyle"/>
        </member>
        <member name="P:Nevron.Chart.NSeries.MarkerStyle">
            <summary>
            Gets or sets a NMarkerStyle object controlling the default appearance of the data point markers.
            </summary>
            <remarks>
            The data point markers are shapes displayed at each data point. 
            You can control various aspects of the markers with the help of 
            the NMarkerStyle class.
            </remarks>
            <example>
            The following code shows the markers of a line series in blue color and changes 
            the marker shape to sphere.
            <code lang = 'VB'>
            line.MarkerStyle.Visible = True
            line.MarkerStyle.FillStyle = new NColorFillStyle(Color.Blue)
            line.MarkerStyle.Style = PointShape.Sphere
            </code>
            <code>
            line.MarkerStyle.Visible = true;
            line.MarkerStyle.FillStyle = new NColorFillStyle(Color.Blue);
            line.MarkerStyle.Style = PointShape.Sphere;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSeries.FillStyles">
            <summary>
            Gets/sets the fill styles data series. This data series contains 
            individual fill styles for the data items.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeries.BorderStyles">
            <summary>
            Gets/sets the border styles data series. This data series contains
            individual border styles for the data items.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeries.DataLabelStyles">
            <summary>
            Gets/sets the data labels styles data series. This data series contains
            individual data label styles for the data items.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeries.MarkerStyles">
            <summary>
            Gets/sets the marker styles data series. This data series contains
            individual marker styles for the data items.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeries.InteractivityStyles">
            <summary>
            Gets/sets the interactivity styles data series. This data series 
            contains individual interactivity styles for the data items.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeries.Tags">
            <summary>
            Gets/sets the tags data series. This data series contains 
            individual tag objects for the data items.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeries.Values">
            <summary>
            Gets or sets the Values data series.
            </summary>
            <remarks>
            The Values data series is of type double and is used by all derived 
            classes. It stores the most important information of a series. 
            For example the NPieSeries stores the values of the pies, 
            and the NBarSeries strores the values of the bars.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NSeries.Labels">
            <summary>
            Gets or sets the labels data series.
            </summary>
            <remarks>
            The labels data series is of type string and is used to strore the 
            labels of the data points. The labels can be visualized in the data point 
            labels, the chart legend and the data point tooltips.
            </remarks>
            <example>
            The following code creates a bar chart with label strings displayed
            in the data labels and the legend.
            <code lang = 'VB'>
            Dim bar As NBarSeries = Chart.Series.Add(SeriesType.Bar)
            bar.AddDataPoint(New NDataPoint(12, "Bar1"))
            bar.AddDataPoint(New NDataPoint(23, "Bar2"))
            bar.AddDataPoint(New NDataPoint(14, "Bar3"))
            bar.DataLabelStyle.Format = "&lt;label&gt;"
            bar.Legend.Mode = SeriesLegendMode.DataPoints
            bar.Legend.Format = "&lt;label&gt;"
            </code>
            <code>
            NBarSeries bar = Chart.Series.Add(SeriesType.Bar);
            bar.AddDataPoint(new NDataPoint(12, "Bar1"));
            bar.AddDataPoint(new NDataPoint(23, "Bar2"));
            bar.AddDataPoint(new NDataPoint(14, "Bar3"));
            bar.DataLabelStyle.Format = "&lt;label&gt;";
            bar.Legend.Mode = SeriesLegendMode.DataPoints;
            bar.Legend.Format = "&lt;label&gt;";
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSeries.TotalValueFormatter">
            <summary>
            Gets or sets a NValueFormatter object controlling the formatting of 
            the total values.
            </summary>
            <remarks>
            The total value formatting command is represented in the formatting strings 
            as &lt;total&gt;. It represents the total sum of the values contained in the Values data series.
            </remarks>
            <example>
            The following code displays the pie data labels in the following format: (percent) of (total).
            <code lang = 'VB'>
            pie.DataLabelStyle.Format = "&lt;percent&gt; of &lt;total&gt;"
            ' format the percent command as percent and the total with 3 decimal places
            pie.PercentValueFormatter = new NNumericValueFormatter(NumericValueFormat.Percentage)
            pie.TotalValueFormatter = new NNumericValueFormatter("0.000")
            </code>
            <code>
            pie.DataLabelStyle.Format = "&lt;percent&gt; of &lt;total&gt;";
            // format the percent command as percent and the total with 3 decimal places
            pie.PercentValueFormatter = new NNumericValueFormatter(NumericValueFormat.Percentage);
            pie.TotalValueFormatter = new NNumericValueFormatter("0.000");
            </code>
            </example>
            <seealso cref="T:Nevron.Dom.NNumericValueFormatter"/>
            <seealso cref="T:Nevron.Dom.NDateTimeValueFormatter"/>
        </member>
        <member name="P:Nevron.Chart.NSeries.PercentValueFormatter">
            <summary>
            Gets or sets a NValueFormatter object controlling the formatting of 
            the percent values.
            </summary>
            <remarks>
            The percent value formatting command is represented in the formatting strings 
            as &lt;percent&gt;. It represents the percentage of the current data point value to the total value.
            </remarks>
            <example>
            The following code displays the pie data labels in the following format: (percent) of (total).
            <code>
            pie.DataLabelStyle.Format = "&lt;percent&gt; of &lt;total&gt;"
            ' format the percent command as percent and the total with 3 decimal places
            pie.PercentValueFormatter = new NNumericValueFormatter(NumericValueFormat.Percentage)
            pie.TotalValueFormatter = new NNumericValueFormatter("0.000")
            </code>
            <code>
            pie.DataLabelStyle.Format = "&lt;percent&gt; of &lt;total&gt;";
            // format the percent command as percent and the total with 3 decimal places
            pie.PercentValueFormatter = new NNumericValueFormatter(NumericValueFormat.Percentage);
            pie.TotalValueFormatter = new NNumericValueFormatter("0.000");
            </code>
            </example>
            <seealso cref="T:Nevron.Dom.NNumericValueFormatter"/>
            <seealso cref="T:Nevron.Dom.NDateTimeValueFormatter"/>
        </member>
        <member name="P:Nevron.Chart.NSeries.CumulativeValueFormatter">
            <summary>
            Gets or sets a NValueFormatter object controlling the formatting of 
            the cumulative values.
            </summary>
            <remarks>
            The cumulative value formatting command is represented in the format 
            strings as &lt;cumulative&gt;. It represents the cumulative sum 
            accumulated up to the current data point.
            </remarks>
            <seealso cref="T:Nevron.Dom.NNumericValueFormatter"/>
            <seealso cref="T:Nevron.Dom.NDateTimeValueFormatter"/>
        </member>
        <member name="P:Nevron.Chart.NSeries.IndexValueFormatter">
            <summary>
            Gets or sets a NValueFormatter object controlling the formatting of 
            the index values.
            </summary>
            <remarks>
            The index value formatting command is represented in the format strings 
            as &lt;index&gt;. It represents the index of the current data point.
            </remarks> 
            <seealso cref="T:Nevron.Dom.NNumericValueFormatter"/>
            <seealso cref="T:Nevron.Dom.NDateTimeValueFormatter"/>
        </member>
        <member name="M:Nevron.Chart.NSeries.GetDataSeriesInfos">
            <summary>
            Gets the data series infos for this class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NSeries.AddDataPoint(Nevron.Chart.NDataPoint)">
            <summary>
            Adds a data point to the data point collection.
            </summary>
            <param name="dataPoint">The data point to add to the collection.</param>
        </member>
        <member name="M:Nevron.Chart.NSeries.RemoveDataPointAt(System.Int32)">
            <summary>
            Removes the data point at the specified index.
            </summary>
            <param name="index">The zero-based index of the data point to remove.</param>
        </member>
        <member name="M:Nevron.Chart.NSeries.InsertDataPointAt(System.Int32,Nevron.Chart.NDataPoint)">
            <summary>
            Inserts a data point to the collection at the specified position.
            </summary>
            <param name="index">The zero-based index at which the data point should be inserted.</param>
            <param name="dataPoint">The data point to insert into the collection.</param>
        </member>
        <member name="M:Nevron.Chart.NSeries.ClearDataPoints">
            <summary>
            Removes all data points from the collection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSeries.StoreDataPoint(System.Int32,Nevron.Chart.NDataPoint)">
            <summary>
            Sets a data point at the specified index.
            </summary>
            <param name="index">The zero-based index of the data point to set.</param>
            <param name="dataPoint">The data point to set.</param>
        </member>
        <member name="M:Nevron.Chart.NSeries.ComposeDataPoint(System.Int32)">
            <summary>
            Gets the data point at the specified index.
            </summary>
            <param name="index">The zero-based index of the data point to get.</param>
            <returns>Returns the data point at the specified index.</returns>
        </member>
        <member name="M:Nevron.Chart.NSeries.GetDataPointCount">
            <summary>
            Obtains the number of data points contained in the collection.
            </summary>
            <returns>Returns the number of data points.</returns>
        </member>
        <member name="P:Nevron.Chart.NSeries.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NSeries.GetAttributeByName(System.String)">
            <summary>
            Gets a child or descendant attribute by its name
            </summary>
            <param name="attributeName">child name or full attribute name</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NSeries.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NSeries.GetAttributeByNameAt(System.String,System.Int32)">
            <summary>
            Gets an an attribute by its name and index
            </summary>
            <param name="attributeName">name of the attribute</param>
            <param name="index">index of the attribute</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="T:Nevron.Chart.NSeriesBase">
            <summary>
            NSeriesBase is the base class of all series.
            </summary>
            <remarks>
            It implements support for the following base series functionality.
            <list type="bullet">
            <item>
            <term>control over the series visibility</term>
            <description>implemented by the Visibility property</description>
            </item>
            <item>
            <term>control over the series name</term>
            <description>implemented by the Name property</description>
            </item>
            <item>
            <term>representation of the series in the legend</term>
            <description>implemented by the attached NSeriesLegend object accessible from the Legend property</description>
            </item>
            <item>
            <term>scaling of the series on the chart axes</term>
            <description>implemented by the DisplayOnAxis methods</description>
            </item>
            <item>
            <term>querying whether a series is scaled on specific axis</term>
            <description>implemented by the IsDisplayOnAxis methods</description>
            </item>
            <item>
            <term>uniform access to the data series that the series uses</term>
            <description>implemented by the GetDataSeries virtual method</description>
            </item>
            <item>
            <term>control over the appearance of the empty data points</term>
            <description>implemented by the attached NEmptyDataPointsAppearance object accessible from the EmptyDataPointsAppearance property</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NSeriesBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesBase.Visible">
            <summary>
            Controls the visibility of the series. 
            </summary>
            <remarks>
            If set to false the series is not displayed and does not affect the scaling of the axes.
            </remarks> 
            <example>
            The following code hides a bar series.
            <code lang = 'VB'>
            bar.Visible = False
            </code>
            <code>
            bar.Visible = false;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSeriesBase.RegardAxisClipping">
            <summary>
            Whether the series regards axis clipping
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesBase.BoxClipping">
            <summary>
            Gets or sets the series box clipping (box volume clipped from the chart area)
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesBase.InflateMargins">
            <summary>
            Inflates the margins of the series to fit the chart area.
            </summary>
            <remarks>
            This can be very useful if your series has data points which are displayed outside the 
            chart area.
            </remarks> 
            <example>
            The following code inflates the margins of a bubble series and thus fits all bubbles 
            inside the chart area.
            <code lang = 'VB'>
            bubble.InflateMargins = True
            </code>
            <code>
            bubble.InflateMargins = true;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSeriesBase.Legend">
            <summary>
            Gets or sets an instance of the <see cref="T:Nevron.Chart.NSeriesLegend"/> 
            class controlling the representation of the series in the legend.
            </summary>
            <example>
            The following code shows all series data points in the legend.
            <code lang = 'VB'>
            bar.Legend.Mode = SeriesLegendMode.DataPoints
            </code>
            <code>
            bar.Legend.Mode = SeriesLegendMode.DataPoints;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSeriesBase.ShadowStyle">
            <summary>
            Gets or sets the NShadowStyle object controlling the shadow of the series.
            Shadows are visible when the context is rendered with GDI+.
            </summary>
            <example>
            The following example sets a solid shadow for the series.
            <code lang = 'VB'>
            series.ShadowStyle.Type = ShadowType.Solid
            </code>
            <code>
            series.ShadowStyle.Type = ShadowType.Solid;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSeriesBase.InteractivityStyle">
            <summary>
            Gets or sets the NInteractivityStyle object controlling the 
            default interactivity features of the data points.
            </summary>
            <remarks>
            Each data point displayed by the series has the following 
            interactivity attributes:
            <list type="bullet">
            <item>
            <term>tooltip</term>
            </item>
            
            <item>
            <term>cursor</term>
            </item>
            
            <item>
            <term>url</term>
            </item>
            
            <item>
            <term>Open in new window flag</term>
            </item>
            
            </list>
            </remarks>
            <example>
            The following code formats the data points tooltips to show only the data point labels.
            <code lang = 'VB'>
            series.Interactivity.TooltipFormat = "&lt;label&gt;"
            </code>
            <code>
            series.Interactivity.TooltipFormat = "&lt;label&gt;";
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSeriesBase.AnimationsStyle">
            <summary>
            Gets or sets the animation style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesBase.HorizontalAxes">
            <summary>
            Gets or sets the horizontal axis ids this series is displayed on.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesBase.VerticalAxes">
            <summary>
            Gets or sets the vertical axis ids this series is displayed on.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesBase.Chart">
            <summary>
            Gets the chart object this series belongs to.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesBase.LabelLayout">
            <summary>
            Gets or sets a NSeriesLabelLayoutSettings object controlling automatic data label layout features.
            </summary>
            <remarks>
            The settings provided by this object are relevant for Cartesian, Polar and Radar series.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NSeriesBase.VerticalAxisRangeMode">
            <summary>
            Gets or sets the vertical axis range mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesBase.ZOrder">
            <summary>
            Gets or sets the Z order of the series
            </summary>
            <remarks>
            Series with equal z order will be rendered in the backward order in which they are present in the series collection. For example the last series, the series before the last and so on until it reaches the first.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NSeriesBase.HorizontalAxis">
            <summary>
            Gets the horizontal axis assigned to this series. 
            </summary>
            <remarks>
            This property has effect only after the chart has been recalculated
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NSeriesBase.VerticalAxis">
            <summary>
            Gets the vertical axis assigned to this series. 
            </summary>
            <remarks>
            This property has effect only after the chart has been recalculated
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NSeriesBase.DepthAxis">
            <summary>
            Gets the depth axis assigned to this series. 
            </summary>
            <remarks>
            This property has effect only after the chart has been recalculated
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NSeriesBase.IncludeInXAxisRange">
            <summary>
            Whether the series will affect the x axis range
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesBase.IncludeInYAxisRange">
            <summary>
            Whether the series will affect the x axis range
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesBase.IncludeInZAxisRange">
            <summary>
            Whether the series will affect the x axis range
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSeriesBase.DisplayOnAxis(Nevron.Chart.StandardAxis,System.Boolean)">
            <summary>
            Instructs the chart whether to scale the series on one of the standard chart axes.
            </summary>
            <remarks>
            By default all series are scaled on the PrimaryX and PrimaryY axes and always on 
            the Depth axis.
            </remarks>
            <param name="axis">specifies the targeted standard axis</param>
            <param name="display">
            if true the series is scaled on the specified axis
            <para>
            if false the series is not scaled on the specified axis
            </para>
            </param>
            <example>
            The following code scales a bar series on the SecondaryY axis and removes it from 
            the PrimaryY axis.
            <code lang = 'VB'>
            bar.DisplayOnAxis(StandardAxis.SecondaryY, True)
            bar.DisplayOnAxis(StandardAxis.PrimaryY, False)
            </code>
            <code>
            bar.DisplayOnAxis(StandardAxis.SecondaryY, true);
            bar.DisplayOnAxis(StandardAxis.PrimaryY, false);
            </code>
            </example>
        </member>
        <member name="M:Nevron.Chart.NSeriesBase.DisplayOnAxis(System.Int32,System.Boolean)">
            <summary>
            Instruct the chart whether to scale the series on the specified axis.
            </summary>
            <remarks>
            You can obtain the id of a particular axis with the help of the AxisId 
            property of the NAxis class.
            </remarks>
            <param name="axisId"> specifies the id of the targeted axis (standard or custom)</param>
            <param name="display">
            if true the series is scaled on the specified axis 
            <para>
            if false the series is not scaled on the specified axis
            </para>
            </param>
            <example>
            The following code creates a custom vertical axis and 
            scales a bar series on it. It also removes the bar series from scaling on the PrimaryY axis.
            <code lang = 'VB'>
            Dim customAxis As NAxis =  Chart.Axes.AddCustomAxis(AxisOrientation.Vertical,AxisPredefinedPositon.FrontLeft) 
            bar.DisplayOnAxis(customAxis.AxisId, True)
            bar.DisplayOnAxis(Chart.Axis(StandardAxis.PrimaryY).AxisId, False)
            </code>
            <code>
            NAxis customAxis = Chart.Axes.AddCustomAxis(AxisOrientation.Vertical, AxisPredefinedPositon.FrontLeft);
            bar.DisplayOnAxis(customAxis.AxisId, true);
            bar.DisplayOnAxis(Chart.Axis(StandardAxis.PrimaryY).AxisId, false);
            </code>
            </example>
        </member>
        <member name="M:Nevron.Chart.NSeriesBase.IsDisplayedOnAxis(Nevron.Chart.StandardAxis)">
            <summary>
            Queries whether the series is scaled on the specified standard axis.
            </summary>
            <remarks>
            By default all series are scaled on the PrimaryY and PrimaryX axes and always 
            on the Depth axis.
            </remarks> 
            <param name="axis"></param>
            <returns>
            true if the series is displayed on the specified standard axis.
            <para>
            false if the series is not displayed on the specified standard axis.
            </para>
            </returns>
        </member>
        <member name="M:Nevron.Chart.NSeriesBase.IsDisplayedOnAxis(System.Int32)">
            <summary>
            Query whether the series is displayed on the axis with the specified id.
            </summary>
            <remarks>
            You can obtain the id of a particular axis with the help of the 
            AxisId property of the NAxis class.
            </remarks>
            <param name="axisId">the id of the axis of interest</param>
            <returns>
            true if the series is displayed on the specified standard axis.
            <para>
            false if the series is not displayed on the specified standard axis.
            </para>
            </returns>
        </member>
        <member name="M:Nevron.Chart.NSeriesBase.GetDataSeries(Nevron.Chart.DataSeriesMask,Nevron.Chart.DataSeriesMask,System.Boolean)">
            <summary>
            Returns a collection of the data series used by the series. The included 
            series are controlled with the included and excluded parameters.
            </summary>
            <remarks>
            This method can help you obtain a NDataSeriesCollection object 
            containing the data series of a series. The order in which 
            the data series appear in the collection cannot be changed 
            and is specific for each series.
            </remarks>
            <param name="included">a bitmask specifying the included series</param>
            <param name="excluded">a bitmask specifying the explicitly excluded series</param>
            <param name="forceAlign">a flag specifying whether the data series included in the collection must be explicitly aligned</param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NSeriesBase.MinMaxValid">
            <summary>
            Gets or sets whether the min max of the node is valid
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesBase.IndexZ">
            <summary>
            Gets or sets the z index
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesBase.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NSeriesBase.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NSeriesBase.GetAttributesCount">
            <summary>
            Obtains the number of indexed attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NSeriesBase.GetAttributeByNameAt(System.String,System.Int32)">
            <summary>
            Gets an an attribute by its name and index
            </summary>
            <param name="attributeName">name of the attribute</param>
            <param name="index">index of the attribute</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NSeriesBase.GetAttributesAt(System.Int32)">
            <summary>
            Gets the attributes at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NSeriesBase.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NSeriesBase.GetCachedDataSeriesInfo">
            <summary>
            Gets the cached data series info or creates a cached one
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NSeriesBase.GetDataSeriesInfos">
            <summary>
            Gets the data series infos for this class
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NXYScatterSeries">
            <summary>
            NXYScatterSeries is a base class for series which support 
            custom X positioning of their data points.
            </summary>
            <remarks>
            The NXYScatterSeries class inherits the functionality of the NSeries
            class and adds support for the following features:
            <list type="bullet">
            <item>
            <term>data series containing the custom X data point positions</term>
            <description>accessible through the XValues property</description>
            </item>
            <item>
            <term>control whether custom X positions should be used</term>
            <description>exposed by the UseXValues property</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NXYScatterSeries.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NXYScatterSeries.GetDataSeriesInfos">
            <summary>
            Gets the data series infos
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NXYScatterSeries.EnableDepthSort">
            <summary>
            Whether to items in the series must be sorted for display by their depth order.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NXYScatterSeries.UseXValues">
            <summary>
            Specifies whether the series should use custom X positions for the data points.
            </summary>
            <remarks>
            You must manually change the mode of the horizontal axis on which the series is 
            displayed in order to properly scale it.
            </remarks>
            <example>
            The following code displays a XY scatter point.
            <code lang = 'VB'>
            Dim point As NPointSeries = CType(chart.Series.Add(SeriesType.Point), NPointSeries)
            chart.Axis(StandardAxis.PrimaryX).ScaleConfigurator = New NNumericScaleConfigurator()
            point.UseXValues = True
            point.Add(12, 34)
            point.Add(32, 12)
            point.Add(12, 34)
            ...
            </code>
            <code>
            NPointSeries point = (NPointSeries)chart.Series.Add(SeriesType.Point);
            chart.Axis(StandardAxis.PrimaryX).ScaleConfigurator = new NNumericScaleConfigurator();
            point.UseXValues = true;
            point.Add(12, 34);
            point.Add(32, 12);
            point.Add(12, 34);
            ...
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NXYScatterSeries.XValues">
            <summary>
            Gets or sets the Data Series that holds the X values of the data points.
            </summary>
            <remarks>
            The XValues are taken into account only if the UseXValues property is set to true.
            </remarks>
        </member>
        <member name="T:Nevron.Chart.NXYZScatterSeries">
            <summary>
            NXYZScatterSeries is a base class for series which support 
            custom X and Z positioning of their data points.
            </summary>
            <remarks>
            The NXYZScatterSeries class inherits the functionality of 
            the NXYScatterSeries class and adds support for the following features:
            <list type="bullet">
            <item>
            <term>data series containing the custom Z data point positions</term>
            <description>accessible through the ZValues property</description>
            </item>
            <item>
            <term>control whether custom Z positions should be used</term>
            <description>exposed by the UseZValues property</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NXYZScatterSeries.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NXYZScatterSeries.GetDataSeriesInfos">
            <summary>
            Gets the data series infos
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NXYZScatterSeries.UseZValues">
            <summary>
            Specifies whether custom Z positions should be used.
            </summary>
            <remarks>
            If this property is set to true the data items use the 
            coordinates contained in the ZValues data series as their depth 
            coordinate. It is recommended to switch the scale mode of the depth 
            axis to one of the value scale modes.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NXYZScatterSeries.ZValues">
            <summary>
            Gets or sets the Data Series that holds the Z values of the series data points.
            </summary>
            <remarks>
            The ZValues are taken into account only if the UseZValues property is set to true.
            </remarks>
        </member>
        <member name="T:Nevron.Chart.NPieSeries">
            <summary>
            Represents a pie series.
            </summary>
            <remarks>
            You can create an instance of this class with the help of the 
            Add method of the NSeriesCollection class.
            <code lang = 'VB'>
            Dim pieSeries As NPieSeries = CType(NChart.Series.Add(SeriesType.Pie), NPieSeries)
            </code>
            <code>
            NPieSeries pieSeries = (NPieSeries)NChart.Series.Add(SeriesType.Pie);
            </code>
            </remarks>
            <seealso cref="T:Nevron.Chart.NSeries"/>
        </member>
        <member name="M:Nevron.Chart.NPieSeries.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPieSeries.GetDataSeriesInfos">
            <summary>
            Gets the data series infos
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NPieSeries.AutomaticLabelAlignment">
            <summary>
            Whether pie data data labels will be automatically aligned to left or right depending on which side of the rim they appear
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPieSeries.ShowZeroSlices">
            <summary>
            Whether the pie will display the zero pie slices. False by default.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPieSeries.PieStyle">
            <summary>
            Controls the shape of the pie segments.
            </summary>
            <remarks>
            By default set to Pie.
            </remarks>
            <example>
            The following code displays the pie segements as smooth edge pies.
            <code lang = 'VB'>
            pie.PieStyle = PieStyle.SmoothEdgePie
            </code>
            <code>
            pie.PieStyle = PieStyle.SmoothEdgePie;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NPieSeries.PieEdgePercent">
            <summary>
            Controls the edge percent for smooth edge pie.
            </summary>
            <remarks>
            This property is valid only if the PieStyle is set to SmoothEdgePie. By default set to 25.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NPieSeries.BeginRadiusPercent">
            <summary>
            Gets or sets the series begin radius percent
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPieSeries.EndRadiusPercent">
            <summary>
            Gets or sets the series end radius percent
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPieSeries.LabelMode">
            <summary>
            Controls the pie label mode.
            </summary>
            <remarks>
            By default set to Rim.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NPieSeries.Detachments">
            <summary>
            Gets or sets the data series holding the detachments of the pies.
            </summary>
            <remarks>
            The Detachments data series contains elements of type Double. Detachmens are specified in percent of the pie outer radius.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NPieSeries.LeadOffArrowLength">
            <summary>
            Gets or sets the length of the label connector's lead off arrow.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPieSeries.ConnectorLength">
            <summary>
            Gets or sets the length of the label connector.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPieSeries.MinLabelDistance">
            <summary>
            Gets or sets the length of the minimum label distance in case labels are instructed to not overlap
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPieSeries.ShowFullPieAsCircle">
            <summary>
            Gets or sets a value indicating whether full pie sectors (360 degrees) should be displayed as circles.
            </summary>
            <remarks>
            If this property is set to true, pie sectors with sweep angle of 360 degrees are displayed as full circles or full rings (depending on the pie shape). 
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NPieSeries.UseBeginEndWidthPercents">
            <summary>
            Gets or sets whether to use begin / end width percents that allow you to control the width of each segment.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPieSeries.BeginWidthPercents">
            <summary>
            Gets or sets the data series holding the begin percents of the pie segments as percentage of the total ring width.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPieSeries.EndWidthPercents">
            <summary>
            Gets or sets the data series holding the end percents of the pie segments as percentage of the total ring width.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPieSeries.ShowLabelConnectorBeginCap">
            <summary>
            Whether the labe connectors should display a begin cap
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPieSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NPieSeries.Render3D(Nevron.Chart.NChartRenderingContext3D)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NPieSeries.RenderTexts3D(Nevron.Chart.NChartRenderingContext3D)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Nevron.Chart.NPieSeries.Is3DPlotValid">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.NPointAndFigureSeries">
            <summary>
            Represents a Point and Figure series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPointAndFigureSeries.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointAndFigureSeries.PointData">
            <summary>
            Gets a list of the gne
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointAndFigureSeries.BoxSize">
            <summary>
            Gets or sets the box size for the point and figure series.
            </summary>
            <remarks>
            Point and Figure charts display an "X" when prices rise by the box size and display an "O" when 
            prices fall by the box size. No Xs or Os are drawn if prices rise or fall by an amount that is 
            less than the box size.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NPointAndFigureSeries.ReversalAmount">
            <summary>
            Gets or sets the reversal amount for the point and figure series.
            </summary>
            <remarks>
            In order to change columns (e.g., from an X column to an O column), prices must reverse by 
            the reversal amount multiplied by the box size.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NPointAndFigureSeries.HighValues">
            <summary>
            Gets or sets the data series containing the stock high values.
            </summary>
            <remarks>
            The data series is of type Double and refers to the Values series.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NPointAndFigureSeries.LowValues">
            <summary>
            Gets or sets the data series containing the stock low values.
            </summary>
            <remarks>
            The data series is of type Double.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NPointAndFigureSeries.UpStrokeStyle">
            <summary>
            Gets or sets the stroke style applied to the uptrend columns.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointAndFigureSeries.DownStrokeStyle">
            <summary>
            Get or sets the stroke style applied to the downtrend columns.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointAndFigureSeries.ProportionalX">
            <summary>
            Gets or sets a value indicating whether the series will modify the x axis scaling in order to 
            display square point and figure boxes
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointAndFigureSeries.ProportionalY">
            <summary>
            Gets or sets a value indicating whether the series will modify the y axis scaling in order to 
            display square point and figure boxes
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPointAndFigureSeries.GetDataSeriesInfos">
            <summary>
            Gets the data series infos
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NPointAndFigureSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NPointSeries">
            <summary>
            Represents a points series.
            </summary>
            <remarks>
            You can create an instance of this class with the help of the 
            Add method of the NSeriesCollection class.
            <code>
            NPointSeries pointSeries = NChart.Series.Add(SeriesType.Point);
            </code>
            </remarks>
            <seealso cref="T:Nevron.Chart.NSeries"/>
            <seealso cref="T:Nevron.Chart.NXYScatterSeries"/>
        </member>
        <member name="P:Nevron.Chart.NPointSeries.PointShape">
            <summary>
            Controls the point shape
            </summary>
            <remarks>
            By default set to Bar
            </remarks>
            <example>
            The following code changes the shape of the points.
            <code lang = 'VB'>
            point.PointShape = PointShape.Sphere
            </code>
            <code>
            point.PointShape = PointShape.Sphere;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NPointSeries.Size">
            <summary>
            Controls the size of the value point marks.
            </summary>
            <remarks>
            This property specifies the points width, height and depth dimensions. 
            By default set to 4 percent of the chart size
            </remarks>
            <example>
            The following example increases the size of the points.
            <code lang = 'VB'>
            pointSeries.Size = New NLength(5.5F, NRelativeUnit.ParentPercentage)
            </code>
            <code>
            pointSeries.Size = New NLength(5.5F, NRelativeUnit.ParentPercentage);
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NPointSeries.SphereDetail">
            <summary>
            When the point shape is set to Sphere this property controls the level 
            of detail of the spheres.
            </summary>
            <remarks>
            The default level of detail is set to Highest. You can decrease the level 
            of detail to speed-up rendering when displaying multiple data points.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NPointSeries.ClusterMode">
            <summary>
            Gets or sets the clustering mode of the component
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointSeries.AutoClusterThreshold">
            <summary>
            Gets or sets the auto cluster threshold
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointSeries.ClusterBranchingFactor">
            <summary>
            Gets or sets the clustering branching factor
            </summary>
            <remarks>
            This property has effect only when clustering is enabled.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NPointSeries.ClusterDistanceFactor">
            <summary>
            Gets or sets the cluster distance when cluster factor mode is set to ClusterFactorMode.Distance.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointSeries.CustomShape">
            <summary>
            Gets or set a custom shape object that is used for display of data points.
            </summary>
            <remarks>
            This property is regarded when the value of the PointShape property is set to PointShape.Custom.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NPointSeries.ShowHorizontalDropLines">
            <summary>
            Gets or sets whether the series must show the horizontal drop lines
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointSeries.HorizontalDropLineOrigin">
            <summary>
            Gets or sets the horizontal drop lines origin
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointSeries.HorizontalDropLineOriginMode">
            <summary>
            Gets or sets the horizontal drop lines origin mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointSeries.ShowVerticalDropLines">
            <summary>
            Gets or sets whether the series must show the vertical drop lines
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointSeries.VerticalDropLineOrigin">
            <summary>
            Gets or sets the origin of depth drop lines
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointSeries.VerticalDropLineOriginMode">
            <summary>
            Gets or sets the vertical drop lines origin mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointSeries.ShowDepthDropLines">
            <summary>
            Gets or sets whether the series must show the depth drop lines
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointSeries.DepthDropLineOrigin">
            <summary>
            Gets or sets the origin of depth drop lines
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointSeries.DepthDropLineOriginMode">
            <summary>
            Gets or sets the depth drop lines origin mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointSeries.HorizontalDropLinesStrokeStyle">
            <summary>
            Gets or sets the stroke style applied to horizontal drop lines
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointSeries.VerticalDropLinesStrokeStyle">
            <summary>
            Gets or sets the stroke style applied to vertical drop lines
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPointSeries.DepthDropLinesStrokeStyle">
            <summary>
            Gets or sets the stroke style applied to depth drop lines
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPointSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NPolarSeries">
            <summary>
            An abstract base class for all polar series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPolarSeries.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPolarSeries.GetDataSeriesInfos">
            <summary>
            Gets the data series infos
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NPolarSeries.Angles">
            <summary>
            Gets or sets the  data series holding the polar angles.
            </summary>
            <remarks>
            The type of the Angles data series is Double.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NPolarSeries.ApplyPolarClip(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            Applies polar clipping in case the polar value axis has restricted range
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NRadarSeries">
            <summary>
            An abstract base class for all radar series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRadarSeries.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRadarSeries.DisplayOnAxis(System.Int32,System.Boolean)">
            <summary>
            Instruct the chart whether to scale the series on the specified axis.
            </summary>
            <remarks>
            The current implementation only throws an exception.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NRadarSeries.IsDisplayedOnAxis(System.Int32)">
            <summary>
            Query whether the series is displayed on the axis with the specified id.
            </summary>
            <remarks>
            Overrides the standard implementation with radar specific behaviour
            </remarks>
            <param name="axisId">the id of the axis of interest</param>
            <returns>
            true if the axisId is equal to StandardAxis.Radar
            <para>
            false otherwise
            </para>
            </returns>
        </member>
        <member name="T:Nevron.Chart.NRenkoRangeSampler">
            <summary>
            Represents a renko range sampler
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRenkoRangeSampler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRenkoSeries">
            <summary>
            Represents a Renko series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRenkoSeries.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRenkoSeries.BoxWidthPercent">
            <summary>
            Gets or sets the width of the renko boxes in percents of the floor grid cell width.
            </summary>
            <remarks>
            By default set to 70.
            </remarks>
            <example>
            The following example changes the width percent to 50 (half of the cell).
            <code lang = 'VB'>
            renko.BoxWidthPercent = 50
            </code>
            <code>
            renko.BoxWidthPercent = 50;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NRenkoSeries.BoxSize">
            <summary>
            Gets or sets the box size of the renko boxes.
            </summary>
            <remarks>
            By default the box size is 5 units.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NRenkoSeries.BoxSizeInPercents">
            <summary>
            Gets or sets a boolean value that indicates whether the box size is specified in percents.
            </summary>
            <remarks>
            If the property is set to true, the box size is specified in percents of the difference 
            between highest and lowest price. Otherwise the box size is specified as a fixed value.
            By default this property is set to false.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NRenkoSeries.UpFillStyle">
            <summary>
            Gets or sets the fill style applied to the up boxes.
            </summary>
            <remarks>
            The up boxes are filled with this fill style.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NRenkoSeries.UpStrokeStyle">
            <summary>
            Gets or sets the stroke style applied to the up boxes.
            </summary>
            <remarks>
            The borders of the up boxes are displayed with this stroke style.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NRenkoSeries.DownFillStyle">
            <summary>
            Get or sets the fill style applied to the down boxes.
            </summary>
            <remarks>
            The down boxes are filled with this fill style.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NRenkoSeries.DownStrokeStyle">
            <summary>
            Get or sets the stroke style applied to the down boxes.
            </summary>
            <remarks>
            The borders of the down boxes are displayed with this stroke style.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NRenkoSeries.GetXYValues(System.Boolean,Nevron.Chart.NDataSeriesDouble,Nevron.Chart.NDataSeriesDouble)">
            <summary>
            Gets the x values in this series
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRenkoSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NScaleContent">
            <summary>
            The base of all scale content implementations
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleContent.GetDoubleValuesInRange(Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Gets the values that fall the in specified range
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NScaleContent.GetCountInRange(Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Gets the count of the values that fall in the specified range
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NCartesianSeriesCollection.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NPolarSeriesCollection">
            <summary>
            Summary description for NPolarSeriesCollection.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NSeriesCollection">
            <summary>
            Represents a collection of NSeriesBase objects.
            </summary>
            <remarks>
            You can obtain a reference to an instance of this class
            with the help of the Series method of the NChart class.
            <code lang = 'VB'>
            Dim colSeries As NSeriesCollection =  NChart.Series()
            </code>
            <code>
            NSeriesCollection colSeries = NChart.Series();
            </code>
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NSeriesCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSeriesCollection.Add(Nevron.Chart.SeriesType)">
            <summary>
            Adds a new series of the specified type and returns a reference to the newly 
            created series object.
            </summary>
            <param name="type">type of series to create</param>
            <returns>reference to the series</returns>
            <example>
            The following code creates a bar series.
            <code lang = 'VB'>
            Dim bar As NBarSeries = chart.Series.Add(SeriesType.Bar)
            </code>
            <code>
            NBarSeries bar = (NBarSeries)chart.Series.Add(SeriesType.Bar);
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NSeriesCollection.Item(System.Int32)">
            <summary>
            Strongly typed indexer
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesCollection.Name">
            <summary>
            User defined name of the node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSeriesCollection.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NVennSeriesCollection">
            <summary>
            Summary description for NVennSeriesCollection.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NShapeSeries">
            <summary>
            Represents a shape series.
            </summary>
            <remarks>
            You can create an instance of this class with the help of the 
            Add method of the NSeriesCollection class.
            <code lang = 'VB'>
            Dim shapeSeries As NShapeSeries =  NChart.Series.Add(SeriesType.Shape)
            </code>
            <code>
            NShapeSeries shapeSeries = NChart.Series.Add(SeriesType.Shape);
            </code>
            </remarks>
            <seealso cref="T:Nevron.Chart.NSeries"/>
        </member>
        <member name="M:Nevron.Chart.NShapeSeries.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NShapeSeries.GetDataSeriesInfos">
            <summary>
            Gets the data series infos
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NShapeSeries.Shape">
            <summary>
            Controls the shape of the data points.
            </summary>
            <remarks>
            By default set to Bar
            </remarks>
            <example>
            The following code changes the style of the shapes.
            <code lang = 'VB'>
            shapeSeries.Shape = BarShape.Cone
            </code>
            <code>
            shapeSeries.Shape = BarShape.Cone;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NShapeSeries.BarEdgePercent">
            <summary>
            Controls the edge percent of smooth edge bars and cut edge bars. 
            The edge percent must be between 0 and 50.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NShapeSeries.HasTopEdge">
            <summary>
            Controls the visibility of the top edge of smooth edge bars and cut edge bars.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NShapeSeries.HasBottomEdge">
            <summary>
            Controls the visibility of the bottom edge of smooth edge bars and cut edge bars.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NShapeSeries.XSizes">
            <summary>
            Gets or sets the x size data series.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NShapeSeries.YSizes">
            <summary>
            Gets or sets the Y size data series.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NShapeSeries.ZSizes">
            <summary>
            Gets or sets the z size data series.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NShapeSeries.XSizesUnits">
            <summary>
            Defines the measurement units of the X sizes
            </summary>
            <remarks>
            Accepted are only Scale and Model measurement units
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NShapeSeries.YSizesUnits">
            <summary>
            Defines the measurement units of the Y sizes
            </summary>
            <remarks>
            Accepted are only Scale and Model measurement units
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NShapeSeries.ZSizesUnits">
            <summary>
            Defines the measurement units of the Z sizes
            </summary>
            <remarks>
            Accepted are only Scale and Model measurement units
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NShapeSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NSmoothAreaSeries">
            <summary>
            Displays an area series.
            </summary>
            <remarks>
            The NAreaSeries inherits all functionality of its base NXYScatterSeries 
            and displays area segments connecting the adjacent data points. The area begins 
            from an origin value which can be manually specified or calculated automatically.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NSmoothAreaSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NSmoothLineSeries">
            <summary>
            Represents a smooth line series.
            </summary>
            <remarks>
            You can create an instance of this class with the help of the Add 
            method of the NSeriesCollection class.
            <code lang = 'VB'>
            Dim line As NSmoothLineSeries = chart.Series.Add(SeriesType.SmoothLine)
            </code>
            <code>
            NSmoothLineSeries line = chart.Series.Add(SeriesType.SmoothLine);
            </code>
            </remarks>
            <seealso cref="T:Nevron.Chart.NSeries"/>
            <seealso cref="T:Nevron.Chart.NXYScatterSeries"/>
        </member>
        <member name="P:Nevron.Chart.NSmoothLineSeries.Use1DInterpolationForXYScatter">
            <summary>
            Controls the interpolation method for XY scatter smooth line charts.
            If this property is set to true, the y values will be regarded as a 
            function of the x values, which means that there will be only one y 
            value for every x coordinate. If the property is set to false, the 
            line will be regarded as a free curve in the XY plane.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSmoothLineSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NStepLineSeries">
            <summary>
            Represents a step line series.
            </summary>
            <remarks>
            You can create an instance of this class with the help of the Add 
            method of the NSeriesCollection class.
            <code lang = 'VB'>
            Dim line As NStepLineSeries = chart.Series.Add(SeriesType.StepLine)
            </code>
            <code>
            NStepLineSeries line = chart.Series.Add(SeriesType.StepLine);
            </code>
            </remarks>
            <seealso cref="T:Nevron.Chart.NSeries"/>
            <seealso cref="T:Nevron.Chart.NXYScatterSeries"/>
            <seealso cref="T:Nevron.Chart.NXYZScatterSeries"/>
        </member>
        <member name="M:Nevron.Chart.NStepLineSeries.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStepLineSeries.LineSegmentShape">
            <summary>
            Gets or sets the shape of the line segments.
            </summary>
            <remarks>
            By default set to Line.
            </remarks>
            <example>
            The following code will display a line series with tape style.
            <code lang = 'VB'>
            line.LineSegmentShape = LineSegmentShape.Tape
            </code>
            <code>
            line.LineSegmentShape = LineSegmentShape.Tape;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NStepLineSeries.LineSegmentRoute">
            <summary>
            Gets or sets the route of the line segments.
            </summary>
            <remarks>
            By default the line segments are in HV (Horizontal - Vertical) mode.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStepLineSeries.DepthPercent">
            <summary>
            Controls the depth of the line in percents of the series depth when the 
            LineSegmentShape is set to Tape, Tube or Ellipsoid.
            </summary>
            <remarks>
            By default set to 50.
            </remarks>
            <example>
            The following example increases the depth of the line.
            <code lang = 'VB'>
            line.DepthPercent = 60
            </code>
            <code>
            line.DepthPercent = 60;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NStepLineSeries.LineSize">
            <summary>
            If the line segment shape is tube or ellipsoid, this property gets or 
            sets the diameter of the cross section of the tubes / ellipsiods in 
            model units.
            If the line segment shape is tape and the series works in Z scatter mode,
            this property gets or sets the depth of the tape in model units.
            If the line segment shape is simple line, this property doesn't take effect.
            </summary>
            <remarks>
            By default set to 2.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NStepLineSeries.IntersectWithXValue(System.Double)">
            <summary>
            Returns the visible intersections of this line series with the specified x scale value
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NStepLineSeries.IntersectWithYValue(System.Double)">
            <summary>
            Returns the visible intersections of this line series with the specified y scale value
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NStepLineSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NStockSeries">
            <summary>
            Represents a stock series.
            </summary>
            <remarks>
            You can create an instance of this class with the help of the 
            Add method of the NSeriesCollection class.
            <code lang = 'VB'>
            Dim stockSeries As NStockSeries = chart.Series.Add(SeriesType.Stock)
            </code>
            <code>
            NStockSeries stockSeries = (NStockSeries)chart.Series.Add(SeriesType.Stock);
            </code>
            </remarks>
            <seealso cref="T:Nevron.Chart.NSeries"/>
        </member>
        <member name="M:Nevron.Chart.NStockSeries.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStockSeries.GetDataSeriesInfos">
            <summary>
            Gets the data series infos
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NStockSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.AppearanceMode">
            <summary>
            Controls the appearance mode of the stock series.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.CandleStyle">
            <summary>
            Controls the shape of the candle.
            </summary>
            <remarks>
            By default set to Bar.
            </remarks>
            <example>
            Change the style of a stock series to Stick.
            <code lang = 'VB'>
            stock.CandleStyle = CandleStyle.Stick
            </code>
            <code>
            stock.CandleStyle = CandleStyle.Stick;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.CandleWidth">
            <summary>
            Controls the width of the candle in model units.
            </summary>
            <remarks>
            By default set to 2.5f.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.ScaleCandleWidthWhenZooming">
            <summary>
            Whether the candle width should be scaled when the user zooms in on the chart
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.CandleDepthPercent">
            <summary>
            Controls the candle depth in percents of the chart floor grid depth.
            </summary>
            <remarks>
            Valid only if the CandleStyle property is set to Bar. By default set to 50.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.ShowOpen">
            <summary>
            Controls the visibility of the Open value.
            </summary>
            <remarks>
            Valid if CandleStyle is Stick. By default set to true.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.ShowClose">
            <summary>
            Controls the visibility of the Close value.
            </summary>
            <remarks>
             Valid if CandleStyle is Stick. By default set to true.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.ShowHighLow">
            <summary>
            Controls the visibility of the line connecting High and Low values.
            </summary>
            <remarks>
            By default set to true.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.UseSecondaryStrokeForDownCandles">
            <summary>
            Controls whether a different stroke style is used for the high-low line of downward candles.
            </summary>
            <remarks>
            By default set to false.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.OpenValues">
            <summary>
            Gets or sets the data series containing the stock open values.
            </summary>
            <remarks>
            The data series is of type Double.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.CloseValues">
            <summary>
            Gets or sets the data series containing the stock close values.
            </summary>
            <remarks>
            The data series is of type Double.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.HighValues">
            <summary>
            Gets or sets the data series containing the stock high values.
            </summary>
            <remarks>
            The data series is of type Double.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.LowValues">
            <summary>
            Gets or sets the data series containing the stock low values.
            </summary>
            <remarks>
            The data series is of type Double.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.UpFillStyle">
            <summary>
            Gets or sets the fill style applied to the up candles.
            </summary>
            <remarks>
            The up candles are displayed with this fill style.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.UpStrokeStyle">
            <summary>
            Gets or sets the stroke style applied to the up Candle and Stick.
            </summary>
            <remarks>
            The up candles borders are displayed with this stroke style.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.DownFillStyle">
            <summary>
            Get or sets the fill style applied to the down Candle.
            </summary>
            <remarks>
            The down candles are displayed with this fill style.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.DownStrokeStyle">
            <summary>
            Get or sets the stroke style applied to the down Candle and Stick.
            </summary>
            <remarks>
            The down candles borders are displayed with this stroke style.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.HighLowStrokeStyle">
            <summary>
            Gets or sets the stroke style applied to the high low line.
            </summary>
            <remarks>
            This stroke style is applied if the CandleStyle is set to Candle.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.HighLowSecondaryStrokeStyle">
            <summary>
            Gets or sets a stroke style optionally applied to the high low line of downward oriented candles.
            </summary>
            <remarks>
            This stroke style is applied if the CandleStyle is set to Candle and only for downward oriented candles. To enable 
            this stroke style set  UseSecondaryStrokeForDownCandles to true.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.UpLabel">
            <summary>
            Specified the label of the up data points.
            </summary>
            <remarks>
            This label is associated only with the up labels.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.DownLabel">
            <summary>
            Specified the label of the down data points.
            </summary>
            <remarks>
            This label is associated only with the down labels.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.StockGroupingBuilder">
            <summary>
            Gets or sets the stock grouping builder
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.GroupingMode">
            <summary>
            Gets or sets the stock grouping mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.MinAutoGroupLength">
            <summary>
            Gets or sets the minimal auto grouping length.
            </summary>
            <remarks>
            The stock series will choose such a unit and multiplier for grouping that produced steps bigger than and closer to the specified length.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.AllowedAutoGroupDateTimeUnits">
            <summary>
            Gets or sets the date time units that are allowed when the stock series performs automatic grouping
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.AllowedAutoGroupDateTimeUnitsXml">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.CustomGroupStep">
            <summary>
            Gets or sets the custom group step used to perform stock data grouping
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.MinGroupWidth">
            <summary>
            Gets or sets the minimum group width
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.MaxGroupWidth">
            <summary>
            Gets or sets the maximum group width
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStockSeries.GroupPercentWidth">
            <summary>
            Gets or sets the group percent width
            </summary>
        </member>
        <member name="T:Nevron.Chart.PaletteMode">
            <summary>
            Enumerates the palette modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.PaletteMode.Custom">
            <summary>
            The color value pairs are specified bSy the user
            </summary>
        </member>
        <member name="F:Nevron.Chart.PaletteMode.AutoMinMaxColor">
            <summary>
            The palette is automatically computed depending on the currently visualized range and is interpolated between the begin and end color
            </summary>
        </member>
        <member name="F:Nevron.Chart.PaletteMode.AutoFixedEntryCount">
            <summary>
            The palette is automatically computed depending on the currently visualized range and a specified number of entries
            </summary>
        </member>
        <member name="F:Nevron.Chart.PaletteMode.AutoSyncWithScale">
            <summary>
            Automatic mode in which the palette is synchronized with an axis
            </summary>
        </member>
        <member name="F:Nevron.Chart.PaletteMode.AutoMinMaxTwoColor">
            <summary>
            Automatic mode in which the negative color is mapped to the automatically computed minimum value and the positive color is mapped to the computed maximum value
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPaletteValueColorPair.#ctor(System.Double,System.UInt32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="value"></param>
            <param name="color"></param>
        </member>
        <member name="T:Nevron.Chart.NPalette">
            <summary>
            This object represents a custom palette, which assigns colors to values. 
            It is used in variety of places where elevation information needs to be 
            represented by colors.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPalette.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPalette.NegativeColor">
            <summary>
            Gets or sets the color used to visualize negative values
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPalette.PositiveColor">
            <summary>
            Gets or sets the color used to visualize positive values
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPalette.ZeroColor">
            <summary>
            Gets or sets the color used to visualize zero values
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPalette.Count">
            <summary>
            Gets the number of palette items contained in the NPalette object.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPalette.SmoothPalette">
            <summary>
            When this property is enabled the zone colors gradate smoothly from one to another.
            </summary>
            <remarks>
            By default this property is set to false.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NPalette.Mode">
            <summary>
            When set to true the heat map will use an automatically generated palette, based on the AutoPaletteColors
            </summary>
            <remarks>
            Controls the mode in which the palette is generated
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NPalette.AutoPaletteColors">
            <summary>
            Gets or sets an array of colors that are used for the automatic palette.
            Valid only if AutomaticPalette is set to true.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPalette.PaletteSteps">
            <summary>
            Controls the number of entries in the automatic palette if the SyncPaletteWithAxisScale is set to false.
            Valid only if AutomaticPalette is set to true.
            </summary>
            <example>
            The following code sets the number of automatic palette entries to 4:
            <code lang = 'VB'>
            surface.PaletteSteps = 4
            </code>
            <code>
            surface.PaletteSteps = 4;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NPalette.HasCustomMin">
            <summary>
            Whether the custom min value should be used
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPalette.HasCustomMax">
            <summary>
            Whether the custom max value should be used
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPalette.CustomMin">
            <summary>
            The custom min value
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPalette.CustomMax">
            <summary>
            The custom max value
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPalette.Add(System.Double,Nevron.GraphicsCore.NArgbColorValue)">
            <summary>
            Adds an item with the spesified color and value to the palette.
            If an item with the same value already exists in the palette, 
            it is replaced by the new one. Note that internally the component sorts the 
            palette in ascending order so that you don't have to worry about the sequence 
            in which you insert items.
            </summary>
            <example>
            The following line of code adds an item at elevation 10.0 with red color.
            <code lang = 'VB'>
            palette.Add(10.0, Color.Red)
            </code>
            <code>
            palette.Add(10.0, Color.Red);
            </code>
            </example>
            <param name="value">The value of the palette entry.</param>
            <param name="color">The color of the palette enrty.</param>
        </member>
        <member name="M:Nevron.Chart.NPalette.Add(System.Double,System.Drawing.Color)">
            <summary>
            Adds an item with the cpesified color and value to the palette.
            If an item with the same value already exists in the palette, 
            it is replaced by the new one. Note that internally the component sorts the 
            palette in ascending order so that you don't have to worry about the sequence 
            in which you insert items.
            </summary>
            <example>
            The following line of code adds an item at elevation 10.0 with red color.
            <code lang = 'VB'>
            palette.Add(10.0, Color.Red)
            </code>
            <code>
            palette.Add(10.0, Color.Red);
            </code>
            </example>
            <param name="value">The value of the palette entry.</param>
            <param name="color">The color of the palette enrty.</param>
        </member>
        <member name="M:Nevron.Chart.NPalette.Remove(System.Double)">
            <summary>
            Removes a palette item with the specified value.
            </summary>
            <param name="value">The value of the palette entry that must be removed.</param>
        </member>
        <member name="M:Nevron.Chart.NPalette.Clear">
            <summary>
            Removes all palette items from the palette.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPalette.GetEffectiveValueColorPairs">
            <summary>
            Gets the effective value / color pairs of the palette.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NPalette.GetColorForValue(System.Double,System.Double,System.Double,Nevron.Chart.NAxisBase)">
            <summary>
            Gets the color for the specified value
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NPalette.GetColorForValue(System.Double,Nevron.Chart.NAxisBase)">
            <summary>
            Gets the color for the specified value
            </summary>
            <param name="value"></param>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NPalette.Clone">
            <summary>
            Creates an identical copy of this palette object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NPalette.GetUserControl">
            <summary>
            Creates a user control which can be used for this object visual editing
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Chart.NPalette.m_PaletteSteps">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.NThreeLineBreakSeries">
            <summary>
            Represents a Three Line Break series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NThreeLineBreakSeries.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NThreeLineBreakSeries.BoxWidthPercent">
            <summary>
            Gets or sets the width of the boxes in percents of the floor grid cell width.
            </summary>
            <remarks>
            By default set to 70.
            </remarks>
            <example>
            The following example changes the width percent to 50 (half of the cell).
            <code lang = 'VB'>
            threeLineBreak.BoxWidthPercent = 50
            </code>
            <code>
            threeLineBreak.BoxWidthPercent = 50;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NThreeLineBreakSeries.NumberOfLinesToBreak">
            <summary>
            Gets or sets the number of consecutive lines used for the 
            reversal criterion of the line break chart.
            </summary>
            <remarks>
            If a rally or a sell-off is powerful enough to form several consecutive lines with the 
            same direction, then prices must reverse by the extreme price of the last several lines in 
            order to create a new line. Usually three consecutive lines are used for the reversal criterion, 
            hence the name Three Line Break.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NThreeLineBreakSeries.UpFillStyle">
            <summary>
            Gets or sets the fill style applied to the up boxes.
            </summary>
            <remarks>
            The up boxes are filled with this fill style.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NThreeLineBreakSeries.UpStrokeStyle">
            <summary>
            Gets or sets the stroke style applied to the up boxes.
            </summary>
            <remarks>
            The borders of the up boxes are displayed with this stroke style.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NThreeLineBreakSeries.DownFillStyle">
            <summary>
            Get or sets the fill style applied to the down boxes.
            </summary>
            <remarks>
            The down boxes are filled with this fill style.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NThreeLineBreakSeries.DownStrokeStyle">
            <summary>
            Get or sets the stroke style applied to the down boxes.
            </summary>
            <remarks>
            The borders of the down boxes are displayed with this stroke style.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NThreeLineBreakSeries.GetXYValues(System.Boolean,Nevron.Chart.NDataSeriesDouble,Nevron.Chart.NDataSeriesDouble)">
            <summary>
            Gets the x values in this series
            </summary>
            <param name="high"></param>
            <param name="xValues"></param>
            <param name="yValues"></param>
        </member>
        <member name="M:Nevron.Chart.NThreeLineBreakSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NVennComposition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NVennSeries">
            <summary>
            Represents a venn series.
            </summary>
            <remarks>
            You can create an instance of this class with the help of the Add 
            method of the NSeriesCollection class.
            <code lang = 'VB'>
            Dim venn As NVennSeries = chart.Series.Add(SeriesType.Venn)
            </code>
            <code>
            NVennSeries venn = (NVennSeries)chart.Series.Add(SeriesType.Venn);
            </code>
            </remarks>
            <seealso cref="T:Nevron.Chart.NSeriesBase"/>
        </member>
        <member name="M:Nevron.Chart.NVennSeries.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVennSeries.GetAttributeByNameAt(System.String,System.Int32)">
            <summary>
            Gets an an attribute by its name and index
            </summary>
            <param name="attributeName">name of the attribute</param>
            <param name="index">index of the attribute</param>
            <returns>a reference to the attribute</returns>
        </member>
        <member name="P:Nevron.Chart.NVennSeries.ContoursCount">
            <summary>
            Gets the number of original contours (or Venn sets) in the series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVennSeries.AddVennContour(Nevron.Chart.VennShape,Nevron.GraphicsCore.NPointF,Nevron.GraphicsCore.NSizeF,System.Single,System.Int32)">
            <summary>
            Adds a contour with the specified shape, position and size.
            </summary>
            <param name="s">shape of the contour</param>
            <param name="center">center point</param>
            <param name="dimensions">dimensions of the shape</param>
            <param name="angle">rotation angle around the center point</param>
            <param name="shapeId">an unique identification number for the contour</param>
        </member>
        <member name="M:Nevron.Chart.NVennSeries.RemoveContourAt(System.Int32)">
            <summary>
            Removes the contour at the specified index from the contours collection.
            </summary>
            <param name="index">index of the contour to remove</param>
        </member>
        <member name="M:Nevron.Chart.NVennSeries.ClearContours">
            <summary>
            Removes all contours from the contours collection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVennSeries.GetContoursForSegment(System.Int32)">
            <summary>
            Gets the contours that for the specified Venn segment.
            </summary>
            <remarks>
            This function is used to get the contours that enclose the segment. 
            You can obtain the segment Id as a result of a hit test operation.
            It is contained in the DataPointIndex property of the NHitTestResult object.
            </remarks>
            <param name="segmentId">the segment identification number (generated by the chart)</param>
            <returns>An array of contour identification numbers.</returns>
        </member>
        <member name="P:Nevron.Chart.NVennSeries.LabelsCount">
            <summary>
            Gets the number of segment labels in the series.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVennSeries.AddLabel(System.String,Nevron.GraphicsCore.NPointF)">
            <summary>
            Adds a label to the series.
            </summary>
            <param name="text">the text of the label</param>
            <param name="position">the position of the label</param>
        </member>
        <member name="M:Nevron.Chart.NVennSeries.RemoveLabelAt(System.Int32)">
            <summary>
            Removes the label at the specified index.
            </summary>
            <param name="index">the index of the label to remove</param>
        </member>
        <member name="M:Nevron.Chart.NVennSeries.ClearLabels">
            <summary>
            Removes all labels from the Venn diagram.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NVennSeries.LabelsTextStyle">
            <summary>
            Controls the text style of the Venn segment labels.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NVennSeries.FillStyles">
            <summary>
            Controls the fill styles for the Venn segments. A fill style at a 
            given index is applied to the segments with number of intersections 
            equal to the index.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NVennSeries.BorderStyles">
            <summary>
            Controls the stroke styles for the venn segment borders. A stroke style 
            at a given index is applied to the segments with number of intersections 
            equal to the index.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVennSeries.SetInteractivityForSegment(System.Int32[],Nevron.GraphicsCore.NInteractivityStyle)">
            <summary>
            Sets an individual interactivity style for a segment. The segment is 
            identified through the contours that enclose it.
            </summary>
            <param name="arrContourIDs">an array of contour identification numbers</param>
            <param name="interactivity">the interactivity style for the segment</param>
        </member>
        <member name="M:Nevron.Chart.NVennSeries.SetFillStyleForSegment(System.Int32[],Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Sets an individual fill style for a segment. The segment is 
            identified through the contours that enclose it.
            </summary>
            <param name="arrContourIDs">an array of contour identification numbers</param>
            <param name="fillStyle">the fill style for the segment</param>
        </member>
        <member name="M:Nevron.Chart.NVennSeries.ClearSegmentFillStyles">
            <summary>
            Removes all individual fill styles.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVennSeries.ClearSegmentInteractivityStyles">
            <summary>
            Removes all individual interactivity styles.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVennSeries.GetSeriesType">
            <summary>
            Gets the series type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NCartesianChartWall.RenderStripeText2D(Nevron.Chart.NChartRenderingContext2D,Nevron.Chart.NAxisStripe,Nevron.GraphicsCore.NRectangleF,System.Boolean)">
            <summary>
            Renders stripe text
            </summary>
            <param name="context"></param>
            <param name="stripe"></param>
            <param name="bounds"></param>
            <param name="horizontal"></param>
        </member>
        <member name="T:Nevron.Chart.NChartWall">
            <summary>
            Each of the five standard chart walls is represented by an instance of this class.
            </summary>
            <remarks>
            You can obtain a reference to a specific chart wall with the help of 
            the Wall method of the NChart class.
            </remarks>
            <example>
            The following code changes the color of the chart floor.
            <code lang = 'VB'>
            chart.Wall(ChartWallType.Floor).FillStyle = New NColorFillStyle(Color.Yellow)
            </code>
            <code>
            chart.Wall(ChartWallType.Floor).FillStyle = new NColorFillStyle(Color.Yellow);
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NChartWall.Visible">
            <summary>
            Controls the visibility of the chart wall.
            </summary>
            <remarks>
            You can use the VisibilityMode property for better control over the wall visibility.
            </remarks>
            <example>
            The following code makes the Rigth chart wall visible.
            <code lang = 'VB'>
            NChart.Wall(ChartWallType.Right).Visible = True
            </code>
            <code>
            NChart.Wall(ChartWallType.Right).Visible = true;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NChartWall.VisibilityMode">
            <summary>
            Gets or sets the visibility mode of the chart wall.
            </summary>
            <remarks>
            A Cartesian chart wall can be configured to be permanently visible, permanently hidden or 
            dynamicaly shown / hidden depending on the projection properties.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NChartWall.Width">
            <summary>
            Specifies the width of the chart wall.
            </summary>
            <remarks>
            By default the width is set to 1.0.
            </remarks>
            <example>
            The following code increases the width of the floor wall.
            <code lang = 'VB'>
            NChart.Wall(ChartWallType.Floor).Width = 3.5F
            </code>
            <code>
            NChart.Wall(ChartWallType.Floor).Width = 3.5f;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NChartWall.FillStyle">
            <summary>
            Gets or sets the NFillStyle object controlling the fill style 
            applied to the chart wall.
            </summary>
            <example>
            The following code displays the floor chart wall in blue.
            <code lang = 'VB'>
            chart.Wall(ChartWallType.Floor).FillStyle = New NColorFillStyle(Color.Blue)
            </code>
            <code>
            chart.Wall(ChartWallType.Floor).FillStyle = new NColorFillStyle(Color.Blue);
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NChartWall.BorderStyle">
            <summary>
            Gets or sets the NStrokeStyle object controlling the stroke style 
            applied to the chart wall border.
            </summary>
            <example>
            The following code displays the floor chart wall with red border.
            <code lang = 'VB'>
            NChart.Wall(ChartWallType.Floor).BorderStyle.Color = Color.Red
            </code>
            <code>
            NChart.Wall(ChartWallType.Floor).BorderStyle.Color = Color.Red;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NChartWall.ShadowStyle">
            <summary>
            Gets or sets the NShadowStyle object controlling the shadow of the wall.
            Only the back wall has a shadow. Shadows are visible when the context 
            is rendered with GDI+.
            </summary>
            <example>
            The following example sets a solid shadow for the back wall.
            <code lang = 'VB'>
            chart.Wall(ChartWallType.Back).ShadowStyle.Type = ShadowType.Solid
            </code>
            <code>
            chart.Wall(ChartWallType.Back).ShadowStyle.Type = ShadowType.Solid;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NChartWall.InteractivityStyle">
            <summary>
            The interactivity style associated with the chart wall.
            </summary>
            <example>
            The following example assigns a tooltip to the back chart wall.
            <code lang = 'VB'>
            NChart.Wall(ChartWallType.Back).InteractivityStyle.Tooltip.Text = "This is the back wall"
            </code>
            <code>
            NChart.Wall(ChartWallType.Back).InteractivityStyle.Tooltip.Text = "This is the back wall";
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NChartWall.AnimationsStyle">
            <summary>
            Gets or sets the animation style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartWall.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NChartWall.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="P:Nevron.Chart.NChartWall.Name">
            <summary>
            The name of the wall. 
            </summary>
        </member>
        <member name="T:Nevron.Chart.NChartWallCollection">
            <summary>
            Represents a collection of chart walls.
            </summary>
            <remarks>
            You can obtain a reference to an instance of this class with the 
            help of the Walls propery of the NChart object.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NChartWallCollection.Name">
            <summary>
            User defined name of the node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartWallCollection.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartWallCollection.GetWall(Nevron.Chart.ChartWallType)">
            <summary>
            Retrieves a specified wall from the collection.
            </summary>
            <param name="wall">specifies the chart wall</param>
            <returns>reference to the chart wall</returns>
        </member>
        <member name="T:Nevron.Chart.NChartWallCollectionTypeEditor">
            <summary>
            Summary description for NChartWallCollectionTypeEditor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartWallCollectionTypeEditor.Edit(Nevron.Chart.NChartWallCollection)">
            <summary>
            Edits the specified chart wall collection
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.NPolarWall.Name">
            <summary>
            The name of the wall. 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadarWall.Name">
            <summary>
            The name of the wall. 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadialWall.RadialBorderStyle">
            <summary>
            Gets or sets the border style applied on lines from the radar center to the radar rim.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAnalogClockPanel">
            <summary>
            Represents an analog clock panel
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAnalogClockPanel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnalogClockPanel.HoursArrow">
            <summary>
            Gets the hours arrow of the clock
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnalogClockPanel.MinutesArrow">
            <summary>
            Gets the minutes arrow of the clock
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnalogClockPanel.SecondsArrow">
            <summary>
            Gets the seconds arrow of the clock
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnalogClockPanel.Axis">
            <summary>
            The clock axis
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAnalogClockPanel.RecalcLayout(Nevron.Chart.NChartRenderingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NAnalogClockPanel.Measure(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NSizeF)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="maxSize"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NClockPanel">
            <summary>
            The base for all clock panels
            </summary>
        </member>
        <member name="M:Nevron.Chart.NClockPanel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NClockPanel.StaticTime">
            <summary>
            Gets/sets the time displayed by the clock when static time is set to true
            </summary>
        </member>
        <member name="P:Nevron.Chart.NClockPanel.TimeZone">
            <summary>
            Gets or sets the time zone (offset in hours) when the clock is working with UTC time.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NClockPanel.TimeSpan">
            <summary>
            Gets or sets the time span - used when the clock displays a time span instead of time
            </summary>
        </member>
        <member name="P:Nevron.Chart.NClockPanel.ClockTimeMode">
            <summary>
            Gets/sets the time mode of this clock
            </summary>
        </member>
        <member name="P:Nevron.Chart.NClockPanel.ClockDisplayMode">
            <summary>
            Gets or sets the clock display mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NClockPanel.CurrentTime">
            <summary>
            Obtains the time currently displayed by the clock
            </summary>
        </member>
        <member name="M:Nevron.Chart.NClockPanel.OnTimerTick">
            <summary>
            Occurs when the timer ticks
            </summary>
        </member>
        <member name="M:Nevron.Chart.NClockPanel.OnTimerStop">
            <summary>
            Occurs when the timer is stopped
            </summary>
        </member>
        <member name="M:Nevron.Chart.NClockPanel.OnTimerStart">
            <summary>
            Occurs when the timer is started
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDigitalClockPanel">
            <summary>
            Represents a digital clock panel
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDigitalClockPanel.#ctor">
            <summary>
            Default contructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDigitalClockPanel.LitFillStyle">
            <summary>
            Controls the appearance of hour led segments
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDigitalClockPanel.DimFillStyle">
            <summary>
            Controls the appearance of minute led segments
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDigitalClockPanel.InteractivityStyle">
            <summary>
            Gets or sets the interactivity style associated with this panel
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDigitalClockPanel.AnimationsStyle">
            <summary>
            Gets or sets the animation style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDigitalClockPanel.CellSize">
            <summary>
            Gets or sets the size of the cells in the contained in the display
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDigitalClockPanel.CellGap">
            <summary>
            Gets or sets the gap between segments
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDigitalClockPanel.SegmentWidth">
            <summary>
            Gets or sets the width of segments
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDigitalClockPanel.SegmentGap">
            <summary>
            Gets or sets the width of segments
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDigitalClockPanel.DisplayStyle">
            <summary>
            Gets or sets the style of the display segment cells
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDigitalClockPanel.RecalcLayout(Nevron.Chart.NChartRenderingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NDigitalClockPanel.Measure(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NSizeF)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="maxSize"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NDockGaugeAxisAnchor">
            <summary>
            Docks a gauge axis to one of the two gauge axis dock zones (Top or Bottom), thereby reducing the 
            space avaialable for the gauge content.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDockGaugeAxisAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDockGaugeAxisAnchor.#ctor(Nevron.Chart.GaugeAxisDockZone)">
            <summary>
            Initializer constructor
            </summary>
            <param name="dockZone"></param>
        </member>
        <member name="M:Nevron.Chart.NDockGaugeAxisAnchor.#ctor(Nevron.Chart.GaugeAxisDockZone,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="dockZone"></param>
            <param name="createNewZoneLevel"></param>
        </member>
        <member name="M:Nevron.Chart.NDockGaugeAxisAnchor.#ctor(Nevron.Chart.GaugeAxisDockZone,System.Boolean,System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="dockZone"></param>
            <param name="createNewZoneLevel"></param>
            <param name="beginPercent"></param>
            <param name="endPercent"></param>
        </member>
        <member name="M:Nevron.Chart.NDockGaugeAxisAnchor.#ctor(Nevron.Chart.GaugeAxisDockZone,System.Boolean,Nevron.Chart.RulerOrientation,System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="dockZone"></param>
            <param name="createNewZoneLevel"></param>
            <param name="rulerOrientation"></param>
            <param name="beginPercent"></param>
            <param name="endPercent"></param>
        </member>
        <member name="P:Nevron.Chart.NDockGaugeAxisAnchor.AxisDockZone">
            <summary>
            Gets or sets the axis position (zone) the axis is placed into
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDockGaugeAxisAnchor.SynchronizeRulerOrientation">
            <summary>
            Gets or sets a value indicating whether this anchor should synchronize the 
            ruler orientation of the axis with the axis zone.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDockGaugeAxisAnchor.BeforeSpace">
            <summary>
            Specifies spacing of the level before the other levels in the zone (if any)
            </summary>
            <remarks>
            This property takes effect only when the property CreateNewZoneLevel is set to true.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NDockGaugeAxisAnchor.AfterSpace">
            <summary>
            Specifies spacing that should be leaved after the level of the axis before other 
            levels are added in the zone.
            </summary>
            <remarks>
            This property takes effect only when the property CreateNewZoneLevel is set to true.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NDockGaugeAxisAnchor.CreateNewZoneLevel">
            <summary>
            Gets or sets a value indicating whether this anchor will create a new 
            zone level for the axis or use the last created one.
            </summary>
            <remarks>
            If there are no levels in the zone the anchor will always create a zone 
            level. Note that the BeforeSpace and AfterSpace properties depend on the 
            value of this property.
            </remarks>
        </member>
        <member name="F:Nevron.Chart.NDockGaugeAxisAnchor.m_BeforeSpace">
            <summary>
            Spacing of the level before content starts
            </summary>
        </member>
        <member name="F:Nevron.Chart.NDockGaugeAxisAnchor.m_AfterSpace">
            <summary>
            Spacing of the level after content ends
            </summary>
        </member>
        <member name="T:Nevron.Chart.NGaugeAxisAnchor">
            <summary>
            Summary description for NGaugeAxisAnchor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGaugeAxisAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGaugeAxisAnchor.#ctor(System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="beginPercent"></param>
            <param name="endPercent"></param>
        </member>
        <member name="T:Nevron.Chart.NModelGaugeAxisAnchor">
            <summary>
            Positions a gauge axis in gauge model space, without reducing the space available for the 
            gauge content.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NModelGaugeAxisAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NModelGaugeAxisAnchor.#ctor(Nevron.GraphicsCore.NLength,Nevron.VertAlign,Nevron.Chart.RulerOrientation)">
            <summary>
            Initializer constructor
            </summary>
            <param name="position"></param>
            <param name="origin"></param>
            <param name="orientation"></param>
        </member>
        <member name="M:Nevron.Chart.NModelGaugeAxisAnchor.#ctor(Nevron.GraphicsCore.NLength,Nevron.VertAlign,Nevron.Chart.RulerOrientation,System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="position"></param>
            <param name="origin"></param>
            <param name="orientation"></param>
            <param name="beginPercent"></param>
            <param name="endPercent"></param>
        </member>
        <member name="T:Nevron.Chart.NGaugeAxis">
            <summary>
            Summary description for NGaugeAxis.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGaugeAxis.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGaugeAxis.Anchor">
            <summary>
            Gets or sets the anchor controlling the placement of the gauge axis
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGaugeAxis.Range">
            <summary>
            Gets or sets the range displayed by this axis
            </summary>
        </member>
        <member name="T:Nevron.Chart.NGaugeAxisCollection">
            <summary>
            Summary description for NGaugeAxisCollection.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGaugeAxisCollection.Name">
            <summary>
            User defined name of the node
            </summary>
        </member>
        <member name="T:Nevron.Chart.NIndicator">
            <summary>
            The base of all indicators
            </summary>
        </member>
        <member name="M:Nevron.Chart.NIndicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NIndicator.#ctor(Nevron.Chart.IndicatorPaintOrder)">
            <summary>
            Initializer constructor
            </summary>
            <param name="paintOrder"></param>
        </member>
        <member name="P:Nevron.Chart.NIndicator.Visible">
            <summary>
            Controls the visibility of the indicator
            </summary>
        </member>
        <member name="P:Nevron.Chart.NIndicator.PaintOrder">
            <summary>
            Gets or sets a value indicating whether the indicator is painted before 
            or after the scale it is attached to
            </summary>
        </member>
        <member name="P:Nevron.Chart.NIndicator.OffsetOriginMode">
            <summary>
            Gets or sets the mode in which the indicator offset from scale is computed.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NIndicator.AllowDragging">
            <summary>
            Gets or sets a property indicating whether the indicator allows dragging via the mouse.
            </summary>
            <remarks>
            Set to true by default.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NIndicator.InteractivityStyle">
            <summary>
            Gets or sets the interactivity style associated with this indicator
            </summary>
        </member>
        <member name="P:Nevron.Chart.NIndicator.AnimationsStyle">
            <summary>
            Gets or sets the animation style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NIndicator.Axis">
            <summary>
            Gets or sets the axis this indicator scales on
            </summary>
            <remarks>
            If no axis is selected the indicator will scale on the first axis
            in the axes collection
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NIndicator.OffsetFromScale">
            <summary>
            Gets or sets the offset of the indicator from the scale
            </summary>
        </member>
        <member name="P:Nevron.Chart.NIndicator.Value">
            <summary>
            Gets or sets the value displayed by this indicator on the specified gauge axis
            </summary>
        </member>
        <member name="E:Nevron.Chart.NIndicator.ValueChanged">
            <summary>
            Occurs when the indicator value has changed.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NIndicator.ValueSnapper">
            <summary>
            Defines how to snap horizontal scale coordinates to axis ticks and ruler.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NIndicator.EnableDampening">
            <summary>
            Enables value dampening for this indicator.
            </summary>
            <remarks>
            When enabled the effective value displayed by the indicator will smoothly transform from the old value to the new value.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NIndicator.DampeningInterval">
            <summary>
            Gets or set the interval beween dampening steps
            </summary>
        </member>
        <member name="P:Nevron.Chart.NIndicator.DampeningSteps">
            <summary>
            Gets or set the number of steps the indicator will perform in order to display
            a new value when dampening is enabled
            </summary>
        </member>
        <member name="P:Nevron.Chart.NIndicator.Palette">
            <summary>
            Gets or sets the palette assocaited with the indicator
            </summary>
        </member>
        <member name="P:Nevron.Chart.NIndicator.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NIndicator.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NIndicator.OnTimerTick">
            <summary>
            Occurs when the timer ticks
            </summary>
        </member>
        <member name="M:Nevron.Chart.NIndicator.OnTimerStop">
            <summary>
            Occurs when the timer is stopped
            </summary>
        </member>
        <member name="M:Nevron.Chart.NIndicator.OnTimerStart">
            <summary>
            Occurs when the timer is started
            </summary>
        </member>
        <member name="T:Nevron.Chart.NIndicatorCollection">
            <summary>
            Summary description for NIndicatorCollection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NIndicatorCollection.#ctor">
            <summary>
            Default contructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NIndicatorCollection.Name">
            <summary>
            User defined name of the node
            </summary>
        </member>
        <member name="T:Nevron.Chart.NMarkerValueIndicator">
            <summary>
            Represents a merker value indicator
            </summary>
        </member>
        <member name="M:Nevron.Chart.NMarkerValueIndicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NMarkerValueIndicator.#ctor(System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Nevron.Chart.NMarkerValueIndicator.Height">
            <summary>
            Gets or sets the height of the value indicator shape
            </summary>
        </member>
        <member name="T:Nevron.Chart.NNeedleCapStyle">
            <summary>
            Controls the appearance and visibility of the cap style applied on the needle pin point
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNeedleCapStyle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNeedleCapStyle.Visible">
            <summary>
            Gets or sets a property indicating whether the cap is visible or not
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNeedleCapStyle.Size">
            <summary>
            Gets or sets the size of the needle cap 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNeedleCapStyle.Shape">
            <summary>
            Gets or set the shape of the marker
            </summary>
        </member>
        <member name="T:Nevron.Chart.NNeedleValueIndicator">
            <summary>
            Represents a needle value indicator.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNeedleValueIndicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNeedleValueIndicator.#ctor(System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Nevron.Chart.NNeedleValueIndicator.OffsetFromCenter">
            <summary>
            Gets or sets the offset of the needle base from the center of the gauge
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRangeIndicator">
            <summary>
            Represents a range indicator
            </summary>
            <remarks>
            Range indicators display a range of values on one of the gauge axes
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NRangeIndicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeIndicator.#ctor(Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeIndicator.#ctor(System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Nevron.Chart.NRangeIndicator.Origin">
            <summary>
            Get or sets the origin of the range displayed by the indicator
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeIndicator.BeginWidth">
            <summary>
            Gets or sets the begin width of the range indicator 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeIndicator.EndWidth">
            <summary>
            Gets or sets the end width of the range indicator 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeIndicator.BeginOffset">
            <summary>
            Gets or sets the begin offset of the range indicator 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeIndicator.EndOffset">
            <summary>
            Gets or sets the end offset of the range indicator 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeIndicator.FillStyle">
            <summary>
            Gets or sets the fill style of the indicator
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeIndicator.StrokeStyle">
            <summary>
            Gets or sets the stroke style of the indicator
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeIndicator.ShadowStyle">
            <summary>
            Gets or sets the indicator shadow style 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeIndicator.Range">
            <summary>
            Obtains the normalized range displayed by this indicator
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeIndicator.PaletteColorMode">
            <summary>
            Gets or set the the bar width mode when the bar is in scatter mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeIndicator.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NRangeIndicator.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="T:Nevron.Chart.NValueIndicator">
            <summary>
            Represents a value indicator
            </summary>
        </member>
        <member name="M:Nevron.Chart.NValueIndicator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NValueIndicator.#ctor(Nevron.Chart.IndicatorPaintOrder)">
            <summary>
            Initializer constructor
            </summary>
            <param name="paintOrder"></param>
        </member>
        <member name="P:Nevron.Chart.NValueIndicator.Shape">
            <summary>
            Gets or set the shape of the marker
            </summary>
        </member>
        <member name="P:Nevron.Chart.NValueIndicator.Width">
            <summary>
            Gets or sets the width of the value indicator shape
            </summary>
        </member>
        <member name="T:Nevron.Chart.NGaugePanel">
            <summary>
            Summary description for NGaugePanel.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGaugePanel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGaugePanel.ShadowStyle">
            <summary>
            Get or sets the gauge shadow style 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGaugePanel.BackgroundAdorner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGaugePanel.Axes">
            <summary>
            Gets or sets the axes attached to this gauge panel
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGaugePanel.Indicators">
            <summary>
            Gets or sets the indicators attached to this gauge panel
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGaugePanel.InteractivityStyle">
            <summary>
            Gets or sets the interactivity style associated with this panel
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGaugePanel.AnimationsStyle">
            <summary>
            Gets or sets the animation style
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGaugePanel.OnAnchorChanged">
            <summary>
            Called when an axis anchor has changed
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGaugePanel.OnScaleChanged">
            <summary>
            Called when a scale has changed
            </summary>
        </member>
        <member name="P:Nevron.Chart.NGaugePanel.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NGaugePanel.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NGaugePanel.PaintBackgroundAdorner(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.NGaugeRenderingContext">
            <summary>
            Summary description for NGaugeRenderingContext.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLinearGaugePanel">
            <summary>
            Represents a linear gauge panel
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLinearGaugePanel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLinearGaugePanel.RecalcLayout(Nevron.Chart.NChartRenderingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Nevron.Chart.NRadialGaugePanel">
            <summary>
            Represents a radial gauge panel
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRadialGaugePanel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadialGaugePanel.BeginAngle">
            <summary>
            Gets or sets the begin angle
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadialGaugePanel.SweepAngle">
            <summary>
            Gets or sets the begin angle
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadialGaugePanel.InnerRadius">
            <summary>
            Gets or sets the height of the ruler in NLength format.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadialGaugePanel.CapStyle">
            <summary>
            Gets or sets the cap style of the needle pin
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadialGaugePanel.AutoBorder">
            <summary>
            Gets or sets the automatic border type applied to the gauge
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadialGaugePanel.EdgeBorderRounding">
            <summary>
            Gets or sets the edge border rounding when auto border is set to rounded ouline
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRadialGaugePanel.CenterBorderRounding">
            <summary>
            Gets or sets the center border rounding when auto border is set to rounded ouline
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRadialGaugePanel.RecalcLayout(Nevron.Chart.NChartRenderingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NRadialGaugePanel.PostOrderPaint2D(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NRadialGaugePanel.RenderPostPaintEffect(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NRadialGaugePanel.GetAngle(System.Single)">
            <summary>
            Gets the angle at the specified x scale coordinate
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NRadialGaugePanel.PushModelSize(Nevron.GraphicsCore.NLengthConverter)">
            <summary>
            
            </summary>
            <param name="lengthConverter"></param>
        </member>
        <member name="M:Nevron.Chart.NRadialGaugePanel.TransformModelToViewPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NRadialGaugePanel.TransformViewToModelPoint(Nevron.GraphicsCore.NPointF)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NGridPanel">
            <summary>
            Summary description for NGridPanel.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLabel">
            <summary>
            This object represents a label. Labels are texts that are always displayed over 
            the 3D context. They usually contain descriptive information about the image generated 
            by the control. You can add labels to the context with the help of the NLabelCollection 
            object. The NLabel object also allows you to position the label at an arbitrary 
            position in the control window. You specify the position (or origin point) of the 
            label object in percents of the control window dimensions with the help of the 
            HorizontalMargin and VerticalMargin properties.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLabel.#ctor">
            <summary>
            Creates an empty label.
            </summary>
            <remarks>
            The label is positioned at the center of the control window.The font is Arial 12.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NLabel.#ctor(System.String)">
            <summary>
            Creates a label with the specified text.
            </summary>
            <param name="text"></param>
            <remarks>
            The label is positioned at the center of the control window. The font is Arial 12.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NLabel.Text">
            <summary>
            The text displayed by the label.
            </summary>
            The following example crates a simple label.
            <example>
            <code lang = 'VB'>
            Dim label As NLabel =  New NLabel() 
            label.Text = "Hello world"
            nChartControl1.Labels.Add(label)
            </code>
            <code>
            NLabel label = new NLabel();
            label.Text = "Hello world";
            nChartControl1.Labels.Add(label);
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NLabel.TextStyle">
            <summary>
            Gets or sets the NTextStyle object applied to the label's text.
            </summary>
            <example>
            The following example creates a label and sets its font.
            <code lang = 'VB'>
            Dim label As NLabel =  New NLabel()
            label.Text = "Hello world"
            label.TextStyle.FontStyle = New NFontStyle("Arial", 22)
            nChartControl1.Labels.Add(label)
            </code>
            <code>
            NLabel label = new NLabel();
            label.Text = "Hello world";
            label.TextStyle.FontStyle = new NFontStyle("Arial", 22);
            nChartControl1.Labels.Add(label);
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NLabel.FitMode">
            <summary>
            Gets or sets the label fit mode when BoundsMode is set to Fit
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLabel.InteractivityStyle">
            <summary>
            The interactivity style associated with the label.
            </summary>
            <remarks>
            With the NInteractivityStyle object you can control the tooptips, mouse cursor change 
            and browser redirection (HTML image maps only) associated with the label. For more 
            information on the NInteractivityStyle object and the interactivity features take a look 
            at the "Interactivity" book in the Users Guide.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NLabel.AnimationsStyle">
            <summary>
            Gets or sets the animation style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLabel.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NLabel.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NLabel.PreOrderPaint2D(Nevron.Chart.NChartRenderingContext2D)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NLabel.Measure(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NSizeF)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="maxSize"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NLabel.RecalcLayout(Nevron.Chart.NChartRenderingContext)">
            <summary>
            Recalculates the layout of this panel and it's descendants
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NLabel.GetUseBoxRendering">
            <summary>
            Whether to use box box rendering
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NLabelCollection">
            <summary>
            Holds all label objects contained in the panels tree.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLabelCollection.#ctor(Nevron.Chart.NRootPanel)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rootPanel"></param>
        </member>
        <member name="M:Nevron.Chart.NLabelCollection.AddHeader(System.String)">
            <summary>
            Adds a header to the label collection. 
            </summary>
            <remarks>
            The header position is vertically offseted at 10% from the control top and 
            horizontally centered.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NLabelCollection.AddFooter(System.String)">
            <summary>
            Adds a footer to the label collection. 
            </summary>
            <remarks>
            The footer position is vertically offseted at 10% from the control bottom edge 
            and horizontally centered.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NLabelCollection.GetAt(System.Int32)">
            <summary>
            Returns the NLabel object at at the specified index in the collection.
            </summary>
            <param name="index">index of the legend in the collection</param>
            <returns>a reference to the watermark</returns>
        </member>
        <member name="P:Nevron.Chart.NLabelCollection.Item(System.Int32)">
            <summary>
            collection indexer method
            </summary>
        </member>
        <member name="T:Nevron.Chart.INLegendItemCollection">
            <summary>
            Summary description for INLegendItemCollection.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLegendData">
            <summary>
            Summary description for NLegendData.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendData.#ctor">
            <summary>
            Creates a new NLegendData object with default settings.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendData.RowCount">
            <summary>
            The maximum row count allowed when ExpandMode is RowsFixed.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendData.ColCount">
            <summary>
            The maximum column count allowed when ExpandMode is ColsFixed.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendData.ExpandMode">
            <summary>
            The expand strategy of the legend.
            </summary>
            <remarks>
            When you add new items to the NLegendData object the legend may become too long to 
            display in the control window or image. This is why you may wish to alter the legend 
            layout strategy or in other words the way the legend expands when new items are added.
            </remarks>
            <example>
            The following example instructs the legend to expand to a limited number of rows.
            <code>
            legend.Data.ExpandMode = ExpandMode.RowsFixed;
            legend.Data.RowCount = 4;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NLegendData.Items">
            <summary>
            Gets or sets the legend items contained in the legend.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendData.AutoItems">
            <summary>
            Gets or sets the legend items contained in the legend.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendData.CellMargins">
            <summary>
            The margins of the cell content from the grid lines
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendData.TextOffset">
            <summary>
            The offset of the the text from the margin bounds.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendData.MarkSize">
            <summary>
            The size of the legend items marks
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendData.MarkYOffset">
            <summary>
            The offset of the the text from the margin bounds.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLegendItemCellData">
            <summary>
            Represents a legend data item.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendItemCellData.#ctor">
            <summary>
            Creates a new NLegendItemCellData object with default settings.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendItemCellData.#ctor(Nevron.Chart.LegendMarkShape)">
            <summary>
            Creates a new NLegendItemCellData object with the specified mark shape.
            </summary>
            <param name="markShape"></param>
        </member>
        <member name="M:Nevron.Chart.NLegendItemCellData.#ctor(System.String)">
            <summary>
            Creates a new NLegendItemCellData object with the specified text.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Chart.NLegendItemCellData.#ctor(System.String,Nevron.Chart.LegendMarkShape)">
            <summary>
            Creates a new NLegendItemCellData object with the specified text.
            </summary>
            <param name="text"></param>
            <param name="markShape"></param>
        </member>
        <member name="M:Nevron.Chart.NLegendItemCellData.#ctor(System.String,Nevron.Chart.LegendMarkShape,Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NShadowStyle,Nevron.GraphicsCore.NTextStyle)">
            <summary>
            Creates a new NLegendItemCellData object with the specified settings.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendItemCellData.#ctor(System.String,Nevron.Chart.LegendMarkShape,Nevron.Chart.NChartElement,Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NShadowStyle,Nevron.GraphicsCore.NTextStyle,Nevron.GraphicsCore.NLength,Nevron.Chart.LegendTextFitMode,System.Boolean,System.Drawing.ContentAlignment)">
            <summary>
            Creates a new NLegendItemCellData object with the specified settings.
            </summary>
            <param name="text"></param>
            <param name="markShape"></param>
            <param name="chartElement"></param>
            <param name="markBorderStyle"></param>
            <param name="markFillStyle"></param>
            <param name="markShadowStyle"></param>
            <param name="textStyle"></param>
            <param name="maxTextWidth"></param>
            <param name="textFitMode"></param>
            <param name="alwaysIncludeMarkSize"></param>
            <param name="contentAlignment"></param>
        </member>
        <member name="P:Nevron.Chart.NLegendItemCellData.MarkShape">
            <summary>
            Controls the mark shape of this legend item.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendItemCellData.MarkBorderStyle">
            <summary>
            Controls the border style of the mark shape.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendItemCellData.MarkLineStyle">
            <summary>
            Controls the line style of the line appearing below the mark shape.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendItemCellData.MarkFillStyle">
            <summary>
            Controls the fill style of the mark shape.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendItemCellData.MarkShadowStyle">
            <summary>
            Controls the shadow style of the mark shape.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendItemCellData.AlwaysIncludeMarkSize">
            <summary>
            Gets or sets whether the cell will always include the mark size in measurement regardless of whether it has a mark or not
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendItemCellData.UseCustomMarkSize">
            <summary>
            Whether the cell will use a custom mark size for this item
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendItemCellData.CustomMarkSize">
            <summary>
            Controls the custom mark size for this item
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendItemCellData.UseCustomLineWidth">
            <summary>
            Whether the cell will use a custom mark line width for this item
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendItemCellData.CustomLineWidth">
            <summary>
            Controls the custom line width for this item
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendItemCellData.ChartElement">
            <summary>
            Gets the chart element that produced the item. 
            </summary>
            <remarks>
            The value of this property is null for manually generated items
            </remarks>
        </member>
        <member name="T:Nevron.Chart.NLegendItemCollection">
            <summary>
            Summary description for NLegendGridItems.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendItemCollection.Name">
            <summary>
            User defined name of the node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendItemCollection.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLegendFooter">
            <summary>
            Represents a legend footer.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendFooter.#ctor">
            <summary>
            Creates a new NLegendFooter object.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendFooter.Name">
            <summary>
            User defined name of the node
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLegendFooterCellData">
            <summary>
            Represents a legend footer cell.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendFooterCellData.Name">
            <summary>
            User defined name of the node
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLegendHeader">
            <summary>
            Represents a legend header.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendHeader.#ctor">
            <summary>
            Creates a new NLegendHeader header object.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendHeader.Name">
            <summary>
            User defined name of the node
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLegendHeaderCellData">
            <summary>
            Represents a legend header cell.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendHeaderCellData.Name">
            <summary>
            User defined name of the node
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLegendTextCellData">
            <summary>
            Reprsents a legend header or footer.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendTextCellData.#ctor">
            <summary>
            Initializer contructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendTextCellData.Text">
            <summary>
            The texts displayed as legend header or footer.
            </summary>
            <example>
            The following code modifies the legend header and footer texts.
            <code lang = 'VB'>
            legend.Footer.Text = "Legend Footer"
            legend.Header.Text = "Legend Header"
            </code>
            <code>
            legend.Footer.Text = "Legend Footer";
            legend.Header.Text = "Legend Header";
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NLegendTextCellData.TextStyle">
            <summary>
            Gets or sets the text style associated with this legend cell
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendTextCellData.MaxTextWidth">
            <summary>
            Gets or sets the maximum width of text in the legend cell when the text fit mode is set to wrap
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendTextCellData.MinTextWidth">
            <summary>
            Gets or sets the minimum width of text in the legend cell 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendTextCellData.TextFitMode">
            <summary>
            Gets or sets the text fit mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendTextCellData.ContentAlignment">
            <summary>
            Gets or sets the content alignment of the cell
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendTextCellData.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NLegendTextCellData.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="T:Nevron.Chart.NLegendTitle">
            <summary>
            The base class for NLegendHeader and NLegendFooter. 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendTitle.Text">
            <summary>
            The texts displayed as legend header or footer.
            </summary>
            <example>
            The following code modifies the legend header and footer texts.
            <code lang = 'VB'>
            legend.Footer.Text = "Legend Footer"
            legend.Header.Text = "Legend Header"
            </code>
            <code>
            legend.Footer.Text = "Legend Footer";
            legend.Header.Text = "Legend Header";
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NLegendTitle.TextStyle">
            <summary>
            The text properties of the legend header or footer.
            </summary>
            <remarks>
            With the help of this property you can control the font of the legend header or footer.
            </remarks>
            <example>
            The following code modifies the font used to display the legend header and footer.
            <code lang = 'VB'>
            legend.Footer.Text = "Legend Footer"
            legend.Footer.TextStyle.FontStyle.Font = New Font("Arial", 22)
            legend.Header.Text = "Legend Header"
            legend.Header.TextStyle.FontStyle.Font = New Font("Arial", 22)
            </code>
            <code>
            legend.Footer.Text = "Legend Footer";
            legend.Footer.TextStyle.FontStyle.Font = new Font("Arial", 22);
            legend.Header.Text = "Legend Header";
            legend.Header.TextStyle.FontStyle.Font = new Font("Arial", 22);
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NLegendTitle.Inflate">
            <summary>
            Specifies an additional inflate of the cell in NSize format.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLegendInterlaceStyle">
            <summary>
            Represents a legend horizontal or vertical interlace style.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendInterlaceStyle.#ctor">
            <summary>
            Creates a new legend interlace style with default settings.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendInterlaceStyle.Type">
            <summary>
            The type of the interlace style (horizontal or vertical).
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendInterlaceStyle.FillStyle">
            <summary>
            Controls the fill style of the interlace style.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendInterlaceStyle.Begin">
            <summary>
            The begin row or column of this interlace style.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendInterlaceStyle.Infinite">
            <summary>
            Whether or not this style is repeated infinitely along the legend grid or not.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendInterlaceStyle.End">
            <summary>
            The end row or column of this interlace style if Infinite is set to false.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendInterlaceStyle.Length">
            <summary>
            The length in rows or columns of each interlace stripe.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendInterlaceStyle.Interval">
            <summary>
            The interval (gap) between two consecutive interlace stripes.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLegendInterlaceStylesCollection">
            <summary>
            Contains legend interlace styles.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendInterlaceStylesCollection.#ctor">
            <summary>
            Creates a new empty NLegendInterlaceStylesCollection object.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendInterlaceStylesCollection.Name">
            <summary>
            User defined name of the node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegendInterlaceStylesCollection.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLegend">
            <summary>
            The NLegend class represents the integrated legend of Nevron Chart for .NET.
            </summary>
            <remarks>
            The integrated legend can display various information about the chart series or custom data. 
            Each chart is associated with only one legend, but one legend can be associated with many charts.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NLegend.#ctor">
            <summary>
            Creates a new legend. 
            </summary>
            <remarks>
            You must add the legend object to the legends collection before it can be displayed by the chart.
            </remarks>
            <example>
            The following example adds a new legend.
            <code lang  = 'VB'>
            NLegend legend = new NLegend();
            NChartControl.Legends.Add(legend);
            </code>
            <code>
            NLegend legend = new NLegend();
            NChartControl.Legends.Add(legend);
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NLegend.Mode">
            <summary>
            Controls the mode of the legend.
            </summary>
            <remarks>
            The integrated legend of Nevron Chart for .NET can operate in three modes - Disabled, Automatic and Manual. In disabled mode the legend is not displayed. When you set the mode to Automatic the legend data is supplied by the series of the associated charts to the legend. In this case you control the displayed legend data items though the NSeriesLegend object. In manual mode you can manually feed the legend data items.
            </remarks>
            <example>
            The following example creates a new legend, sets it in manual mode and adds a new legend data item.
            <code lang = 'VB'>
            Dim legend As NLegend =  New NLegend() 
            legend.Mode = LegendMode.Manual
            NChartControl.Legends.Add(legend)
            </code>
            <code>
            NLegend legend = new NLegend();
            legend.Mode = LegendMode.Manual;
            NChartControl.Legends.Add(legend);
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NLegend.Header">
            <summary>
            The header of the legend.
            </summary>
            <remarks>
            Returns a reference to a NLegendText object representing the legend header. 
            The header is not displayed if the Text property of the NLegendText object is empty.
            </remarks>
            <example>
            The following example changes the text of the legend header.
            <code lang = 'VB'>
            Dim legend As NLegend = CType((NChartControl.Legends(0)), NLegend)
            legend.Header.Text = "Some legend header"
            </code>
            <code>
            NLegend legend = (NLegend)(NChartControl.Legends[0]);
            legend.Header.Text = "Some legend header";
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NLegend.Footer">
            <summary>
            The footer of the legend.
            </summary>
            <remarks>
            Returns a reference to a NLegendText object representing the legend footer. 
            The footer is not displayed if the Text property of the NLegendText object is empty.
            </remarks>
            <example>
            The following example changes the text of the legend header.
            <code lang = 'VB'>
            Dim legend As NLegend = CType((NChartControl.Legends(0)), NLegend)
            legend.Header.Text = "Some legend header"
            </code>
            <code>
            NLegend legend = (NLegend)(NChartControl.Legends[0]);
            legend.Header.Text = "Some legend header";
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NLegend.Data">
             <summary>
             The legend data when the legend operates in Custom mode.
             </summary>
             <remarks>
             When you set the legend in custom mode you can manually feed data to the legend 
             by accessing the Array property of the NLegendData object.
             </remarks>
             <example>
             The following code changes the legend mode and adds a custom legend item.
             <code lang = 'VB'>
             legend.Mode = LegendMode.Manual
             
             Dim item As NLegendItemCellData =  New NLegendItemCellData() 
             item.Text = "Custom legend item"
             item.MarkFillStyle = New NGradientFillStyle(GradientStyle.Horizontal, GradientVariant.Variant1, Color.Azure, Color.Blue)
             item.MarkShape = LegendMarkShape.NRectangle
             legend.Data.Array.Add(item)
             </code>
             <code>
             legend.Mode = LegendMode.Manual;
            
             NLegendItemCellData item = new NLegendItemCellData();
             item.Text = "Custom legend item";
             item.MarkFillStyle = new NGradientFillStyle(GradientStyle.Horizontal, GradientVariant.Variant1, Color.Azure, Color.Blue);
             item.MarkShape = LegendMarkShape.NRectangle;
             legend.Data.Array.Add(item);
             </code>
             </example>
        </member>
        <member name="P:Nevron.Chart.NLegend.InteractivityStyle">
            <summary>
            The interactivity style associated with the legend.
            </summary>
            <remarks>
            With the NInteractivityStyle object you can control the tooptips, mouse cursor change 
            and browser redirection (HTML image maps only) associated with the legend. For more 
            information on the NInteractivityStyle object and the interactivity features take a look 
            at the "Interactivity" book in the Users Guide.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NLegend.AnimationsStyle">
            <summary>
            Gets or sets the animation style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegend.InterlaceStyles">
            <summary>
            The interlace style of the legend 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegend.ScaleLegendGridLines">
            <summary>
            Whether or not legend grid lines should be scaled when the legend is in Stretch or Fit bounds mode.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegend.FillStyle">
            <summary>
            Gets or sets the fill style applied to the legend background.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegend.ShadowStyle">
            <summary>
            The shadow style of the legend
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegend.HorizontalBorderStyle">
            <summary>
            The line style of the horizontal legend grid lines
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegend.VerticalBorderStyle">
            <summary>
            The line style of the vertical legend grid lines
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegend.OuterLeftBorderStyle">
            <summary>
            The line style of the outer left legend border
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegend.OuterRightBorderStyle">
            <summary>
            The line style of the outer right legend border
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegend.OuterTopBorderStyle">
            <summary>
            The line style of the outer top legend border
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLegend.OuterBottomBorderStyle">
            <summary>
            The line style of the outer bottom legend border
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegend.SetPredefinedLegendStyle(Nevron.Chart.PredefinedLegendStyle)">
            <summary>
            Sets a predefined legend layout and position.
            </summary>
            <remarks>
            This function is a convenient way to change the legend position and layout, 
            because it saves you a few lines of code.
            </remarks>
            <example>
            The following code changes the legend position to bottom and the expand mode to ColsOnly.
            <code lang  = 'VB'>
            Dim legend As NLegend = CType((NChartControl.Legends(0)), NLegend)
            legend.SetPredefinedLegendStyle(PredefinedLegendStyle.Bottom)
            </code>
            <code>
            NLegend legend = (NLegend)(NChartControl.Legends[0]);
            legend.SetPredefinedLegendStyle(PredefinedLegendStyle.Bottom);
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NLegend.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NLegend.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NLegend.GetRows(System.Int32)">
            <summary>
            The legend rows.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegend.GetCols(System.Int32)">
            <summary>s
            The legend columns.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegend.Measure(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NSizeF)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="maxSize"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NLegend.RecalcLayout(Nevron.Chart.NChartRenderingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Chart.NLegend.GetHeaderBounds">
            <summary>
            Gets the legend header bounds
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NLegend.GetFooterBounds">
            <summary>
            Gets the legend footer bounds
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NLegend.GetLegendDataItemBounds(System.Int32)">
            <summary>
            Gets the bounds of the specified legend data item
            </summary>
            <param name="nLegendDataItemIndex"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NLegendCollection">
            <summary>
            This collection contains the legends displayed by Nevron Chart for .NET.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendCollection.#ctor(Nevron.Chart.NRootPanel)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rootPanel"></param>
        </member>
        <member name="M:Nevron.Chart.NLegendCollection.Add">
            <summary>
            Adds a new legend to the NLegendCollection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendCollection.GetAt(System.Int32)">
            <summary>
            Returns the NLegend object at at the specified index in the collection.
            </summary>
            <param name="index">index of the legend in the collection</param>
            <returns>a reference to the legend</returns>
        </member>
        <member name="P:Nevron.Chart.NLegendCollection.Item(System.Int32)">
            <summary>
            collection indexer method
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLegendEditorUC">
            <summary>
            Summary description for NLegendEditorUC.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendEditorUC.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NCharacterDecimalPositionFilter">
            <summary>
            Returns true if the character token decimal position has the same relative position as the filter
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCharacterDecimalPositionFilter.#ctor(System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="relativePosition"></param>
        </member>
        <member name="M:Nevron.Chart.NCharacterDecimalPositionFilter.Filter(System.Object)">
            <summary>
            Overriden to return true if the specified char token is placed relate to the string decimal position
            </summary>
            <param name="obj">char token (NCharToken)</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NCharacterInRangeFilter">
            <summary>
            Represents a filter that will return true if the character token (char plus index) has a character
            that falls in the specified character set
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCharacterInRangeFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCharacterInRangeFilter.#ctor(Nevron.GraphicsCore.NRange1D[],System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="characterRanges"></param>
            <param name="checkCharacterCode"></param>
        </member>
        <member name="P:Nevron.Chart.NCharacterInRangeFilter.Ranges">
            <summary>
            Gets or sets ranges associated with this filter
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCharacterInRangeFilter.CheckCharacterCode">
            <summary>
            Gets or sets a value indicating whether the filter will check the character code or position.
            </summary>
            <remarks>
            When set to true the filter will check if the character code falls in he ranges specified by 
            the CharacterRanges property. When set to false the filter will check whether the character position
            falls in the specified ranges.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NCharacterInRangeFilter.Filter(System.Object)">
            <summary>
            Overriden to return true if the specified char token falls in the character set ranges
            </summary>
            <param name="obj">char token (NCharToken)</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NCharacterSegmentMap">
            <summary>
            Maps a character to the segments of a display cell that have to be highlighted in order to 
            display 
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCharacterSegmentMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCharacterSegmentMap.Add(System.Char,System.Int32[])">
            <summary>
            Adds a character to segment mapping
            </summary>
            <param name="character"></param>
            <param name="segments"></param>
            <remarks>
            The segments whose indexes appear in the segments array will be highlighted using the 
            LitFillStyle of the display. All other segments will use the fill style specified by the 
            DimFillStyle property.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NCharacterSegmentMap.Remove(System.Char)">
            <summary>
            Removes the mapping for the specified character
            </summary>
            <param name="character"></param>
            <remarks>
            If you remove a character mapping the character will be displayed with the 
            default error character specified by the this.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NCharacterSegmentMap.Clear">
            <summary>
            Clears the map
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCharacterSegmentMap.InitDotSegmentMap">
            <summary>
            Initializes the map to default dot segment segment cell
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCharacterSegmentMap.InitSignSegmentMap">
            <summary>
            Initializes the map to default dot segment segment cell
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCharacterSegmentMap.InitColonSegmentMap">
            <summary>
            Initializes the map to default colon segment cell
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCharacterSegmentMap.InitSevenSegmentMap">
            <summary>
            Initializes the map to default 7 segment segment cell
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCharacterSegmentMap.InitFourteenSegmentMap">
            <summary>
            Initializes the map to default 14 segment segment cell
            </summary>
        </member>
        <member name="T:Nevron.Chart.NMatrixCellSegmentInfo">
            <summary>
            Summary description for NMatrixInfo.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDisplay">
            <summary>
            Represents a display consisting of cells
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDisplay.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDisplay.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NDisplay.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="T:Nevron.Chart.NDisplayPanel">
            <summary>
            Summary description for NDisplayPanel.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDisplayPanel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDisplayPanel.Display">
            <summary>
            Gets or sets the display associated with this panel
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDisplayPanel.DisplayStyle">
            <summary>
            Gets or sets the style of the display segment cells
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDisplayPanel.LitFillStyle">
            <summary>
            Controls the appearance of lit led segments
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDisplayPanel.DimFillStyle">
            <summary>
            Controls the appearance of dim led segments
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDisplayPanel.CellSize">
            <summary>
            Gets or sets the size of the cells in the contained in the display
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDisplayPanel.CellGap">
            <summary>
            Gets or sets the gap between cells contained in the display
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDisplayPanel.InteractivityStyle">
            <summary>
            Gets or sets the interactivity style associated with this panel
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDisplayPanel.AnimationsStyle">
            <summary>
            Gets or sets the animation style
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDisplayPanel.RecalcLayout(Nevron.Chart.NChartRenderingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Nevron.Chart.NDisplayPanel.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NDisplayPanel.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NDisplayPanel.Measure(Nevron.Chart.NChartRenderingContext,Nevron.GraphicsCore.NSizeF)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="maxSize"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NNumericDisplayPanel">
            <summary>
            The base of all numeric display panels
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNumericDisplayPanel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplayPanel.SignMode">
            <summary>
            Gets or sets the sign mode of the indicator
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplayPanel.CellCount">
            <summary>
            Gets or sets the number of cells contained in this indicator
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplayPanel.CellAlignment">
            <summary>
            Gets or sets the relative alignment of cells
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplayPanel.DisplayDirection">
            <summary>
            Gets or sets the display direction of the adapter
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplayPanel.ShowLeadingZeros">
            <summary>
            Gets or sets a value indicating whether the display must show leading zeros 
            when CellCountMode is set to Fixed
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplayPanel.Value">
            <summary>
            Gets or sets the value displayed by the numeric panel
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplayPanel.ValueFormatter">
            <summary>
             Gets or sets the NValueFormatter object used to format the panel value object.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplayPanel.ShowDecimalSeparator">
            <summary>
            Gets or sets a value whether the display must show a decimal separator (dot)
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplayPanel.DecimalLitFillStyle">
            <summary>
            Controls the appearance of decimal lit led segments
            </summary>
            <remarks>
            This property has effect only when the display uses decimal formatting 
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplayPanel.DecimalDimFillStyle">
            <summary>
            Controls the appearance of dim led segments
            </summary>
            <remarks>
            This property has effect only when the display uses decimal formatting 
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplayPanel.EnableDecimalFormatting">
            <summary>
            Gets or sets a value whether the panel will use decimal related properties to format the cells displaying decimal values
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplayPanel.AttachSignToNumber">
            <summary>
            Gets or sets value indicating whether the sign must be attached to the 
            most significant digit of the displayed number
            </summary>
            <remarks>
            This property has effect only if SignMode is set to SignMode.Negative or SignMode.Always
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplayPanel.CellCountMode">
            <summary>
            Gets or sets the cell count mode of this display.
            </summary>
            <remarks>
            When set to DisplayCellCountMode.Fixed the display will not change the number of
            cells depending on the value formatted as text.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplayPanel.SegmentWidth">
            <summary>
            Gets or sets the segment width
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplayPanel.SegmentGap">
            <summary>
            Gets or sets the gap between segments
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplayPanel.DecimalSegmentWidth">
            <summary>
            Gets or sets the segment width
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplayPanel.DecimalSegmentGap">
            <summary>
            Gets or sets the gap between decimal segments
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplayPanel.DecimalCellSize">
            <summary>
            Specifies the size of the cells displaying decimal values in the display
            </summary>
            <remarks>
            This property has effect only when the display uses decimal formatting 
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NNumericDisplayPanel.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NNumericDisplayPanel.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="T:Nevron.Chart.NWatermark">
            <summary>
            This object represents a watermark. Watermarks are images that are displayed below or 
            on top of all context elements. You can add watermarks to the context with the help of the 
            NWatermarkCollection object. The NWatermark object allows you to position the watermark 
            at an arbitrary position in the control window.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NWatermark.#ctor">
            <summary>
            Creates a new empty semi transparent watermark positioned at the center of the 
            control window. 
            </summary>
            <remarks>
            After you create the watermark you must specify the image this watermark will display.
            <example>
            The following example create a new watermark based on the "Coffee Bean.bmp" picture.
            <code lang = 'VB'>
            Dim watermark As NWatermark =  New NWatermark() 
            watermark.ImageFileName = "c:\windows\Coffee Bean.bmp"
            NChartControl.Watermarks.Add(watermark)
            </code>
            <code>
            NWatermark watermark = new NWatermark();
            watermark.ImageFileName = "c:\\windows\\Coffee Bean.bmp";
            NChartControl.Watermarks.Add(watermark);
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NWatermark.FillStyle">
            <summary>
            Gets or sets the fill style applied to the watermark.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NWatermark.StandardFrameStyle">
            <summary>
            Gets or sets the NStandardFrameStyle object controlling the 
            frame of the watermark.
            </summary>
            <remarks>
            This type of frame resembles the standard Windows frames and can show 
            all types of frames specified by the style of the window (raised, sunken, single etc). 
            </remarks>
            <example>
            The following code configures a Windows-like backplane frame with 
            an inner and outer bevel.
            <code lang = 'VB'>
            watermark.StandardFrameStyle.OuterBevelStyle = FrameBevelStyle.Sunken
            watermark.StandardFrameStyle.InnerBevelStyle = FrameBevelStyle.Sunken
            </code>
            <code>
            watermark.StandardFrameStyle.OuterBevelStyle = FrameBevelStyle.Sunken;
            watermark.StandardFrameStyle.InnerBevelStyle = FrameBevelStyle.Sunken;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NWatermark.InteractivityStyle">
            <summary>
            The interactivity style associated with the watermark.
            </summary>
            <remarks>
            With the NInteractivityStyle object you can control the tooptips, mouse cursor change 
            and browser redirection (HTML image maps only) associated with the watermark. For 
            more information on the NInteractivityStyle object and the interactivity features take 
            a look at the "Interactivity" book in the Users Guide.
            </remarks>
            <example>
            The following code changes the tooltip of a watermark:
            <code lang = 'VB'>
            Dim watermark As NWatermark =  New NWatermark() 
            watermark.ImageFileName = "d:\windows\Coffee Bean.bmp"
            watermark.InteractivityStyle.Tooltip.Text = "Do you like coffee?"
            NChartControl.Watermarks.Add(watermark)
            </code>
            <code>
            NWatermark watermark = new NWatermark();
            watermark.ImageFileName = "d:\\windows\\Coffee Bean.bmp";
            watermark.Interactivity.Tooltip.Text = "Do you like coffee?";
            NChartControl.Watermarks.Add(watermark);
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NWatermark.AnimationsStyle">
            <summary>
            Gets or sets the animation style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NWatermark.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NWatermark.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="T:Nevron.Chart.NWatermarkCollection">
            <summary>
            Summary description for NWatermarkCollection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NWatermarkCollection.#ctor(Nevron.Chart.NRootPanel)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rootPanel"></param>
        </member>
        <member name="M:Nevron.Chart.NWatermarkCollection.GetAt(System.Int32)">
            <summary>
            Returns the NWatermark object at at the specified index in the collection.
            </summary>
            <param name="index">index of the legend in the collection</param>
            <returns>a reference to the watermark</returns>
        </member>
        <member name="P:Nevron.Chart.NWatermarkCollection.Item(System.Int32)">
            <summary>
            collection indexer method
            </summary>
        </member>
        <member name="T:Nevron.Chart.NChartRenderingContext">
            <summary>
            Summary description for NChartRenderingContext.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartRenderingContext.PrimaryDevice">
            <summary>
            Obtains the primary device associated with this context
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartRenderingContext.RenderSurface">
            <summary>
            Obtains the current render surface of the context
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartRenderingContext.JitterPass">
            <summary>
            Obtains the current jitter pass
            </summary>
        </member>
        <member name="T:Nevron.Chart.NChartRenderingContext2D">
            <summary>
            Represents the chart rendering context in 2D
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartRenderingContext2D.#ctor(Nevron.GraphicsCore.IN2DDevice)">
            <summary>
            Initializer constructor
            </summary>
            <param name="device"></param>
        </member>
        <member name="P:Nevron.Chart.NChartRenderingContext2D.PrimaryDevice">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartRenderingContext2D.Device">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartRenderingContext2D.GetParentContext">
            <summary>
            Obtains the parent rendering context
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NChartRenderingContext2D.GetDevice">
            <summary>
            Obtains the device
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartRenderingContext2D.GetShadowDevice">
            <summary>
            Obtains the shadow device
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NChartRenderingContext2D.GetVerbatimBoundsProvider">
            <summary>
            Obtains a stock bound provider
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartRenderingContext2D.GetLengthConverter">
            <summary>
            Obtains a length converter
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartRenderingContext2D.GetMeasurementUnitConverter">
            <summary>
            Obtains a measurement unit converter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NChartRenderingContext2D.GetBackgroundStyleRenderer">
            <summary>
            Obtains a background style renderer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NChartRenderingContext2D.GetBackplaneStyleRenderer">
            <summary>
            Obtains a backplane style renderer
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartRenderingContext2D.GetPathFrameRenderer">
            <summary>
            Obtains a path frame renderer
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartRenderingContext2D.GetStandardFrameRenderer">
            <summary>
            Obtains a standard frame renderer
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartRenderingContext2D.GetTextRenderer">
            <summary>
            Obtains a text renderer
            </summary>
        </member>
        <member name="T:Nevron.Chart.NChartRenderingContext3D">
            <summary>
            Represents the chart rendering context in 3D
            </summary>
        </member>
        <member name="P:Nevron.Chart.NChartRenderingContext3D.PrimaryDevice">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.NCR">
            <summary>
            Summary description for NCR.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAxisMajorTickSnapper">
            <summary>
            Snaps values to the major ticks of the axis
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAxisMinorTickSnapper">
            <summary>
            Snaps values to the minor ticks of the axis
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAxisRulerClampSnapper">
            <summary>
            Clamps values to the axis min / max values
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAxisRulerMinMaxSnapper">
            <summary>
            Snaps values to the axis min / max values
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAxisValueSnapper">
            <summary>
            The base for all scale value snapper
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDateTimeValueSnapper">
            <summary>
            Represents a value snapper that snaps date/time values to the nearest date time step from a specified date/time origin.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDateTimeValueSnapper.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDateTimeValueSnapper.#ctor(Nevron.NDateTimeSpan)">
            <summary>
            Initializer constructor
            </summary>
            <param name="step"></param>
        </member>
        <member name="M:Nevron.Chart.NDateTimeValueSnapper.#ctor(System.DateTime,Nevron.NDateTimeSpan)">
            <summary>
            Initializer constructor
            </summary>
            <param name="origin"></param>
            <param name="step"></param>
        </member>
        <member name="P:Nevron.Chart.NDateTimeValueSnapper.Step">
            <summary>
            Gets or sets the snapping step
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDateTimeValueSnapper.SnapValue(System.Double)">
            <summary>
            Snaps a value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NNumericValueSnapper">
            <summary>
            Represents a value snapper that snaps values to the nearest step from a specified origin.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNumericValueSnapper.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNumericValueSnapper.#ctor(System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="step"></param>
        </member>
        <member name="M:Nevron.Chart.NNumericValueSnapper.#ctor(System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="origin"></param>
            <param name="step"></param>
        </member>
        <member name="P:Nevron.Chart.NNumericValueSnapper.Step">
            <summary>
            Gets or sets the snapping step
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericValueSnapper.Origin">
            <summary>
            Gets or sets the snapping origin
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNumericValueSnapper.SnapValue(System.Double)">
            <summary>
            Snaps a value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NValueSnapper">
            <summary>
            The base for all values snappers
            </summary>
        </member>
        <member name="M:Nevron.Chart.NValueSnapper.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NValueSnapper.SnapValue(System.Double)">
            <summary>
            Snaps a value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NValueSnapper.SnapRange(Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Snaps a range
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NAxisAnchor">
            <summary>
            The base of all axis anchors.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisAnchor.#ctor(System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="beginPercent"></param>
            <param name="endPercent"></param>
        </member>
        <member name="P:Nevron.Chart.NAxisAnchor.RulerOrientation">
            <summary>
            Gets or sets the ruler orientation. 
            </summary>
            <remarks>
            Left orientation means that scale decorations will be on the left side
            of the ruler line. Right means the opposite.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NAxisAnchor.BeginPercent">
            <summary>
            Specifies the begin of the axis ruler in percents of the axis length.
            </summary>
            <remarks>
            By default 0. Can be very useful if you want to split the chart.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NAxisAnchor.EndPercent">
            <summary>
            Specifies the end of the axis ruler in percents of the axis length. 
            </summary>
            <remarks>
            By default 100. Can be very useful if you want to split the chart.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NAxisAnchor.FilterCrossings(Nevron.Chart.NAxisCrossingCollection,Nevron.Chart.NAxisBase,Nevron.Chart.NAxisCrossing[])">
            <summary>
            
            </summary>
            <param name="crossings"></param>
            <param name="axis"></param>
            <param name="validCrossings"></param>
        </member>
        <member name="T:Nevron.Chart.NAxisBase">
            <summary>
            Base class for all axes
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisBase.InteractivityStyle">
            <summary>
            The interactivity style associated with the axis. 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisBase.ScaleAnimationsStyle">
            <summary>
            Gets or sets the animation style applied to the axis scale
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisBase.WallsAnimationsStyle">
            <summary>
            Gets or sets the animation style applied to the axis scale
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisBase.AxisOrientation">
            <summary>
            Gets the axis orientation
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisBase.Visible">
            <summary>
            Controls the visibility of the axis.
            </summary>
            <example>
            The following code hides the PrimaryY axis.
            <code lang = 'VB'>
            NChart.Axis(StandardAxis.PrimaryY).Visible = True
            </code>
            <code>
            NChart.Axis(StandardAxis.PrimaryY).Visible = true;
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NAxisBase.ScaleConfigurator">
            <summary>
            Obtains the axis scale configurator controlling how the axis scale is decorated
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisBase.Scale">
            <summary>
            Obtains the Scale object attached to this axis.
            </summary>
            <remarks>
            By default the scale is configured by the scale configurator if you want
            to custom program the scale you'll need to first set the SynchronizeScaleWithConfigurator
            property to false. Note that the scale is not serialized.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NAxisBase.SynchronizeScaleWithConfigurator">
            <summary>
            Whether the scale will be synchronized with the Scale Configurator.
            </summary>
            <remarks>
            By default this property is set to true. You may want to set it to false
            if you want to create your own scale definitions.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NAxisBase.MajorTickSampler">
            <summary>
            Gets the major tick sampler
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAxisBase.MinorTickSampler">
            <summary>
            Gets the minor tick sampler
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisBase.TransformScaleToModel(System.Boolean,System.Double)">
            <summary>
            Transform a scale value to model coordninate
            </summary>
            <param name="clampToRuler"></param>
            <param name="scaleValue"></param>
            <returns></returns>
            <remarks>
            Note that you can use this method only after the axis is calculated.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NAxisBase.TransformModelToScale(System.Single,System.Boolean)">
            <summary>
            Transforms a model coordinate to scale value
            </summary>
            <param name="modelValue"></param>
            <param name="clampToRuler"></param>
            <returns></returns>
            <remarks>
            Note that you can use this method only after the axis is calculated.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NAxisBase.TransformOriginModelBeginToScale(System.Single,System.Boolean)">
            <summary>
            Transforms an origin model coordinate to scale (0, scaleLength)
            </summary>
            <param name="modelValue"></param>
            <param name="clampToRuler"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NAxisBase.TransformOriginModelEndToScale(System.Single,System.Boolean)">
            <summary>
            Transforms an origin model coordinate to scale (0, scaleLength)
            </summary>
            <param name="modelValue"></param>
            <param name="clampToRuler"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NAxisBase.TransformModelToScale(Nevron.GraphicsCore.NVector3DF@)">
            <summary>
            Transforms a model point to axis value
            </summary>
            <param name="vecPoint"></param>
        </member>
        <member name="M:Nevron.Chart.NAxisBase.TransformScaleToModel(System.Double)">
            <summary>
            Transforms 
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NAxisBase.InvalidateScale">
            <summary>
            Marks the scale definition as invalid
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisBase.GetAutomaticStep">
            <summary>
            Gets the currently calculated automatic step
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NAxisBase.SnapValueToNearestMajorTick(System.Double)">
            <summary>
            Snaps the value to the nearest major tick on the axis
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NAxisBase.SnapValueToNearestMinorTick(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NAxisBase.UpdateScale">
            <summary>
            Synchronizes the scale definition with the scale configurator
            </summary>
            <remarks>
            Synchronization only occurs when the SyncrhonizeScaleWithConfigurator property is set to true
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NAxisBase.Attributes">
            <summary>
            Gets an array of the child attributes of this container
            </summary>
            <returns>attributes of the container</returns>
        </member>
        <member name="M:Nevron.Chart.NAxisBase.GetAttributeName(Nevron.Dom.INAttribute)">
            <summary>
            Gets the name of the specified child attribute
            </summary>
            <param name="attribute">child attribute</param>
            <returns>name of the attribute</returns>
        </member>
        <member name="M:Nevron.Chart.NAxisBase.Clone">
            <summary>
            Creates an identical copy of this axis object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NAxisBaseCollection">
            <summary>
            Summary description for NAxisBaseCollection.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDateTimeScaleConfigurator">
            <summary>
            Represents a date time scale.
            </summary>
            <remarks>
            This class inherits all functionality of its base class (NStandardScaleConfigurator) and adds support for date time scales.
            For more information please refer to the Date Time Scale topic in the Users Guide.
            </remarks>
            <seealso cref="T:Nevron.Chart.NStandardScaleConfigurator"/>
        </member>
        <member name="P:Nevron.Chart.NDateTimeScaleConfigurator.Origin">
            <summary>
            Specifies the date/time of the major tick origin when the UseOrigin property is set to true.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeScaleConfigurator.CustomStep">
            <summary>
            Specifies the time span step when the major tick mode is set to TimeSpan.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeScaleConfigurator.CustomSteps">
            <summary>
            Specifies the time span steps when the major tick mode is set to TimeSpans.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeScaleConfigurator.CustomStepProvider">
            <summary>
            Gets or sets a custom step provider
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeScaleConfigurator.CustomMajorTicks">
            <summary>
            Gets or sets the array of custom major ticks.
            </summary>
            <remarks>
            When the current axis scale is switched in manual major tick mode 
            you can specify the values at which major ticks are displayed.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NDateTimeScaleConfigurator.CustomMinorTicks">
            <summary>
            Specifies the minor ticks when AutoMinor ticks is set to false
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeScaleConfigurator.AutoDateTimeUnits">
            <summary>
            Gets or sets the date time units that are allowed when the scale is 
            scaling automatically
            </summary>
            <remarks>
            By default the scale will contain all possible date time units including: 
            Century, Decade, Year, HalfYear, Quarter, Month, Week, Day, HalfDay, Hour, Minute,
            Second and Millisecond.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NDateTimeScaleConfigurator.EnableUnitSensitiveFormatting">
            <summary>
            Gets or sets a value indicating whether the scale should use a date time unit sensitive
            formatting depending on the date time unit selected by the scale for automatic labels.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeScaleConfigurator.DateTimeUnitFormatterPairs">
            <summary>
            Gets or sets a collection of date time unit and associated formatter
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeScaleConfigurator.EnableCalendar">
            <summary>
            Gets or sets a value indicating whether the timeline should
            use the calendar settings, allow you skip days and time from 
            scale transform and calculation
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeScaleConfigurator.Calendar">
            <summary>
            Gets the calendar used to determine between working and non working days and time.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDateTimeScaleConfigurator.InitFrom(Nevron.Chart.NScaleConfigurator)">
            <summary>
            Copies the settings of another scale configurator
            </summary>
            <param name="scaleConfigurator"></param>
        </member>
        <member name="M:Nevron.Chart.NDateTimeScaleConfigurator.GetTickRangeInflator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NDateTimeUnitFormatterPair">
            <summary>
            Represents a pair of a date time unit (day, month, quarter etc.) and associated formatting
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDateTimeUnitFormatterPair.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDateTimeUnitFormatterPair.#ctor(Nevron.NDateTimeUnit,Nevron.Dom.NDateTimeValueFormatter)">
            <summary>
            Initializer constructor
            </summary>
            <param name="unit"></param>
            <param name="formatter"></param>
        </member>
        <member name="M:Nevron.Chart.NDateTimeUnitFormatterPair.#ctor(Nevron.NDateTimeUnit,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="unit"></param>
            <param name="format"></param>
        </member>
        <member name="M:Nevron.Chart.NDateTimeUnitFormatterPair.#ctor(Nevron.NDateTimeUnit,Nevron.DateTimeValueFormat)">
            <summary>
            Initializer constructor
            </summary>
            <param name="unit"></param>
            <param name="format"></param>
        </member>
        <member name="P:Nevron.Chart.NDateTimeUnitFormatterPair.Unit">
            <summary>
            Gets or sets 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeUnitFormatterPair.Formatter">
            <summary>
            Gets or sets the date time value formatter associated with the DateTime unit
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDateTimeUnitFormatterPairCollection">
            <summary>
            Represents a collection of NDateTimeUnitFormatterPair objects
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDateTimeUnitFormatterPairCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeUnitFormatterPairCollection.CenturyFormatter">
            <summary>
            Gets or sets the formatter associated with the century unit
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeUnitFormatterPairCollection.DecadeFormatter">
            <summary>
            Gets or sets the formatter associated with the decade unit
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeUnitFormatterPairCollection.YearFormatter">
            <summary>
            Gets or sets the formatter for the year unit.  
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeUnitFormatterPairCollection.HalfYearFormatter">
            <summary>
            Gets or sets the formatter for the Half year unit. 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeUnitFormatterPairCollection.QuarterFormatter">
            <summary>
            Gets or sets the formatter for the quarter of a year.  
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeUnitFormatterPairCollection.MonthFormatter">
            <summary>
            Gets or sets the formatter for the month unit.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeUnitFormatterPairCollection.WeekFormatter">
            <summary>
            Gets or sets the formatter for the week unit.  
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeUnitFormatterPairCollection.DayFormatter">
            <summary>
            Gets or sets the formatter for the day unit.  
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeUnitFormatterPairCollection.HalfDayFormatter">
            <summary>
            Gets or sets the formatter for the half of a day unit.  
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeUnitFormatterPairCollection.HourFormatter">
            <summary>
            Gets or sets the formatter for the hour unit
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeUnitFormatterPairCollection.MinuteFormatter">
            <summary>
            Gets or sets the formatter for the minute unit.  
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeUnitFormatterPairCollection.SecondFormatter">
            <summary>
            Gets or sets the formatter for the second unit
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeUnitFormatterPairCollection.MillisecondFormatter">
            <summary>
            Gets or sets the formatter for the millisecond unit. 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeUnitFormatterPairCollection.TickFormatter">
            <summary>
            Gets or sets the formatter for the tick unit
            </summary>
        </member>
        <member name="T:Nevron.Chart.NHierarchicalScaleConfigurator">
            <summary>
            Represents a scale configurator that can create a hierachical scale
            </summary>
        </member>
        <member name="M:Nevron.Chart.NHierarchicalScaleConfigurator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHierarchicalScaleConfigurator.FirstRowRangeFitMode">
            <summary>
            Gets or sets the label fit mode of hierarchical labels
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHierarchicalScaleConfigurator.GroupRowRangeFitMode">
            <summary>
            Gets or sets the label fit mode of hierarchical labels
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHierarchicalScaleConfigurator.FirstRowGridStyle">
            <summary>
            Gets or sets the style of grid lines for leaf nodes in the hierarchical scale
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHierarchicalScaleConfigurator.GroupRowGridStyle">
            <summary>
            Gets or sets the style of grid lines for the group (container) nodes in the hierarchical scale
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHierarchicalScaleConfigurator.FirstRowLabelTextStyle">
            <summary>
            Gets or set the text style applied to first row labels
            </summary>
            <remarks>
            If set to null first row labels will use their individual text style
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NHierarchicalScaleConfigurator.GroupRowLabelTextStyle">
            <summary>
            Gets or sets the text style applied to group row labels
            </summary>
            <remark>
            If set to null group labels will use their individual text style
            </remark>
        </member>
        <member name="P:Nevron.Chart.NHierarchicalScaleConfigurator.FirstRowLabelAngle">
            <summary>
            Gets or sets thte lable angle of the first row of nodes
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHierarchicalScaleConfigurator.GroupRowLabelAngle">
            <summary>
            Gets or sets thte lable angle of the group row(s) of nodes
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHierarchicalScaleConfigurator.StickLength">
            <summary>
            Gets or sets the length of the sticks when grid style is set to Stick
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHierarchicalScaleConfigurator.LevelTopPadding">
            <summary>
            Gets or sets the top padding applied to the levels comprising the hierarchical scale
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHierarchicalScaleConfigurator.LevelBottomPadding">
            <summary>
            Gets or sets the bottom padding applied to the levels comprising the hierarchical scale
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHierarchicalScaleConfigurator.Origin">
            <summary>
            Specifies the origin value or the left most hierachical scale node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHierarchicalScaleConfigurator.Nodes">
            <summary>
            Gets or sets a collection of hierarchical scale nodes displayed on the scale
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHierarchicalScaleConfigurator.CreateSeparatorForEachLevel">
            <summary>
            Gets or sets a value indicating whether a ruler separator should be
            created for each level of hierarchical nodes
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHierarchicalScaleConfigurator.FirstRowFitModes">
            <summary>
            Gets or set the first row fit modes used by the scale
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHierarchicalScaleConfigurator.GroupRowFitModes">
            <summary>
            Gets or sets the group row fit modes used by the scale
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHierarchicalScaleConfigurator.DisplayDataPointsBetweenTicks">
            <summary>
            Controls the position of the data point relative to the tick positions.
            </summary>
            <remarks>
            If set to True the data point is positioned between two adjacent ticks, otherwise it 
            is positioned exactly on the tick. In the second case you may consider turning on the 
            InflateMargins flag of the presentation groups to fit the chart inside the chart area.
            </remarks>
        </member>
        <member name="T:Nevron.Chart.NHierarchicalScaleNode">
            <summary>
            Represents a node in a hierachichal scale
            </summary>
        </member>
        <member name="M:Nevron.Chart.NHierarchicalScaleNode.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NHierarchicalScaleNode.#ctor(System.Double,System.String)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHierarchicalScaleNode.Text">
            <summary>
            Gets or sets the text of this node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHierarchicalScaleNode.Length">
            <summary>
            Gets or sets the length of this node in scale logical units
            </summary>
            <remarks>
            This property will have effect only if the node does not have child node, otherwise
            the lenght of node on the scale will be computed as the length of all its descendants
            that do not have children (leafs).
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NHierarchicalScaleNode.LabelStyle">
            <summary>
            Gets or sets the label style of this node
            </summary>
        </member>
        <member name="P:Nevron.Chart.NHierarchicalScaleNode.ChildNodes">
            <summary>
            Gets or sets the child nodes collection of this node
            </summary>
        </member>
        <member name="M:Nevron.Chart.NHierarchicalScaleNode.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="T:Nevron.Chart.NHierarchicalScaleNodeCollection">
            <summary>
            Represents a collection of hierarchical scale nodes
            </summary>
        </member>
        <member name="M:Nevron.Chart.NHierarchicalScaleNodeCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLinearScaleConfigurator">
            <summary>
            Represents a numeric scale.
            </summary>
            <remarks>
            This class inherits all functionality of its base class (NStandardScaleConfigurator) and adds support for numeric scales. 
            For more information please refer to the Numeric Scale topic in the Users Guide.
            </remarks>
            <seealso cref="T:Nevron.Chart.NStandardScaleConfigurator"/>
        </member>
        <member name="T:Nevron.Chart.NLogarithmicScaleConfigurator">
            <summary>
            Summary description for NLogarithmScaleConfigurator.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NLogarithmicScaleConfigurator.LogarithmBase">
            <summary>
            Specifies the logarithm base.
            </summary>
            <remarks>
            By default 10. See the Axis Scales topic for more information.
            </remarks> 
        </member>
        <member name="M:Nevron.Chart.NLogarithmicScaleConfigurator.InitFrom(Nevron.Chart.NScaleConfigurator)">
            <summary>
            Copies the settings of another scale configurator
            </summary>
            <param name="scaleConfigurator"></param>
        </member>
        <member name="T:Nevron.Chart.NNumericScaleConfigurator">
            <summary>
            Summary description for NNumericScaleConfigurator.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNumericScaleConfigurator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericScaleConfigurator.CustomStep">
            <summary>
            Specifies the major ticks custom step when the mode is set to CustomStep.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericScaleConfigurator.CustomSteps">
            <summary>
            Specifies the major ticks custom steps when the mode is set to IrregularSteps.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericScaleConfigurator.CustomMinorTicks">
            <summary>
            Specifies the minor ticks when AutoMinor ticks is set to false
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericScaleConfigurator.CustomMajorTicks">
            <summary>
            Gets or sets the array of major ticks.
            </summary>
            <remarks>
            When the current axis scale is switched in manual major tick mode 
            you can specify the values at which major ticks are displayed.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NNumericScaleConfigurator.CustomStepProvider">
            <summary>
            Gets or sets a custom step provider
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericScaleConfigurator.Origin">
            <summary>
            Specifies the major tick origin value when the UseOrigin property is set to true.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericScaleConfigurator.EnableDecimalRounding">
            <summary>
            Whether decimal values should be rounded to the nearest binary representable 
            power of ten precision
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericScaleConfigurator.AutoMinStep">
            <summary>
            Gets or sets the minimum step allowed for automatic ticks 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericScaleConfigurator.AutoMaxStep">
            <summary>
            The maximum step allowed for automatic ticks.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNumericScaleConfigurator.InitFrom(Nevron.Chart.NScaleConfigurator)">
            <summary>
            Copies the settings of another scale configurator
            </summary>
            <param name="scaleConfigurator"></param>
        </member>
        <member name="M:Nevron.Chart.NNumericScaleConfigurator.GetTickRangeInflator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NOrdinalScaleConfigurator">
            <summary>
            Represents an ordinal scale configurator.
            </summary>
            <remarks>
            This class inherits all functionality of its base class (NStandardScaleConfigurator) and adds support for ordinal scales.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NOrdinalScaleConfigurator.DisplayDataPointsBetweenTicks">
            <summary>
            Controls the position of the data point relative to the tick positions.
            </summary>
            <remarks>
            If set to True the data point is positioned between two adjacent ticks, otherwise it 
            is positioned exactly on the tick. In the second case you may consider turning on the 
            InflateMargins flag of the presentation groups to fit the chart inside the chart area.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NOrdinalScaleConfigurator.CustomStep">
            <summary>
            Specifies the major ticks custom step when the mode is set to CustomStep.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NOrdinalScaleConfigurator.CustomSteps">
            <summary>
            Specifies the major ticks custom steps when the mode is set to IrregularSteps.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NOrdinalScaleConfigurator.CustomMajorTicks">
            <summary>
            Gets or sets the array of major ticks.
            </summary>
            <remarks>
            When the current axis scale is switched in manual major tick mode 
            you can specify the values at which major ticks are displayed.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NOrdinalScaleConfigurator.Origin">
            <summary>
            Specifies the major tick origin value when the UseOrigin property is set to true.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NOrdinalScaleConfigurator.CustomStepProvider">
            <summary>
            Gets or sets a custom step provider
            </summary>
        </member>
        <member name="T:Nevron.Chart.NPriceScaleConfigurator">
            <summary>
            The price scale configurator is a special type of scale configurator targeted for displaying
            date time values for financial charts such as Renko, Kagi, Three Line Break and Point and Figure.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPriceScaleConfigurator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPriceScaleConfigurator.CustomStep">
            <summary>
            Specifies the major ticks custom step when the mode is set to CustomStep.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPriceScaleConfigurator.CustomSteps">
            <summary>
            Specifies the major ticks custom steps when the mode is set to IrregularSteps.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPriceScaleConfigurator.CustomMajorTicks">
            <summary>
            Gets or sets the array of major ticks.
            </summary>
            <remarks>
            When the current axis scale is switched in manual major tick mode 
            you can specify the values at which major ticks are displayed.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NPriceScaleConfigurator.Origin">
            <summary>
            Specifies the major tick origin value when the UseOrigin property is set to true.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPriceScaleConfigurator.CustomStepProvider">
            <summary>
            Gets or sets a custom step provider
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleConfigurator">
            <summary>
            Base class for all scale configurators.
            </summary>
            <remarks>
            For more information please refer to the Axis Scales topic in the Users Guide.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NScaleConfigurator.MajorGridStyle">
            <summary>
            Gets or sets the style controlling the major grid lines displayed by the scale
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleConfigurator.InnerMajorTickStyle">
            <summary>
            Gets or sets the style the inner major tick lines
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleConfigurator.OuterMajorTickStyle">
            <summary>
            Gets or sets the style the major tick lines.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleConfigurator.Title">
            <summary>
            Gets or sets the style of the axis title
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleConfigurator.RulerStyle">
            <summary>
            Gets or sets the ruler style controlling the appearance of the scale ruler
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleConfigurator.Invert">
            <summary>
            Gets or sets a value indicating whether this scale is inverted.
            </summary>
            <value><c>true</c> if invert; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nevron.Chart.NScaleConfigurator.InflateContentRange">
            <summary>
            Gets or sets a value indicating whether the scale will inflate the content range. 
            </summary>
            <remarks>
            Some scale types like ordinal apply contnent inflate around the first and last category. Setting
            this property to false will ignore this additional inflate.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NScaleConfigurator.InflateViewRangeBegin">
            <summary>
            Gets or sets a value indicating whether the scale view min value should
            be inflated according to the ViewInflateMode settings
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleConfigurator.InflateViewRangeEnd">
            <summary>
            Gets or sets a value indicating whether the scale view max value should
            be inflated according to the ViewInflateMode settings
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleConfigurator.ViewRangeInflateMode">
            <summary>
            Gets or sets the scale view range inflate mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleConfigurator.LogicalInflate">
            <summary>
            Gets or sets the logical inflate when InflateMode is set to Logical
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleConfigurator.AbsoluteInflate">
            <summary>
            Gets or sets the absolute inflate when InflateMode is set to Absolute
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleConfigurator.AlignValue">
            <summary>
            Gets or sets the value to align the view range to
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleConfigurator.AlignFactor">
            <summary>
            Gets or sets the desired factor to align the view range relative to the specified align value
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleConfigurator.StripStyles">
            <summary>
            Gets or sets the scale strip styles applied on the scale.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleConfigurator.Sections">
            <summary>
            Gets or sets the sections of this scale.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleConfigurator.ScaleBreaks">
            <summary>
            Gets or sets the scale breaks associated with this axis
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleConfigurator.CustomLabelFitModes">
            <summary>
            Gets or sets on array of label fit modes. When set to an empty array the control will not try
            to auto fit the axis scale labels
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleConfigurator.CreateNewLevelForCustomLabels">
            <summary>
            Gets or set a value indicating whether custom labels should be placed in a
            new scale level or use the scale level of the automatic labels
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleConfigurator.CustomLabelsLevelOffset">
            <summary>
            Gets or sets the offset of the custom labels level on the scale.
            </summary>
            <remarks>
            This property will have effect only when CreateNewLevelForCustomLabels is set to true
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NScaleConfigurator.CustomLabels">
            <summary>
            Gets a collection of custom labels
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleConfigurator.InitFrom(Nevron.Chart.NScaleConfigurator)">
            <summary>
            Copies the settings of another scale configurator
            </summary>
            <param name="scaleConfigurator"></param>
        </member>
        <member name="M:Nevron.Chart.NScaleConfigurator.OnPropertyChanged(System.String)">
            <summary>
            Called when a property has changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Nevron.Chart.NScaleConfigurator.CreateSeparatorLevel">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NScaleConfigurator.AddScaleBreaks(Nevron.Chart.NScale)">
            <summary>
            Adds scale breaks to the scale
            </summary>
            <param name="scale"></param>
        </member>
        <member name="T:Nevron.Chart.NScaleConfiguratorAttribute">
            <summary>
            The base of all scale configurator attributes
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleConfiguratorAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleConfiguratorAttribute.OnPropertyChanged(System.String)">
            <summary>
            Called when a property has changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Nevron.Chart.NScaleConfiguratorCollection">
            <summary>
            The base of all scale configurator collection 
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleConfiguratorCollection.#ctor(System.Type)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleConfiguratorElement">
            <summary>
            The base of all scale configurator elements
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleConfiguratorElement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleConfiguratorElement.OnPropertyChanged(System.String)">
            <summary>
            Called when a property has changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Nevron.Chart.NScaleConfiguratorElementContainer">
            <summary>
            Summary description for NScaleConfiguratorElementContainer.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleConfiguratorElementContainer.GetChildFromId(System.Int32)">
            <summary>
            Obtains a child element by its id
            </summary>
            <param name="id">id of the node</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Chart.NScaleConfiguratorElementContainer.GetChildFromUniqueId(System.Guid)">
            <summary>
            Obtains a child element by its unique id
            </summary>
            <param name="uid">unique id of the element</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Chart.NScaleConfiguratorElementContainer.GetDescendantFromId(System.Int32,System.Int32)">
            <summary>
            Obtains a element node by its id
            </summary>
            <param name="id">id of the element</param>
            <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Chart.NScaleConfiguratorElementContainer.GetDescendantFromUniqueId(System.Guid,System.Int32)">
            <summary>
            Obtains a child element by its unique id
            </summary>
            <param name="uid">unique id of the node</param>
            <param name="depth">required depth, or -1 if the entire subtree must be explored</param>
            <returns>reference to the element if it was found, otherwise null</returns>
        </member>
        <member name="M:Nevron.Chart.NScaleConfiguratorElementContainer.IndexOfChild(Nevron.Dom.INNode)">
            <summary>
            Gets the index of the specified node in the container
            </summary>
            <param name="node">the node to locate</param>
            <returns>index of the node</returns>
        </member>
        <member name="M:Nevron.Chart.NScaleConfiguratorElementContainer.GetChildAt(System.Int32)">
            <summary>
            Gets the child node at the specified index
            </summary>
            <param name="index">index</param>
            <returns>node at the specified index</returns>
        </member>
        <member name="M:Nevron.Chart.NScaleConfiguratorElementContainer.SetChildIndex(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Sets a new index of the specified child node
            </summary>
            <param name="node">node whose index to change</param>
            <param name="index">new index</param>
            <returns>previous node index</returns>
        </member>
        <member name="M:Nevron.Chart.NScaleConfiguratorElementContainer.IsChild(Nevron.Dom.INNode)">
            <summary>
            Determines whether the specified node is a child node for this container
            </summary>
            <param name="node">node to check</param>
            <returns>true if it is a child node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Chart.NScaleConfiguratorElementContainer.ChildrenCount(Nevron.Filters.INFilter)">
            <summary>
            Returns the number of child nodes which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <returns>children count, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Chart.NScaleConfiguratorElementContainer.Children(Nevron.Filters.INFilter)">
            <summary>
            Obtains the child nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Chart.NScaleConfiguratorElementContainer.AccumulateChildren(Nevron.Filters.INFilter,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the children contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="list">list to which to append the child nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Chart.NScaleConfiguratorElementContainer.IsDescendant(Nevron.Dom.INNode,System.Int32)">
            <summary>
            Queries whether the specified node is a descendant of this node
            </summary>
            <param name="node">node to look for</param>
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>true if the node is a descendant node, otherwise false</returns>
        </member>
        <member name="M:Nevron.Chart.NScaleConfiguratorElementContainer.DescendantsCount(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Returns the number of descendant nodes, which satisfy the specified filter
            </summary>
            <param name="filter">filter to use, or null if no filter should be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>count of descendants, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Chart.NScaleConfiguratorElementContainer.Descendants(Nevron.Filters.INFilter,System.Int32)">
            <summary>
            Obtains the descentant nodes of this node
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <returns>list of child nodes, which satisfy the filter</returns>
        </member>
        <member name="M:Nevron.Chart.NScaleConfiguratorElementContainer.AccumulateDescendants(Nevron.Filters.INFilter,System.Int32,Nevron.Dom.NNodeList)">
            <summary>
            Accumulates the descendants contained in this node, which satisfy the filter to the provided node list
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <param name="depth">reqired depth, or -1 if the entire subtree must be explored</param>
            <param name="list">list to which to append the descendant nodes, which satisfy the filter</param>
        </member>
        <member name="M:Nevron.Chart.NScaleConfiguratorElementContainer.GetEnumerator(Nevron.Filters.INFilter)">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <param name="filter">filter to use, or null if no filter must be applied</param> 
            <returns>node enumerator</returns>
        </member>
        <member name="M:Nevron.Chart.NScaleConfiguratorElementContainer.GetEnumerator">
            <summary>
            Obtains a child node enumerator 
            </summary>
            <returns>node enumerator</returns>
        </member>
        <member name="T:Nevron.Chart.NStandardScaleConfigurator">
            <summary>
            Base class of all scale configurators.
            </summary>
            <remarks>
            For more information please refer to the Axis Scales topic in the Users Guide.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NStandardScaleConfigurator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.MajorTickMode">
            <summary>
            Controls the mode of the major ticks.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.MaxTickCount">
            <summary>
            Controls the maximum number of major ticks when major tick mode is auto and max tick count mode is MaxCount
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.FixedTickCount">
            <summary>
            Controls the maximum number of ticks when major tick mode is fixed tick count
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.MinTickDistance">
            <summary>
            Gets or sets the minimum distance between of ticks on the scale when major tick mode is Auto and max tick count mode is MaxDensity
            </summary>
            <remarks>
            By default this value is set to 10pt
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.RoundToTickMin">
            <summary>
            Specifies whether the scale should begin from an exact tick value.
            </summary>
            <remarks>
            This property is deprecated. You should use InflateViewRangeMin in conjunction with
            ViewRangeInflateMode = ScaleViewRangeInflateMode.MajorTick.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.RoundToTickMax">
            <summary>
            Specifies whether the scale should end on an exact tick value.
            </summary>
            <remarks>
            This property is deprecated. You should use InflateViewRangeMax in conjunction with
            ViewRangeInflateMode = ScaleViewRangeInflateMode.MajorTick.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.InflateBeginContentRangeWithCustomTicks">
            <summary>
            Gets or sets a value indicating whether custom ticks will inflate the scale end content range
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.InflateEndContentRangeWithCustomTicks">
            <summary>
            Gets or sets a value indicating whether custom ticks will inflate the scale begin content range
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.InnerMinorTickStyle">
            <summary>
            Gets or sets the style off the inner minor tick lines
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.OuterMinorTickStyle">
            <summary>
            Gets or sets the style off the outer minor tick lines
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.MinorTickCount">
            <summary>
            Specifies the number of minor ticks between two major ones.
            </summary>
            <remarks>
            By default set to 0 (no minor ticks).
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.AutoMinorTicks">
            <summary>
            Specifies whether minor ticks are automatically generated.
            </summary>
            <remarks>
            By default set to true. If set to false the minor ticks are displayed at values specified 
            by the array accessible with the help of the MinorTicks property of the NAxis class.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.AutoLabels">
            <summary>
            Specifies whether the scale should produce automatic labels.
            </summary>
            <remarks>
            By default set to true. The generated labels are displayed on the major tick marks. 
            Note that you can skip major ticks using NumberOfTicksPerLabel property.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.NumberOfTicksPerLabel">
            <summary>
            Controls the number of ticks that are generated between two labels
            </summary>
            <remarks>
            The default value of this property is 1. Note that this property has effect only when you use automatic labels.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.Labels">
            <summary>
            Gets or sets the collection of strings used for axis labels.
            </summary>
            <remarks>
            This array contains the string which are visualized on major tick marks if the AutoLabels property is set to false.
            </remarks>
            <example>
            The following code displays custom labels for the PrimaryX axis (assuming that it is in ordinal scale).
            <code lang = 'VB'>
            Dim axisScale As NOrdinalScaleConfigurator =  CType(NChart.Axis(StandardAxis.PrimaryX).ScaleConfigurator, NOrdinalScaleConfigurator)
            axisScale.AutoLabels = False
            axisScale.Labels.Add("Category1")
            axisScale.Labels.Add("Category2")
            axisScale.Labels.Add("Category3")
            axisScale.Labels.Add("Category4")
            </code>
            <code>
            NOrdinalScaleConfigurator axisScale = NChart.Axis(StandardAxis.PrimaryX) as NOrdinalScaleConfigurator;
            axisScale.AutoLabels = false;
            axisScale.Labels.Add("Category1");
            axisScale.Labels.Add("Category2");
            axisScale.Labels.Add("Category3");
            axisScale.Labels.Add("Category4");
            </code>
            </example>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.LabelGenerationMode">
            <summary>
            Gets or sets a property indicating the number of levels for the scale labels
            </summary>
            <remarks>
            Settings this property to Stagger2 or Stagger3 will produce two or three levels of
            labels. You may consider to exclude the Stagger2 fit mode from the scale fit modes.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.LabelFitModes">
            <summary>
            Gets or sets on array of label fit modes. When set to an empty array the control will not try
            to auto fit the axis scale labels
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.LabelValueFormatter">
            <summary>
            Gets or sets the NValueFormatter object that formats 
            the values displayed at the axis major ticks.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.LabelStyle">
            <summary>
            Gets or sets the scale label style controlling the appearance of scale labels
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.DisplayFirstLabel">
            <summary>
            Gets/sets a value indicating whether the scale must display the first generated label
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.DisplayLastLabel">
            <summary>
            Gets/sets a value indicating whether the scale must display the last generated label
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.LabelLevelTopPadding">
            <summary>
            Gets or sets the top padding applied to the levels comprising the hierarchical scale
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.LabelLevelBottomPadding">
            <summary>
            Gets or sets the bottom padding applied to the levels comprising the hierarchical scale
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.UseOrigin">
            <summary>
            Specifies whether an origin value should be used for the automatically generated major ticks.
            </summary>
            <remarks>
            If set to true the Origin value is displayed by a major tick. If set to false the major ticks begin from the minimal scale value.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.ScaleLevelBuildMode">
            <summary>
            Gets or sets a value indicating how the scale configurator will build scale levels
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.LabelsLevelFillStyle">
            <summary>
            Gets or sets the background fill style applied to the level containing the axis labels
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.OuterTicksLevelFillStyle">
            <summary>
            Gets or sets the background fill style applied to the level containing the inner ticks
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStandardScaleConfigurator.MinorGridStyle">
            <summary>
            Gets or sets the style controlling the minor grid lines displayed by the scale
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStandardScaleConfigurator.SetColor(System.Drawing.Color)">
            <summary>
            Shortcut method that sets the color of axis minor / major ticks, labels, ruler and title
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Chart.NStandardScaleConfigurator.SetPredefinedScaleStyle(Nevron.Chart.PredefinedScaleStyle)">
            <summary>
            
            </summary>
            <param name="scaleStyle"></param>
        </member>
        <member name="M:Nevron.Chart.NStandardScaleConfigurator.InitFrom(Nevron.Chart.NScaleConfigurator)">
            <summary>
            Copies the settings of another scale configurator
            </summary>
            <param name="scaleConfigurator"></param>
        </member>
        <member name="M:Nevron.Chart.NStandardScaleConfigurator.GetLabelRangeSampler">
            <summary>
            Returns the range sampler used to generate the automatic labels
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NTransformedScaleConfigurator">
            <summary>
            Summary description for NTransformedScaleConfigurator.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NTransformedScaleConfigurator.TransformScale">
            <summary>
            Gets or sets a value indicating whether the scale decorations should be transformed
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDateTimeRangeSamplerProvider">
            <summary>
            Provides a date / time range sampler. 
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDateTimeRangeSamplerProvider.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeRangeSamplerProvider.Origin">
            <summary>
            Specifies the date/time of the major tick origin when the UseOrigin property is set to true.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeRangeSamplerProvider.CustomStep">
            <summary>
            Specifies the time span step when the major tick mode is set to TimeSpan.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeRangeSamplerProvider.CustomSteps">
            <summary>
            Specifies the time span steps when the major tick mode is set to TimeSpans.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDateTimeRangeSamplerProvider.CustomMajorTicks">
            <summary>
            Gets or sets the array of custom major ticks.
            </summary>
            <remarks>
            When the current axis scale is switched in manual major tick mode 
            you can specify the values at which major ticks are displayed.
            </remarks>
        </member>
        <member name="T:Nevron.Chart.NMajorTickRangeSamplerProvider">
            <summary>
            A range sampler provider that will use the current major tick range sampler
            </summary>
        </member>
        <member name="M:Nevron.Chart.NMajorTickRangeSamplerProvider.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NMinorTickRangeSamplerProvider">
            <summary>
            A range sampler provider that will use the current minor tick range sampler
            </summary>
        </member>
        <member name="M:Nevron.Chart.NMinorTickRangeSamplerProvider.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NNumericRangeSamplerProvider">
            <summary>
            Provides a numeric range sampler
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNumericRangeSamplerProvider.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericRangeSamplerProvider.CustomStep">
            <summary>
            Specifies the custom step when the mode is set to CustomStep
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericRangeSamplerProvider.CustomSteps">
            <summary>
            Specifies the custom steps when the mode is set to CustomSteps
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericRangeSamplerProvider.CustomMajorTicks">
            <summary>
            Gets or sets the array of major ticks.
            </summary>
            <remarks>
            When the current axis scale is switched in manual major tick mode 
            you can specify the values at which major ticks are displayed.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NNumericRangeSamplerProvider.Origin">
            <summary>
            Specifies the origin value when the UseOrigin property is set to true.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NNumericRangeSamplerProvider.AutoMaxStep">
            <summary>
            The maximum step allowed for automatic ticks.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRangeSamplerProvider">
            <summary>
            Summary description for NRangeSamplerProvider.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeSamplerProvider.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NStandardRangeSamplerProvider">
            <summary>
            Base range sampler provider
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStandardRangeSamplerProvider.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStandardRangeSamplerProvider.SamplingMode">
            <summary>
            Gets or sets the sampling mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStandardRangeSamplerProvider.UseOrigin">
            <summary>
            Specifies whether an origin value should be used when SamplingMode is set to MaxCount or MaxDensity.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStandardRangeSamplerProvider.MinDistance">
            <summary>
            Gets or sets the minimum distance allowed when SamplingMode is set to MinDistance
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStandardRangeSamplerProvider.MaxCount">
            <summary>
            Gets or sets the maximum count allowed when SamplingMode is set to MaxCount
            </summary>
        </member>
        <member name="T:Nevron.Chart.NCustomLabel">
            <summary>
            The base class for custom labels (value or range)
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomLabel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomLabel.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:Nevron.Chart.NCustomLabel.Text">
            <summary>
            Gets or sets the text displayed by the label
            </summary>
        </member>
        <member name="T:Nevron.Chart.NCustomLabelCollection">
            <summary>
            Represents a collection of custom labels
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomLabelCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCustomLabelCollection.Name">
            <summary>
            The name of the axis. 
            </summary>
        </member>
        <member name="T:Nevron.Chart.NCustomRangeLabel">
            <summary>
            Represents a label displayed at a specified custom range
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomRangeLabel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomRangeLabel.#ctor(Nevron.GraphicsCore.NRange1DD,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="range"></param>
            <param name="text"></param>
        </member>
        <member name="P:Nevron.Chart.NCustomRangeLabel.Range">
            <summary>
            Gets or sets the scale range of the label
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCustomRangeLabel.Style">
            <summary>
            Gets or sets the style of the label
            </summary>
        </member>
        <member name="T:Nevron.Chart.NCustomValueLabel">
            <summary>
            Represents a label displayed at a specified custom value
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomValueLabel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomValueLabel.#ctor(System.Double,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="value"></param>
            <param name="text"></param>
        </member>
        <member name="P:Nevron.Chart.NCustomValueLabel.Value">
            <summary>
            Gets or sets the scale value of the label
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCustomValueLabel.Style">
            <summary>
            Gets or sets the style of the label
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRangeScaleLabelStyle">
            <summary>
            Describes the appearance of the automatically generated labels on a scale.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeScaleLabelStyle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeScaleLabelStyle.#ctor(Nevron.GraphicsCore.NTextStyle,System.Drawing.ContentAlignment,Nevron.Chart.NScaleLabelAngle,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="textStyle"></param>
            <param name="contentAlignment"></param>
            <param name="angle"></param>
            <param name="offset"></param>
        </member>
        <member name="P:Nevron.Chart.NRangeScaleLabelStyle.TickMode">
            <summary>
            Gets or sets the range label tick mode
            </summary>
            <remarks>
            The tick mode defines the appearance of the range label ticks annotating 
            the range of the label
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NRangeScaleLabelStyle.TickVisibilityMode">
            <summary>
            Controls the visibility of range label ticks
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeScaleLabelStyle.TextPadding">
            <summary>
            Gets or sets the offset (padding) of the label text from its range
            </summary>
            <remarks>
            This property has effect only when TickMode is set to Separators or Center
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NRangeScaleLabelStyle.TickPadding">
            <summary>
            Gets or sets the offset (padding) of the tick lines from the label text
            </summary>
            <remarks>
            This property has effect only when TickMode is set to RangeLabelTickMode.Center or RangeLabelTickMode.Top
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NRangeScaleLabelStyle.TickOffset">
            <summary>
            Gets or sets the offset of the range label tick in the scale level
            </summary>
            <remarks>
            This property does not have any effect when TickMode is set to RangeLabelTickMode.Separators
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NRangeScaleLabelStyle.StrokeStyle">
            <summary>
            Gets or sets the stroke used to paint the line connecting the label
            end caps to the label origin points
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeScaleLabelStyle.BeginCapStyle">
            <summary>
            Gets or sets the begin cap style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeScaleLabelStyle.EndCapStyle">
            <summary>
            Gets or sets the end cap style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeScaleLabelStyle.FitMode">
            <summary>
            Gets or sets the fit mode of this label
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeScaleLabelStyle.WrapText">
            <summary>
            Gets or sets a value indicating whether the range label text should be
            wrapped inside its range on the scale
            </summary>
            <remarks>
            This property is deprecated. You should use the FitMode property instead.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NRangeScaleLabelStyle.MaxWidth">
            <summary>
            Specifies the maximum width of the scale label
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Nevron.Chart.NValueScaleLabelStyle">
            <summary>
            Controls the appearance of the automatically generated labels on a scale.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NValueScaleLabelStyle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NValueScaleLabelStyle.#ctor(Nevron.GraphicsCore.NTextStyle,System.Drawing.ContentAlignment,Nevron.Chart.NScaleLabelAngle,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="textStyle"></param>
            <param name="contentAligment"></param>
            <param name="angle"></param>
            <param name="offset"></param>
        </member>
        <member name="P:Nevron.Chart.NValueScaleLabelStyle.RangeAlignment">
            <summary>
            Gets or sets the alignment of value labels relative to the to scale range it represents
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAutoScaleBreak">
            <summary>
            Represents an automatic scale break, which will be applied if the 
            data displayed on the axis breaks the threshold factor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAutoScaleBreak.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAutoScaleBreak.#ctor(System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="thresholdFactor"></param>
        </member>
        <member name="M:Nevron.Chart.NAutoScaleBreak.#ctor(Nevron.Chart.NScaleBreakStyle,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="style"></param>
            <param name="thresholdFactor"></param>
        </member>
        <member name="M:Nevron.Chart.NAutoScaleBreak.#ctor(Nevron.Chart.NScaleBreakStyle,Nevron.Chart.NScaleBreakPosition,Nevron.Chart.NScaleBreakInflate,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="style"></param>
            <param name="position"></param>
            <param name="inflate"></param>
            <param name="thresholdFactor"></param>
        </member>
        <member name="M:Nevron.Chart.NAutoScaleBreak.#ctor(Nevron.Chart.NScaleBreakStyle,Nevron.Chart.NScaleBreakPosition,Nevron.Chart.NScaleBreakInflate,System.Single,System.Int32,System.Boolean,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="style"></param>
            <param name="position"></param>
            <param name="inflate"></param>
            <param name="thresholdFactor"></param>
            <param name="maxScaleBreakCount"></param>
            <param name="useMinValue"></param>
            <param name="minValue"></param>
        </member>
        <member name="P:Nevron.Chart.NAutoScaleBreak.ThresholdFactor">
            <summary>
            Gets or sets the threshold factor controlling when a break is generated
            </summary>
            <remarks>
            This property accepts values in the range (0, 1]. Smaller values reduce the 
            distance between data points that is requied to generate a scale break, while 
            bigger values increase it. For example if you set the threshold factor to 0.5 
            a scale break will occur if the maximum distance between data points exceeds
            half of the data points range.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NAutoScaleBreak.MaxScaleBreakCount">
            <summary>
            Gets or sets the maximum number of breaks that this scale break can generate
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoScaleBreak.UseMinValue">
            <summary>
            Whether to use a custom min value to perform the threshold calculation on the data
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoScaleBreak.MinValue">
            <summary>
            Gets or sets the custom min value which can replace the data min value if UseMinValue is set to true
            </summary>
        </member>
        <member name="T:Nevron.Chart.NCustomScaleBreak">
            <summary>
            Represents a custom defined scale break
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomScaleBreak.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomScaleBreak.#ctor(Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Initializer constructor
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:Nevron.Chart.NCustomScaleBreak.#ctor(Nevron.Chart.NScaleBreakStyle,Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Initializer constructor
            </summary>
            <param name="style"></param>
            <param name="range"></param>
        </member>
        <member name="M:Nevron.Chart.NCustomScaleBreak.#ctor(Nevron.Chart.NScaleBreakStyle,Nevron.Chart.NScaleBreakPosition,Nevron.Chart.NScaleBreakInflate,Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Initializer constructor
            </summary>
            <param name="style"></param>
            <param name="position"></param>
            <param name="inflate"></param>
            <param name="range"></param>
        </member>
        <member name="P:Nevron.Chart.NCustomScaleBreak.Range">
            <summary>
            Gets or sets the range of the scale break
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRulerStyle">
            <summary>
            Controls the appearance of the scale ruler.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRulerStyle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRulerStyle.#ctor(Nevron.Chart.ScaleLevelShape,Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="shape"></param>
            <param name="fillStyle"></param>
            <param name="borderStyle"></param>
            <param name="height"></param>
        </member>
        <member name="P:Nevron.Chart.NRulerStyle.Shape">
            <summary>
            Gets or sets the shape of the scale level.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRulerStyle.PaintOnScaleBreaks">
            <summary>
            Gets or sets a value indicating whether the ruler will be displayed if a 
            scale break is present
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRulerStyle.Height">
            <summary>
            Gets or sets the height of the ruler in NLength format.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRulerStyle.Offset">
            <summary>
            Gets or sets the offset of the ruler in the scale level in NLength format.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRulerStyle.LeftMargin">
            <summary>
            Gets or sets the left margin of the ruler
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRulerStyle.RightMargin">
            <summary>
            Gets or sets the left margin of the ruler
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRulerStyle.FillStyle">
            <summary>
            Gets or sets the background filling of a scale level.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRulerStyle.BeginCapStyle">
            <summary>
            Gets or sets the begin cap style of the axis ruler
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRulerStyle.EndCapStyle">
            <summary>
            Gets or sets the end cap style of the axis ruler
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRulerStyle.ScaleBreakCapStyle">
            <summary>
            Gets or sets the cap style to be applied when the separator crosses a scale break
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRulerStyle.BorderStyle">
            <summary>
            Gets or sets the border style of the scale level.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleBreak">
            <summary>
            The base of all scale breaks
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleBreak.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleBreak.#ctor(Nevron.Chart.NScaleBreakStyle)">
            <summary>
            Initalizer constructor
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Nevron.Chart.NScaleBreak.#ctor(Nevron.Chart.NScaleBreakStyle,Nevron.Chart.NScaleBreakPosition,Nevron.Chart.NScaleBreakInflate)">
            <summary>
            Initializer constructor
            </summary>
            <param name="style"></param>
            <param name="position"></param>
            <param name="inflate"></param>
        </member>
        <member name="P:Nevron.Chart.NScaleBreak.Style">
            <summary>
            Gets or sets the style (appearance) of the scale break
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleBreak.Position">
            <summary>
            Gets or sets the position of the scale break on the ruler
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleBreak.Inflate">
            <summary>
            Gets or sets the inflate of the left and right parts of the scale 
            near the scale break
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleBreakCollection">
            <summary>
            Summary description for NScaleBreakStyleCollection.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleBreakCollection.Name">
            <summary>
            The name of the axis. 
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleGridStyle">
            <summary>
            Controls the grid lines displayed by the axis at the chart walls
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleGridStyle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleGridStyle.#ctor(Nevron.Chart.NRangeSamplerProvider)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleGridStyle.#ctor(Nevron.Chart.ChartWallType[],Nevron.Chart.NRangeSamplerProvider,Nevron.GraphicsCore.NStrokeStyle,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="showAtWalls"></param>
            <param name="rangeSamplerProvider"></param>
            <param name="lineStyle"></param>
            <param name="extendInChartArea"></param>
        </member>
        <member name="P:Nevron.Chart.NScaleGridStyle.LineStyle">
            <summary>
            Gets or sets the stroke style of the grid lines
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleGridStyle.ExtendInChartArea">
            <summary>
            Whether to extend the stripline in the chart area
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleGridStyle.RangeSamplerProvider">
            <summary>
            Gets or sets a range sampler provider controlling how grid lines are generated
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleGridStyle.ShowAtWalls">
            <summary>
            Gets or sets an array which specifies the walls that display the grid lines.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleGridStyle.GetShowAtWall(Nevron.Chart.ChartWallType)">
            <summary>
            Determines whether the grid is displayed at the specified chart wall.
            </summary>
            <param name="wall">specifies the chart wall</param>
            <returns>
            true if the gridlines are displayed at the specified wall and false if not.
            </returns>
        </member>
        <member name="M:Nevron.Chart.NScaleGridStyle.SetShowAtWall(Nevron.Chart.ChartWallType,System.Boolean)">
            <summary>
            Shows the grid lines at the specified wall.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleLabelStyle">
            <summary>
            Describes the appearance of the automatically generated labels on a scale.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleLabelStyle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleLabelStyle.#ctor(Nevron.GraphicsCore.NTextStyle,System.Drawing.ContentAlignment,Nevron.Chart.NScaleLabelAngle,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="textStyle"></param>
            <param name="contentAlignment"></param>
            <param name="angle"></param>
            <param name="offset"></param>
        </member>
        <member name="P:Nevron.Chart.NScaleLabelStyle.KeepInsideRuler">
            <summary>
            Gets or sets a value indicating whether the label using this style will be 
            placed always inside the ruler bounds
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLabelStyle.ContentAlignment">
            <summary>
            Gets or sets the alignment of value labels relative to their origin point on the scale
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLabelStyle.Angle">
            <summary>
            Gets or sets the angle of the scale labels
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLabelStyle.TextStyle">
            <summary>
            Gets or sets the NTextStyle object applied to the scale value labels text.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLabelStyle.Offset">
            <summary>
            Specifies the offset of the scale labels from the tickmarks in NLength format
            </summary>
            <remarks>
            By default this value is set to two points (2pt)
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NScaleLabelStyle.NonOverlappingArea">
            <summary>
            Gets or sets additional non overllapping area around the label
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLabelStyle.ValueOffset">
            <summary>
            Gets or sets a value to be added when the label is generated
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLabelStyle.ValueScale">
            <summary>
            Gets or sets a value to be multplied to the label value when the label is generated
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLabelStyle.VisibilityMode">
            <summary>
            Gets or sets the range label visibility mode
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLabelStyle.ZOrder">
            <summary>
            Controls the Z order of the label
            </summary>
            <remarks>
            This value will be used by the RemoveOverlappingLabelsLayout. Labels with higher Z order 
            will remove overlapping labels with lower Z order.
            </remarks>
        </member>
        <member name="T:Nevron.Chart.NScaleSectionStyle">
            <summary>
            Represents a range of values on the scale that alters the default styles for scale and wall decorations
            if their value falls inside the section range.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleSectionStyle.#ctor">
            <summary>
            Default contructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleSectionStyle.Range">
            <summary>
            Gets or sets the range of values on the axis affected by this section style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleSectionStyle.RangeFillStyle">
            <summary>
            Gets or sets the fill style of the axis section when it is displayed on the walls
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleSectionStyle.ShowAtWalls">
            <summary>
            Gets or sets an array which specifies the walls that display the scale section.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleSectionStyle.MajorTickFillStyle">
            <summary>
            Gets or sets a value to replace the major tick fill style if the major 
            ticks falls in the section range.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleSectionStyle.MajorTickStrokeStyle">
            <summary>
            Gets or sets a value to replace the major ticks stroke style if the major 
            tick falls in the section range.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleSectionStyle.MinorTickStrokeStyle">
            <summary>
            Gets or sets a value to replace the minor tick stroke style if the minor 
            ticks falls in the section range.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleSectionStyle.MinorTickFillStyle">
            <summary>
            Gets or sets a value to replace the minor tick fill style if the minor 
            ticks falls in the section range.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleSectionStyle.MajorGridStrokeStyle">
            <summary>
            Gets or sets a value to replace the major grid lines stroke style if the 
            major grid line falls in the section range.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleSectionStyle.MinorGridStrokeStyle">
            <summary>
            Gets or sets a value to replace the major grid lines stroke style if the 
            major grid line falls in the section range.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleSectionStyle.LabelTextStyle">
            <summary>
            Gets or sets a value to replace the scale labels text style if the 
            label value falls in the section range.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleSectionStyle.Item(Nevron.Chart.ScaleDecorationStyle)">
            <summary>
            Gets / set an axis decoration style for the the decorations included in this section
            </summary>
            <summary>
            Obtains the style entry
            </summary>
            <param name="styleEntry"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NScaleSectionStyle.GetShowAtWall(Nevron.Chart.ChartWallType)">
            <summary>
            Check whether the section range is shown on the specified chart wall.
            </summary>
            <param name="wall">specifies the chart wall</param>
            <returns>true if the stripe is shown, false if not</returns>
        </member>
        <member name="M:Nevron.Chart.NScaleSectionStyle.SetShowAtWall(Nevron.Chart.ChartWallType,System.Boolean)">
            <summary>
            Show the section range on the specified chart wall.
            </summary>
            <exception cref="T:System.ArgumentException">Raised if a chart wall, which is invalid for this stipe was specified</exception>
            <remarks>
            The component will raise an exception if you try to display the stripe on an invalid wall.
            <para>
            For the vertical axis stripes allowed chart walls are the vertical walls.
            </para>
            <para>
            For the horizontal axis stripes allowed chart walls are the back, front and floor walls.
            </para>
            <para>
            For the depth axis stripes allowed chart walls are the left, rigth and floor walls.
            </para>
            </remarks>
            <param name="wall">specifies the chart wall</param>
            <param name="show">specifies whether to show the stripe or not</param>
        </member>
        <member name="T:Nevron.Chart.NScaleSectionStyleCollection">
            <summary>
            Represents a collection of scale section style objects
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleSectionStyleCollection.Name">
            <summary>
            The name of the axis. 
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleStripStyle">
            <summary>
            Represents an scale interlace style. Interlace styles are drawn on the chart walls and
            are synchronized with the axis major ticks.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleStripStyle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleStripStyle.#ctor(Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fillStyle">The fill style.</param>
        </member>
        <member name="M:Nevron.Chart.NScaleStripStyle.#ctor(Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fillStyle">The fill style.</param>
            <param name="strokeStyle">The stroke style.</param>
            <param name="infinite">if set to <c>true</c> [infinite].</param>
            <param name="begin">The begin.</param>
            <param name="end">The end.</param>
            <param name="interval">The interval.</param>
            <param name="length">The length.</param>
        </member>
        <member name="P:Nevron.Chart.NScaleStripStyle.RangeSamplerProvider">
            <summary>
            Gets or sets a range sampler provider controlling how interlace stripes are generated
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleStripStyle.FillStyle">
            <summary>
            Controls the fill style of the interlace style.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleStripStyle.ExtendInChartArea">
            <summary>
            Whether to extend the stripline in the chart area
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleStripStyle.StrokeStyle">
            <summary>
            Controls the stroke style of the interlace style.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleStripStyle.Begin">
            <summary>
            The begin view range.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleStripStyle.Infinite">
            <summary>
            Whether or not this style is repeated infinitely along the chart wall or not.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleStripStyle.End">
            <summary>
            The end row or column of this interlace style is Infinite is set to false.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleStripStyle.Length">
            <summary>
            The length in major ticks of each interlace stripe.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleStripStyle.Interval">
            <summary>
            The interval (gap) between two consecutive interlace stripes.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleStripStyle.ShowAtWalls">
            <summary>
            Gets or sets an array which specifies the walls that display the stripe.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleStripStyle.Interlaced">
            <summary>
            Gets or sets a value indicating whether this strip style will be interlaced (synchronized with the view order of the range sampler)
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleStripStyle.GetShowAtWall(Nevron.Chart.ChartWallType)">
            <summary>
            Check whether the stripe is shown on the specified chart wall.
            </summary>
            <param name="wall">specifies the chart wall</param>
            <returns>true if the stripe is shown, false if not</returns>
        </member>
        <member name="M:Nevron.Chart.NScaleStripStyle.SetShowAtWall(Nevron.Chart.ChartWallType,System.Boolean)">
            <summary>
            Show the stripe on the specified chart wall.
            </summary>
            <exception cref="T:System.ArgumentException">Raised if a chart wall, which is invalid for this stipe was specified</exception>
            <remarks>
            The component will raise an exception if you try to display the stripe on an invalid wall.
            <para>
            For the vertical axis stripes allowed chart walls are the vertical walls.
            </para>
            <para>
            For the horizontal axis stripes allowed chart walls are the back, front and floor walls.
            </para>
            <para>
            For the depth axis stripes allowed chart walls are the left, rigth and floor walls.
            </para>
            </remarks>
            <param name="wall">specifies the chart wall</param>
            <param name="show">specifies whether to show the stripe or not</param>
        </member>
        <member name="T:Nevron.Chart.NScaleStripStyleCollection">
            <summary>
            Represents a collection of scale strip line style objects
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleStripStyleCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleStripStyleCollection.Name">
            <summary>
            The name of the axis. 
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleStripStyleCollection.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleTickStyle">
            <summary>
            Controls the appearance of scale ticks
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleTickStyle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleTickStyle.#ctor(Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NSizeL,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="lineStyle"></param>
            <param name="size"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Nevron.Chart.NScaleTickStyle.#ctor(Nevron.Chart.ScaleTickShape,Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NSizeL,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="shape"></param>
            <param name="fillStyle"></param>
            <param name="lineStyle"></param>
            <param name="size"></param>
            <param name="offset"></param>
        </member>
        <member name="P:Nevron.Chart.NScaleTickStyle.Visible">
            <summary>
            Controls the visibility of the ticks associated with this tick style
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleTickStyle.Shape">
            <summary>
            Gets or set the shape of the scale ticks
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleTickStyle.LineStyle">
            <summary>
            Gets or sets the stroke style of the tick lines
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleTickStyle.FillStyle">
            <summary>
            Gets or sets the fill style of the ticks
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleTickStyle.Length">
            <summary>
            Gets or sets the length of the ticks in NLength format
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleTickStyle.Width">
            <summary>
            Gets or sets the length of the ticks in NLength format
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleTickStyle.Offset">
            <summary>
            Gets or sets the offset of the ticks in their scale level
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleTitleStyle">
            <summary>
            Controls the appearance of titles that appear on the axis
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleTitleStyle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleTitleStyle.Angle">
            <summary>
            Gets or sets the angle of the axis title
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleTitleStyle.Text">
            <summary>
            Gets or sets the text of the axis title
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleTitleStyle.ContentAlignment">
            <summary>
            Gets or sets the content alignment of the axis title
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleTitleStyle.RulerAlignment">
            <summary>
            Gets or sets the alignment of the title relative to the axis ruler.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleTitleStyle.RulerOffset">
            <summary>
            Gets or sets the offset of the label from it's anchor point on the axis ruler
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleTitleStyle.Offset">
            <summary>
            Specifies the offset of the title from the labels in the scale in NLength format
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleTitleStyle.TextStyle">
            <summary>
            Gets or sets the NTextStyle object applied to the scale title text.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NContentScaleBreakPosition">
            <summary>
            Represents a scale break position, which is determined according to the 
            amount of data left on the sides of the scale break.
            </summary>
            <remarks>
            For example suppose you have 10 data items and the scale break is above
            7 of them and below 3 of them. In this case the scale break position will 
            be 70 percent from the scale length as this reflects the amount of data 
            present in the left and right (top and bottom) parts of the scale. You may limit 
            this percent by using the PercentRange property (by default set to [10, 90]). This
            is needed in order to avoid extreme cases where a scale break will be driven 
            too close to the scale begin or end values thus diminishing the readability of the chart.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NContentScaleBreakPosition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NContentScaleBreakPosition.#ctor(System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="minPercent"></param>
            <param name="maxPercent"></param>
        </member>
        <member name="P:Nevron.Chart.NContentScaleBreakPosition.PercentRange">
            <summary>
            Gets or sets the allowed scale break split range.
            </summary>
            <remarks>
            By default this property is set to [10, 90]
            </remarks>
        </member>
        <member name="T:Nevron.Chart.NPercentScaleBreakPosition">
            <summary>
            Represents a scale break position which is determined in percentages relative to the
            scale being split by the scale break. 
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPercentScaleBreakPosition.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPercentScaleBreakPosition.#ctor(System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="percent"></param>
        </member>
        <member name="P:Nevron.Chart.NPercentScaleBreakPosition.Percent">
            <summary>
            Gets or sets the segment split percent, when a scale break is about to split it
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRangeScaleBreakPosition">
            <summary>
            Represents a scale break position which is determined relative to the
            range of the scale break in scale coordinates. 
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleBreakPosition">
            <summary>
            The base of all scale break position classes controlling how the scale break is
            positioned on the axis
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAbsoluteScaleBreakInflate">
            <summary>
            Inflates the scale on the left and right from the break with a specified amount
            so that the data in the left and right parts of the scale is not obscured by the 
            break.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAbsoluteScaleBreakInflate.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAbsoluteScaleBreakInflate.#ctor(System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="inflate"></param>
        </member>
        <member name="M:Nevron.Chart.NAbsoluteScaleBreakInflate.#ctor(System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="leftInflate"></param>
            <param name="rightInflate"></param>
        </member>
        <member name="P:Nevron.Chart.NAbsoluteScaleBreakInflate.LeftInflate">
            <summary>
            Gets or sets the amount of inflate to be applied on left segment end value
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAbsoluteScaleBreakInflate.RightInflate">
            <summary>
            Gets or sets the amount of inflate to be applied on right segment begin value
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRelativeScaleBreakInflate">
            <summary>
            Represents a scale break inflate that will inflate the ranges on the 
            left and right of the scale break with a value relative to the scale 
            break range.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRelativeScaleBreakInflate.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRelativeScaleBreakInflate.#ctor(System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="inflatePercent"></param>
        </member>
        <member name="M:Nevron.Chart.NRelativeScaleBreakInflate.#ctor(System.Single,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="leftInflatePercent"></param>
            <param name="rightInflatePercent"></param>
        </member>
        <member name="P:Nevron.Chart.NRelativeScaleBreakInflate.LeftInflatePercent">
            <summary>
            Gets or sets the amount of inflate applied on the left side of the scale in percents
            of the scale break range
            </summary>
            <remarks>
            Values will be clamped to the range [0, 50]
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NRelativeScaleBreakInflate.RightInflatePercent">
            <summary>
            Gets or sets the amount of inflate applied on the right side of the scale in percents
            of the scale break range
            </summary>
            <remarks>
            Values will be clamped to the range [0, 50]
            </remarks>
        </member>
        <member name="T:Nevron.Chart.NScaleBreakInflate">
            <summary>
            The base of all scale break inflate derived classes
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLineScaleBreakStyle">
            <summary>
            Represents a scale break that is visualized as two parallel, straight lines
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLineScaleBreakStyle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLineScaleBreakStyle.#ctor(Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="strokeStyle"></param>
            <param name="length"></param>
        </member>
        <member name="M:Nevron.Chart.NLineScaleBreakStyle.#ctor(Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fillStyle"></param>
            <param name="strokeStyle"></param>
            <param name="length"></param>
        </member>
        <member name="T:Nevron.Chart.NPatternScaleBreakStyle">
            <summary>
            The base of all scale break styles that posses a pattern for drawing (horizontal and vertical step)
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPatternScaleBreakStyle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPatternScaleBreakStyle.#ctor(Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="strokeStyle"></param>
            <param name="length"></param>
        </member>
        <member name="M:Nevron.Chart.NPatternScaleBreakStyle.#ctor(Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fillStyle"></param>
            <param name="strokeStyle"></param>
            <param name="length"></param>
        </member>
        <member name="M:Nevron.Chart.NPatternScaleBreakStyle.#ctor(Nevron.GraphicsCore.NLength,Nevron.GraphicsCore.NLength,Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="horzStep"></param>
            <param name="vertStep"></param>
            <param name="strokeStyle"></param>
            <param name="length"></param>
        </member>
        <member name="M:Nevron.Chart.NPatternScaleBreakStyle.#ctor(Nevron.Chart.ScaleBreakPattern,Nevron.GraphicsCore.NLength,Nevron.GraphicsCore.NLength,Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="style"></param>
            <param name="horzStep"></param>
            <param name="vertStep"></param>
            <param name="strokeStyle"></param>
            <param name="length"></param>
        </member>
        <member name="P:Nevron.Chart.NPatternScaleBreakStyle.HorzStep">
            <summary>
            Gets or sets the horizontal step for the zig zag in NLength format
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPatternScaleBreakStyle.VertStep">
            <summary>
            Gets or sets the vertical step for the zig zag in NLength format
            </summary>
        </member>
        <member name="P:Nevron.Chart.NPatternScaleBreakStyle.Pattern">
            <summary>
            Gets or sets the pattern of the scale break
            </summary>
        </member>
        <member name="M:Nevron.Chart.NPatternScaleBreakStyle.InitFrom(Nevron.Chart.NScaleBreakStyle)">
            <summary>
            Copies the relevant styles from the passed style
            </summary>
            <param name="scaleBreakStyle"></param>
        </member>
        <member name="T:Nevron.Chart.INFactorySelector">
            <summary>
            Summary description for INFactoryController.
            </summary>
        </member>
        <member name="T:Nevron.Chart.INPriceChartScaleContent">
            <summary>
            Summary description for INScaleContent.
            </summary>
        </member>
        <member name="T:Nevron.Chart.INPriceChartScaleContentProvider">
            <summary>
            Implemented by scale label value transform providers
            </summary>
        </member>
        <member name="T:Nevron.Chart.INScaleConfiguratorObserver">
            <summary>
            Implemented by scale observers
            </summary>
        </member>
        <member name="M:Nevron.Chart.INScaleConfiguratorObserver.OnScaleConfigurationChanged">
            <summary>
            Called when the scale parameters have changed
            </summary>
        </member>
        <member name="M:Nevron.Chart.INScaleContent.GetDoubleValuesInRange(Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Gets the values that fall the in specified range
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.INScaleContent.GetCountInRange(Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Gets the count of the values that fall in the specified range
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.INValueSnapperHost">
            <summary>
            Summary description for INValueSnapperHost.
            </summary>
        </member>
        <member name="T:Nevron.Chart.INValueTransform">
            <summary>
            Summary description for INValueTransformer.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRangeDecorator">
            <summary>
            The base of all range decorators
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeDecorator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NConditionalScaleDecorator">
            <summary>
            Represents a scale decorator the can change the underlying decorator depending on a condition
            </summary>
        </member>
        <member name="M:Nevron.Chart.NConditionalScaleDecorator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NConditionalScaleDecorator.#ctor(Nevron.Chart.NRangeSampler,Nevron.Chart.NScaleDecorationFactory,Nevron.Chart.NScaleDecorationFactory[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeSampler"></param>
            <param name="defaultFactory"></param>
            <param name="selectedFactories"></param>
        </member>
        <member name="T:Nevron.Chart.NCustomScaleDecorator">
            <summary>
            Represents a custom scale decorator
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomScaleDecorator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCustomScaleDecorator.Decorations">
            <summary>
            Gets or sets a collection containting scale decorations
            </summary>
        </member>
        <member name="T:Nevron.Chart.NSampledScaleDecorator">
            <summary>
            Represents a pair of range sampler and scale decoration factory. The range sampler will break the visible 
            scale range into samples and the factory will create (optionally) a decoration for each sample.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSampledScaleDecorator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSampledScaleDecorator.#ctor(Nevron.Chart.NRangeSampler,Nevron.Chart.NScaleDecorationFactory)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeSampler">The range sampler.</param>
            <param name="factory">The factory.</param>
        </member>
        <member name="P:Nevron.Chart.NSampledScaleDecorator.RangeSampler">
            <summary>
            Gets or sets the range sampler associated with this decorator
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSampledScaleDecorator.Factory">
            <summary>
            Gets or sets the factory. associated with this decorator
            </summary>
            <value>The factory.</value>
        </member>
        <member name="T:Nevron.Chart.NScaleDecorator">
            <summary>
            Summary description for NScaleDecorator.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleDecoratorCollection">
            <summary>
            Summary description for NScaleDecoratorCollection.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NCustomWallDecorator">
            <summary>
            Summary description for NCustomWallDecorator.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomWallDecorator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomWallDecorator.#ctor(Nevron.Chart.NWallDecorationCollection)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NCustomWallDecorator.WallDecorations">
            <summary>
            Gets or sets the range sampler associated with this decorator
            </summary>
        </member>
        <member name="T:Nevron.Chart.NSampledWallDecorator">
            <summary>
            Summary description for NSampledWallDecorator.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSampledWallDecorator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSampledWallDecorator.#ctor(Nevron.Chart.NRangeSampler,Nevron.Chart.NWallDecorationFactory)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeSampler">The range sampler.</param>
            <param name="factory">The factory.</param>
        </member>
        <member name="P:Nevron.Chart.NSampledWallDecorator.RangeSampler">
            <summary>
            Gets or sets the range sampler associated with this decorator
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSampledWallDecorator.Factory">
            <summary>
            Gets or sets the factory. associated with this decorator
            </summary>
            <value>The factory.</value>
        </member>
        <member name="T:Nevron.Chart.NWallDecorator">
            <summary>
            The base of all wall decorators
            </summary>
        </member>
        <member name="M:Nevron.Chart.NWallDecorator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NWallDecoratorCollection">
            <summary>
            Summary description for NWallDecoratorCollection.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NEmptyScaleDecorationFactory">
            <summary>
            The empty scale decoration factory does not create any decorations
            </summary>
        </member>
        <member name="M:Nevron.Chart.NEmptyScaleDecorationFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NEmptyScaleDecorationFactory.CreateScaleDecoration(Nevron.GraphicsCore.NRange1DD,Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Creates a scale decoration based on the current and view ranges.
            </summary>
            <param name="viewRange">The view range.</param>
            <param name="currentRange">The current range.</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NScaleDecorationFactory">
            <summary>
            The base of all scale decoration factories
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleDecorationFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleDecorationFactory.#ctor(Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleDecorationFactory.CreateScaleDecoration(Nevron.GraphicsCore.NRange1DD,Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Creates a scale decoration based on the current and view ranges.
            </summary>
            <param name="viewRange">The view range.</param>
            <param name="currentRange">The current range.</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NScaleLabelFactory">
            <summary>
            A factory that creates scale labels given a range.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleLabelFactory.#ctor(System.Int32,System.Int32,Nevron.GraphicsCore.NLength,Nevron.NValueProvider,Nevron.NValueProvider,Nevron.HorzAlign,System.Drawing.ContentAlignment,Nevron.Chart.NScaleLabelAngle,System.Boolean,Nevron.Chart.ScaleLabelVisibilityMode,Nevron.GraphicsCore.NLength,Nevron.Chart.INValueTransform)">
            <summary>
            Initializer constructor
            </summary>
            <param name="id"></param>
            <param name="zOrder"></param>
            <param name="offset"></param>
            <param name="textStyleProvider"></param>
            <param name="labelTextProvider"></param>
            <param name="labelAlignment"></param>
            <param name="contentAlignment"></param>
            <param name="labelAngle"></param>
            <param name="keepInsideRuler"></param>
            <param name="visibilityMode"></param>
            <param name="nonOverlappingArea"></param>
            <param name="valueTransform"></param>
        </member>
        <member name="P:Nevron.Chart.NScaleLabelFactory.LabelTextProvider">
            <summary>
            Gets or sets the value provider that converts object values to their label string equivalent.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLabelFactory.TextStyleProvider">
            <summary>
            Gets or sets a value provider that returns a text style given the range to factory
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLabelFactory.ContentAlignment">
            <summary>
            Gets or sets the alignment of labels relative to their origin point on the scale
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLabelFactory.LabelAngle">
            <summary>
            Gets or sets the scale label angle
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLabelFactory.LabelAlignment">
            <summary>
            Gets/sets horizontal alignment of ticks relative to the sampled range
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleRangeFactory">
            <summary>
            A factory that creates scale ranges given a range.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleRangeFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleRangeFactory.#ctor(System.Int32,Nevron.GraphicsCore.NLength,Nevron.GraphicsCore.NLength,Nevron.GraphicsCore.NLength,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="id">The id of the generated ranges.</param>
            <param name="offset">The offset.</param>
            <param name="beginHeight">The begin height of the range.</param>
            <param name="endHeight">The end height of the range.</param>
            <param name="fillStyle">The fill style of the range.</param>
        </member>
        <member name="P:Nevron.Chart.NScaleRangeFactory.BeginHeight">
            <summary>
            Gets / set the generated range begin height
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleRangeFactory.EndHeight">
            <summary>
            Gets / set the generated range end height
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleRangeFactory.FillStyle">
            <summary>
            Gets or sets the generated range fill style
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleRangeFactory.CreateScaleDecoration(Nevron.GraphicsCore.NRange1DD,Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Creates a scale decoration based on the current and view ranges.
            </summary>
            <param name="viewRange">The view range.</param>
            <param name="currentRange">The current range.</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NScaleRangeFactoryPair">
            <summary>
            Summary description for NScaleRangeFactoryPair.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleRangeFactoryPair.#ctor(Nevron.GraphicsCore.NRange1DD,Nevron.Chart.NScaleDecorationFactory)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleRangeFactoryPair.Factory">
            <summary>
            Gets or sets the factory responsible for the specified range
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleRangeFactoryPair.Range">
            <summary>
            Gets or sets a range
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleTickFactory">
            <summary>
            A factory that creates scale ticks given a range.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleTickFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleTickFactory.#ctor(System.Int32,Nevron.Chart.ScaleTickShape,Nevron.GraphicsCore.NLength,Nevron.GraphicsCore.NSizeL,Nevron.NValueProvider,Nevron.NValueProvider,Nevron.HorzAlign)">
            <summary>
            Initializer constructor
            </summary>
            <param name="id"></param>
            <param name="shape"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <param name="fillStyleProvider"></param>
            <param name="strokeStyleProvider"></param>
            <param name="tickAlignment"></param>
        </member>
        <member name="P:Nevron.Chart.NScaleTickFactory.TickAlignment">
            <summary>
            Gets/sets horizontal alignment of ticks relative to the sampled range
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleTickFactory.Shape">
            <summary>
            Gets or sets the tick shape
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleTickFactory.Size">
            <summary>
            Gets / set the tick size
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleTickFactory.StrokeStyleProvider">
            <summary>
            Gets or sets the tick stroke style
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleTickFactory.CreateScaleDecoration(Nevron.GraphicsCore.NRange1DD,Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Creates a scale decoration based on the current and view ranges.
            </summary>
            <param name="viewRange">The view range.</param>
            <param name="currentRange">The current range.</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NScaleValueLabelFactory">
            <summary>
            A factory that creates scale value labels given a range.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleValueLabelFactory.#ctor(System.Int32,System.Int32,Nevron.GraphicsCore.NLength,Nevron.NValueProvider,Nevron.NValueProvider,Nevron.HorzAlign,System.Drawing.ContentAlignment,Nevron.Chart.NScaleLabelAngle,System.Boolean,Nevron.Chart.ScaleLabelVisibilityMode,Nevron.GraphicsCore.NLength,Nevron.Chart.INValueTransform)">
            <summary>
            Initializer constructor
            </summary>
            <param name="id"></param>
            <param name="zOrder"></param>
            <param name="offset"></param>
            <param name="textStyleProvider"></param>
            <param name="labelTextProvider"></param>
            <param name="labelAlignment"></param>
            <param name="contentAlignment"></param>
            <param name="labelAngle"></param>
            <param name="keepInsideRuler"></param>
            <param name="visibilityMode"></param>
            <param name="nonOverlappingArea"></param>
            <param name="valueTranform"></param>
        </member>
        <member name="M:Nevron.Chart.NScaleValueLabelFactory.CreateScaleDecoration(Nevron.GraphicsCore.NRange1DD,Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Creates a scale decoration based on the current and view ranges.
            </summary>
            <param name="viewRange">The view range.</param>
            <param name="currentRange">The current range.</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NEmptyWallDecorationFactory">
            <summary>
            The empty scale decoration factory does not create any wall decorations
            </summary>
        </member>
        <member name="M:Nevron.Chart.NEmptyWallDecorationFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NGridLineFactory">
            <summary>
            Creates grid lines given a specified range
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGridLineFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGridLineFactory.#ctor(Nevron.NValueProvider,Nevron.HorzAlign,Nevron.Chart.ChartWallType[],System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="strokeStyleProvider"></param>
            <param name="gridLineAlignment"></param>
            <param name="showAtWalls"></param>
            <param name="extendInChartArea"></param>
        </member>
        <member name="P:Nevron.Chart.NGridLineFactory.GridLineAlignment">
            <summary>
            Gets or sets the grid lines alignment relative to the decorated wall range
            </summary>
        </member>
        <member name="T:Nevron.Chart.NStripLineFactory">
            <summary>
            Creates strip lines given a specified range
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStripLineFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStripLineFactory.#ctor(Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle,Nevron.Chart.ChartWallType[],System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fillStyle"></param>
            <param name="strokeStyle"></param>
            <param name="showAtWalls"></param>
            <param name="extendInChartArea"></param>
        </member>
        <member name="T:Nevron.Chart.NWallDecorationFactory">
            <summary>
            The base of all wall decoration factories
            </summary>
        </member>
        <member name="M:Nevron.Chart.NWallDecorationFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NCustomRangeInflator">
            <summary>
            Summary description for NCustomRangeInfluencer.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomRangeInflator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomRangeInflator.#ctor(Nevron.GraphicsCore.NRange1DD[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="ranges"></param>
        </member>
        <member name="P:Nevron.Chart.NCustomRangeInflator.Ranges">
            <summary>
            Gets or sets an array of ranges to be accomodated in the final range
            </summary>
        </member>
        <member name="T:Nevron.Chart.NOrdinalRangeInflator">
            <summary>
            Summary description for NOrdinalRangeInflator.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NOrdinalRangeInflator.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NOrdinalRangeInflator.#ctor(System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="beginInflate"></param>
            <param name="endInflate"></param>
        </member>
        <member name="T:Nevron.Chart.NRangeInflator">
            <summary>
            Summary description for NRangeInflator.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeInflator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeInflator.#ctor(System.Boolean,System.Boolean,Nevron.Chart.ExtendRangeMode,Nevron.Chart.ExtendRangeMode)">
            <summary>
            Initializer constructor
            </summary>
            <param name="inflateBegin"></param>
            <param name="inflateEnd"></param>
            <param name="extendRangeBeginMode"></param>
            <param name="extendRangeEndMode"></param>
        </member>
        <member name="P:Nevron.Chart.NRangeInflator.InflateBegin">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeInflator.InflateEnd">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeInflator.ExtendRangeBeginMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NRangeInflator.ExtendRangeEndMode">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRangeInflatorCollection">
            <summary>
            Summary description for NRangeInflatorCollection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeInflatorCollection.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NSampledRangeInflator">
            <summary>
            Summary description for NSampledRangeInflator.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSampledRangeInflator.#ctor">
            <summary>
            Default ctro
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSampledRangeInflator.#ctor(Nevron.Chart.NRangeSampler)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeSampler"></param>
        </member>
        <member name="P:Nevron.Chart.NSampledRangeInflator.RangeSampler">
            <summary>
            Gets or sets the range sampler associated with this range inflator
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAlignedRangeSampler">
            <summary>
            Summary description for NAlignedRangeSampler.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAlignedRangeSampler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAlignedRangeSampler.#ctor(Nevron.Chart.NRangeSampler,Nevron.HorzAlign)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeSampler"></param>
            <param name="align"></param>
        </member>
        <member name="T:Nevron.Chart.NCascadeRangeSampler">
            <summary>
            Represents a base class for all range samplers that use the output of another range samper
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCascadeRangeSampler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCascadeRangeSampler.#ctor(Nevron.Chart.NRangeSampler)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rangeSampler"></param>
        </member>
        <member name="T:Nevron.Chart.NCustomRangeSampler">
            <summary>
            Represents a custom range sampler.
            </summary>
            <remarks>
            This range sampler will sample any given range to smaller ranges depending on the values passed to it
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NCustomRangeSampler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomRangeSampler.#ctor(System.Double[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Nevron.Chart.NCustomRangeSampler.#ctor(System.Int32[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Nevron.Chart.NCustomRangeSampler.#ctor(System.Int64[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="values"></param>
        </member>
        <member name="T:Nevron.Chart.NDensityRangeSampler">
            <summary>
            Represents a density range sampler
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDensityRangeSampler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDensityRangeSampler.#ctor(System.Int32)">
            <summary>
            Initialier constructor
            </summary>
            <param name="density"></param>
        </member>
        <member name="P:Nevron.Chart.NDensityRangeSampler.Density">
            <summary>
            Gets or sets the density of the sampler
            </summary>
        </member>
        <member name="T:Nevron.Chart.NOrderFilteredRangeSampler">
            <summary>
            Filters the output of another range sampler
            </summary>
        </member>
        <member name="M:Nevron.Chart.NOrderFilteredRangeSampler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NOrderFilteredRangeSampler.RangeSampler">
            <summary>
            Gets or sets the range sampler filtered by this sampler
            </summary>
            <value>The range sampler.</value>
        </member>
        <member name="P:Nevron.Chart.NOrderFilteredRangeSampler.OrderFilter">
            <summary>
            Gets or sets the filter controlling how ranges produced by range samlper will be filtered
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:Nevron.Chart.NOrderFilteredRangeSampler.CombineConsequentRanges">
            <summary>
            Gets or sets a value indicating whether the sampler will stack (combine) consequent ranges in single range.
            </summary>
            <value>
            if <c>true</c> stack consequent ranges; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Nevron.Chart.NOrderFilteredRangeSampler.OrderType">
            <summary>
            Gets or sets the type of order to filter
            </summary>
        </member>
        <member name="P:Nevron.Chart.NOrderFilteredRangeSampler.OrderOrigin">
            <summary>
            Gets or sets the order origin.
            </summary>
            <value>The order origin.</value>
        </member>
        <member name="T:Nevron.Chart.NRangeSampler">
            <summary>
            The base of all range samplers
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeSampler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NSkipFirstRangeSampler">
            <summary>
            Skips the first range of the underlying range sampler
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSkipFirstRangeSampler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSkipFirstRangeSampler.#ctor(Nevron.Chart.NRangeSampler)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NSkipLastRangeSampler">
            <summary>
            Skips the last range of the underlying range sampler
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSkipLastRangeSampler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSkipLastRangeSampler.#ctor(Nevron.Chart.NRangeSampler)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NStackedRangeSampler">
            <summary>
            Stacks the output of two range samplers. The first range sampler is called master and it will generate a series of ranges 
            given a master range. Then the slave range sampler will be executed for each range generated by the master to break it into smaller ranges.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStackedRangeSampler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStackedRangeSampler.#ctor(Nevron.Chart.NRangeSampler,Nevron.Chart.NDensityRangeSampler,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="master"></param>
            <param name="slave"></param>
            <param name="skipFirstSlaveRange"></param>
        </member>
        <member name="P:Nevron.Chart.NStackedRangeSampler.Master">
            <summary>
            Gets or sets the master range sampler.
            </summary>
            <value>The master.</value>
        </member>
        <member name="P:Nevron.Chart.NStackedRangeSampler.Slave">
            <summary>
            Gets or sets the slave range sampler.
            </summary>
            <value>The slave.</value>
        </member>
        <member name="T:Nevron.Chart.NSynchronizedRangeSampler">
            <summary>
            Represents a synchronized range samper
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSynchronizedRangeSampler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSynchronizedRangeSampler.#ctor(Nevron.Chart.NRangeSampler,Nevron.Chart.NRangeSampler)">
            <summary>
            Initializer constructor
            </summary>
            <param name="stepRangeSamper"></param>
            <param name="syncRangeSamper"></param>
        </member>
        <member name="T:Nevron.Chart.NVerbatimRangeSampler">
            <summary>
            Leaves the passed range unmodified.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVerbatimRangeSampler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAutoDateTimeStepProvider">
            <summary>
            An automatic date time step provider.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAutoDateTimeStepProvider.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAutoDateTimeStepProvider.#ctor(Nevron.Chart.NMaxStepCountProvider)">
            <summary>
            Initilizer constructor
            </summary>
            <param name="maxStepCountProvider"></param>
        </member>
        <member name="M:Nevron.Chart.NAutoDateTimeStepProvider.#ctor(Nevron.Chart.NMaxStepCountProvider,Nevron.NDateTimeUnit[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="maxStepCountProvider"></param>
            <param name="dateTimeUnits"></param>
        </member>
        <member name="P:Nevron.Chart.NAutoDateTimeStepProvider.DateTimeUnits">
            <summary>
            Gets or sets the date time units used by the provider
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoDateTimeStepProvider.StepBases">
            <summary>
            Gets or sets the step bases
            </summary>
        </member>
        <member name="T:Nevron.Chart.NCustomDateTimeStepProvider">
            <summary>
            Represents a custom date/time step provider
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomDateTimeStepProvider.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomDateTimeStepProvider.#ctor(Nevron.NDateTimeSpan)">
            <summary>
            Initializer constructor
            </summary>
            <param name="step"></param>
        </member>
        <member name="P:Nevron.Chart.NCustomDateTimeStepProvider.Steps">
            <summary>
            Gets or sets a time span list to be used as steps
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDateTimeStepProvider">
            <summary>
            Base class for a custom integer step provider
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDateTimeStepRangeSampler">
            <summary>
            Samples the given range with date/time step
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDateTimeStepRangeSampler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDateTimeStepRangeSampler.#ctor(Nevron.Chart.NDateTimeStepProvider)">
            <summary>
            Initializer constructor
            </summary>
            <param name="stepProvider"></param>
        </member>
        <member name="P:Nevron.Chart.NDateTimeStepRangeSampler.UseCustomOrigin">
            <summary>
            Gets or sets a value indicating whether to use the CustomOrigin property.
            </summary>
            <value><c>true</c> if use custom origin; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nevron.Chart.NDateTimeStepRangeSampler.CustomOrigin">
            <summary>
            Gets or sets the custom origin of the sampler
            </summary>
            <remarks>
            This property has effect only when UseCustomOrigin is set to true
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NDateTimeStepRangeSampler.StepProvider">
            <summary>
            Gets or sets the step provider associated with this sampler
            </summary>
            <value>The step provider.</value>
        </member>
        <member name="F:Nevron.Chart.NDateTimeStepRangeSampler.m_UseCustomOrigin">
            custom origin
        </member>
        <member name="T:Nevron.Chart.NAutoIntegerStepProvider">
            <summary>
            An automatic Integer step provider
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAutoIntegerStepProvider.#ctor">
            <summary>
            Default cosntructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAutoIntegerStepProvider.#ctor(Nevron.Chart.NMaxStepCountProvider)">
            <summary>
            Initializer constructor
            </summary>
            <param name="maxStepCountProvider"></param>
        </member>
        <member name="P:Nevron.Chart.NAutoIntegerStepProvider.MaxStepCountProvider">
            <summary>
            Controls the maximum number of steps
            </summary>
        </member>
        <member name="T:Nevron.Chart.NCustomIntegerStepProvider">
            <summary>
            Summary description for NCustomStepProvider.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomIntegerStepProvider.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NIntegerStepProvider">
            <summary>
            Summary description for NIntegerStepProvider.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NIntegerStepRangeSampler">
            <summary>
            Samples the given range with integer step
            </summary>
        </member>
        <member name="M:Nevron.Chart.NIntegerStepRangeSampler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NIntegerStepRangeSampler.#ctor(Nevron.Chart.NIntegerStepProvider)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NIntegerStepRangeSampler.UseCustomOrigin">
            <summary>
            Gets or sets a value indicating whether to use the CustomOrigin property.
            </summary>
            <value><c>true</c> if use custom origin; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nevron.Chart.NIntegerStepRangeSampler.CustomOrigin">
            <summary>
            Gets or sets the custom origin (used when the UseCustomOrigin property is set to true).
            </summary>
            <value>The custom origin.</value>
        </member>
        <member name="P:Nevron.Chart.NIntegerStepRangeSampler.StepProvider">
            <summary>
            Gets or sets the step provider associated with this sampler
            </summary>
            <value>The step provider.</value>
        </member>
        <member name="F:Nevron.Chart.NIntegerStepRangeSampler.m_UseCustomOrigin">
            custom origin
        </member>
        <member name="T:Nevron.Chart.NDistanceMaxStepCountProvider">
            <summary>
            Summary description for NAutoMaxStepProvider.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDistanceMaxStepCountProvider.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDistanceMaxStepCountProvider.#ctor(Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer contructor
            </summary>
            <param name="distanceBetweenSteps"></param>
        </member>
        <member name="P:Nevron.Chart.NDistanceMaxStepCountProvider.DistanceBetweenSteps">
            <summary>
            Gets or sets the minimum distance between steps
            </summary>
        </member>
        <member name="T:Nevron.Chart.NFixedMaxSetCountProvider">
            <summary>
            Summary description for NFixedMaxSetCountProvider.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFixedMaxSetCountProvider.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NFixedMaxSetCountProvider.#ctor(System.Int32)">
            <summary>
            Initializer contructor
            </summary>
            <param name="maxStepCount"></param>
        </member>
        <member name="P:Nevron.Chart.NFixedMaxSetCountProvider.MaxStepCount">
            <summary>
            Controls the maximum number of steps
            </summary>
        </member>
        <member name="T:Nevron.Chart.NMaxStepCountProvider">
            <summary>
            Summary description for NMaxStepCountProvider.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAutoNumericStepProvider">
            <summary>
            An automatic linear step provider
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAutoNumericStepProvider.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAutoNumericStepProvider.#ctor(System.Double,System.Double,Nevron.Chart.NMaxStepCountProvider)">
            <summary>
            Initializer constructor
            </summary>
            <param name="minStep"></param>
            <param name="maxStep"></param>
            <param name="maxStepCountProvider"></param>
        </member>
        <member name="P:Nevron.Chart.NAutoNumericStepProvider.MaxStepCountProvider">
            <summary>
            Controls the maximum number of steps
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoNumericStepProvider.StepBases">
            <summary>
            Gets or sets the considered step bases
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAutoNumericStepProvider.CalculateSteps(Nevron.GraphicsCore.NLengthConverter,Nevron.GraphicsCore.NRange1DD,System.Single)">
            <summary>
            
            </summary>
            <param name="lengthConverter"></param>
            <param name="range"></param>
            <param name="length"></param>
        </member>
        <member name="T:Nevron.Chart.NCustomNumericStepProvider">
            <summary>
            Summary description for NCustomStepProvider.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomNumericStepProvider.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCustomNumericStepProvider.#ctor(System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="step"></param>
        </member>
        <member name="T:Nevron.Chart.NNumericStepProvider">
            <summary>
            Base class for numeric step provider
            </summary>
        </member>
        <member name="T:Nevron.Chart.NNumericDecimalStepRangeSampler">
            <summary>
            Samples the given range with decimal step
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNumericDecimalStepRangeSampler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NNumericDecimalStepRangeSampler.#ctor(Nevron.Chart.NNumericStepProvider)">
            <summary>
            Initializer constructor
            </summary>
            <param name="numericStepProvider"></param>
        </member>
        <member name="P:Nevron.Chart.NNumericDecimalStepRangeSampler.UseCustomOrigin">
            <summary>
            Gets or sets a value indicating whether to use the CustomOrigin property.
            </summary>
            <value><c>true</c> if use custom origin; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nevron.Chart.NNumericDecimalStepRangeSampler.CustomOrigin">
            <summary>
            Gets or sets the custom origin of the sampler
            </summary>
            <remarks>
            This property has effect only when UseCustomOrigin is set to true
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NNumericDecimalStepRangeSampler.StepProvider">
            <summary>
            Gets or sets the step provider associated with this sampler
            </summary>
            <value>The step provider.</value>
        </member>
        <member name="F:Nevron.Chart.NNumericDecimalStepRangeSampler.m_UseCustomOrigin">
            custom origin
        </member>
        <member name="T:Nevron.Chart.NCascadeValueTranform">
            <summary>
            Summary description for NCascadeValueTranform.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCascadeValueTranform.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NCascadeValueTranform.#ctor(Nevron.Chart.INValueTransform,Nevron.Chart.INValueTransform)">
            <summary>
            Initializer constructor
            </summary>
            <param name="valueTranform1"></param>
            <param name="valueTranform2"></param>
        </member>
        <member name="T:Nevron.Chart.NScaleOffsetValueTranform">
            <summary>
            Summary description for NScaleOffsetValueTranform.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleOffsetValueTranform.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleOffsetValueTranform.#ctor(System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="scale"></param>
            <param name="offset"></param>
        </member>
        <member name="T:Nevron.Chart.NScaleValueTransform">
            <summary>
            Summary description for NScaleValueTransform.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleValueTransform.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleValueTransform.#ctor(System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="scale"></param>
        </member>
        <member name="T:Nevron.Chart.NValueTranform">
            <summary>
            Summary description for NValueTranform.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NValueTranform.#ctor">
            <summary>
            Default contructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NValueTranform.Transform(System.Double)">
            <summary>
            Transforms the value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NScaleBreakStyle">
            <summary>
            The base of all scale break styles defining the appearance of an axis scale break
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleBreakStyle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleBreakStyle.#ctor(Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="strokeStyle"></param>
            <param name="length"></param>
        </member>
        <member name="M:Nevron.Chart.NScaleBreakStyle.#ctor(Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fillStyle"></param>
            <param name="strokeStyle"></param>
            <param name="length"></param>
        </member>
        <member name="P:Nevron.Chart.NScaleBreakStyle.FillStyle">
            <summary>
            Gets or sets the fill style of the scale break
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleBreakStyle.StrokeStyle">
            <summary>
            Gets or sets the stroke style of the scale break
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleBreakStyle.Length">
            <summary>
            Gets or sets the length of the axis break along the axis ruler
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleBreakStyle.InitFrom(Nevron.Chart.NScaleBreakStyle)">
            <summary>
            Copies the relevant styles from the passed style
            </summary>
            <param name="scaleBreakStyle"></param>
        </member>
        <member name="T:Nevron.Chart.NWaveScaleBreakStyle">
            <summary>
            Represents a scale break that is visualized as a wave
            </summary>
        </member>
        <member name="M:Nevron.Chart.NWaveScaleBreakStyle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NWaveScaleBreakStyle.#ctor(Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="strokeStyle"></param>
            <param name="length"></param>
        </member>
        <member name="M:Nevron.Chart.NWaveScaleBreakStyle.#ctor(Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fillStyle"></param>
            <param name="strokeStyle"></param>
            <param name="length"></param>
        </member>
        <member name="M:Nevron.Chart.NWaveScaleBreakStyle.#ctor(Nevron.GraphicsCore.NLength,Nevron.GraphicsCore.NLength,Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="horzStep"></param>
            <param name="vertStep"></param>
            <param name="strokeStyle"></param>
            <param name="length"></param>
        </member>
        <member name="T:Nevron.Chart.NZigZagScaleBreakStyle">
            <summary>
            Represents a zig zag scale break
            </summary>
        </member>
        <member name="M:Nevron.Chart.NZigZagScaleBreakStyle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NZigZagScaleBreakStyle.#ctor(Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="strokeStyle"></param>
            <param name="length"></param>
        </member>
        <member name="M:Nevron.Chart.NZigZagScaleBreakStyle.#ctor(Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fillStyle"></param>
            <param name="strokeStyle"></param>
            <param name="length"></param>
        </member>
        <member name="M:Nevron.Chart.NZigZagScaleBreakStyle.#ctor(Nevron.GraphicsCore.NLength,Nevron.GraphicsCore.NLength,Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="horzStep"></param>
            <param name="vertStep"></param>
            <param name="strokeStyle"></param>
            <param name="length"></param>
        </member>
        <member name="T:Nevron.Chart.NDecorationAnchor">
            <summary>
            The base of all decoration anchors
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDecorationAnchor.ClampToRuler">
            <summary>
            Gets or sets a value indicating whether the anchor will always be clamped inside the ruler bounds
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRangeDecorationAnchor">
            <summary>
            Summary description for NRangeDecorationAnchor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeDecorationAnchor.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRulerRangeDecorationAnchor">
            <summary>
            Summary description for NRulerRangeDecorationAnchor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRulerRangeDecorationAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRulerRangeDecorationAnchor.#ctor(Nevron.HorzAlign,Nevron.GraphicsCore.NLength,Nevron.HorzAlign,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="beginOrigin"></param>
            <param name="beginOffset"></param>
            <param name="endOrigin"></param>
            <param name="endOffset"></param>
        </member>
        <member name="F:Nevron.Chart.NRulerRangeDecorationAnchor.m_BeginOrigin">
            <summary>
            Defines how the offset is to be calculate depending on the ruler origin
            </summary>
        </member>
        <member name="F:Nevron.Chart.NRulerRangeDecorationAnchor.m_BeginOffset">
            <summary>
            Represents an offset relative to the ruler origin
            </summary>
        </member>
        <member name="F:Nevron.Chart.NRulerRangeDecorationAnchor.m_EndOrigin">
            <summary>
            Defines how the offset is to be calculate depending on the ruler origin
            </summary>
        </member>
        <member name="F:Nevron.Chart.NRulerRangeDecorationAnchor.m_EndOffset">
            <summary>
            Represents an offset relative to the ruler origin
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleRangeDecorationAnchor">
            <summary>
            Summary description for NScaleRangeDecorationAnchor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleRangeDecorationAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleRangeDecorationAnchor.#ctor(Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Initializer constructor
            </summary>
            <param name="range"></param>
        </member>
        <member name="T:Nevron.Chart.NRulerValueDecorationAnchor">
            <summary>
            Represents decoration anchor attached to a specified ruler position
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRulerValueDecorationAnchor.#ctor(Nevron.HorzAlign,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="origin"></param>
            <param name="offset"></param>
        </member>
        <member name="F:Nevron.Chart.NRulerValueDecorationAnchor.m_Origin">
            <summary>
            Defines how the offset is to be calculate depending on the ruler origin
            </summary>
        </member>
        <member name="F:Nevron.Chart.NRulerValueDecorationAnchor.m_Offset">
            <summary>
            Represents an offset relative to the ruler origin
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleValueDecorationAnchor">
            <summary>
            Summary description for NScaleValueDecorationAnchor.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NValueDecorationAnchor">
            <summary>
            Base class for all value decoration anchors
            </summary>
        </member>
        <member name="M:Nevron.Chart.NValueDecorationAnchor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRangeScaleLabel">
            <summary>
            Summary description for NRangeScaleLabel.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRangeScaleLabel.#ctor(Nevron.Chart.NRangeDecorationAnchor,System.String,Nevron.Chart.NRangeScaleLabelStyle)">
            <summary>
            Initializer contructor
            </summary>
            <param name="anchor"></param>
            <param name="text"></param>
            <param name="style"></param>
        </member>
        <member name="P:Nevron.Chart.NRangeScaleLabel.Style">
            <summary>
            Gets style of this scale label
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleDecoration">
            <summary>
            The base of all scale decorations
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleDecoration.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleDecoration.#ctor(Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="P:Nevron.Chart.NScaleDecoration.Offset">
            <summary>
            Gets or sets the offset of the scale decoration
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleDecorationCollection">
            <summary>
            Summary description for NScaleDecorationCollection.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleLabel">
            <summary>
            The base of all labels appearing on the scale
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleLabel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleLabel.#ctor(Nevron.Chart.INScaleLabelContent)">
            <summary>
            Initializer constructor
            </summary>
            <param name="content"></param>
        </member>
        <member name="P:Nevron.Chart.NScaleLabel.Text">
            <summary>
            Gets or sets the text displayed by this label
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLabel.Style">
            <summary>
            Gets style of this scale label
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleLabelAngle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleLabelAngle.#ctor(System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="customAngleInDegrees"></param>
        </member>
        <member name="M:Nevron.Chart.NScaleLabelAngle.#ctor(Nevron.Chart.ScaleLabelAngleMode,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="labelAngleMode"></param>
            <param name="customAngleInDegrees"></param>
        </member>
        <member name="M:Nevron.Chart.NScaleLabelAngle.#ctor(Nevron.Chart.ScaleLabelAngleMode,System.Single,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="labelAngleMode"></param>
            <param name="customAngleInDegrees"></param>
            <param name="allowTextFlip"></param>
        </member>
        <member name="P:Nevron.Chart.NScaleLabelAngle.CustomAngle">
            <summary>
            Gets or sets the custom angle in degrees.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLabelAngle.LabelAngleMode">
            <summary>
            Gets or sets the angle mode of the scale label.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLabelAngle.AllowTextFlip">
            <summary>
            Gets or sets a value indicating whether the label is allowed to flip 
            </summary>
            <remarks>
            The default value is false meaning that the labels angle must fall in the range [-PI / 2, PI / 2].
            </remarks>
        </member>
        <member name="T:Nevron.Chart.NScaleLevelSeparator">
            <summary>
            Defines the background filling of a scale level
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleLevelSeparator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleLevelSeparator.#ctor(System.Int32,Nevron.Chart.NRangeDecorationAnchor,Nevron.Chart.ScaleLevelShape,Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="id"></param>
            <param name="anchor"></param>
            <param name="shape"></param>
            <param name="fillStyle"></param>
            <param name="borderStyle"></param>
        </member>
        <member name="M:Nevron.Chart.NScaleLevelSeparator.#ctor(System.Int32,Nevron.Chart.NRangeDecorationAnchor,Nevron.Chart.ScaleLevelShape,Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle,Nevron.GraphicsCore.NLength,Nevron.GraphicsCore.NLength,Nevron.GraphicsCore.NLength,Nevron.GraphicsCore.NLength,Nevron.GraphicsCore.NCapStyle,Nevron.GraphicsCore.NCapStyle,Nevron.GraphicsCore.NCapStyle,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="id"></param>
            <param name="anchor"></param>
            <param name="shape"></param>
            <param name="fillStyle"></param>
            <param name="borderStyle"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="leftMargin"></param>
            <param name="rightMargin"></param>
            <param name="beginCap"></param>
            <param name="endCap"></param>
            <param name="scaleBreakCap"></param>
            <param name="paintOnScaleBreaks"></param>
        </member>
        <member name="P:Nevron.Chart.NScaleLevelSeparator.Shape">
            <summary>
            Gets or sets the shape of the scale level
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLevelSeparator.FillStyle">
            <summary>
            Gets or sets the background filling of a scale level
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLevelSeparator.BorderStyle">
            <summary>
            Gets or sets the border style of the scale level
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLevelSeparator.BeginCapStyle">
            <summary>
            Gets or sets the begin cap style of the separator
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLevelSeparator.EndCapStyle">
            <summary>
            Gets or sets the end cap style of the separator
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLevelSeparator.ScaleBreakCapStyle">
            <summary>
            Gets or sets the cap style used to paint scale breaks
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLevelSeparator.PaintOnScaleBreaks">
            <summary>
            Gets or sets a value indicating whether the separator
            should paint over scale breaks
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLevelSeparator.Anchor">
            <summary>
            Gets or sets the anchor of this separator
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleRange">
            <summary>
            Represents a range of values on the scale
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleRange.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleRange.#ctor(System.Int32,Nevron.Chart.NRangeDecorationAnchor,Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NLength,Nevron.GraphicsCore.NLength,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="id"></param>
            <param name="anchor"></param>
            <param name="fillStyle"></param>
            <param name="offset"></param>
            <param name="beginHeight"></param>
            <param name="endHeight"></param>
        </member>
        <member name="M:Nevron.Chart.NScaleRange.#ctor(System.Int32,Nevron.Chart.NRangeDecorationAnchor,Nevron.GraphicsCore.NFillStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="id"></param>
            <param name="anchor"></param>
            <param name="fillStyle"></param>
        </member>
        <member name="T:Nevron.Chart.NScaleTick">
            <summary>
            Summary description for NScaleTick.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleTick.#ctor(System.Int32,Nevron.Chart.NValueDecorationAnchor,Nevron.Chart.ScaleTickShape,Nevron.GraphicsCore.NLength,Nevron.GraphicsCore.NSizeL,Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="id"></param>
            <param name="anchor"></param>
            <param name="shape"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <param name="fillStyle"></param>
            <param name="strokeStyle"></param>
        </member>
        <member name="T:Nevron.Chart.NValueScaleLabel">
            <summary>
            Summary description for NValueScaleLabel.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NValueScaleLabel.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NValueScaleLabel.#ctor(Nevron.Chart.NValueDecorationAnchor,System.String,Nevron.Chart.NValueScaleLabelStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="anchor"></param>
            <param name="text"></param>
            <param name="style"></param>
        </member>
        <member name="P:Nevron.Chart.NValueScaleLabel.Anchor">
            <summary>
            Gets or sets the anchor of the label
            </summary>
        </member>
        <member name="P:Nevron.Chart.NValueScaleLabel.Style">
            <summary>
            Gets style of this scale label
            </summary>
        </member>
        <member name="T:Nevron.Chart.NGridLine">
            <summary>
            Summary description for NGridLine.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGridLine.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGridLine.#ctor(System.Double,Nevron.GraphicsCore.NStrokeStyle,Nevron.Chart.ChartWallType[],System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="value"></param>
            <param name="strokeStyle"></param>
            <param name="showAtWalls"></param>
            <param name="extendInChartArea"></param>
        </member>
        <member name="P:Nevron.Chart.NGridLine.WallDecorationType">
            <summary>
            Gets the wall decoration type
            </summary>
        </member>
        <member name="M:Nevron.Chart.NGridLine.IsContainedInRange(Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Returns true if the decoration is contained in the range
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NStripLine">
            <summary>
            Summary description for NStripLineDecoration.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStripLine.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStripLine.#ctor(Nevron.GraphicsCore.NRange1DD,Nevron.GraphicsCore.NFillStyle,Nevron.GraphicsCore.NStrokeStyle,Nevron.Chart.ChartWallType[],System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="range"></param>
            <param name="fillStyle"></param>
            <param name="strokeStyle"></param>
            <param name="showAtWalls"></param>
            <param name="extendInChartArea"></param>
        </member>
        <member name="P:Nevron.Chart.NStripLine.WallDecorationType">
            <summary>
            Gets the wall decoration type
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStripLine.IsContainedInRange(Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Returns true if the decoration is contained in the range
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NStripLineCollection">
            <summary>
            Represents a collection of NStripLine objects.
            </summary>
            <remarks>
            An instance of this class is accessible with the help of the Stripes property of the NAxis class.
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NStripLineCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStripLineCollection.Item(System.Int32)">
            <summary>
            Typed collection indexer
            </summary>
        </member>
        <member name="T:Nevron.Chart.NWallDecoration">
            <summary>
            Summary description for NWallDecoration.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NWallDecoration.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NWallDecoration.#ctor(Nevron.Chart.ChartWallType[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="showAtWalls"></param>
        </member>
        <member name="P:Nevron.Chart.NWallDecoration.ShowAtWalls">
            <summary>
            Gets or sets an array which specifies the walls that display the wall decoration.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NWallDecoration.GetShowAtWall(Nevron.Chart.ChartWallType)">
            <summary>
            Check whether the stripe is shown on the specified chart wall.
            </summary>
            <param name="wall">specifies the chart wall</param>
            <returns>true if the stripe is shown, false if not</returns>
        </member>
        <member name="M:Nevron.Chart.NWallDecoration.SetShowAtWall(Nevron.Chart.ChartWallType,System.Boolean)">
            <summary>
            Show the stripe on the specified chart wall.
            </summary>
            <exception cref="T:System.ArgumentException">Raised if a chart wall, which is invalid for this stipe was specified</exception>
            <remarks>
            The component will raise an exception if you try to display the stripe on an invalid wall.
            <para>
            For the vertical axis stripes allowed chart walls are the vertical walls.
            </para>
            <para>
            For the horizontal axis stripes allowed chart walls are the back, front and floor walls.
            </para>
            <para>
            For the depth axis stripes allowed chart walls are the left, rigth and floor walls.
            </para>
            </remarks>
            <param name="wall">specifies the chart wall</param>
            <param name="show">specifies whether to show the stripe or not</param>
        </member>
        <member name="P:Nevron.Chart.NWallDecoration.WallDecorationType">
            <summary>
            Gets the wall decoration type
            </summary>
        </member>
        <member name="M:Nevron.Chart.NWallDecoration.IsContainedInRange(Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Returns true if the decoration is contained in the range
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NWallDecorationCollection">
            <summary>
            Summary description for NWallDecorationCollection.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAutoScaleLayout">
            <summary>
            Summary description for NAutoScaleLayout.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAutoScaleLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAutoScaleLayout.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoScaleLayout.MinScale">
            <summary>
            Gets or sets the min scale allowed by the auto scaling
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoScaleLayout.MaxScale">
            <summary>
            Gets or sets the max scale allowed by the auto scaling
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAutoScaleLayout.ScaleSteps">
            <summary>
            Gets or sets the number of steps this layout will perform in order to find the best scale
            in the range [MinScale, MaxScale].
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRemoveOverlappingLabelsLayout">
            <summary>
            Removes overlapping labels from the scale by checking the label Z order (specified through the scale label style)
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRemoveOverlappingLabelsLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRotateLevelLayout">
            <summary>
            Rotates all labels in the scale level to a specified angle
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRotateLevelLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NRotateLevelLayout.#ctor(Nevron.Chart.ScaleLabelAngleMode,System.Single)">
            <summary>
            Initializer constructor
            </summary>
            <param name="mode"></param>
            <param name="angle"></param>
        </member>
        <member name="P:Nevron.Chart.NRotateLevelLayout.Angle">
            <summary>
            Gets or sets the scale label angle associated with this layout
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleLevel">
            <summary>
            Represents a level of decorations along a scale.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleLevel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLevel.LevelLabelAlignment">
            <summary>
            Gets or sets the level label alignment
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLevel.Layout">
            <summary>
            Gets / set the layout of the level
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLevel.Decorators">
            <summary>
            Gets or sets the decorators associated with this scale level
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLevel.Decorations">
            <summary>
            Gets the list of decorations in this scale level
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLevel.MinHeight">
            <summary>
            Gets or sets the minimum height of the scale level
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLevel.BackgroundFillStyle">
            <summary>
            Gets or sets the background applied to the scale level
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLevel.TopPadding">
            <summary>
            Gets or sets the top padding of the level
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLevel.BottomPadding">
            <summary>
            Gets or sets the bottom padding of the level
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLevel.BeforeSpace">
            <summary>
            Gets or sets the space applied before the level
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLevel.AfterSpace">
            <summary>
            Gets or sets the space applied after the level
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleLevelLayout">
            <summary>
            The base of all axis layer layouts.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleLevelLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleLevelLayoutCollection">
            <summary>
            Represents a collection of scale level layouts.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleLevelLayoutCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleLevelLayoutComposite">
            <summary>
            Represents a scale level layout that consists of other layouts. The layout will iterate through the 
            Layouts collection and try to find a layout that does not produce intersecting labels.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleLevelLayoutComposite.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleLevelLayoutComposite.Layouts">
            <summary>
            Gets or sets a collection of layouts this layout will attempt to apply.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NStaggerLevelLayout">
            <summary>
            Staggers (or offsets) the labels in the scale level to the specified amount of labels.
            Staggering produces good visual results when the number of stagger levels is small. You can also control 
            the distance between the stagger levels.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStaggerLevelLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NStaggerLevelLayout.#ctor(System.Int32,Nevron.GraphicsCore.NLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="levels"></param>
            <param name="levelDistance"></param>
        </member>
        <member name="P:Nevron.Chart.NStaggerLevelLayout.Levels">
            <summary>
            Gets or sets the number of stagger levels created by thsi layout
            </summary>
        </member>
        <member name="P:Nevron.Chart.NStaggerLevelLayout.LevelDistance">
            <summary>
            Gets or sets the distance between the stagger lavels created by this layout 
            </summary>
        </member>
        <member name="T:Nevron.Chart.NVerbatimLevelLayout">
            <summary>
            Represents the verbatim layer layout. This layout does not modify the labels in the scale level and does not try to auto fit them.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NVerbatimLevelLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScale">
            <summary>
            Represent a scale
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScale.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScale.Levels">
            <summary>
            Obtains a collection containing the levels of the scale
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScale.Timeline">
            <summary>
            Returns the timeline created by the work calendar
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScale.Ruler">
            <summary>
            Obtains the ruler associated with this scale
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScale.OriginLevel">
            <summary>
            Gets or sets the scale origin level
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScale.ViewRangeInflators">
            <summary>
            Gets a collection containing range inflators
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScale.ContentRangeInflators">
            <summary>
            Gets a collection containing content range inflators
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScale.WallDecorators">
            <summary>
            Gets or sets the wall decorators associated with this scale
            </summary>
            <value>The wall decorators.</value>
        </member>
        <member name="P:Nevron.Chart.NScale.ViewRange">
            <summary>
            Gets the current view range
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScale.RulerRange">
            <summary>
            Returns the range displayed by the scale ruler
            </summary>
            <remarks>
            The ruler range can be bigger than the view range due to the range inflators applied on it.
            </remarks>
        </member>
        <member name="P:Nevron.Chart.NScale.IsRulerRangeValid">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScale.LockDecorations">
            <summary>
            Locks the decorations from rebuilding
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScale.Reset">
            <summary>
            Resets the scale to its default state
            </summary>
        </member>
        <member name="E:Nevron.Chart.NScale.ViewRangeChanged">
            <summary>
            Occurs when the scale view range has changed.
            </summary>
        </member>
        <member name="E:Nevron.Chart.NScale.RulerRangeChanged">
            <summary>
            Occurs when the scale ruler range has changed.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleLevelCollection">
            <summary>
            Summary description for NScaleLevelCollection.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleRuler">
            <summary>
            Summary description for NScaleRuler.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleRuler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleRuler.Invert">
            <summary>
            When set to true the ruler is inverted
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleRuler.AllowTextFlip">
            <summary>
            Whether the scale ruler allows a text flip (angle bigger than 180
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleRuler.DeviceLength">
            <summary>
            The length of this ruler on the current device
            </summary>
        </member>
        <member name="P:Nevron.Chart.NScaleRuler.SegmentFactories">
            <summary>
            Gets or sets the segment factory 
            </summary>
        </member>
        <member name="M:Nevron.Chart.NScaleRuler.GetScaleAndOffset(System.Double@,System.Double@)">
            <summary>
            Gets the scale and offset of the ruler 
            </summary>
            <param name="scale"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NScaleRuler.LogicalToScale(System.Double)">
            <summary>
            Converts a logical coordinate to scale coordinate
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NScaleRuler.LogicalToScale(Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Converts a range from logical to scale coordinates
            </summary>
            <param name="logicalRange"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NScaleRuler.ScaleToLogical(System.Double)">
            <summary>
            Converts a scale coordinate to logical coordinate
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NScaleRuler.ScaleToLogical(Nevron.GraphicsCore.NRange1DF)">
            <summary>
            Converts a range from scale to logical cooridnates
            </summary>
            <param name="scaleRange"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NScaleRuler.TransformScaleToView(Nevron.GraphicsCore.NPointF)">
            <summary>
            Transforms a scale to view coordinate
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NScaleRuler.InverseTransformScaleToView(Nevron.GraphicsCore.NPointF)">
            <summary>
            Transforms a view coordinate to scale coordinate
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NScaleRuler.TransformScaleToViewAngle(Nevron.GraphicsCore.NPointF,System.Single)">
            <summary>
            Transforms an angle from scale to view
            </summary>
            <param name="point"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Chart.NScaleRuler.m_DecorationRange">
            <summary>
            The range of the scale for decoration
            </summary>
        </member>
        <member name="T:Nevron.Chart.NScaleRulerSegmentFactoryCollection">
            <summary>
            Represents a collection of scale ruler segment factories
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTimeline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTimeline.IsEmptyAt(System.DateTime)">
            <summary>
            
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NTimeline.AddTimeSpan(System.DateTime,Nevron.NDateTimeSpan)">
            <summary>
            
            </summary>
            <param name="dt"></param>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NTimeline.Transform(System.Int64)">
            <summary>
            Transforms the ticks to the number of ticks elapsed, without the empty ticks
            </summary>
            <param name="ticks"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NTimeline.InverseTransform(System.Int64)">
            <summary>
            Inverse transform non empty ticks to empty ticks + non empty ticks
            </summary>
            <param name="ticks"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NAnimationService">
            <summary>
            Provides smart repaint capability.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NAnimationService.IsAnimating">
            <summary>
            Returns true if the service is currently animating
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAutoJitterService">
            <summary>
            Manages auto jittering when the chart is in 3D mode
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAutoJitterService.#ctor">
            <summary>
            Initializer contructor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAutoJitterService.OnTimerTick">
            <summary>
            Occurs when the timer ticks
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAutoJitterService.OnTimerStop">
            <summary>
            Occurs when the timer is stopped
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAutoJitterService.OnTimerStart">
            <summary>
            Occurs when the timer is started
            </summary>
        </member>
        <member name="T:Nevron.Chart.NChartCalculateService">
            <summary>
            Calculates charts.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartCalculateService.#ctor">
            <summary>
            Initializer contructor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NChartCalculateService.CalculateCharts">
            <summary>
            Calculates all charts
            </summary>
        </member>
        <member name="T:Nevron.Chart.NDocumentService">
            <summary>
            The base class for all chart services.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDocumentService.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Nevron.Chart.NDocumentServiceManager">
            <summary>
            Summary description for NDocumentServiceManager.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NDocumentServiceManager.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocumentServiceManager.RepaintService">
            <summary>
            Obtains the repaint service.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocumentServiceManager.AxisCursorSyncService">
            <summary>
            Obtains the axis cursor synchronization service.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocumentServiceManager.AxisSyncService">
            <summary>
            Obtains the axis cursor enforcer service.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocumentServiceManager.RangeSelectionSyncService">
            <summary>
            Obtains the axis cursor enforcer service.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocumentServiceManager.ChartCalculateService">
            <summary>
            Obtains the chart calculate service.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocumentServiceManager.LegendUpdateService">
            <summary>
            Obtains the legend update service.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocumentServiceManager.AutoJitterService">
            <summary>
            Obtains the auto jitter service
            </summary>
        </member>
        <member name="P:Nevron.Chart.NDocumentServiceManager.AnimationService">
            <summary>
            Gets the animation service
            </summary>
        </member>
        <member name="T:Nevron.Chart.NEventSinkService">
            <summary>
            Summary description for NChartEventSinkService.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NLegendUpdateService">
            <summary>
            Updates automatic legends.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendUpdateService.#ctor">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NLegendUpdateService.UpdateAutoLegends">
            <summary>
            Updates all legends in automatic mode.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NRepaintService">
            <summary>
            Provides smart repaint capability.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAxisCursorSyncService">
            <summary>
            Summary description for NAxisCursorSyncService.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NAxisSyncService">
            <summary>
            Synchronizes master / slave axes.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NAxisSyncService.AlignToMaster(Nevron.Chart.NChartRenderingContext,Nevron.Chart.NAxis,Nevron.Chart.NAxis)">
            <summary>
            Aligns this axis to the master axis.
            </summary>
            <param name="context"></param>
            <param name="slaveAxis"></param>
            <param name="masterAxis"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.NRangeSelectionSyncService">
            <summary>
            Summary description for NRangeSelectionSyncService.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NSlaveCollection">
            <summary>
            A collection of INSlave derived objects
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSlaveCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSlaveCollection.#ctor(System.Type)">
            <summary>
            Creates a new slave collection that can contain objects from the specified type.
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:Nevron.Chart.NSlaveCollection.ItemType">
            <summary>
            Obtains the type of objects which can be stored in the array
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSlaveCollection.Add(System.Object)">
            <summary>
            Adds the specified object to the collection.
            </summary>
            <param name="obj"></param>
            <remarks>
            The object must implement the INSlave interface
            </remarks>
        </member>
        <member name="M:Nevron.Chart.NSlaveCollection.Add(Nevron.Chart.INSlave)">
            <summary>
            Adds the specified INSlave object to the collection.
            </summary>
            <param name="slave"></param>
        </member>
        <member name="M:Nevron.Chart.NSlaveCollection.Insert(System.Int32,Nevron.Chart.INSlave)">
            <summary>
            Inserts the specified INSlave object to the collection at the specified index location.
            </summary>
            <param name="index"></param>
            <param name="slave"></param>
        </member>
        <member name="M:Nevron.Chart.NSlaveCollection.Clear">
            <summary>
            Removes all slaves from the collection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSlaveCollection.Contains(Nevron.Chart.INSlave)">
            <summary>
            Determines whether the specified slave is contained in this collection.
            </summary>
            <param name="slave"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NSlaveCollection.IndexOf(Nevron.Chart.INSlave)">
            <summary>
            Retrieves the index of a specified slave object in the collection.
            </summary>
            <param name="slave"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NSlaveCollection.Remove(Nevron.Chart.INSlave)">
            <summary>
            Removes the specified slave from the collection.
            </summary>
            <param name="slave"></param>
        </member>
        <member name="M:Nevron.Chart.NSlaveCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the slave at the specified index from the collection.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Chart.NSlaveCollection.ReplaceForeignUniqueId(System.Collections.Hashtable,System.Boolean)">
            <summary>
            Replaces any foreign unique ids (references to other nodes)
            </summary>
            <param name="mapUIds">map of uids which is used to find the new foreign uid value</param>
            <param name="makeNotFoundEmpty">indicates whether the not found foreign uids must be set to Guid.Empty</param>
        </member>
        <member name="P:Nevron.Chart.NSlaveCollection.Count">
            <summary>
            The number of elements contained in the Collection.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSlaveCollection.IsSynchronized">
            <summary>
            true if access to the ICollection is synchronized (thread-safe); otherwise, false.
            </summary>
        </member>
        <member name="P:Nevron.Chart.NSlaveCollection.SyncRoot">
            <summary>
            An object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSlaveCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the Collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Chart.NSlaveCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NSlaveCollection.Clone">
            <summary>
            Creates an identical copy of this object
            </summary>
            <remarks>
            The implementation will create a new instanse of the NReferenceHolderArrayList derived class.
            For this purpose all NReferenceHolderArrayList derivates must have a defualt public constructor.
            </remarks>
            <returns>
            The cloned collection
            </returns>
        </member>
        <member name="T:Nevron.Chart.NSyncService">
            <summary>
            Base synchronization service.
            </summary>
        </member>
        <member name="M:Nevron.Chart.NSyncService.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Chart.NTimerService">
            <summary>
            Represents the timer service
            </summary>
        </member>
        <member name="M:Nevron.Chart.NTimerService.IsObserverRegistered(Nevron.Chart.INTimerObserver)">
            <summary>
            Returns true if the specified observer is connected to a timer.
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.NTimerService.RegisterObserver(System.Int32,System.Boolean,Nevron.Chart.INTimerObserver)">
            <summary>
            Registers a timer with the specified tick interval
            </summary>
            <param name="timeInterval"></param>
            <param name="createNew"></param>
            <param name="observer"></param>
            <returns>Handle to the timer</returns>
        </member>
        <member name="M:Nevron.Chart.NTimerService.UnRegisterObserver(Nevron.Chart.INTimerObserver)">
            <summary>
            Unregisters the observer
            </summary>
            <param name="observer"></param>
        </member>
        <member name="M:Nevron.Chart.NTimerService.StopObserveTimer(Nevron.Chart.INTimerObserver)">
            <summary>
            Stops the timer with the specified handle
            </summary>
            <param name="observer"></param>
        </member>
        <member name="M:Nevron.Chart.NTimerService.StartObserveTimer(Nevron.Chart.INTimerObserver)">
            <summary>
            Starts the timer with the specified handle
            </summary>
            <param name="observer"></param>
        </member>
        <member name="T:Nevron.Chart.TriangleRasterizationMode">
            <summary>
            Enumerates the triangle rasterization modes used the grid surface binning
            </summary>
        </member>
        <member name="F:Nevron.Chart.TriangleRasterizationMode.Average">
            <summary>
            The all triangle values are summed and the average value of all triangles affecting the cell is taken
            </summary>
        </member>
        <member name="F:Nevron.Chart.TriangleRasterizationMode.TopMost">
            <summary>
            Only the top most triangle z value affects the cell value
            </summary>
        </member>
        <member name="F:Nevron.Chart.TriangleRasterizationMode.BottomMost">
            <summary>
            Only the bottom most triangle z value affects cell value
            </summary>
        </member>
        <member name="T:Nevron.Chart.VertexPrimitive">
            <summary>
            The vertex primitive
            </summary>
        </member>
        <member name="T:Nevron.Chart.TrendLineType">
            <summary>
            Enumerates the trendline types
            </summary>
        </member>
        <member name="F:Nevron.Chart.TrendLineType.Polynomial">
            <summary>
            Polynomial
            </summary>
        </member>
        <member name="F:Nevron.Chart.TrendLineType.Linear">
            <summary>
            Linear
            </summary>
        </member>
        <member name="F:Nevron.Chart.TrendLineType.Exponential">
            <summary>
            Exponential
            </summary>
        </member>
        <member name="F:Nevron.Chart.TrendLineType.Power">
            <summary>
            Power
            </summary>
        </member>
        <member name="F:Nevron.Chart.TrendLineType.Logarithmic">
            <summary>
            Logarithmic
            </summary>
        </member>
        <member name="T:Nevron.Chart.Fit2DAxisContentMode">
            <summary>
            Enumerates the fit 2D axis content modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.Fit2DAxisContentMode.Disabled">
            <summary>
            Axis content fitting is disabled
            </summary>
        </member>
        <member name="F:Nevron.Chart.Fit2DAxisContentMode.Auto">
            <summary>
            Axis content fitting is enabled and both the labels height and width are regarded. Width is regarded only when the axis is not zoomed
            </summary>
        </member>
        <member name="F:Nevron.Chart.Fit2DAxisContentMode.LabelsHeight">
            <summary>
            Axis content fitting is enabled however only the labels height is regarded.
            </summary>
        </member>
        <member name="F:Nevron.Chart.Fit2DAxisContentMode.LabelsWidthAndHeight">
            <summary>
            Axis content fitting is enabled and both the labels height and width are regarded.
            </summary>
        </member>
        <member name="T:Nevron.Chart.VectorSeriesMode">
            <summary>
            Enumerates the vector series modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.VectorSeriesMode.Vector">
            <summary>
            The vector is treated as a pair of coordinates that form the vector
            </summary>
        </member>
        <member name="F:Nevron.Chart.VectorSeriesMode.Direction">
            <summary>
            The vector is created by using the origin point at X/Y and drawing a vector in the direction of X2/Y2 with a size scaled from the MinVectorSize and MaxVectorSize properties
            </summary>
        </member>
        <member name="T:Nevron.Chart.BubbleSizeScaleMode">
            <summary>
            Enumerates the bubble scale modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.BubbleSizeScaleMode.ConcentricUp">
            <summary>
            Concentric up
            </summary>
        </member>
        <member name="F:Nevron.Chart.BubbleSizeScaleMode.ConcentricDown">
            <summary>
            Concentric down 
            </summary>
        </member>
        <member name="F:Nevron.Chart.BubbleSizeScaleMode.TableAscending">
            <summary>
            Table in ascending order
            </summary>
        </member>
        <member name="F:Nevron.Chart.BubbleSizeScaleMode.TableDescending">
            <summary>
            Table in descending order
            </summary>
        </member>
        <member name="T:Nevron.Chart.VectorLengthScaleMode">
            <summary>
            Enumerates the vector length scale modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.VectorLengthScaleMode.LeftToRight">
            <summary>
            Left to right ascending vector
            </summary>
        </member>
        <member name="F:Nevron.Chart.VectorLengthScaleMode.RightToLeft">
            <summary>
            Right to left ascending vector
            </summary>
        </member>
        <member name="F:Nevron.Chart.VectorLengthScaleMode.TopToBottom">
            <summary>
            Top to bottom ascending vector
            </summary>
        </member>
        <member name="F:Nevron.Chart.VectorLengthScaleMode.BottomToTop">
            <summary>
            Bottom to top ascending vector
            </summary>
        </member>
        <member name="T:Nevron.Chart.DropLineOriginMode">
            <summary>
            Enumerates the drop line origin modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.DropLineOriginMode.ScaleMin">
            <summary>
            Scale min 
            </summary>
        </member>
        <member name="F:Nevron.Chart.DropLineOriginMode.ScaleMax">
            <summary>
            Scale max
            </summary>
        </member>
        <member name="F:Nevron.Chart.DropLineOriginMode.CustomValue">
            <summary>
            Custom value
            </summary>
        </member>
        <member name="T:Nevron.Chart.HeatMapGridDisplayMode">
            <summary>
            Enumerates the heat map grid line style
            </summary>
        </member>
        <member name="F:Nevron.Chart.HeatMapGridDisplayMode.None">
            <summary>
            No grid is displayed
            </summary>
        </member>
        <member name="F:Nevron.Chart.HeatMapGridDisplayMode.Lines">
            <summary>
            Lines
            </summary>
        </member>
        <member name="F:Nevron.Chart.HeatMapGridDisplayMode.Dots">
            <summary>
            Dots
            </summary>
        </member>
        <member name="T:Nevron.Chart.PaletteColorMode">
            <summary>
            Enumerates the palette color modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.PaletteColorMode.Uniform">
            <summary>
            Colors is taken depending on the value and is applied to the whole object
            </summary>
        </member>
        <member name="F:Nevron.Chart.PaletteColorMode.Spread">
            <summary>
            The palette is spread on the object
            </summary>
        </member>
        <member name="T:Nevron.Chart.ContourPathMode">
            <summary>
            Enumerates the contour path modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.ContourPathMode.Line">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Nevron.Chart.ContourPathMode.Spline">
            <summary>
            Displays the connected contours
            </summary>
        </member>
        <member name="T:Nevron.Chart.ContourDisplayMode">
            <summary>
            Enumerates the contour display modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.ContourDisplayMode.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Nevron.Chart.ContourDisplayMode.Contour">
            <summary>
            Displays the connected contours
            </summary>
        </member>
        <member name="F:Nevron.Chart.ContourDisplayMode.Dots">
            <summary>
            Displays the contour points
            </summary>
        </member>
        <member name="T:Nevron.Chart.ContourColorMode">
            <summary>
            Enumerates the contour color modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.ContourColorMode.Uniform">
            <summary>
            The contours are displayed with uniform color
            </summary>
        </member>
        <member name="F:Nevron.Chart.ContourColorMode.Palette">
            <summary>
            The contours are displayed with color taken from the associated palette
            </summary>
        </member>
        <member name="T:Nevron.Chart.RowItemDisplayMode">
            <summary>
            Enumerates the table data item display modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.RowItemDisplayMode.Text">
            <summary>
            Display the data item as text only
            </summary>
        </member>
        <member name="F:Nevron.Chart.RowItemDisplayMode.LegendItem">
            <summary>
            Display the data item as a legend item
            </summary>
        </member>
        <member name="T:Nevron.Chart.AxisRangeMode">
            <summary>
            Enumerates how the axis range is computed
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisRangeMode.Content">
            <summary>
            The whole content of the series is included in the min/max calculation
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisRangeMode.ViewRange">
            <summary>
            Only the visible range of the series is included in the min/max calculation
            </summary>
        </member>
        <member name="T:Nevron.Chart.ChangePaletteMode">
            <summary>
            Enumerates the change palette mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChangePaletteMode.Absolute">
            <summary>
            The change is treated as an absolute value
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChangePaletteMode.Percentage">
            <summary>
            The change is mapped to the palette using its percentage value
            </summary>
        </member>
        <member name="T:Nevron.Chart.ChangeValueType">
            <summary>
            Enumerates the change palette mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChangeValueType.Absolute">
            <summary>
            The change is an absolute value
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChangeValueType.Percentage">
            <summary>
            The change is a percentage value
            </summary>
        </member>
        <member name="T:Nevron.Chart.PaletteLegendMode">
            <summary>
            Enumerates the palette legend modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.PaletteLegendMode.Table">
            <summary>
            The palette is visualized as a table where each row depicts a color and range
            </summary>
        </member>
        <member name="F:Nevron.Chart.PaletteLegendMode.GradientAxis">
            <summary>
            The palette is visualized as a gradient with attached axis
            </summary>
        </member>
        <member name="T:Nevron.Chart.TreeMapNodeLegendOrder">
            <summary>
            Enumerates the order in which tree map legend items are added
            </summary>
        </member>
        <member name="F:Nevron.Chart.TreeMapNodeLegendOrder.Append">
            <summary>
            Items are added after the existing legend items
            </summary>
        </member>
        <member name="F:Nevron.Chart.TreeMapNodeLegendOrder.Prepend">
            <summary>
            Items are added before the existing legend items
            </summary>
        </member>
        <member name="T:Nevron.Chart.TreeMapNodeLegendMode">
            <summary>
            Enumerates the tree map node legend modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.TreeMapNodeLegendMode.None">
            <summary>
            The node is not represented on the legend
            </summary>
        </member>
        <member name="F:Nevron.Chart.TreeMapNodeLegendMode.Group">
            <summary>
            The node is represented on the legend by one entry 
            </summary>
        </member>
        <member name="F:Nevron.Chart.TreeMapNodeLegendMode.ValueNodes">
            <summary>
            The group node adds its child nodes to the legend
            </summary>
        </member>
        <member name="F:Nevron.Chart.TreeMapNodeLegendMode.GroupAndChildNodes">
            <summary>
            Both group and value nodes are exported to the legend
            </summary>
        </member>
        <member name="F:Nevron.Chart.TreeMapNodeLegendMode.Palette">
            <summary>
            The group node adds a palette to the legend
            </summary>
        </member>
        <member name="T:Nevron.Chart.PaletteScaleStepMode">
            <summary>
            Enumerates the palette scale steps
            </summary>
        </member>
        <member name="F:Nevron.Chart.PaletteScaleStepMode.SyncrhonizedWithPalette">
            <summary>
            The step is synchronized with the palette legend entries
            </summary>
        </member>
        <member name="F:Nevron.Chart.PaletteScaleStepMode.SynchronizeWithScaleConfigurator">
            <summary>
            The step is synchronized with the scale configurator
            </summary>
        </member>
        <member name="T:Nevron.Chart.PaletteOrientation">
            <summary>
            Defines the ruler orientation
            </summary>
        </member>
        <member name="F:Nevron.Chart.PaletteOrientation.Horizontal">
            <summary>
            The palette is oriented horizontally
            </summary>
        </member>
        <member name="F:Nevron.Chart.PaletteOrientation.Vertical">
            <summary>
            The palette is orientated vertically
            </summary>
        </member>
        <member name="T:Nevron.Chart.PaletteScalePosition">
            <summary>
            Defines the palette scale position
            </summary>
        </member>
        <member name="F:Nevron.Chart.PaletteScalePosition.Left">
            <summary>
            The palette scale is on the left side of the palette
            </summary>
        </member>
        <member name="F:Nevron.Chart.PaletteScalePosition.Right">
            <summary>
            The palette scale is on the right side of the palette
            </summary>
        </member>
        <member name="T:Nevron.Chart.PaletteScaleMode">
            <summary>
            Specifies the palette step modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.PaletteScaleMode.Auto">
            <summary>
            Automatic palette scale mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.PaletteScaleMode.Custom">
            <summary>
            Custom palette scale mode
            </summary>
        </member>
        <member name="T:Nevron.Chart.PanelDockMode">
            <summary>
            Enumerates the panel dock modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.PanelDockMode.Bottom">
            <summary>
            The panels's bottom edge is docked to the bottom of its containing panel.
            </summary>
        </member>
        <member name="F:Nevron.Chart.PanelDockMode.Fill">
            <summary>
            All the panel's edges are docked to the all edges of its containing panel and sized appropriately.
            </summary>
        </member>
        <member name="F:Nevron.Chart.PanelDockMode.Left">
            <summary>
            The panel's left edge is docked to the left edge of its containing panel.
            </summary>
        </member>
        <member name="F:Nevron.Chart.PanelDockMode.None">
            <summary>
            The panel is not docked.
            </summary>
        </member>
        <member name="F:Nevron.Chart.PanelDockMode.Right">
            <summary>
            The panel's right edge is docked to the right edge of its containing panel.
            </summary>
        </member>
        <member name="F:Nevron.Chart.PanelDockMode.Top">
            <summary>
            The panel's top edge is docked to the top of its containing panel.
            </summary>
        </member>
        <member name="T:Nevron.Chart.IndexedStorageType">
            <summary>
            Enumerates how indexed series store information
            </summary>
        </member>
        <member name="F:Nevron.Chart.IndexedStorageType.Array">
            <summary>
            Data is stored in an array
            </summary>
        </member>
        <member name="F:Nevron.Chart.IndexedStorageType.Hash">
            <summary>
            Data is stored in a hash table
            </summary>
        </member>
        <member name="F:Nevron.Chart.IndexedStorageType.SortedArray">
            <summary>
            Data is stored in a sorted array
            </summary>
        </member>
        <member name="T:Nevron.Chart.VisibilityMode">
            <summary>
            Enumerates the possible visibility modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.VisibilityMode.Visible">
            <summary>
            The content panel is visible
            </summary>
        </member>
        <member name="F:Nevron.Chart.VisibilityMode.Hidden">
            <summary>
            The content panel is hidden, but still affects layout
            </summary>
        </member>
        <member name="F:Nevron.Chart.VisibilityMode.Collapse">
            <summary>
            The content panel is collapsed (hidden and does not affect layout)
            </summary>
        </member>
        <member name="T:Nevron.Chart.AnimationDurationType">
            <summary>
            The zoom animation duration type
            </summary>
        </member>
        <member name="F:Nevron.Chart.AnimationDurationType.MaxSteps">
            <summary>
            Zoom is constrained by max step count
            </summary>
        </member>
        <member name="F:Nevron.Chart.AnimationDurationType.MaxTime">
            <summary>
            Zoom is constrained by max time
            </summary>
        </member>
        <member name="T:Nevron.Chart.GaugeBackroundAdornerShape">
            <summary>
            Enumerates the gauge background adorner shapes
            </summary>
        </member>
        <member name="T:Nevron.Chart.GaugeBackroundAdornerPaintOrder">
            <summary>
            Enumerates the gauge background adorner paint order
            </summary>
        </member>
        <member name="F:Nevron.Chart.GaugeBackroundAdornerPaintOrder.BeforeScale">
            <summary>
            The background adorner is painted before the gauges scales
            </summary>
        </member>
        <member name="F:Nevron.Chart.GaugeBackroundAdornerPaintOrder.AfterScale">
            <summary>
            The background adorner is painted after the gauges scales
            </summary>
        </member>
        <member name="T:Nevron.Chart.AnimationThemeType">
            <summary>
            Enumerates the animation theme types
            </summary>
        </member>
        <member name="T:Nevron.Chart.CustomPaintSizeMode">
            <summary>
            Enumerates the custom paint size modes
            </summary>
        </member>
        <member name="T:Nevron.Chart.ScaleViewRangeInflateMode">
            <summary>
            Enumerates the scale view range inflate modes
            </summary>
        </member>
        <member name="T:Nevron.Chart.FirstRowGridStyle">
            <summary>
            Enumerates the first level label tick style modes of hierarchical scales
            </summary>
        </member>
        <member name="T:Nevron.Chart.GroupRowGridStyle">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.TimelineScaleRowTickMode">
            <summary>
            Enumerates the tick modes of the first scale row
            </summary>
        </member>
        <member name="F:Nevron.Chart.TimelineScaleRowTickMode.AutoMinDistance">
            <summary>
            The first scale row is operating in auto step mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.TimelineScaleRowTickMode.AutoMaxCount">
            <summary>
            The first scale row is operating in auto step mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.TimelineScaleRowTickMode.Custom">
            <summary>
            The first scale row is operating in custom step mode
            </summary>
        </member>
        <member name="T:Nevron.Chart.ScaleLabelVisibilityMode">
            <summary>
            Enumerates the range label visilibty modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleLabelVisibilityMode.Always">
            <summary>
            The label is always visible regardless of its position on the ruler
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleLabelVisibilityMode.CenterInRuler">
            <summary>
            The label is visible when its center is inside the ruler range
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleLabelVisibilityMode.TextInRuler">
            <summary>
            The label is visible when its text bounds are completely inside the ruler range
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleLabelVisibilityMode.TextIntersectsRuler">
            <summary>
            The label is visible when it intersects the ruler range
            </summary>
        </member>
        <member name="T:Nevron.Chart.RangeLabelFitMode">
            <summary>
            Enumerates the range label fit modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.RangeLabelFitMode.None">
            <summary>
            The label does not try to auto fit
            </summary>
        </member>
        <member name="F:Nevron.Chart.RangeLabelFitMode.Wrap">
            <summary>
            The label wraps in the specified range
            </summary>
        </member>
        <member name="F:Nevron.Chart.RangeLabelFitMode.Clip">
            <summary>
            The label is clipped in the specified range
            </summary>
        </member>
        <member name="F:Nevron.Chart.RangeLabelFitMode.AutoFlip">
            <summary>
            The label will automatically flip
            </summary>
        </member>
        <member name="F:Nevron.Chart.RangeLabelFitMode.AutoScale">
            <summary>
            The label will automatically scale
            </summary>
        </member>
        <member name="T:Nevron.Chart.RangeLabelTickVisibilityMode">
            <summary>
            Enumerates the range label tick visibility modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.RangeLabelTickVisibilityMode.Auto">
            <summary>
            Tick visibility is automatically determined
            </summary>
        </member>
        <member name="F:Nevron.Chart.RangeLabelTickVisibilityMode.Always">
            <summary>
            Ticks are always visible
            </summary>
        </member>
        <member name="T:Nevron.Chart.RangeLabelTickMode">
            <summary>
            Enumerates the possible range label tick modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.RangeLabelTickMode.None">
            <summary>
            The range label does not render ticks
            </summary>
        </member>
        <member name="F:Nevron.Chart.RangeLabelTickMode.Separators">
            <summary>
            The range label tick is visualized as two separators at the 
            begin and end of the range annotated by the label
            </summary>
        </member>
        <member name="F:Nevron.Chart.RangeLabelTickMode.BeginSeparator">
            <summary>
            The range label tick is visualized as a single separator
            annotating the begin value of the range
            </summary>
        </member>
        <member name="F:Nevron.Chart.RangeLabelTickMode.EndSeparator">
            <summary>
            The range label tick is visualized as a single separator
            annotating the begin value of the range
            </summary>
        </member>
        <member name="F:Nevron.Chart.RangeLabelTickMode.Top">
            <summary>
            The range label tick is attached to the top of the label
            </summary>
        </member>
        <member name="F:Nevron.Chart.RangeLabelTickMode.Center">
            <summary>
            The range label tick is attached to the center of the label
            </summary>
        </member>
        <member name="F:Nevron.Chart.RangeLabelTickMode.Bracket">
            <summary>
            The range label tick is visualized as two brackets enclosing
            the label
            </summary>
        </member>
        <member name="T:Nevron.Chart.ScaleBreakPattern">
            <summary>
            Enumerates the patterns for a scale break 
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleBreakPattern.Regular">
            <summary>
            Regular Pattern
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleBreakPattern.LongShort">
            <summary>
            Long Short pattern
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleBreakPattern.LeftPowerBrake">
            <summary>
            Left power break pattern
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleBreakPattern.RightPowerBrake">
            <summary>
            Right power break pattern
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleBreakPattern.CenterPowerBrake">
            <summary>
            Center power break pattern
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleBreakPattern.FreeHand">
            <summary>
            Free hand pattern
            </summary>
        </member>
        <member name="T:Nevron.Chart.ScaleBreakPositionMode">
            <summary>
            Enumerates the possible modes for positioning a scale break relative to the
            scale range it splits
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleBreakPositionMode.Range">
            <summary>
            The position of the scale break is determined solely by its range
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleBreakPositionMode.PositionPercent">
            <summary>
            The position of the scale break is determined by the position percent 
            of the break
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleBreakPositionMode.Data">
            <summary>
            The position of the scale break is determined by the amount of data
            falling on the left and right sides of the break
            </summary>
        </member>
        <member name="T:Nevron.Chart.ScaleLevelBuildMode">
            <summary>
            Defines how the scale configurator will build scale levels 
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleLevelBuildMode.Standard">
            <summary>
            Standard build mode - ticks, labels and ruler are in separate levels
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleLevelBuildMode.TicksAndRuler">
            <summary>
            Ticks and ruler share a common level, labels are in a seperate one
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleLevelBuildMode.LabelsAndRuler">
            <summary>
            All scale decorations share a single scale level
            </summary>
        </member>
        <member name="T:Nevron.Chart.PredefinedScaleStyle">
            <summary>
            Enumerates the predefined scale styles
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedScaleStyle.Standard">
            <summary>
            Standard - four types of ticks (inner major, outer major, inner minor, outer minor)
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedScaleStyle.Scientific">
            <summary>
            Scientific - two types of ticks outer major and outer minor
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedScaleStyle.Presentation">
            <summary>
            Presentation scale
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedScaleStyle.PresentationNoStroke">
            <summary>
            Presentation scale, with no stroke style applied on ruler and ticks
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedScaleStyle.Watch">
            <summary>
            Presentation scale
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedScaleStyle.Ruler">
            <summary>
            Presentation scale
            </summary>
        </member>
        <member name="T:Nevron.Chart.ScaleTickShape">
            <summary>
            Enumerates the tick shapes
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleTickShape.Line">
            <summary>
            Simple Line 
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleTickShape.Bar">
            <summary>
            regular bar
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleTickShape.Triangle">
            <summary>
            cone
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleTickShape.InvertedTriangle">
            <summary>
            inverted cone
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleTickShape.Ellipse">
            <summary>
            ellipse
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleTickShape.Cross">
            <summary>
            cross
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleTickShape.DiagonalCross">
            <summary>
            a diagonal cross 
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleTickShape.LineCross">
            <summary>
            a cross shape with no filling
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleTickShape.LineDiagonalCross">
            <summary>
            a diagonal cross shape with no filling
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleTickShape.Star">
            <summary>
            star
            </summary>
        </member>
        <member name="T:Nevron.Chart.TransformType">
            <summary>
            Enumerates the possible transformation types
            </summary>
        </member>
        <member name="F:Nevron.Chart.TransformType.Linear">
            <summary>
            Linear transformation
            </summary>
        </member>
        <member name="F:Nevron.Chart.TransformType.Logarithmic">
            <summary>
            Logarithmic transformation
            </summary>
        </member>
        <member name="T:Nevron.Chart.ScaleLabelAngleMode">
            <summary>
            Defines how axis labels are oriented depending on the scale they belong to
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleLabelAngleMode.View">
            <summary>
            The label angle is specified in view space
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleLabelAngleMode.Scale">
            <summary>
            The label angle is specified in scale space
            </summary>
        </member>
        <member name="T:Nevron.Chart.RulerType">
            <summary>
            Enumerates the possible ruler types
            </summary>
        </member>
        <member name="F:Nevron.Chart.RulerType.Axial">
            <summary>
            The ruler is axial (staight line)
            </summary>
        </member>
        <member name="F:Nevron.Chart.RulerType.Circular">
            <summary>
            The ruler is cirucular (whole or sector of a circle)
            </summary>
        </member>
        <member name="T:Nevron.Chart.RulerOrientation">
            <summary>
            Defines the ruler orientation
            </summary>
        </member>
        <member name="F:Nevron.Chart.RulerOrientation.Right">
            <summary>
            Ruler is right oriented. That is all decorations after the origin level are on its right side
            </summary>
        </member>
        <member name="F:Nevron.Chart.RulerOrientation.Left">
            <summary>
            Ruler is left oriented. That is all decorations after the origin level are on its left side
            </summary>
        </member>
        <member name="T:Nevron.Chart.LabelGenerationMode">
            <summary>
            Enumerates the possible label generation options
            </summary>
        </member>
        <member name="F:Nevron.Chart.LabelGenerationMode.SingleLevel">
            <summary>
            All labels are generated in one scale level
            </summary>
        </member>
        <member name="F:Nevron.Chart.LabelGenerationMode.Stagger2">
            <summary>
            Labels are generated in two scale levels, thus producing a two level staggering effect
            </summary>
        </member>
        <member name="F:Nevron.Chart.LabelGenerationMode.Stagger3">
            <summary>
            Labels are generated in three scale levels, thus producing a three level staggering effect
            </summary>
        </member>
        <member name="T:Nevron.Chart.ScaleRangeOrderType">
            <summary>
            Enumerates the types of a scale range order
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleRangeOrderType.View">
            <summary>
            The order of the range in the scale view
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleRangeOrderType.Logical">
            <summary>
            The order of the range relative to the range sampler origin
            </summary>
        </member>
        <member name="T:Nevron.Chart.LabelFitMode">
            <summary>
            Enumerates the possible label auto fitting options
            </summary>
        </member>
        <member name="F:Nevron.Chart.LabelFitMode.Rotate30">
            <summary>
            Labels in the same level are rotated at 30 degrees
            </summary>
        </member>
        <member name="F:Nevron.Chart.LabelFitMode.Rotate45">
            <summary>
            Labels in the same level are rotated at 45 degrees
            </summary>
        </member>
        <member name="F:Nevron.Chart.LabelFitMode.Rotate90">
            <summary>
            Labels in the same level are rotated at 90 degrees
            </summary>
        </member>
        <member name="F:Nevron.Chart.LabelFitMode.Rotate315">
            <summary>
            Labels in the same level are rotated at 315
            </summary>
        </member>
        <member name="F:Nevron.Chart.LabelFitMode.Rotate330">
            <summary>
            Labels in the same level are rotated at 330
            </summary>
        </member>
        <member name="F:Nevron.Chart.LabelFitMode.Stagger2">
            <summary>
            Labels in the same level are staggered at two levels
            </summary>
        </member>
        <member name="F:Nevron.Chart.LabelFitMode.Stagger3">
            <summary>
            Labels in the same level are staggered at three levels
            </summary>
        </member>
        <member name="F:Nevron.Chart.LabelFitMode.RemoveOverlap">
            <summary>
            Removes labels that overlap with other labels with higher Z order
            </summary>
        </member>
        <member name="F:Nevron.Chart.LabelFitMode.AutoScale">
            <summary>
            Labels in the same level are scaled so that no overlapping occurs
            </summary>
        </member>
        <member name="T:Nevron.Chart.MajorTickMode">
            <summary>
            Defines the possible step modes of the numeric axis scale.
            </summary>
        </member>
        <member name="F:Nevron.Chart.MajorTickMode.AutoMinDistance">
            <summary>
            The scale will automatically generate steps depending on the setting provided by the MinTickDistance property
            </summary>
        </member>
        <member name="F:Nevron.Chart.MajorTickMode.AutoMaxCount">
            <summary>
            The scale will automatically generate steps depending on the setting of the MaxTickCount property
            </summary>
        </member>
        <member name="F:Nevron.Chart.MajorTickMode.CustomTicks">
            <summary>
            In this mode the user specifies the values which must be represented with major ticks
            </summary>
        </member>
        <member name="F:Nevron.Chart.MajorTickMode.CustomStep">
            <summary>
            The user specifies a custom step which is used in the major tick generation
            </summary>
        </member>
        <member name="F:Nevron.Chart.MajorTickMode.CustomSteps">
            <summary>
            The user specifies a custom steps which are used in the major tick generation
            </summary>
        </member>
        <member name="F:Nevron.Chart.MajorTickMode.CustomStepProvider">
            <summary>
            The user specifies a custom steps provider which can be used to provide dynamic step
            </summary>
        </member>
        <member name="T:Nevron.Chart.SamplingMode">
            <summary>
            Defines the possible range sampling modes.
            </summary>
        </member>
        <member name="F:Nevron.Chart.SamplingMode.MinDistance">
            <summary>
            The sampler automatically generates the step so that it does not exceed 
            a specified density in device units
            </summary>
        </member>
        <member name="F:Nevron.Chart.SamplingMode.MaxCount">
            <summary>
            The sampler automatically generates a step so that it does not exceed
            a specified maximum number of ranges.
            </summary>
        </member>
        <member name="F:Nevron.Chart.SamplingMode.CustomRanges">
            <summary>
            The sampler uses the provided ranges to sample a given range
            </summary>
        </member>
        <member name="F:Nevron.Chart.SamplingMode.CustomStep">
            <summary>
            The user specifies a custom step which is used to sample a given range
            </summary>
        </member>
        <member name="F:Nevron.Chart.SamplingMode.CustomSteps">
            <summary>
            The user specifies a set of custom steps which are used to sample a given range
            </summary>
        </member>
        <member name="T:Nevron.Chart.AxisCurrentPageMode">
            <summary>
            Defines the current page modes supported by the axis rulers.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisCurrentPageMode.Index">
            <summary>
            the currently displayed page is determined by the CurrentPageIndex property of 
            the NScaleRuler class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisCurrentPageMode.BeginValue">
            <summary>
            the currently displayed page begins from a user specified value - controlled by 
            the CurrentPageBeginValue property of the NScaleRuler class.
            </summary>
        </member>
        <member name="T:Nevron.Chart.AxisViewMode">
            <summary>
            Defines the mode of the axis view.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisViewMode.None">
            <summary>
            the axis does not use paging.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisViewMode.FixedPageCount">
            <summary>
            the axis has a fixed number of pages. The page size is variable.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisViewMode.FixedPageSize">
            <summary>
            the axis has a fixed page size. The page count is variable.
            </summary>
        </member>
        <member name="T:Nevron.Chart.ScaleDecorationStyle">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.WeekDayBit">
            <summary>
            Enumerates the week days
            </summary>
        </member>
        <member name="F:Nevron.Chart.WeekDayBit.None">
            <summary>
            No week day
            </summary>
        </member>
        <member name="F:Nevron.Chart.WeekDayBit.Monday">
            <summary>
            The day Monday.  
            </summary>
        </member>
        <member name="F:Nevron.Chart.WeekDayBit.Tuesday">
            <summary>
            The day Tuesday.  
            </summary>
        </member>
        <member name="F:Nevron.Chart.WeekDayBit.Wednesday">
            <summary>
            The day Wednesday.  
            </summary>
        </member>
        <member name="F:Nevron.Chart.WeekDayBit.Thursday">
            <summary>
            The day Thursday
            </summary>
        </member>
        <member name="F:Nevron.Chart.WeekDayBit.Friday">
            <summary>
            The day Friday.  
            </summary>
        </member>
        <member name="F:Nevron.Chart.WeekDayBit.Saturday">
            <summary>
            The day Saturday
            </summary>
        </member>
        <member name="F:Nevron.Chart.WeekDayBit.Sunday">
            <summary>
            The day Sunday
            </summary>
        </member>
        <member name="F:Nevron.Chart.WeekDayBit.All">
            <summary>
            All days
            </summary>
        </member>
        <member name="T:Nevron.Chart.MonthBit">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.MonthBit.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.MonthBit.January">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.MonthBit.February">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.MonthBit.March">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.MonthBit.April">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.MonthBit.May">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.MonthBit.June">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.MonthBit.July">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.MonthBit.August">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.MonthBit.September">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.MonthBit.October">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.MonthBit.November">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.MonthBit.December">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.MonthBit.All">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.ActiveStateIndicatorMode">
            <summary>
            Enumerates the modes in which the state indicator can operate
            </summary>
        </member>
        <member name="F:Nevron.Chart.ActiveStateIndicatorMode.AllActive">
            <summary>
            All active states are added to the indicator
            </summary>
        </member>
        <member name="F:Nevron.Chart.ActiveStateIndicatorMode.LastActive">
            <summary>
            Only the last active state is added
            </summary>
        </member>
        <member name="F:Nevron.Chart.ActiveStateIndicatorMode.FirstActive">
            <summary>
            Only the first active state is added
            </summary>
        </member>
        <member name="T:Nevron.Chart.StateIndicatorShapeSizeMode">
            <summary>
            Enumerates the state indicator shape size mode relevant to the text
            </summary>
        </member>
        <member name="F:Nevron.Chart.StateIndicatorShapeSizeMode.SameAsText">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.StateIndicatorShapeSizeMode.Custom">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.StateIndicatorOrientation">
            <summary>
            Enumerates the state indicator orientations
            </summary>
        </member>
        <member name="F:Nevron.Chart.StateIndicatorOrientation.Horizontal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.StateIndicatorOrientation.Vertical">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.CircularRimPattern">
            <summary>
            Enumerates the knob rim patterns
            </summary>
        </member>
        <member name="F:Nevron.Chart.CircularRimPattern.Circle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.CircularRimPattern.RoundHandle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.CircularRimPattern.RoundHandleSmall">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.CircularRimPattern.EdgeHandle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.CircularRimPattern.EdgeHandleSmall">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.CircularRimPattern.Bolt">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.RadialGaugeAutoBorder">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Chart.RadialGaugeAutoBorder.Circle">
            <summary>
            The border of the radial gauge is always circle
            </summary>
        </member>
        <member name="F:Nevron.Chart.RadialGaugeAutoBorder.CutCircle">
            <summary>
            The border of the radial gauge is a circle cut from begin angle to end angle
            </summary>
            <remarks>
            end angle is computed as begin angle + sweep angle
            </remarks>
        </member>
        <member name="F:Nevron.Chart.RadialGaugeAutoBorder.RoundedOutline">
            <summary>
            The gauge border follows the outline of the radial gauge, with specified rounding
            </summary>
        </member>
        <member name="T:Nevron.Chart.IndicatorPaintOrder">
            <summary>
            Enumerates the gauge indicators paint order
            </summary>
        </member>
        <member name="F:Nevron.Chart.IndicatorPaintOrder.BeforeScale">
            <summary>
            The indicator is painted before the scale it is attached to
            </summary>
        </member>
        <member name="F:Nevron.Chart.IndicatorPaintOrder.AfterScale">
            <summary>
            The indicator is painted after the scale it is attached to
            </summary>
        </member>
        <member name="F:Nevron.Chart.IndicatorPaintOrder.AfterChildPanels">
            <summary>
            The indicator is painted after all child panels of the gauge 
            </summary>
        </member>
        <member name="T:Nevron.Chart.IndicatorDragMode">
            <summary>
            Enumerates the indicator drag modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.IndicatorDragMode.None">
            <summary>
            The indicator cannot be dragged
            </summary>
        </member>
        <member name="F:Nevron.Chart.IndicatorDragMode.Move">
            <summary>
            Indicates that the indicator will show the transformed mouse position exactly
            </summary>
        </member>
        <member name="F:Nevron.Chart.IndicatorDragMode.Slide">
            <summary>
            Inidcates that the indicator will slide with the offset generated from the transformed mouse position
            </summary>
        </member>
        <member name="T:Nevron.Chart.ClockDisplayMode">
            <summary>
            Enumerates the clock display modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.ClockDisplayMode.SecondMillisecond">
            <summary>
            The clock displays seconds and milliseconds
            </summary>
        </member>
        <member name="F:Nevron.Chart.ClockDisplayMode.MinuteSecond">
            <summary>
            The clock displays minutes and seconds
            </summary>
        </member>
        <member name="F:Nevron.Chart.ClockDisplayMode.HourMinute">
            <summary>
            The clock displays hours and minutes
            </summary>
        </member>
        <member name="F:Nevron.Chart.ClockDisplayMode.HourMinuteSecond">
            <summary>
            The clock displays hours, minutes and seconds
            </summary>
        </member>
        <member name="T:Nevron.Chart.ClockTimeMode">
            <summary>
            Enumerates the clock time modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.ClockTimeMode.Static">
            <summary>
            In this mode the clock displays static time specified by the user
            </summary>
        </member>
        <member name="F:Nevron.Chart.ClockTimeMode.LocalTime">
            <summary>
            In this mode the clock displays local time
            </summary>
        </member>
        <member name="F:Nevron.Chart.ClockTimeMode.UTC">
            <summary>
            In this mode the clock display the UTC (adjusted with some time zone)
            </summary>
        </member>
        <member name="F:Nevron.Chart.ClockTimeMode.Timer">
            <summary>
            In this mode the clock displays the value of the TimeSpan property
            </summary>
        </member>
        <member name="T:Nevron.Chart.GaugeAxisDockZone">
            <summary>
            Defines the possible gauge axis dock zones
            </summary>
        </member>
        <member name="T:Nevron.Chart.StackDirection">
            <summary>
            Defines the direction of the stack
            </summary>
        </member>
        <member name="T:Nevron.Chart.OriginMode">
            <summary>
            Defines the orgin modes for a range indicator
            </summary>
        </member>
        <member name="T:Nevron.Chart.SevenSegmentCellStyle">
            <summary>
            Enumerates the segment cell styles for a 7 segment cell display
            </summary>
        </member>
        <member name="F:Nevron.Chart.SevenSegmentCellStyle.Normal">
            <summary>
            Normal style
            </summary>
        </member>
        <member name="F:Nevron.Chart.SevenSegmentCellStyle.Rounded">
            <summary>
            Cell segments appear rounded
            </summary>
        </member>
        <member name="F:Nevron.Chart.SevenSegmentCellStyle.Rectangular">
            <summary>
            Cell segments appear rectangular
            </summary>
        </member>
        <member name="T:Nevron.Chart.FourteenSegmentCellStyle">
            <summary>
            Enumerates the segment cell styles for a 14 segment cell display
            </summary>
        </member>
        <member name="F:Nevron.Chart.FourteenSegmentCellStyle.Normal">
            <summary>
            Normal style
            </summary>
        </member>
        <member name="F:Nevron.Chart.FourteenSegmentCellStyle.Rectangular">
            <summary>
            Rectangular style
            </summary>
        </member>
        <member name="F:Nevron.Chart.FourteenSegmentCellStyle.Inset">
            <summary>
            Inset style
            </summary>
        </member>
        <member name="T:Nevron.Chart.MatrixCellStyle">
            <summary>
            Enumerates the styles of a matrix display cell
            </summary>
        </member>
        <member name="F:Nevron.Chart.MatrixCellStyle.Rectangle">
            <summary>
            Rectangular cell style
            </summary>
        </member>
        <member name="F:Nevron.Chart.MatrixCellStyle.Circle">
            <summary>
            Circle cell style
            </summary>
        </member>
        <member name="T:Nevron.Chart.DisplayStyle">
            <summary>
            Enumerates the display styles
            </summary>
        </member>
        <member name="F:Nevron.Chart.DisplayStyle.SevenSegmentNormal">
            <summary>
            Seven segment normal style
            </summary>
        </member>
        <member name="F:Nevron.Chart.DisplayStyle.SevenSegmentRounded">
            <summary>
            Cell segments appear rounded
            </summary>
        </member>
        <member name="F:Nevron.Chart.DisplayStyle.SevenSegmentRectangular">
            <summary>
            Cell segments appear rectangular
            </summary>
        </member>
        <member name="F:Nevron.Chart.DisplayStyle.FourteenSegmentNormal">
            <summary>
            Normal style
            </summary>
        </member>
        <member name="F:Nevron.Chart.DisplayStyle.FourteenSegmentRectangular">
            <summary>
            Rectangular style
            </summary>
        </member>
        <member name="F:Nevron.Chart.DisplayStyle.FourteenSegmentInset">
            <summary>
            Inset style
            </summary>
        </member>
        <member name="F:Nevron.Chart.DisplayStyle.MatrixRectangle">
            <summary>
            Matrix rectangular style
            </summary>
        </member>
        <member name="F:Nevron.Chart.DisplayStyle.MatrixCircle">
            <summary>
            Matrix circular style
            </summary>
        </member>
        <member name="T:Nevron.Chart.DotCellStyle">
            <summary>
            Enumerates the styles of a dot segment cell
            </summary>
        </member>
        <member name="F:Nevron.Chart.DotCellStyle.Rectangle">
            <summary>
            Rectangular dot cell style
            </summary>
        </member>
        <member name="F:Nevron.Chart.DotCellStyle.Circle">
            <summary>
            Circle dot cell style
            </summary>
        </member>
        <member name="T:Nevron.Chart.DisplayCellCountMode">
            <summary>
            Enumerates the display cell count mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.DisplayCellCountMode.Auto">
            <summary>
            The display will create as many cells as necessary to display the passed string
            </summary>
        </member>
        <member name="F:Nevron.Chart.DisplayCellCountMode.Fixed">
            <summary>
            The display will create a fixed number of cells
            </summary>
        </member>
        <member name="T:Nevron.Chart.DisplayDirection">
            <summary>
            Enumerates the display directions
            </summary>
        </member>
        <member name="F:Nevron.Chart.DisplayDirection.LeftToRight">
            <summary>
            The display will create cells from left to right
            </summary>
        </member>
        <member name="F:Nevron.Chart.DisplayDirection.RightToLeft">
            <summary>
            The display will create cells from right to left
            </summary>
        </member>
        <member name="T:Nevron.Chart.DisplaySignMode">
            <summary>
            Enumerates the show sign modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.DisplaySignMode.Never">
            <summary>
            The numeric indicator does not show sign extension
            </summary>
        </member>
        <member name="F:Nevron.Chart.DisplaySignMode.Always">
            <summary>
            The numeric indicator always shows sign extension
            </summary>
        </member>
        <member name="F:Nevron.Chart.DisplaySignMode.Negative">
            <summary>
            The numeric indicators shows a sign extension only 
            when the displayed value is negative
            </summary>
        </member>
        <member name="T:Nevron.Chart.LinearGaugeOrientation">
            <summary>
            Enumerates the linear gauge orientations
            </summary>
        </member>
        <member name="F:Nevron.Chart.LinearGaugeOrientation.Horizontal">
            <summary>
            The linear gauge is horizontal
            </summary>
        </member>
        <member name="F:Nevron.Chart.LinearGaugeOrientation.Vertical">
            <summary>
             The linear gauge is vertical
            </summary>
        </member>
        <member name="T:Nevron.Chart.KnobMarkerPaintOrder">
            <summary>
            Enumerates the knob marker paint orders
            </summary>
        </member>
        <member name="F:Nevron.Chart.KnobMarkerPaintOrder.BeforeRims">
            <summary>
            Marker is painted before rims
            </summary>
        </member>
        <member name="F:Nevron.Chart.KnobMarkerPaintOrder.BetweenRims">
            <summary>
            Marker is painted between the outer and inner rims
            </summary>
        </member>
        <member name="F:Nevron.Chart.KnobMarkerPaintOrder.AfterRims">
            <summary>
            Marker is painted after rims
            </summary>
        </member>
        <member name="T:Nevron.Chart.IndicatorOffsetOriginMode">
            <summary>
            Enumerates the offset orgins of indicators (marker, needle, range and knob)
            </summary>
        </member>
        <member name="T:Nevron.Chart.BarWidthMode">
            <summary>
            Enumerates the bar width modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.BarWidthMode.Absolute">
            <summary>
            The bar width is specified through the BarWidth property in NLength format
            </summary>
        </member>
        <member name="F:Nevron.Chart.BarWidthMode.Logical">
            <summary>
            The bar width is specified through the LogicalBarWidth property in logical units
            </summary>
        </member>
        <member name="T:Nevron.Chart.BarDepthMode">
            <summary>
            Enumerates the bar width modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.BarDepthMode.Absolute">
            <summary>
            The bar width is specified through the BarDepth property in NLength format
            </summary>
        </member>
        <member name="F:Nevron.Chart.BarDepthMode.Logical">
            <summary>
            The bar width is specified through the LogicalBarDepth property in logical units
            </summary>
        </member>
        <member name="T:Nevron.Chart.CalloutPositionMode">
            <summary>
            Enumerates the callout position modes
            </summary>
        </member>
        <member name="T:Nevron.Chart.ClusterMode">
            <summary>
            Enumerates the point series clustering modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.ClusterMode.Auto">
            <summary>
            Automatic clustering
            </summary>
        </member>
        <member name="F:Nevron.Chart.ClusterMode.Enabled">
            <summary>
            Clustering is enabled
            </summary>
        </member>
        <member name="F:Nevron.Chart.ClusterMode.Disabled">
            <summary>
            Clustering is disables
            </summary>
        </member>
        <member name="T:Nevron.Chart.StockGroupingMode">
            <summary>
            Enumerates the stock grouping modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.StockGroupingMode.None">
            <summary>
            No grouping is performed
            </summary>
        </member>
        <member name="F:Nevron.Chart.StockGroupingMode.AutoDateTimeSpan">
            <summary>
            The grouping is performed using an automatically generated time span
            </summary>
        </member>
        <member name="F:Nevron.Chart.StockGroupingMode.CustomDateTimeSpan">
            <summary>
            The grouping is performed using a custom specified time span
            </summary>
        </member>
        <member name="F:Nevron.Chart.StockGroupingMode.SynchronizeWithMajorTick">
            <summary>
            The grouping is performed using a time spans synchronized with the x axis major ticks
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesSamplingMode.Auto">
            <summary>
            Automatic sampling
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesSamplingMode.Enabled">
            <summary>
            Sampling is always enabled
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesSamplingMode.Disabled">
            <summary>
            Sampling is disabled
            </summary>
        </member>
        <member name="T:Nevron.Chart.SeriesFilterType">
            <summary>
            Enumerates the type of series filter
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesFilterType.Distance">
            <summary>
            Filtering based on distance
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesFilterType.Slope">
            <summary>
            Filtering based on slope
            </summary>
        </member>
        <member name="T:Nevron.Chart.TitleFitMode">
            <summary>
            Enumerates the label fit modes when bounds mode is set to Fit
            </summary>
        </member>
        <member name="T:Nevron.Chart.RadarTitleFitMode">
            <summary>
            Enumerates the radar title fit modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.RadarTitleFitMode.None">
            <summary>
            No fitting
            </summary>
        </member>
        <member name="F:Nevron.Chart.RadarTitleFitMode.Wrap">
            <summary>
            Title is wrapped
            </summary>
        </member>
        <member name="T:Nevron.Chart.TextFitMode">
            <summary>
            Enumerates the data label fit modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.TextFitMode.None">
            <summary>
            No fitting
            </summary>
        </member>
        <member name="F:Nevron.Chart.TextFitMode.Wrap">
            <summary>
            Text is wrapped
            </summary>
        </member>
        <member name="T:Nevron.Chart.DataLabelFitMode">
            <summary>
            Enumerates the data label fit modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataLabelFitMode.None">
            <summary>
            No fitting
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataLabelFitMode.Wrap">
            <summary>
            Data label is wrapped
            </summary>
        </member>
        <member name="T:Nevron.Chart.LegendTextFitMode">
            <summary>
            Enumerates the legend label fit modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendTextFitMode.None">
            <summary>
            No fitting
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendTextFitMode.Wrap">
            <summary>
            Legend label is wrapped
            </summary>
        </member>
        <member name="T:Nevron.Chart.RadarTitlePositionMode">
            <summary>
            Enumerates the radar title position modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.RadarTitlePositionMode.Center">
            <summary>
            Title is positioned so that its center point lies on the radar axis
            </summary>
        </member>
        <member name="F:Nevron.Chart.RadarTitlePositionMode.NearestPoint">
            <summary>
            Title is positioned so that the nearest point of the title lies on the radar axis
            </summary>
        </member>
        <member name="T:Nevron.Chart.ExtendRangeMode">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.JitterMode">
            <summary>
            Enumerates the possible jitter modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.JitterMode.Disabled">
            <summary>
            Jittering is disabled
            </summary>
        </member>
        <member name="F:Nevron.Chart.JitterMode.Enabled">
            <summary>
            Jittering is enabled
            </summary>
        </member>
        <member name="F:Nevron.Chart.JitterMode.Auto">
            <summary>
            Jittering is automatically enabled if the user does not refresh the chart
            </summary>
        </member>
        <member name="T:Nevron.Chart.MultiThreadMode">
            <summary>
            Enumerates the multi threaded modes of the control
            </summary>
        </member>
        <member name="F:Nevron.Chart.MultiThreadMode.Disabled">
            <summary>
            All calculations are perfomed in a single thread
            </summary>
        </member>
        <member name="F:Nevron.Chart.MultiThreadMode.Enabled">
            <summary>
            Where supported the control will use threaded calculation
            </summary>
        </member>
        <member name="F:Nevron.Chart.MultiThreadMode.Auto">
            <summary>
            Results in threaded calculation only on multi CPU/Core machines.
            </summary>
        </member>
        <member name="T:Nevron.Chart.ChartPaintOrder">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.AxisClipMode">
            <summary>
            Enumerates the axis clipping modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisClipMode.Auto">
            <summary>
            Clipping is automatically enabled depending on the current view and paging
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisClipMode.Always">
            <summary>
            Clipping is always enabled
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisClipMode.Never">
            <summary>
            Clipping is never enabled
            </summary>
        </member>
        <member name="T:Nevron.Chart.PagingViewResetMode">
            <summary>
            Enumerates the paging view reset modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.PagingViewResetMode.LastZoom">
            <summary>
            In this mode the view will reset the axis to the last valid zoom in state
            </summary>
        </member>
        <member name="F:Nevron.Chart.PagingViewResetMode.View">
            <summary>
            In this mode the view will reset the axis to it initial (default) range
            </summary>
        </member>
        <member name="T:Nevron.Chart.GuidelineOrientation">
            <summary>
            Enumerates the guide orientations
            </summary>
        </member>
        <member name="F:Nevron.Chart.GuidelineOrientation.Horizontal">
            <summary>
            The guideline is horizontal
            </summary>
        </member>
        <member name="F:Nevron.Chart.GuidelineOrientation.Vertical">
            <summary>
            The guideline is vertical
            </summary>
        </member>
        <member name="T:Nevron.Chart.PanelSide">
            <summary>
            Enumerates the panels sides
            </summary>
        </member>
        <member name="T:Nevron.Chart.AlignMode">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.Side">
            <summary>
            Enumerates the sides
            </summary>
        </member>
        <member name="F:Nevron.Chart.Side.Left">
            <summary>
            Left side
            </summary>
        </member>
        <member name="F:Nevron.Chart.Side.Right">
            <summary>
            Right side
            </summary>
        </member>
        <member name="T:Nevron.Chart.GridLineMode">
            <summary>
            Enumerates the possible modes the for the axis grid lines 
            </summary>
        </member>
        <member name="F:Nevron.Chart.GridLineMode.Disabled">
            <summary>
            No grid lines are showed
            </summary>
        </member>
        <member name="F:Nevron.Chart.GridLineMode.Auto">
            <summary>
            The grid lines are synchronized with the ticks
            </summary>
        </member>
        <member name="T:Nevron.Chart.DataPointValue">
            <summary>
            Defines the possible values, which can be assosiated with a datapoint
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.FillStyle">
            <summary>
            Fill style
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.StrokeStyle">
            <summary>
            Stroke style
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.MarkerStyle">
            <summary>
            Marker style
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.DataLabelStyle">
            <summary>
            Data label style
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.InteractivityStyle">
            <summary>
            Interactivity style
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.AnimationsStyle">
            <summary>
            Animations style
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.Tag">
            <summary>
            Tag
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.Y">
            <summary>
            Y (elevation) value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.X">
            <summary>
            X value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.Z">
            <summary>
            Z (depth) value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.Y2">
            <summary>
            Secondary Y value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.X2">
            <summary>
            Secondary X value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.Z2">
            <summary>
            Secondary Z value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.StockOpen">
            <summary>
            Stock open value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.StockClose">
            <summary>
            Stock close value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.SizeX">
            <summary>
            X size value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.SizeY">
            <summary>
            Y size value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.SizeZ">
            <summary>
            Z size value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.PieDetachment">
            <summary>
            Pie detachment value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.Angle">
            <summary>
            Angle value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.BubbleSize">
            <summary>
            Bubble size value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.Label">
            <summary>
            Label
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.LowerErrorX">
            <summary>
            Lower X error
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.LowerErrorY">
            <summary>
            Lower Y error
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.LowerErrorZ">
            <summary>
            Lower Z error
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.UpperErrorX">
            <summary>
            Upper X error
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.UpperErrorY">
            <summary>
            Upper Y error
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.UpperErrorZ">
            <summary>
            Upper Z error
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.Median">
            <summary>
            Median value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.Average">
            <summary>
            Average value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.OutlierValues">
            <summary>
            Array of outlier values
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.Color">
            <summary>
            Color value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.TreemapChange">
            <summary>
            Tree map change value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.NextTasks">
            <summary>
            Gannt chart next task
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.PieBeginWidthPercents">
            <summary>
            Pie begin width percent
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.PieEndWidthPercents">
            <summary>
            Pie end width percent
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.Value">
            <summary>
            Primary value - same as Y value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.Radius">
            <summary>
            Radius value - same as Y value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.SecondaryY">
            <summary>
            Secondary Y (elevation) value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.Begin">
            <summary>
            Begin value - same as Y value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.End">
            <summary>
            End value - same as Y2 value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.High">
            <summary>
            High value - same as Y value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.Low">
            <summary>
            Low value - same as Y2 value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.StockHigh">
            <summary>
            Stock High value - same as Y value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.StockLow">
            <summary>
            Stock Low value - same as Y2 value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.UpperBoxValue">
            <summary>
            Box and Whiskers upper box value - same as Y value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.LowerBoxValue">
            <summary>
            Box and Whiskers lower box value - same as Y2 value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.UpperWhiskerValue">
            <summary>
            Box and Whiskers upper whisker value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.LowerWhiskerValue">
            <summary>
            Box and Whiskers lower whisker value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.AValue">
            <summary>
            Ternary chart a value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.BValue">
            <summary>
            Ternary chart b value
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataPointValue.CValue">
            <summary>
            Ternary chart c value
            </summary>
        </member>
        <member name="T:Nevron.Chart.DataSeriesMask">
            <summary>
            A bitmask enumeration used in the included and exluded arguments of 
            the GetDataSeries method. The order of the included series cannot be 
            changed, it is determined by the respective GetDataSeries override.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.FillStyles">
            <summary>
            Represents the FillStyles data series of the NSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.StrokeStyles">
            <summary>
            Represents the BorderStyles data series of the NSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.MarkerStyles">
            <summary>
            Represents the MarkerStyles data series of the NSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.DataLabelStyles">
            <summary>
            Represents the DataLabelStyles data series of the NSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.InteractivityStyles">
            <summary>
            Represents the InteractivityStyles data series of the NSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.Tags">
            <summary>
            Represents the Tags data series of the NSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.YValues">
            <summary>
            Represents the Values data series of the NSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.XValues">
            <summary>
            Represents the XValues data series of the NXYScatterSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.ZValues">
            <summary>
            Represents the ZValues data series of the NXYZScatterSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.Y2Values">
            <summary>
            Represents the Y2Values data series of the NRangeSeriesBase class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.X2Values">
            <summary>
            Represents the X2Values data series of the NRangeSeriesBase class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.Z2Values">
            <summary>
            Represents the Z2Values data series of the NRangeSeriesBase class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.StockOpenValues">
            <summary>
            Represents the OpenValues data series of the NStockSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.StockCloseValues">
            <summary>
            Represents the CloseValues data series of the NStockSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.XSizes">
            <summary>
            Represents the XSizes data series of the NShapeSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.YSizes">
            <summary>
            Represents the YSizes data series of the NShapeSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.ZSizes">
            <summary>
            Represents the ZSizes data series of the NShapeSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.PieDetachments">
            <summary>
            Represents the Detachments data series of the NPieSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.Angles">
            <summary>
            Represents the Angles data series of the NPolarSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.BubbleSizes">
            <summary>
            Represents the Sizes data series of the NBubbleSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.Labels">
            <summary>
            Represents the Labels data series of the NSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.LowerErrorsX">
            <summary>
            Represents the LowerErrorsX data series of the NErrorBarSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.LowerErrorsY">
            <summary>
            Represents the LowerErrorsY data series of the NErrorBarSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.LowerErrorsZ">
            <summary>
            Represents the LowerErrorsZ data series of the NErrorBarSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.UpperErrorsX">
            <summary>
            Represents the UpperErrorsX data series of the NErrorBarSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.UpperErrorsY">
            <summary>
            Represents the UpperErrorsY data series of the NErrorBarSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.UpperErrorsZ">
            <summary>
            Represents the UpperErrorsZ data series of the NErrorBarSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.MedianValues">
            <summary>
            Represents the MedianValues data series of the NBoxAndWhiskersSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.AverageValues">
            <summary>
            Represents the AverageValues data series of the NBoxAndWhiskersSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.OutlierValues">
            <summary>
            Represents the OutlierValues data series of the NBoxAndWhiskersSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.Colors">
            <summary>
            Represents the Colors data series of the NTriangulatedSurfaceSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.TreemapChanges">
            <summary>
            Represewnts the Changes in the tree map
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.Values">
            <summary>
            Represents the Values data series of the NSeries class.
            The same as YValues.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.SecondaryYValues">
            <summary>
            Represents secondary Y data series
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.BeginValues">
            <summary>
            Represents the BeginValues data series of the NFloatBarSeries class.
            The same as YValues.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.EndValues">
            <summary>
            Represents the EndValues data series of the NFloatBarSeries class.
            The same as SecondaryYValues
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.HighValues">
            <summary>
            Represents the HighValues data series of the NHighLowSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.LowValues">
            <summary>
            Represents the LowValues data series of the NHighLowSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.StockHighValues">
            <summary>
            Represents the HighValues data series of the NStockSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.StockLowValues">
            <summary>
            Represents the LowValues data series of the NStockSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.UpperBoxValues">
            <summary>
            Represents the UpperBoxValues data series of the NBoxAndWhiskersSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.LowerBoxValues">
            <summary>
            Represents the LowerBoxValues data series of the NBoxAndWhiskersSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.UpperWhiskerValues">
            <summary>
            Represents the UpperWhiskerValues data series of the NBoxAndWhiskersSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.LowerWhiskerValues">
            <summary>
            Represents the LowerWhiskerValues data series of the NBoxAndWhiskersSeries class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.None">
            <summary>
            No data series.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.Indexed">
            <summary>
            Only indexed data series.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.RandomAccess">
            <summary>
            Only random access data series.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesMask.All">
            <summary>
            All data series.
            </summary>
        </member>
        <member name="T:Nevron.Chart.DataSeriesType">
            <summary>
            Defines the type of data contained in the NDataSeries objects.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesType.Double">
            <summary>
            The data series contains double values.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesType.Bool">
            <summary>
            The data series contains boolean values.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesType.String">
            <summary>
            The data series contains string values.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesType.FillStyle">
            <summary>
            The data series contains NFillStyle objects.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesType.StrokeStyle">
            <summary>
            The data series contains NStrokeStyle objects.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesType.MarkerStyle">
            <summary>
            The data series contains NMarkerStyle objects.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesType.DataLabelStyle">
            <summary>
            The data series contains NDataLabelStyle objects.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesType.InteractivityStyle">
            <summary>
            The data series contains NInteractivityStyle objects.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesType.AnimationsStyle">
            <summary>
            The data series contains NAnimationsStyles objects.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesType.Tag">
            <summary>
            The data series contains custom "tag" objects.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesType.DoubleList">
            <summary>
            The data series contains arrays of double values.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesType.Color">
            <summary>
            The data series contains color values.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesType.UIntList">
            <summary>
            The data series contains arrays of int values
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesType.Byte">
            <summary>
            The byte data sseries type
            </summary>
        </member>
        <member name="T:Nevron.Chart.DataSeriesSortOrder">
            <summary>
            Defines the possible ways in which a data series can be sorted
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesSortOrder.Ascending">
            <summary>
            The data series is sorted in ascending manner.
            </summary>
        </member>
        <member name="F:Nevron.Chart.DataSeriesSortOrder.Descending">
            <summary>
            The data series is sorted in descending manner.
            </summary>
        </member>
        <member name="T:Nevron.Chart.CompareMethod">
            <summary>
            Specifies the type of comparison to be used when filtering data using one of the 
            Filter methods which has a CompareMethod argument.
            </summary>
        </member>
        <member name="F:Nevron.Chart.CompareMethod.More">
            <summary>
            The filter will include all values which are larger than the comparison value.
            </summary>
        </member>
        <member name="F:Nevron.Chart.CompareMethod.Less">
            <summary>
            The filter will include all values which are smaller than the comparison value.
            </summary>
        </member>
        <member name="F:Nevron.Chart.CompareMethod.Equal">
            <summary>
            The filter will include all values which are equal to the comparison value.
            </summary>
        </member>
        <member name="F:Nevron.Chart.CompareMethod.MoreOrEqual">
            <summary>
            The filter will include all values which are larger or equal to the comparison value.
            </summary>
        </member>
        <member name="F:Nevron.Chart.CompareMethod.LessOrEqual">
            <summary>
            The filter will include all values which are smaller or equal to the comparison value.
            </summary>
        </member>
        <member name="F:Nevron.Chart.CompareMethod.NotEqual">
            <summary>
            The filter will include all values which are not equal to the comparison value.
            </summary>
        </member>
        <member name="T:Nevron.Chart.SeriesType">
            <summary>
            Defines the currently supported charting types. This custom type is passed as a 
            parameter to the Add method of the NSeriesCollection object and determines the 
            type of the newly created presentation group.
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.Bar">
            <summary>
            represents a NBarSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.Line">
            <summary>
            represents a NLineSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.Area">
            <summary>
            represents a NAreaSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.Pie">
            <summary>
            represents a NPieSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.Point">
            <summary>
            represents a NPointSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.Bubble">
            <summary>
            represents a NBubbleSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.Stock">
            <summary>
            represents a NStockSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.FloatBar">
            <summary>
            represents a NFloatBarSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.GridSurface">
            <summary>
            represents a NGridSurfaceSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.MeshSurface">
            <summary>
            represents a NMeshSurfaceSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.VertexSurface">
            <summary>
            Represents a vertex surface series
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.RadarArea">
            <summary>
            represents a NRadarAreaSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.RadarLine">
            <summary>
            represents a NRadarLineSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.PolarArea">
            <summary>
            represents a NPolarAreaSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.PolarLine">
            <summary>
            represents a NPolarLineSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.PolarPoint">
            <summary>
            represents a NPolarPointSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.PolarRange">
            <summary>
            represents a NPolarRangeSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.PolarVector">
            <summary>
            represents a NPolarRangeSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.TernaryBubble">
            <summary>
            Represents a NTernaryBubbleSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.TernaryPoint">
            <summary>
            Represents a NTernaryPointSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.QuickPoint">
            <summary>
            represents a NQuickPointSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.Shape">
            <summary>
            represents a NShapeSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.HighLow">
            <summary>
            represents a NHighLowSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.SmoothLine">
            <summary>
            represents a NSmoothLineSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.Venn">
            <summary>
            represents a NVennSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.StepLine">
            <summary>
            represents a NStepLineSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.ErrorBar">
            <summary>
            represents a NErrorBarSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.Funnel">
            <summary>
            represents a NFunnelSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.BoxAndWhiskers">
            <summary>
            represents a NBoxAndWhiskersSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.SmoothArea">
            <summary>
            represents a NSmoothAreaSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.TriangulatedSurface">
            <summary>
            represents a NTriangulatedSurfaceSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.Vector">
            <summary>
            represents a NVectorSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.Range">
            <summary>
            represents a NRangeSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.FibonacciArcs">
            <summary>
            represents a NFibonacciArcs object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.FibonacciFans">
            <summary>
            represents a NFibonacciFans object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.FibonacciRetracements">
            <summary>
            represents a NFibonacciRetracements object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.QuadrantLines">
            <summary>
            represents a NQuadrantLines object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.SpeedResistanceLines">
            <summary>
            represents a NSpeedResistanceLines object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.TrendLine">
            <summary>
            represents a NTrendLine object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.Kagi">
            <summary>
            represents a NKagiSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.Renko">
            <summary>
            represents a NRenkoSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.PointAndFigure">
            <summary>
            represents a NPointAndFigureSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.ThreeLineBreak">
            <summary>
            represents a NThreeLineBreakSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.HeatMap">
            <summary>
            represents the NHeatMapSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.TreeMap">
            <summary>
            represents a NTreeMapSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.GraphicsPath">
            <summary>
            represents a NGraphicsPathSeries object
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.FastLine">
            <summary>
            represents a NFastLineSeries
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.FastPoint">
            <summary>
            represents a NFastPointSeries
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.FastBar">
            <summary>
            represents a NFastBarSeries
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesType.Custom">
            <summary>
            represents a NCustomSeries object
            </summary>
        </member>
        <member name="T:Nevron.Chart.SeriesLegendMode">
            <summary>
            Defines the modes in which the series fills the legend. This custom type
            is used by the LegendMode property of the NSeriesBase objects.
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesLegendMode.None">
            <summary>
            the series is not represented in the legend
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesLegendMode.Series">
            <summary>
            the series is represented in the legend by one series defined entry 
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesLegendMode.DataPoints">
            <summary>
            the series adds its data points to the legend
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesLegendMode.SeriesLogic">
            <summary>
            the series adds series specific information in the legend describing the logic it uses
            </summary>
        </member>
        <member name="T:Nevron.Chart.SeriesLegendOrder">
            <summary>
            Defines how the legend items generated by the series are included in the legend
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesLegendOrder.Append">
            <summary>
            Items are added after the existing legend items
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesLegendOrder.Prepend">
            <summary>
            Items are added before the existing legend items
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesLegendOrder.AppendInverted">
            <summary>
            Items are added after the existing legend items in inverted order
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesLegendOrder.PrependInverted">
            <summary>
            Items are added before the existing legend in inverted order
            </summary>
        </member>
        <member name="T:Nevron.Chart.StandardAxis">
            <summary>
            Defines the axes of the Nevron Chart for .NET component. This custom 
            type is accepted by the Axes method of the NChart object which gives 
            you access to the desired chart axis.
            </summary>
        </member>
        <member name="F:Nevron.Chart.StandardAxis.PrimaryY">
            <summary>
            the primary Y axis. By default it is positioned on the left front vertical corner of the charting area cube. Visible by default.
            </summary>
        </member>
        <member name="F:Nevron.Chart.StandardAxis.SecondaryY">
            <summary>
            the secondary Y axis. By default it is positioned on the right back vertical corner of the charting area cube. Not visible by default.
            </summary>
        </member>
        <member name="F:Nevron.Chart.StandardAxis.PrimaryX">
            <summary>
            the primary X axis. By default it is positioned on the bottom front horizontal corner of the charting area cube. Visible by default.
            </summary>
        </member>
        <member name="F:Nevron.Chart.StandardAxis.SecondaryX">
            <summary>
            the secondary X axis. By default it is positioned on the top back horizontal corner of the charting area cube. Not visible by default.
            </summary>
        </member>
        <member name="F:Nevron.Chart.StandardAxis.Depth">
            <summary>
            the depth axis. By default it is positioned on the right bottom depth corner of the charting area cube. Visible by default.
            </summary>
        </member>
        <member name="F:Nevron.Chart.StandardAxis.Radar">
            <summary>
            radar chart axis.
            </summary>
        </member>
        <member name="F:Nevron.Chart.StandardAxis.PolarAngle">
            <summary>
            Polar angle axis.
            </summary>
        </member>
        <member name="F:Nevron.Chart.StandardAxis.Polar">
            <summary>
            Polar value axis.
            </summary>
        </member>
        <member name="F:Nevron.Chart.StandardAxis.TernaryA">
            <summary>
            Ternary A axis
            </summary>
        </member>
        <member name="F:Nevron.Chart.StandardAxis.TernaryB">
            <summary>
            Ternary B axis
            </summary>
        </member>
        <member name="F:Nevron.Chart.StandardAxis.TernaryC">
            <summary>
            Ternary C axis
            </summary>
        </member>
        <member name="T:Nevron.Chart.TernaryAxisDockZone">
            <summary>
            Enumerates the possible ternary axis dock zones
            </summary>
        </member>
        <member name="F:Nevron.Chart.TernaryAxisDockZone.A">
            <summary>
            Ternary axis is docked to the A dock zone
            </summary>
        </member>
        <member name="F:Nevron.Chart.TernaryAxisDockZone.B">
            <summary>
            Ternary axis is docked to the B dock zone
            </summary>
        </member>
        <member name="F:Nevron.Chart.TernaryAxisDockZone.C">
            <summary>
            Ternary axis is docked to the C dock zone
            </summary>
        </member>
        <member name="T:Nevron.Chart.PolarAxisDockZone">
            <summary>
            Enumerates the possible polar axis dock zones
            </summary>
        </member>
        <member name="F:Nevron.Chart.PolarAxisDockZone.OuterRim">
            <summary>
            Polar axis is docked to the outer rim of the polar circle
            </summary>
        </member>
        <member name="F:Nevron.Chart.PolarAxisDockZone.InnerRim">
            <summary>
            Polar axis is docked to the inner rim of the polar circle
            </summary>
        </member>
        <member name="F:Nevron.Chart.PolarAxisDockZone.Left">
            <summary>
            Polar axis is docked to the left of the polar model space
            </summary>
        </member>
        <member name="F:Nevron.Chart.PolarAxisDockZone.Top">
            <summary>
            Polar axis is docked to the top of the polar model space
            </summary>
        </member>
        <member name="F:Nevron.Chart.PolarAxisDockZone.Right">
            <summary>
            Polar axis is docked to the right of the polar model space
            </summary>
        </member>
        <member name="F:Nevron.Chart.PolarAxisDockZone.Bottom">
            <summary>
            Polar axis is docked to the bottom of the polar model space
            </summary>
        </member>
        <member name="T:Nevron.Chart.PolarAxisOrientation">
            <summary>
            Enumerates the orientations of polar axis
            </summary>
        </member>
        <member name="F:Nevron.Chart.PolarAxisOrientation.Angle">
            <summary>
            Polar axis is used to denote an angle in a polar coordinate space
            </summary>
        </member>
        <member name="F:Nevron.Chart.PolarAxisOrientation.Value">
            <summary>
            Polar axis is used to denote a value in a polar coordinate space
            </summary>
        </member>
        <member name="T:Nevron.Chart.AxisOrientation">
            <summary>
            Defines the orientation of the axis.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisOrientation.Vertical">
            <summary>
            vertically oriented axis
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisOrientation.Horizontal">
            <summary>
            horizontally oriented axis
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisOrientation.Depth">
            <summary>
            depth oriented axis.
            </summary>
        </member>
        <member name="T:Nevron.Chart.ScaleDecorationType">
            <summary>
            Enumerates the scale decoration types
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleDecorationType.Tick">
            <summary>
            A scale tick
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleDecorationType.ValueLabel">
            <summary>
            A value scale label
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleDecorationType.RangeLabel">
            <summary>
            A range scale label
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleDecorationType.Range">
            <summary>
            A scale range
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleDecorationType.Marker">
            <summary>
            A scale marker
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleDecorationType.LevelSeparator">
            <summary>
            A scale level separator
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleDecorationType.MutliTick">
            <summary>
            A multi tick
            </summary>
        </member>
        <member name="T:Nevron.Chart.WallDecorationType">
            <summary>
            Enumerates the wall decoration types
            </summary>
        </member>
        <member name="F:Nevron.Chart.WallDecorationType.StripLine">
            <summary>
            A strip line
            </summary>
        </member>
        <member name="F:Nevron.Chart.WallDecorationType.GridLine">
            <summary>
            A grid line
            </summary>
        </member>
        <member name="F:Nevron.Chart.WallDecorationType.MultiGridLine">
            <summary>
            A multi grid line
            </summary>
        </member>
        <member name="T:Nevron.Chart.AxisDockZone">
            <summary>
            Defines the possible axis dock zones. 
            Each entry in the enumeration represents an edge of the chart box.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisDockZone.FrontLeft">
            <summary>
            Front left vertical edge. Can be used for axes with vertical orientation.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisDockZone.FrontRight">
            <summary>
            Front right vertical edge. Can be used for axes with vertical orientation.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisDockZone.BackRight">
            <summary>
            Back right vertical edge. Can be used for axes with vertical orientation.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisDockZone.BackLeft">
            <summary>
            Back left vertical edge. Can be used for axes with vertical orientation.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisDockZone.FrontBottom">
            <summary>
            Front bottom horizontal edge. Can be used for axes with horizontal orientation. Default position of the PrimaryX axis.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisDockZone.FrontTop">
            <summary>
            Front top horizontal edge. Can be used for axes with horizontal orientation.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisDockZone.BackTop">
            <summary>
            Back top horizontal edge. Can be used for axes with horizontal orientation. Default position of the SecondaryX axis.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisDockZone.BackBottom">
            <summary>
            Back bottom horizontal edge. Can be used for axes with horizontal orientation.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisDockZone.BottomRight">
            <summary>
            Bottom right depth edge. Can be used for axes with depth orientation. Default position of the Depth axis. 
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisDockZone.TopRight">
            <summary>
            Top right depth edge. Can be used for axes with depth orientation.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisDockZone.TopLeft">
            <summary>
            Top left depth edge. Can be used for axes with depth orientation.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisDockZone.BottomLeft">
            <summary>
            Bottom left depth edge. Can be used for axes with depth orientation.
            </summary>
        </member>
        <member name="T:Nevron.Chart.AxisAutoDockZonePreference">
            <summary>
            Defines preference modes for automatic selection of axis dock zones. This enumeration is used with
            automatic dock axis anchors to resolve ambiguities in the process of automatic selection of axis
            dock zones.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisAutoDockZonePreference.PrimaryZone">
            <summary>
            The primary zone is preferred when there is an ambiguity.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisAutoDockZonePreference.AlternativeZone">
            <summary>
            The alternative zone is preferred when there is an ambiguity.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisAutoDockZonePreference.NearerZone">
            <summary>
            The zone that is nearer to the camera is preferred when there is an ambiguity.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisAutoDockZonePreference.FartherZone">
            <summary>
            The zone that is farther from the camera is preferred when there is an ambiguity.
            </summary>
        </member>
        <member name="T:Nevron.Chart.MultiBarMode">
            <summary>
            Defines the possible bar modes when several bar series are displayed simultaneously.
            </summary>
        </member>
        <member name="F:Nevron.Chart.MultiBarMode.Series">
            <summary>
            displays the bar series in separate depth space
            </summary>
        </member>
        <member name="F:Nevron.Chart.MultiBarMode.Clustered">
            <summary>
            displays the bar series adjacently to the previous clustered or series bar
            </summary>
        </member>
        <member name="F:Nevron.Chart.MultiBarMode.Stacked">
            <summary>
            displays the bar series on top of to the previous stacked or series bar 
            and changes the stacking style of the entire stack to Stacked
            </summary>
        </member>
        <member name="F:Nevron.Chart.MultiBarMode.StackedPercent">
            <summary>
            displays the bar series on top of to the previous stacked or series bar 
            and changes the stacking style of the entire stack to Stacked percent
            </summary>
        </member>
        <member name="T:Nevron.Chart.MultiFloatBarMode">
            <summary>
            Defines the possible bar modes when several float bar series are displayed simultaneously.
            </summary>
        </member>
        <member name="F:Nevron.Chart.MultiFloatBarMode.Series">
            <summary>
            displays the bar series in separate depth space
            </summary>
        </member>
        <member name="F:Nevron.Chart.MultiFloatBarMode.Clustered">
            <summary>
            displays the bar series adjacently to the previous clustered or series bar
            </summary>
        </member>
        <member name="T:Nevron.Chart.PolylineRenderMode">
            <summary>
            Enumerates the polyline render modes
            </summary>
        </member>
        <member name="T:Nevron.Chart.MultiLineMode">
            <summary>
            Defines the possible lines modes when several line series are displayed simultaneously.
            </summary>
        </member>
        <member name="F:Nevron.Chart.MultiLineMode.Series">
            <summary>
            displays the line series in a separe depth space
            </summary>
        </member>
        <member name="F:Nevron.Chart.MultiLineMode.Overlapped">
            <summary>
            displays the line series in the depth space of the previous line in series mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.MultiLineMode.Stacked">
            <summary>
            displays the line series on top of to the previous stacked or series line 
            and changes the stacking style of the entire stack to Stacked
            </summary>
        </member>
        <member name="F:Nevron.Chart.MultiLineMode.StackedPercent">
            <summary>
            displays the line series on top of to the previous stacked or series line 
            and changes the stacking style of the entire stack to Stacked percent
            </summary>
        </member>
        <member name="T:Nevron.Chart.BarShape">
            <summary>
            Defines the possible bar shapes. This enumeration is used in 
            series that display bars.
            </summary>
        </member>
        <member name="F:Nevron.Chart.BarShape.Bar">
            <summary>
            regular bar
            </summary>
        </member>
        <member name="F:Nevron.Chart.BarShape.Cylinder">
            <summary>
            cylinder
            </summary>
        </member>
        <member name="F:Nevron.Chart.BarShape.Cone">
            <summary>
            cone
            </summary>
        </member>
        <member name="F:Nevron.Chart.BarShape.InvertedCone">
            <summary>
            inverted cone
            </summary>
        </member>
        <member name="F:Nevron.Chart.BarShape.Pyramid">
            <summary>
            pyramid 
            </summary>
        </member>
        <member name="F:Nevron.Chart.BarShape.InvertedPyramid">
            <summary>
            inverted pyramid
            </summary>
        </member>
        <member name="F:Nevron.Chart.BarShape.Ellipsoid">
            <summary>
            ellipsoid
            </summary>
        </member>
        <member name="F:Nevron.Chart.BarShape.SmoothEdgeBar">
            <summary>
            smooth edge bar
            </summary>
        </member>
        <member name="F:Nevron.Chart.BarShape.CutEdgeBar">
            <summary>
            cut edge bar
            </summary>
        </member>
        <member name="T:Nevron.Chart.LineSegmentShape">
            <summary>
            Defines the possible shapes for the line series segments.
            </summary>
        </member>
        <member name="F:Nevron.Chart.LineSegmentShape.Line">
            <summary>
            simple line
            </summary>
        </member>
        <member name="F:Nevron.Chart.LineSegmentShape.Tape">
            <summary>
            line as tape (displayed as rectangles)
            </summary>
        </member>
        <member name="F:Nevron.Chart.LineSegmentShape.Tube">
            <summary>
            line with tube segments (displayed as cylinders)
            </summary>
        </member>
        <member name="F:Nevron.Chart.LineSegmentShape.Ellipsoid">
            <summary>
            line with ellipsoid segments 
            </summary>
        </member>
        <member name="T:Nevron.Chart.LineSegmentRoute">
            <summary>
            Defines the possible routes for a step line segment.
            </summary>
        </member>
        <member name="F:Nevron.Chart.LineSegmentRoute.AlwaysHV">
            <summary>
            Horizontal-Vertical routing is used both for ascending and descending segments.
            </summary>
        </member>
        <member name="F:Nevron.Chart.LineSegmentRoute.AlwaysVH">
            <summary>
            Vertical-Horizontal routing is used both for ascending and descending segments.
            </summary>
        </member>
        <member name="F:Nevron.Chart.LineSegmentRoute.HVAscendVHDescent">
            <summary>
            Ascending segments use Horizontal-Vertical routing,
            descending segments use Vertical-Horizontal routing.
            </summary>
        </member>
        <member name="F:Nevron.Chart.LineSegmentRoute.VHAscendHVDescent">
            <summary>
            Ascending segments use Vertical-Horizontal routing,
            descending segments use Horizontal-Vertical routing.
            </summary>
        </member>
        <member name="T:Nevron.Chart.LegendMarkShape">
            <summary>
            Defines the possible legend mark shapes. This custom type is accepted by the 
            MarkShape property of the NLegendData object and is used to specify the shape of the 
            legend mark. When the legend is operating in lmAutomatic mode the component automatically
            determines the appropriate legend mark shapes.
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendMarkShape.None">
            <summary>
            Legend mark is not displayed
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendMarkShape.Rectangle">
            <summary>
            Rectangle mark
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendMarkShape.Ellipse">
            <summary>
            Ellipse mark
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendMarkShape.Diamond">
            <summary>
            Diamond mark
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendMarkShape.Triangle">
            <summary>
            Triangle mark
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendMarkShape.InvertedTriangle">
            <summary>
            Inverted triangle mark
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendMarkShape.Cross">
            <summary>
            Cross mark
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendMarkShape.DiagonalCross">
            <summary>
            Diagonal cross mark
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendMarkShape.LineCross">
            <summary>
            Cross mark with no filling
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendMarkShape.LineDiagonalCross">
            <summary>
            Diagonal cross mark with no filling
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendMarkShape.Star">
            <summary>
            Star mark
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendMarkShape.Asterisk">
            <summary>
            Asterisk mark
            </summary>
        </member>
        <member name="T:Nevron.Chart.LegendMode">
            <summary>
            This custom type is accepted by the LegendMode property and controls the mode of the 
            Nevron Chart for .NET integrated legend. When the LegendMode property is set to Disabled the legend 
            is not shown. In Automatic mode the legend displays the presentation groups of the 
            component. In Manual mode the user is able to fill the legend with custom data. See 
            the Configuring the Legend topic for more information.
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendMode.Disabled">
            <summary>
            the component does not show the legend
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendMode.Automatic">
            <summary>
            the legend is automatically filled with items from the displayed series
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendMode.Manual">
            <summary>
            the legend displays user defined information
            </summary>
        </member>
        <member name="T:Nevron.Chart.LegendExpandMode">
            <summary>
            Defines the legend expand strategies, or in other words in which dimension will the 
            legend grow when new items are added to the legend data item collection.
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendExpandMode.RowsOnly">
            <summary>
            the legend expands by rows only. The legend has one column.
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendExpandMode.ColsOnly">
            <summary>
            the legend expands by columns only. The legend has one row.
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendExpandMode.RowsFixed">
            <summary>
            the legend has a fixed number of rows and expands in columns.
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendExpandMode.ColsFixed">
            <summary>
            the legend has a fixed number of columns and expands in rows.
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendExpandMode.HorzWrap">
            <summary>
            The legend wraps in the assigned bounds by increasing the number of row
            then the number of colums
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendExpandMode.VertWrap">
            <summary>
            The legend wraps int he assigned bounds by increasing the number of columns
            then the number of rows
            </summary>
        </member>
        <member name="T:Nevron.Chart.RulerPagingMode">
            <summary>
            Defines the paging mode of the axes.
            </summary>
        </member>
        <member name="F:Nevron.Chart.RulerPagingMode.None">
            <summary>
            the ruler does not use paging.
            </summary>
        </member>
        <member name="F:Nevron.Chart.RulerPagingMode.FixedPageCount">
            <summary>
            the ruler has a fixed number of pages. The page size is variable.
            </summary>
        </member>
        <member name="F:Nevron.Chart.RulerPagingMode.FixedPageSize">
            <summary>
            the ruler has a fixed page size. The page count is variable.
            </summary>
        </member>
        <member name="T:Nevron.Chart.RulerCurrentPageMode">
            <summary>
            Defines the current page modes supported by the axis rulers.
            </summary>
        </member>
        <member name="F:Nevron.Chart.RulerCurrentPageMode.Index">
            <summary>
            the currently displayed page is determined by the CurrentPageIndex property of 
            the NScaleRuler class.
            </summary>
        </member>
        <member name="F:Nevron.Chart.RulerCurrentPageMode.BeginValue">
            <summary>
            the currently displayed page begins from a user specified value - controlled by 
            the CurrentPageBeginValue property of the NScaleRuler class.
            </summary>
        </member>
        <member name="T:Nevron.Chart.RadarMode">
            <summary>
            Enumerates the radar chart modes.
            </summary>
        </member>
        <member name="F:Nevron.Chart.RadarMode.SingleMeasure">
            <summary>
            All Radar axes display the same quantative scale
            </summary>
        </member>
        <member name="F:Nevron.Chart.RadarMode.MultiMeasure">
            <summary>
            Each Radar axis displays a different quantative scale
            </summary>
        </member>
        <member name="T:Nevron.Chart.ScaleLevelShape">
            <summary>
            Defines the shape of the axis level axes.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleLevelShape.None">
            <summary>
            The level is not displayed
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleLevelShape.Line">
            <summary>
            the level is displayed as a simple line
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleLevelShape.Bar">
            <summary>
            the level is displayed as a bar
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScaleLevelShape.Tube">
            <summary>
            the level is displayed as a tube
            </summary>
        </member>
        <member name="T:Nevron.Chart.ChartWallType">
            <summary>
            This custom type defines the chart walls. It is passed as a parameter to the 
            Walls method of the	NChart object and determines the wall to which you want to 
            gain access.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartWallType.Left">
            <summary>
            left chart wall
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartWallType.Back">
            <summary>
            back chart wall
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartWallType.Right">
            <summary>
            right chart wall
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartWallType.Front">
            <summary>
            front chart wall
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartWallType.Floor">
            <summary>
            chart floor
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartWallType.Top">
            <summary>
            top chart wall
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartWallType.Radar">
            <summary>
            Wall used by the radar chart
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartWallType.Polar">
            <summary>
            Wall used by the polar chart
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartWallType.Ternary">
            <summary>
            Wall used by the ternary chart
            </summary>
        </member>
        <member name="T:Nevron.Chart.ConstLineMode">
            <summary>
            Defines the possile drawing modes for an axis const line.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ConstLineMode.Line">
            <summary>
            the const line is displayed as a simple line
            </summary>
        </member>
        <member name="F:Nevron.Chart.ConstLineMode.Plane">
            <summary>
            the const line is displayed as a plane
            </summary>
        </member>
        <member name="T:Nevron.Chart.FastPointShape">
            <summary>
            Defines the possible marker styles.
            </summary>
        </member>
        <member name="F:Nevron.Chart.FastPointShape.Point">
            <summary>
            Point
            </summary>
        </member>
        <member name="F:Nevron.Chart.FastPointShape.Bar">
            <summary>
            Bar
            </summary>
        </member>
        <member name="F:Nevron.Chart.FastPointShape.Pyramid">
            <summary>
            Pyramid
            </summary>
        </member>
        <member name="F:Nevron.Chart.FastPointShape.InvertedPyramid">
            <summary>
            Inverted pyramid
            </summary>
        </member>
        <member name="F:Nevron.Chart.FastPointShape.Circle">
            <summary>
            Sphere
            </summary>
        </member>
        <member name="F:Nevron.Chart.FastPointShape.Cross">
            <summary>
            Cross
            </summary>
        </member>
        <member name="F:Nevron.Chart.FastPointShape.DiagonalCross">
            <summary>
            Diagonal cross 
            </summary>
        </member>
        <member name="F:Nevron.Chart.FastPointShape.LineCross">
            <summary>
            A cross rendered with lines
            </summary>
        </member>
        <member name="F:Nevron.Chart.FastPointShape.LineDiagonalCross">
            <summary>
            A diagonal cross rendered with lines
            </summary>
        </member>
        <member name="F:Nevron.Chart.FastPointShape.Star">
            <summary>
            Star
            </summary>
        </member>
        <member name="F:Nevron.Chart.FastPointShape.Diamond">
            <summary>
            Diamond
            </summary>
        </member>
        <member name="F:Nevron.Chart.FastPointShape.Asterisk">
            <summary>
            Asterisk
            </summary>
        </member>
        <member name="T:Nevron.Chart.PointShape">
            <summary>
            Defines the possible marker styles.
            </summary>
        </member>
        <member name="F:Nevron.Chart.PointShape.Bar">
            <summary>
            Bar
            </summary>
        </member>
        <member name="F:Nevron.Chart.PointShape.Cylinder">
            <summary>
            Cylinder
            </summary>
        </member>
        <member name="F:Nevron.Chart.PointShape.Cone">
            <summary>
            Cone
            </summary>
        </member>
        <member name="F:Nevron.Chart.PointShape.InvertedCone">
            <summary>
            Inverted cone
            </summary>
        </member>
        <member name="F:Nevron.Chart.PointShape.Pyramid">
            <summary>
            Pyramid
            </summary>
        </member>
        <member name="F:Nevron.Chart.PointShape.InvertedPyramid">
            <summary>
            Inverted pyramid
            </summary>
        </member>
        <member name="F:Nevron.Chart.PointShape.Sphere">
            <summary>
            Sphere
            </summary>
        </member>
        <member name="F:Nevron.Chart.PointShape.Ellipse">
            <summary>
            Ellipse
            </summary>
        </member>
        <member name="F:Nevron.Chart.PointShape.Cross">
            <summary>
            Cross
            </summary>
        </member>
        <member name="F:Nevron.Chart.PointShape.DiagonalCross">
            <summary>
            Diagonal cross 
            </summary>
        </member>
        <member name="F:Nevron.Chart.PointShape.LineCross">
            <summary>
            A cross rendered with lines
            </summary>
        </member>
        <member name="F:Nevron.Chart.PointShape.LineDiagonalCross">
            <summary>
            A diagonal cross rendered with lines
            </summary>
        </member>
        <member name="F:Nevron.Chart.PointShape.Star">
            <summary>
            Star
            </summary>
        </member>
        <member name="F:Nevron.Chart.PointShape.Diamond">
            <summary>
            Diamond
            </summary>
        </member>
        <member name="F:Nevron.Chart.PointShape.Asterisk">
            <summary>
            Asterisk
            </summary>
        </member>
        <member name="F:Nevron.Chart.PointShape.Custom">
            <summary>
            Custom shape
            </summary>
        </member>
        <member name="T:Nevron.Chart.PieStyle">
            <summary>
            Enumerates the different shapes that are used to display the slices of a pie chart
            </summary>
        </member>
        <member name="F:Nevron.Chart.PieStyle.Pie">
            <summary>
            pie slices are displayed as cylinder segments (default mode)
            </summary>
        </member>
        <member name="F:Nevron.Chart.PieStyle.Torus">
            <summary>
            pie slices are displayed as torus segments
            </summary>
        </member>
        <member name="F:Nevron.Chart.PieStyle.SmoothEdgePie">
            <summary>
            pie slices are displayed as cylinder segments with smooth edges
            </summary>
        </member>
        <member name="F:Nevron.Chart.PieStyle.CutEdgePie">
            <summary>
            pie slices are displayed as cylinder segments with cut edges
            </summary>
        </member>
        <member name="F:Nevron.Chart.PieStyle.Ring">
            <summary>
            pie slices are displayed as ring segments
            </summary>
        </member>
        <member name="F:Nevron.Chart.PieStyle.SmoothEdgeRing">
            <summary>
            pie slices are displayed as ring segments with smooth edges
            </summary>
        </member>
        <member name="F:Nevron.Chart.PieStyle.CutEdgeRing">
            <summary>
            pie slices are displayed as ring segments with cut edges
            </summary>
        </member>
        <member name="T:Nevron.Chart.PieLabelMode">
            <summary>
            Defines the possible label modes for a pie chart.
            </summary>
        </member>
        <member name="F:Nevron.Chart.PieLabelMode.Center">
            <summary>
            pie labels are displayed in the center of the pie segment
            </summary>
        </member>
        <member name="F:Nevron.Chart.PieLabelMode.Rim">
            <summary>
            pie labels are displayed on the rim of the pie segment
            </summary>
        </member>
        <member name="F:Nevron.Chart.PieLabelMode.RimNoOverlap">
            <summary>
            pie labels are displayed on the rim of the pie segment. Labels are automatically shifted to avoid overlapping
            </summary>
        </member>
        <member name="F:Nevron.Chart.PieLabelMode.Spider">
            <summary>
            pie labels are displayed on equal X coordinate distance from the center 
            of the pie on the left and rights side depending on the pie segment middle angle
            </summary>
        </member>
        <member name="F:Nevron.Chart.PieLabelMode.SpiderNoOverlap">
            <summary>
            Similar to spider. Labels are automatically shifted to avoid overlapping
            </summary>
        </member>
        <member name="T:Nevron.Chart.FunnelLabelMode">
            <summary>
            Defines the possible label modes for a funnel chart.
            </summary>
        </member>
        <member name="F:Nevron.Chart.FunnelLabelMode.Center">
            <summary>
            labels are displayed in the middle of the funnel data points
            </summary>
        </member>
        <member name="F:Nevron.Chart.FunnelLabelMode.Right">
            <summary>
            labels are displayed to the right of the funnel data points
            </summary>
        </member>
        <member name="F:Nevron.Chart.FunnelLabelMode.RightAligned">
            <summary>
            labels are displayed to the right of the funnel data points, aligned in a column
            </summary>
        </member>
        <member name="F:Nevron.Chart.FunnelLabelMode.Left">
            <summary>
            labels are displayed to the left of the funnel data points
            </summary>
        </member>
        <member name="F:Nevron.Chart.FunnelLabelMode.LeftAligned">
            <summary>
            labels are displayed to the left of the funnel data points, aligned in a column
            </summary>
        </member>
        <member name="T:Nevron.Chart.EmptyDataPointsValueMode">
            <summary>
            Defines the possible ways in which empty data points values are treated
            </summary>
        </member>
        <member name="F:Nevron.Chart.EmptyDataPointsValueMode.Skip">
            <summary>
            empty data point is not analized
            </summary>
        </member>
        <member name="F:Nevron.Chart.EmptyDataPointsValueMode.Average">
            <summary>
            the empty data point has the average values of its precessor and successor
            </summary>
        </member>
        <member name="F:Nevron.Chart.EmptyDataPointsValueMode.CustomValue">
            <summary>
            the empty data point is associated with an user defined value
            </summary>
        </member>
        <member name="T:Nevron.Chart.InfinityDataPointsValueMode">
            <summary>
            Defines the possible ways in which infinity data points values are treated
            </summary>
        </member>
        <member name="F:Nevron.Chart.InfinityDataPointsValueMode.Skip">
            <summary>
            infinity data points are not analized
            </summary>
        </member>
        <member name="F:Nevron.Chart.InfinityDataPointsValueMode.Average">
            <summary>
            infinity data points have the average values of its precessor and successor
            </summary>
        </member>
        <member name="F:Nevron.Chart.InfinityDataPointsValueMode.CustomValue">
            <summary>
            infinity data points are associated with an user defined value
            </summary>
        </member>
        <member name="T:Nevron.Chart.EmptyDataPointsAppearanceMode">
            <summary>
            Different appearance modes for the empty data points.
            </summary>
        </member>
        <member name="F:Nevron.Chart.EmptyDataPointsAppearanceMode.None">
            <summary>
            empty data points are not displayed
            </summary>
        </member>
        <member name="F:Nevron.Chart.EmptyDataPointsAppearanceMode.Normal">
            <summary>
            empty data points are displayed as if they are normal data points
            </summary>
        </member>
        <member name="F:Nevron.Chart.EmptyDataPointsAppearanceMode.Special">
            <summary>
            empty data points are displayed with a special (user defined) filling and border styles
            </summary>
        </member>
        <member name="T:Nevron.Chart.InfinityDataPointsAppearanceMode">
            <summary>
            Different appearance modes for infinity data points.
            </summary>
        </member>
        <member name="F:Nevron.Chart.InfinityDataPointsAppearanceMode.None">
            <summary>
            infinity points are not displayed
            </summary>
        </member>
        <member name="F:Nevron.Chart.InfinityDataPointsAppearanceMode.Normal">
            <summary>
            infinity points are displayed as if they are normal data points
            </summary>
        </member>
        <member name="F:Nevron.Chart.InfinityDataPointsAppearanceMode.Special">
            <summary>
            infinity data points are displayed with a special (user defined) filling and border styles
            </summary>
        </member>
        <member name="T:Nevron.Chart.EmptyDataPointsMarkerMode">
            <summary>
            Enumerates marker modes for the empty data points.
            </summary>
        </member>
        <member name="F:Nevron.Chart.EmptyDataPointsMarkerMode.Normal">
            <summary>
            empty data points markers are the same as normal data points' markers
            </summary>
        </member>
        <member name="F:Nevron.Chart.EmptyDataPointsMarkerMode.Special">
            <summary>
            empty data points markers use a custom marker style
            </summary>
        </member>
        <member name="T:Nevron.Chart.InfinityDataPointsMarkerMode">
            <summary>
            Enumerates marker modes for infinity data points.
            </summary>
        </member>
        <member name="F:Nevron.Chart.InfinityDataPointsMarkerMode.Normal">
            <summary>
            infinity data points markers are the same as normal data points' markers
            </summary>
        </member>
        <member name="F:Nevron.Chart.InfinityDataPointsMarkerMode.Special">
            <summary>
            infinity data points markers use a custom marker style
            </summary>
        </member>
        <member name="T:Nevron.Chart.EmptyDataPointsLabelMode">
            <summary>
            Enumerates data label modes for the empty data points.
            </summary>
        </member>
        <member name="F:Nevron.Chart.EmptyDataPointsLabelMode.Normal">
            <summary>
            empty data point labels are the same as normal data points' labels
            </summary>
        </member>
        <member name="F:Nevron.Chart.EmptyDataPointsLabelMode.Special">
            <summary>
            empty data points labels use a special data label style
            </summary>
        </member>
        <member name="T:Nevron.Chart.InfinityDataPointsLabelMode">
            <summary>
            Enumerates data label modes for infinity data points.
            </summary>
        </member>
        <member name="F:Nevron.Chart.InfinityDataPointsLabelMode.Normal">
            <summary>
            infinity data point labels are the same as normal data points' labels
            </summary>
        </member>
        <member name="F:Nevron.Chart.InfinityDataPointsLabelMode.Special">
            <summary>
            infinity data points labels use a special data label style
            </summary>
        </member>
        <member name="T:Nevron.Chart.MultiAreaMode">
            <summary>
            Defines the possible area modes when several area series are displayed simultaneously.
            </summary>
        </member>
        <member name="F:Nevron.Chart.MultiAreaMode.Series">
            <summary>
            displays the area series in a separe depth space
            </summary>
        </member>
        <member name="F:Nevron.Chart.MultiAreaMode.Stacked">
            <summary>
            displays the area series on top of to the previous stacked or series areas
            and changes the stacking style of the entire stack to Stacked
            </summary>
        </member>
        <member name="F:Nevron.Chart.MultiAreaMode.StackedPercent">
            <summary>
            displays the area series on top of to the previous stacked or series area 
            and changes the stacking style of the entire stack to Stacked percent
            </summary>
        </member>
        <member name="T:Nevron.Chart.CandleStyle">
            <summary>
            Defines the style of the candle. This custom type is accepted by the CandleStyle 
            property of the NStockSeries object.
            </summary>
        </member>
        <member name="F:Nevron.Chart.CandleStyle.Bar">
            <summary>
            the open and close values are the begin and end z coordinates of a bar
            </summary>
        </member>
        <member name="F:Nevron.Chart.CandleStyle.Stick">
            <summary>
            the open and close values are displayed as tick marks on the line connecting 
            the high and low values
            </summary>
        </member>
        <member name="T:Nevron.Chart.MajorTickModeNumeric">
            <summary>
            Defines the possible step modes of the numeric axis scale.
            </summary>
        </member>
        <member name="F:Nevron.Chart.MajorTickModeNumeric.Manual">
            <summary>
            in this mode the user specifies the values which must be represented with major ticks
            </summary>
        </member>
        <member name="F:Nevron.Chart.MajorTickModeNumeric.Auto">
            <summary>
            the numeric scale automatically generates the major ticks with automatically determined step
            </summary>
        </member>
        <member name="F:Nevron.Chart.MajorTickModeNumeric.CustomStep">
            <summary>
            the user specifies a custom step which is used in the major tick generation
            </summary>
        </member>
        <member name="F:Nevron.Chart.MajorTickModeNumeric.IrregularSteps">
            <summary>
            the user specifies an array of custom steps which are used in the major tick generation
            </summary>
        </member>
        <member name="T:Nevron.Chart.MajorTickModeDateTime">
            <summary>
            Defines the possible step modes for the major ticks of the date time scale.
            </summary>
        </member>
        <member name="F:Nevron.Chart.MajorTickModeDateTime.Manual">
            <summary>
            in this mode the user specifies the values which must be represented with major ticks
            </summary>
        </member>
        <member name="F:Nevron.Chart.MajorTickModeDateTime.Auto">
            <summary>
            the date time scale automatically generates the major ticks with automatically determined step
            </summary>
        </member>
        <member name="F:Nevron.Chart.MajorTickModeDateTime.CustomStep">
            <summary>
            the user specifies a custom step which is used in the major tick generation
            </summary>
        </member>
        <member name="F:Nevron.Chart.MajorTickModeDateTime.IrregularSteps">
            <summary>
            the user specifies an array of custom steps which are used in the major tick generation
            </summary>
        </member>
        <member name="F:Nevron.Chart.MajorTickModeDateTime.Months">
            <summary>
            the user specifies a months step. The tick generation algorithm preserves the month ends.
            </summary>
        </member>
        <member name="T:Nevron.Chart.PredefinedLegendStyle">
            <summary>
            Defines the possible predefined legend styles.
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedLegendStyle.Top">
            <summary>
            legend positioned on top of the chart which expands in ColsOnly mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedLegendStyle.Bottom">
            <summary>
            legend positioned on the chart bottom which expands in ColsOnly mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedLegendStyle.Left">
            <summary>
            legend positioned on the left side of the chart which expands in RowsOnly mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedLegendStyle.Right">
            <summary>
            legend positioned on the right side of the chart which expands in RowsOnly mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedLegendStyle.TopRight">
            <summary>
            legend positioned on the top-right side of the chart which expands in RowsOnly mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedLegendStyle.TopLeft">
            <summary>
            legend positioned on the top-left side of the chart which expands in RowsOnly mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedLegendStyle.BottomRight">
            <summary>
            legend positioned on the bottom-right side of the chart which expands in RowsOnly mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedLegendStyle.BottomLeft">
            <summary>
            legend positioned on the bottom-left side of the chart which expands in RowsOnly mode
            </summary>
        </member>
        <member name="T:Nevron.Chart.PredefinedChartStyle">
            <summary>
            Defines the possible predefined chart styles. 
            The chart style defines various aspects of the chart,
            which are dependant from the chart orientation represented by this enumeration.
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedChartStyle.Vertical">
            <summary>
            chart with vertical orientation - the default
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedChartStyle.HorizontalLeft">
            <summary>
            chart with horizontal left orientation - the PrimaryX axis is displayed on the left.
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedChartStyle.HorizontalRight">
            <summary>
            chart with horizontal left orientation - the PrimaryX axis is displayed on the right.
            </summary>
        </member>
        <member name="T:Nevron.Chart.PredefinedTextLayout">
            <summary>
            Defines the possible predefined text layouts of the chart axes.
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedTextLayout.Horizontal">
            <summary>
            axis texts are oriented horizontally
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedTextLayout.Vertical">
            <summary>
            axis texts are oriented vertically 
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedTextLayout.TiltedAscending">
            <summary>
            axis texts are oriented with a 45 degree tilt towards the text origin
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedTextLayout.TiltedDescending">
            <summary>
            axis texts are oriented with a -45 degree tilt and begins from the text origin
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedTextLayout.Staggered2">
            <summary>
            axis texts are displayed on two levels
            </summary>
        </member>
        <member name="F:Nevron.Chart.PredefinedTextLayout.Staggered3">
            <summary>
            axis texts are displayed on three levels
            </summary>
        </member>
        <member name="T:Nevron.Chart.SurfaceFillMode">
            <summary>
            Different filling styles of a surface series.
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfaceFillMode.None">
            <summary>
            No filling at all.
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfaceFillMode.Zone">
            <summary>
            The surface filling is split into elevation zones according to a palette.
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfaceFillMode.ZoneTexture">
            <summary>
            The fill mode is the same as the Zone filling but its implementation is based on a 1D texture mapped along the height of the surface.
            It is much faster and should be used for large surfaces. Note that it is not applicable for flat surfaces.
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfaceFillMode.Uniform">
            <summary>
            the surface is filled with an uniform fill style
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfaceFillMode.CustomColors">
            <summary>
            each surface data point has a custom color
            </summary>
        </member>
        <member name="T:Nevron.Chart.SurfaceFrameColorMode">
            <summary>
            Different color modes for the surface frame lines.
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfaceFrameColorMode.Zone">
            <summary>
            the surface frame lines are split into elevation zones according to a palette
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfaceFrameColorMode.Uniform">
            <summary>
            the surface frame has a uniform stroke style
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfaceFrameColorMode.CustomColors">
            <summary>
            each surface data point has a custom color
            </summary>
        </member>
        <member name="T:Nevron.Chart.SurfaceFrameMode">
            <summary>
            Different frame styles of a surface series.
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfaceFrameMode.None">
            <summary>
            no frame at all
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfaceFrameMode.Mesh">
            <summary>
            frame connecting the adjacent data points
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfaceFrameMode.Contour">
            <summary>
            contour lines at specific surface elevations
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfaceFrameMode.MeshContour">
            <summary>
            mixed mesh and contour frame
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfaceFrameMode.Dots">
            <summary>
            dots at the data points
            </summary>
        </member>
        <member name="T:Nevron.Chart.SurfacePositionMode">
            <summary>
            Defines several modes for vertical positioning of a flat surface
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfacePositionMode.AxisBegin">
            <summary>
            the flat surface is positioned at the axis begin value
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfacePositionMode.AxisEnd">
            <summary>
            the flat surface is positioned at the axis end value
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfacePositionMode.CustomValue">
            <summary>
            the user specifies the position of the surface with the PositionValue property
            </summary>
        </member>
        <member name="T:Nevron.Chart.MeasurementUnits">
            <summary>
            Defines the measurement units used by the chart component
            </summary>
        </member>
        <member name="F:Nevron.Chart.MeasurementUnits.Model">
            <summary>
            Units used by the chart model 3D layer.
            </summary>
        </member>
        <member name="F:Nevron.Chart.MeasurementUnits.Scale">
            <summary>
            Scale units are scaled to model units by the axes. All data series values are specified in scale units.
            </summary>
        </member>
        <member name="T:Nevron.Chart.ChartElement">
            <summary>
            Enumerates the chart element types.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.Nothing">
            <summary>
            No chart element.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.ControlBackground">
            <summary>
            The chart background. 
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.DataPoint">
            <summary>
            A data point object.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.StockGroup">
            <summary>
            A stock group object
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.KagiData">
            <summary>
            A kagi data object
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.PointAndFigureData">
            <summary>
            A point and figure data object
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.RenkoData">
            <summary>
            A renko data object
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.LineBreakData">
            <summary>
            A three line break data object
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.LineStudy">
            <summary>
            A line study object.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.SurfaceDataPoint">
            <summary>
            A surface series data point.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.SurfaceTriangle">
            <summary>
            A surface triangle
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.Axis">
            <summary>
            An Axis object.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.AxisStripe">
            <summary>
            An axis stripe object.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.AxisConstLine">
            <summary>
            An axis const line object.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.AxisCursor">
            <summary>
            An axis cursor.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.RangeSelection">
            <summary>
            A range selection object.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.ChartWall">
            <summary>
            A chart wall object
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.TreeMapNode">
            <summary>
            A tree map node object
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.Legend">
            <summary>
            A Legend object The area inside of the Legend object excluding the area occupied by the legend data items.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.LegendDataItem">
            <summary>
            A legend data item object.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.LegendHeader">
            <summary>
            A legend header object
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.LegendFooter">
            <summary>
            A legend footer object
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.Label">
            <summary>
            A label object.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.Watermark">
            <summary>
            A watermark object.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.Annotation">
            <summary>
            An empty annotation panel object.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.ScrollBarResetButton">
            <summary>
            ScrollBar reset button.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.ScrollBarLeftScrollButton">
            <summary>
            ScrollBar left scroll button.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.ScrollBarLeftStripeButton">
            <summary>
            ScrollBar left stripe button.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.ScrollBarThumbButton">
            <summary>
            ScrollBar thumb button.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.ScrollBarRightStripeButton">
            <summary>
            ScrollBar right stripe button.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.ScrollBarRightScrollButton">
            <summary>
            ScrollBar right scroll button.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.AnchorPanel">
            <summary>
            Anchor panel
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.Chart">
            <summary>
            Chart 
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.Panel">
            <summary>
            Panel
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.BackgroundDecoratorPanel">
            <summary>
            Background decorator panel
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.GaugeAxis">
            <summary>
            Gauge axis
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.GaugeMarker">
            <summary>
            Gauge Marker
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.GaugeNeedle">
            <summary>
            Gauge Needle
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.GaugeRange">
            <summary>
            Gauge Range
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.GaugePanel">
            <summary>
            Gauge Panel
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.ClockPanel">
            <summary>
            Clock Panel
            </summary>
        </member>
        <member name="F:Nevron.Chart.ChartElement.DisplayPanel">
            <summary>
            Display Panel
            </summary>
        </member>
        <member name="T:Nevron.Chart.SeriesAppearanceMode">
            <summary>
            Enumerates the series appearance modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesAppearanceMode.Generic">
            <summary>
            The series uses the generic appearance logic.
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesAppearanceMode.SeriesLogic">
            <summary>
            The appearance is based on a series-defined logic.
            </summary>
        </member>
        <member name="T:Nevron.Chart.PanelType">
            <summary>
            Defines the possible panel types
            </summary>
        </member>
        <member name="F:Nevron.Chart.PanelType.Panel">
            <summary>
            Generic panel
            </summary>
        </member>
        <member name="F:Nevron.Chart.PanelType.Chart">
            <summary>
            Chart panel
            </summary>
        </member>
        <member name="F:Nevron.Chart.PanelType.Label">
            <summary>
            Label panel
            </summary>
        </member>
        <member name="F:Nevron.Chart.PanelType.Legend">
            <summary>
            Legend panel
            </summary>
        </member>
        <member name="F:Nevron.Chart.PanelType.Watermark">
            <summary>
            Watermark panel
            </summary>
        </member>
        <member name="F:Nevron.Chart.PanelType.Anchor">
            <summary>
            Anchor panel
            </summary>
        </member>
        <member name="F:Nevron.Chart.PanelType.RectangularCallout">
            <summary>
            RectangularCallout panel
            </summary>
        </member>
        <member name="F:Nevron.Chart.PanelType.RoundedRectangularCallout">
            <summary>
            RoundedRectangularCallout panel
            </summary>
        </member>
        <member name="F:Nevron.Chart.PanelType.CutEdgeRectangularCallout">
            <summary>
            CutEdgeRectangularCallout panel
            </summary>
        </member>
        <member name="F:Nevron.Chart.PanelType.OvalCallout">
            <summary>
            OvalCallout panel
            </summary>
        </member>
        <member name="F:Nevron.Chart.PanelType.ArrowCallout">
            <summary>
            ArrowCallout panel
            </summary>
        </member>
        <member name="F:Nevron.Chart.PanelType.Grid">
            <summary>
            Grid panel
            </summary>
        </member>
        <member name="T:Nevron.Chart.TableInterlaceStyleType">
            <summary>
            The possible table interlace styles.
            </summary>
        </member>
        <member name="F:Nevron.Chart.TableInterlaceStyleType.Row">
            <summary>
            Row interlace style
            </summary>
        </member>
        <member name="F:Nevron.Chart.TableInterlaceStyleType.Col">
            <summary>
            Col interlace style
            </summary>
        </member>
        <member name="T:Nevron.Chart.LegendInterlaceStyleType">
            <summary>
            The possible legend interlace styles.
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendInterlaceStyleType.Row">
            <summary>
            Interlaced by rows
            </summary>
        </member>
        <member name="F:Nevron.Chart.LegendInterlaceStyleType.Col">
            <summary>
            Interlaced by cols
            </summary>
        </member>
        <member name="T:Nevron.Chart.SelectionMode">
            <summary>
            Whether selected objects will be appended to the existing selection or replace it.
            </summary>
        </member>
        <member name="F:Nevron.Chart.SelectionMode.Append">
            <summary>
            New selected objects are appended to the current selection
            </summary>
        </member>
        <member name="F:Nevron.Chart.SelectionMode.Replace">
            <summary>
            New selected objects replace the current selection
            </summary>
        </member>
        <member name="T:Nevron.Chart.SelectorToolMode">
            <summary>
            Defines the modes in which the selector tool can operate
            </summary>
        </member>
        <member name="F:Nevron.Chart.SelectorToolMode.ClickSelect">
            <summary>
            Nodes are selected only on click events
            </summary>
        </member>
        <member name="F:Nevron.Chart.SelectorToolMode.MoveSelect">
            <summary>
            Nodes are selected when the mouse is moved
            </summary>
        </member>
        <member name="F:Nevron.Chart.SelectorToolMode.RegionSelect">
            <summary>
            Nodes are selected when a region is selected
            </summary>
        </member>
        <member name="T:Nevron.Chart.ScrollBarButtonState">
            <summary>
            The possible states of the scrollbar button.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScrollBarButtonState.UnPressed">
            <summary>
            The scrollbar button is not pressed
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScrollBarButtonState.Pressed">
            <summary>
            The scrollbar button is pressed
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScrollBarButtonState.Hover">
            <summary>
            The scrollbar button is hovered
            </summary>
        </member>
        <member name="T:Nevron.Chart.ScrollBarArrowButtonType">
            <summary>
            The type of the scrollbar arrow button.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScrollBarArrowButtonType.Left">
            <summary>
            Left scrollbar button
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScrollBarArrowButtonType.Right">
            <summary>
            Right scrollbar button
            </summary>
        </member>
        <member name="T:Nevron.Chart.ScrollBarStripeButtonType">
            <summary>
            The type of the scrollbar stripe button.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScrollBarStripeButtonType.Left">
            <summary>
            The stripe button on the left side of the thumb
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScrollBarStripeButtonType.Right">
            <summary>
            The stripe button on the right side of the thumb
            </summary>
        </member>
        <member name="T:Nevron.Chart.ScrollBarDragMode">
            <summary>
            Enumerates the scrollbar drag modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScrollBarDragMode.None">
            <summary>
            No dragging
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScrollBarDragMode.LeftSlider">
            <summary>
            Dragging left slider
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScrollBarDragMode.Thumb">
            <summary>
            Draggging thumb
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScrollBarDragMode.RightSlider">
            <summary>
            Dragging right slider
            </summary>
        </member>
        <member name="T:Nevron.Chart.ScrollBarElement">
            <summary>
            Enumerates the scrollbar elements.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScrollBarElement.ResetButton">
            <summary>
            Reset button
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScrollBarElement.LeftScrollButton">
            <summary>
            Left scroll button
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScrollBarElement.LeftStripeButton">
            <summary>
            Left stripe button
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScrollBarElement.LeftSliderButton">
            <summary>
            Left slider button
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScrollBarElement.ThumbButton">
            <summary>
            Thumb button
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScrollBarElement.RightSliderButton">
            <summary>
            Right slider button
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScrollBarElement.RightStripeButton">
            <summary>
            Right stripe button
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScrollBarElement.RightScrollButton">
            <summary>
            Right scroll button
            </summary>
        </member>
        <member name="F:Nevron.Chart.ScrollBarElement.None">
            <summary>
            None
            </summary>
        </member>
        <member name="T:Nevron.Chart.SurfaceCellTriangulationMode">
            <summary>
            Enumerates the grid surface cell triangulation modes.
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfaceCellTriangulationMode.Diagonal1">
            <summary>
            The cell is triangulated by its first diagonal.
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfaceCellTriangulationMode.Diagonal2">
            <summary>
            The cell is triangulated by its second diagonal.
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfaceCellTriangulationMode.MaxSum">
            <summary>
            The cell is triangulated by diagonal, which has the larger sum of its end points.
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfaceCellTriangulationMode.MinSum">
            <summary>
            The cell is triangulated by diagonal, which has the smaller sum of its end points.
            </summary>
        </member>
        <member name="T:Nevron.Chart.MeshSurfaceCellTriangulationMode">
            <summary>
            Enumerates the mesh surface cell triangulation modes.
            </summary>
        </member>
        <member name="F:Nevron.Chart.MeshSurfaceCellTriangulationMode.MaxDiagonal">
            <summary>
            The cell is divided into two triangules by its longer diagonal.
            </summary>
        </member>
        <member name="F:Nevron.Chart.MeshSurfaceCellTriangulationMode.Diagonal1">
            <summary>
            The cell is triangulated by its first diagonal. Allows for optimized rendering of large surfaces.
            </summary>
        </member>
        <member name="F:Nevron.Chart.MeshSurfaceCellTriangulationMode.Diagonal2">
            <summary>
            The cell is triangulated by its second diagonal. Allows for optimized rendering of large surfaces.
            </summary>
        </member>
        <member name="T:Nevron.Chart.GridSurfaceValuesMode">
            <summary>
            Enumerates the grid surface values modes
            </summary>
        </member>
        <member name="F:Nevron.Chart.GridSurfaceValuesMode.Natural">
            <summary>
            Use natural numbers: 0, 1, 2, 3, etc.
            </summary>
        </member>
        <member name="F:Nevron.Chart.GridSurfaceValuesMode.OriginAndStep">
            <summary>
            Use custom origin and step.
            </summary>
        </member>
        <member name="F:Nevron.Chart.GridSurfaceValuesMode.CustomValues">
            <summary>
            Use an array of custom values.
            </summary>
        </member>
        <member name="T:Nevron.Chart.HeatMapValuesMode">
            <summary>
            Enumerates head map values mode
            </summary>
        </member>
        <member name="F:Nevron.Chart.HeatMapValuesMode.Natural">
            <summary>
            Use natural numbers: 0, 1, 2, 3, etc.
            </summary>
        </member>
        <member name="F:Nevron.Chart.HeatMapValuesMode.OriginAndStep">
            <summary>
            Use custom origin and step.
            </summary>
        </member>
        <member name="T:Nevron.Chart.PageOrientation">
            <summary>
            Enumerates the page orientations. 
            </summary>
        </member>
        <member name="F:Nevron.Chart.PageOrientation.Portrait">
            <summary>
            Portrait orientation.  
            </summary>
        </member>
        <member name="F:Nevron.Chart.PageOrientation.Landscape">
            <summary>
            Landscape orientation.  
            </summary>
        </member>
        <member name="T:Nevron.Chart.LevelOfDetail">
            <summary>
            Defines several levels of detail for complex primitives like spheres.
            </summary>
        </member>
        <member name="F:Nevron.Chart.LevelOfDetail.Low">
            <summary>
            Low detail
            </summary>
        </member>
        <member name="F:Nevron.Chart.LevelOfDetail.Medium">
            <summary>
            Medium detail
            </summary>
        </member>
        <member name="F:Nevron.Chart.LevelOfDetail.High">
            <summary>
            High detail
            </summary>
        </member>
        <member name="F:Nevron.Chart.LevelOfDetail.Highest">
            <summary>
            Highest detail
            </summary>
        </member>
        <member name="T:Nevron.Chart.VennShape">
            <summary>
            Enumerates the possible Venn shapes.
            </summary>
        </member>
        <member name="F:Nevron.Chart.VennShape.Rectangle">
            <summary>
            Rectangular venn shape
            </summary>
        </member>
        <member name="F:Nevron.Chart.VennShape.Ellipse">
            <summary>
            Elliptical venn shape
            </summary>
        </member>
        <member name="T:Nevron.Chart.TrendLineMode">
            <summary>
            Defines the possible display modes for a trendline.
            </summary>
        </member>
        <member name="F:Nevron.Chart.TrendLineMode.None">
            <summary>
            The trendline is not displayed at all
            </summary>
        </member>
        <member name="F:Nevron.Chart.TrendLineMode.Segment">
            <summary>
            The trendline is displayed as a segment
            </summary>
        </member>
        <member name="F:Nevron.Chart.TrendLineMode.Beam">
            <summary>
            The trendline is displayed as a beam
            </summary>
        </member>
        <member name="T:Nevron.Chart.SeriesOriginMode">
            <summary>
            Defines the possible modes for evaluation of the series origin value.
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesOriginMode.CustomOrigin">
            <summary>
            The series origin value is specified by the Origin property.
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesOriginMode.MinValue">
            <summary>
            The series min value is used as a series origin.
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesOriginMode.MaxValue">
            <summary>
            The series max value is used as a series origin.
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesOriginMode.ScaleMin">
            <summary>
            The min scale value is used as a series origin.
            </summary>
        </member>
        <member name="F:Nevron.Chart.SeriesOriginMode.ScaleMax">
            <summary>
            The max scale value is used as a series origin.
            </summary>
        </member>
        <member name="T:Nevron.Chart.SurfaceTexturePlaneMode">
            <summary>
            Defines the possible modes for the custom texture plane of a surface chart.
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfaceTexturePlaneMode.XZ">
            <summary>
            The XZ plane is used as a surface texture plane
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfaceTexturePlaneMode.XY">
            <summary>
            The XY plane is used as a surface texture plane
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfaceTexturePlaneMode.ZY">
            <summary>
            The ZY plane is used as a surface texture plane
            </summary>
        </member>
        <member name="F:Nevron.Chart.SurfaceTexturePlaneMode.Custom">
            <summary>
            A user-defined plane is used as a surface texture plane
            </summary>
        </member>
        <member name="T:Nevron.Chart.AxisValueAnchorMode">
            <summary>
            Defines the possible modes of the Axis Value Anchor.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisValueAnchorMode.Show">
            <summary>
            The anchored object is always displayed
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisValueAnchorMode.Clamp">
            <summary>
            If the anchor value is out of the axis ruler range it is clamped to the nearest ruler value.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AxisValueAnchorMode.Clip">
            <summary>
            If the anchor value is out of the axis ruler range the anchored object is not displayed.
            </summary>
        </member>
        <member name="T:Nevron.Chart.ShadingMode">
            <summary>
            Enumerates different shading modes.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ShadingMode.Flat">
            <summary>
            Flat shading - gives a facetted look to surfaces with small number of polygons.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ShadingMode.Smooth">
            <summary>
            Smooth shading - illumination changes gradually across the surface.
            </summary>
        </member>
        <member name="T:Nevron.Chart.VerticalOrientation">
            <summary>
            Enumerates the vertical orientations.
            </summary>
        </member>
        <member name="F:Nevron.Chart.VerticalOrientation.Up">
            <summary>
            Upward orientation
            </summary>
        </member>
        <member name="F:Nevron.Chart.VerticalOrientation.Down">
            <summary>
            Downward orientation
            </summary>
        </member>
        <member name="T:Nevron.Chart.AutoSideAxisAnchorDock">
            <summary>
            Enumerates the options for the PreferredSide property of the NAutoSideAxisAnchor object.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AutoSideAxisAnchorDock.Primary">
            <summary>
            Primary side.
            For a Y axis the left side is primary in all projections.
            For X and Z axes the bottom side is primary when the chart is viewed from the top
            and the top side is primary when the chart is viewed from the bottom.
            </summary>
        </member>
        <member name="F:Nevron.Chart.AutoSideAxisAnchorDock.Secondary">
            <summary>
            Secondary side.
            For a Y axis the right side is secondary in all projections.
            For X and Z axes the top side is secondary when the chart is viewed from the top
            and the bottom side is secondary when the chart is viewed from the bottom.
            </summary>
        </member>
        <member name="T:Nevron.Chart.ArrowheadShape">
            <summary>
            Enumerates the different arrowhead shapes for the Vector series.
            </summary>
        </member>
        <member name="F:Nevron.Chart.ArrowheadShape.None">
            <summary>
            No arrowhead
            </summary>
        </member>
        <member name="F:Nevron.Chart.ArrowheadShape.Arrow">
            <summary>
            Arrow
            </summary>
        </member>
        <member name="F:Nevron.Chart.ArrowheadShape.Triangle">
            <summary>
            Triangle
            </summary>
        </member>
        <member name="T:Nevron.Chart.LabelLocation">
            <summary>
            Enumerates the initial label locations for automatic label layout.
            </summary>
        </member>
        <member name="F:Nevron.Chart.LabelLocation.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:Nevron.Chart.LabelLocation.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="F:Nevron.Chart.LabelLocation.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:Nevron.Chart.LabelLocation.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:Nevron.Chart.LabelLocation.TopLeft">
            <summary>
            Top-Left
            </summary>
        </member>
        <member name="F:Nevron.Chart.LabelLocation.TopRight">
            <summary>
            Top-Right
            </summary>
        </member>
        <member name="F:Nevron.Chart.LabelLocation.BottomLeft">
            <summary>
            Bottom-Left
            </summary>
        </member>
        <member name="F:Nevron.Chart.LabelLocation.BottomRight">
            <summary>
            Bottom-Right
            </summary>
        </member>
        <member name="T:Nevron.Chart.OutOfBoundsLocationMode">
            <summary>
            Enumerates the different modes of treatment of proposed label locations that are partially out of the plot area bounds.
            Relates to automatic data label layout, initial label positioning.
            </summary>
        </member>
        <member name="F:Nevron.Chart.OutOfBoundsLocationMode.IgnoreLocation">
            <summary>
            Location proposals that are partially out of the plot bounds are ignored.
            </summary>
        </member>
        <member name="F:Nevron.Chart.OutOfBoundsLocationMode.PushWithinBounds">
            <summary>
            Location proposals that are partially out of the plot bounds are pushed within the bounds (if possible).
            </summary>
        </member>
        <member name="F:Nevron.Chart.OutOfBoundsLocationMode.UseLocation">
            <summary>
            Location proposals that are partially out of the plot bounds are used.
            </summary>
        </member>
        <member name="T:Nevron.Chart.FillRoundingMode">
            <summary>
            Defines different rounding modes for the geometry of filled bar shapes.
            </summary>
        </member>
        <member name="F:Nevron.Chart.FillRoundingMode.Default">
            <summary>
            The shape geometry is not modified.
            </summary>
        </member>
        <member name="F:Nevron.Chart.FillRoundingMode.NegativeOffset">
            <summary>
            The shape geometry is offseted with -0.5 pixels.
            </summary>
        </member>
        <member name="F:Nevron.Chart.FillRoundingMode.PositiveOffset">
            <summary>
            The shape geometry is offseted with 0.5 pixels.
            </summary>
        </member>
        <member name="F:Nevron.Chart.FillRoundingMode.Extend">
            <summary>
            The shape geometry is offseted with half pixel and is extended with one pixel.
            </summary>
        </member>
        <member name="T:Nevron.Chart.RenderFlags">
            <summary>
            Render flags
            </summary>
        </member>
        <member name="T:Nevron.Chart.DimensionMask">
            <summary>
            Dimension types
            </summary>
        </member>
        <member name="F:Nevron.Chart.NDataPointXYZValue.X">
            <summary>
            The X data point value
            </summary>
        </member>
        <member name="F:Nevron.Chart.NDataPointXYZValue.Y">
            <summary>
            The Y data point value
            </summary>
        </member>
        <member name="F:Nevron.Chart.NDataPointXYZValue.Z">
            <summary>
            The Z data point value
            </summary>
        </member>
        <member name="F:Nevron.Chart.NDataPointXYZValue.ValidX">
            <summary>
            Whether the X data point value is valid
            </summary>
        </member>
        <member name="F:Nevron.Chart.NDataPointXYZValue.ValidY">
            <summary>
            Whether the Y data point value is valid
            </summary>
        </member>
        <member name="F:Nevron.Chart.NDataPointXYZValue.ValidZ">
            <summary>
            Whether the Z data point value is valid
            </summary>
        </member>
        <member name="T:Nevron.Chart.WinForm.NMouseService">
            <summary>
            Manages the mouse capture and cursor
            </summary>
        </member>
        <member name="M:Nevron.Chart.WinForm.NMouseService.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.Chart.WinForm.NMouseService.Capture">
            <summary>
            Get / sets mouse capture
            </summary>
        </member>
        <member name="P:Nevron.Chart.WinForm.NMouseService.CursorSet">
            <summary>
            Whether the cursor has been set
            </summary>
        </member>
        <member name="P:Nevron.Chart.WinForm.NMouseService.Cursor">
            <summary>
            Gets or sets the mouse cursor
            </summary>
        </member>
        <member name="P:Nevron.Chart.WinForm.NMouseService.DefaultCursor">
            <summary>
            Gets or sets the default cursor
            </summary>
        </member>
        <member name="P:Nevron.Chart.WinForm.NMouseService.ScreenMousePosition">
            <summary>
            Gets the current mouse screen coordinates 
            </summary>
        </member>
        <member name="P:Nevron.Chart.WinForm.NMouseService.ClientMousePosition">
            <summary>
            Gets the mouse position in client coordinates
            </summary>
        </member>
        <member name="T:Nevron.Chart.WinForm.NViewServiceManager">
            <summary>
            Summary description for NViewServiceManager.
            </summary>
        </member>
        <member name="M:Nevron.Chart.WinForm.NViewServiceManager.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Chart.WinForm.NViewServiceManager.MouseService">
            <summary>
            Obtains the repaint service.
            </summary>
        </member>
        <member name="P:Nevron.Chart.WinForm.NViewServiceManager.HitTestCacheService">
            <summary>
            Obtains the hit test cache service
            </summary>
        </member>
        <member name="T:Nevron.Chart.WinForm.NControlView">
            <summary>
            Represents a chart view used to host the chart document in a Windows form control
            </summary>
        </member>
        <member name="M:Nevron.Chart.WinForm.NControlView.#ctor(Nevron.Chart.NDocument,System.Windows.Forms.Control)">
            <summary>
            Initializer constructor
            </summary>
            <param name="document"></param>
            <param name="outerControl"></param>
        </member>
        <member name="P:Nevron.Chart.WinForm.NControlView.OuterControl">
            <summary>
            Returns the outer control associated with this view
            </summary>
        </member>
        <member name="P:Nevron.Chart.WinForm.NControlView.Controller">
            <summary>
            Gets or sets the controller of this control view
            </summary>
        </member>
        <member name="P:Nevron.Chart.WinForm.NControlView.ServiceManager">
            <summary>
            Gets the 
            </summary>
        </member>
        <member name="M:Nevron.Chart.WinForm.NControlView.Invalidate(System.Boolean)">
            <summary>
            Causes the view to repaint
            </summary>
            <param name="internalUpdate"></param>
        </member>
        <member name="M:Nevron.Chart.WinForm.NControlView.InvalidateOverlay">
            <summary>
            Causes the view overlay to repaint
            </summary>
        </member>
        <member name="M:Nevron.Chart.WinForm.NControlView.Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the view on the specified event args graphics
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Nevron.Chart.WinForm.NControlView.RequiresControlBackground">
            <summary>
            Returns true if this view requires the outer control background
            </summary>
        </member>
        <member name="M:Nevron.Chart.WinForm.NControlView.GetServiceOfType(System.Type)">
            <summary>
            Gets a reference to a service of the specified type
            </summary>
            <param name="serviceType">service type</param>
            <returns>service instance or null if a service of this type cannot be located</returns>
        </member>
        <member name="M:Nevron.Chart.WinForm.NControlView.CreateContext">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Chart.View.NChartStreamImageMapView">
            <summary>
            Summary description for NHtmlImageMapView.
            </summary>
        </member>
        <member name="M:Nevron.Chart.View.NChartStreamImageMapView.GetTiledImageMap(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Creates an image map representation of the specified document in the specified bounds
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.View.NChartStreamImageMapView.GetImageMap">
            <summary>
            Creates an image map representation of the specified document
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.View.NChartGraphicsView">
            <summary>
            Summary description for NChartEmfView.
            </summary>
        </member>
        <member name="M:Nevron.Chart.View.NChartGraphicsView.RenderToGraphics(System.Drawing.Graphics)">
            <summary>
            Renders the chart in the specified graphics
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.View.NChartHtmlImageMapView">
            <summary>
            Summary description for NHtmlImageMapView.
            </summary>
        </member>
        <member name="M:Nevron.Chart.View.NChartHtmlImageMapView.WriteImageMap(Nevron.GraphicsCore.NHtmlMapContext,System.IO.TextWriter)">
            <summary>
            Creates a bitmap representation of the specified document
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.View.NChartPdfView.RenderImage(Nevron.GraphicsCore.NPdfImageFormat)">
            <summary>
            Creates a PDF representation of the specified document
            </summary>
            <param name="pdfImageFormat"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.View.NChartPrintView">
            <summary>
            Represents a chart print view
            </summary>
        </member>
        <member name="M:Nevron.Chart.View.NChartPrintView.#ctor(Nevron.Chart.NPrintManager,Nevron.Chart.NDocument,System.Drawing.Graphics)">
            <summary>
            
            </summary>
            <param name="printManager"></param>
            <param name="document"></param>
            <param name="graphics"></param>
        </member>
        <member name="M:Nevron.Chart.View.NChartPrintView.Attach(System.Drawing.Graphics)">
            <summary>
            Attaches this print view to the specified graphics
            </summary>
            <param name="graphics"></param>
        </member>
        <member name="M:Nevron.Chart.View.NChartPrintView.Detach">
            <summary>
            Detaches this print view from the underlying print graphics
            </summary>
        </member>
        <member name="M:Nevron.Chart.View.NChartPrintView.Print(Nevron.GraphicsCore.NRectangleF)">
            <summary>
            Prints a chart document on the specified printer graphics with the specified position
            </summary>
            <param name="bounds">specified in hundreds of an inch</param>
        </member>
        <member name="T:Nevron.Chart.View.NChartRasterView">
            <summary>
            Summary description for NChartRasterView.
            </summary>
        </member>
        <member name="M:Nevron.Chart.View.NChartRasterView.#ctor(Nevron.Chart.NDocument,Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution)">
            <summary>
            
            </summary>
            <param name="document"></param>
            <param name="size"></param>
            <param name="resolution"></param>
        </member>
        <member name="M:Nevron.Chart.View.NChartRasterView.SetTransparent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.View.NChartRasterView.RenderImageNoRecalc(Nevron.GraphicsCore.INRasterImageFormat)">
            <summary>
            Creates a bitmap representation of the specified without recalculating
            </summary>
            <param name="rasterImageFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.View.NChartRasterView.RenderImage(Nevron.GraphicsCore.INRasterImageFormat)">
            <summary>
            Creates a bitmap representation of the specified document
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Chart.View.NChartRasterView.RenderImage(Nevron.GraphicsCore.INRasterImageFormat,Nevron.GraphicsCore.NRectangle)">
            <summary>
            Creates a bitmap representation of the specified document with a specified viewport
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.View.NChartSilverlightView">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.View.NChartSilverlightView.RenderImage(Nevron.GraphicsCore.NXamlImageFormat)">
            <summary>
            Creates a Xaml representation of the specified document
            </summary>
            <param name="xamlImageFormat"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.View.NChartSvgView">
            <summary>
            Summary description for NChartSvgView.
            </summary>
        </member>
        <member name="M:Nevron.Chart.View.NChartSvgView.#ctor(Nevron.Chart.NDocument,Nevron.GraphicsCore.NSize,Nevron.GraphicsCore.NResolution,Nevron.GraphicsCore.NSvgImageFormat)">
            <summary>
            
            </summary>
            <param name="document"></param>
            <param name="size"></param>
            <param name="resolution"></param>
            <param name="svgImageFormat"></param>
        </member>
        <member name="M:Nevron.Chart.View.NChartSvgView.RenderImage">
            <summary>
            Creates an SVG representation of the specified document
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.View.NChartSwfView">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Chart.View.NChartSwfView.RenderImage(Nevron.GraphicsCore.NSwfImageFormat)">
            <summary>
            Creates a SWF representation of the specified document
            </summary>
            <param name="swfImageFormat"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Chart.View.NChartViewNode">
            <summary>
            The base of all view nodes.
            </summary>
        </member>
        <member name="M:Nevron.Chart.View.NChartViewNode.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Chart.View.NChartViewNode.Clone">
            <summary>
            Creates an identical copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.View.NChartViewNode.ParentNode">
            <summary>
            Obtains the parent node
            </summary>
        </member>
        <member name="P:Nevron.Chart.View.NChartViewNode.RootNode">
            <summary>
            Obtains the root of this node
            </summary>
        </member>
        <member name="T:Nevron.Chart.View.NView">
            <summary>
            The base of all chart views
            </summary>
        </member>
        <member name="M:Nevron.Chart.View.NView.RecalcLayout">
            <summary>
            Prepares the view for hit testing
            </summary>
        </member>
        <member name="M:Nevron.Chart.View.NView.Invalidate(System.Boolean)">
            <summary>
            Causes the view to repaint
            </summary>
            <param name="internalUpdate"></param>
        </member>
        <member name="M:Nevron.Chart.View.NView.InvalidateOverlay">
            <summary>
            Causes the view overlay to repaint
            </summary>
        </member>
        <member name="M:Nevron.Chart.View.NView.EnsureContextValid">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Chart.View.NView.Document">
            <summary>
            Gets or sets the document associated with this chart view
            </summary>
        </member>
        <member name="P:Nevron.Chart.View.NView.Size">
            <summary>
            Gets the size in pixels of this chart view
            </summary>
        </member>
        <member name="P:Nevron.Chart.View.NView.Resolution">
            <summary>
            Gets the resolution of this chart view
            </summary>
        </member>
        <member name="P:Nevron.Chart.View.NView.Context">
            <summary>
            Gets the rendering context associated with this view
            </summary>
        </member>
        <member name="M:Nevron.Chart.View.NView.GetServiceOfType(System.Type)">
            <summary>
            Gets a reference to a service of the specified type
            </summary>
            <param name="serviceType">service type</param>
            <returns>service instance or null if a service of this type cannot be located</returns>
        </member>
        <member name="M:Nevron.Chart.View.NView.CreateRenderSurface">
            <summary>
            Creates a render surface
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Chart.View.NView.Use2DDevice">
            <summary>
            Returns true if the render device can be 2D
            </summary>
        </member>
        <member name="M:Nevron.Internal.IbtC.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Internal.EjtC.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.IKUC.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Internal.IKUC.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.dfWC.Filter(System.String)">
            <summary>
            Returns true.
            </summary>
            <param name="EfWC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.dfWC.OnEntryDecompressed(System.String,System.IO.MemoryStream)">
            <summary>
            
            </summary>
            <param name="ffWC"></param>
            <param name="GfWC"></param>
        </member>
        <member name="M:Nevron.Internal.xWWC.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Internal.xWWC.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Internal.fvxC.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.tWxC.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Nevron.Internal.vYxC.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Nevron.Internal.hhYC.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Nevron.Internal.tKYC.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Nevron.Internal.ElYC.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Nevron.Internal.WpYC.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Nevron.Internal.dUvC`2.Equals(Nevron.Internal.dUvC{`0,`1})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="GUvC">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Nevron.Internal.dUvC`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Nevron.Internal.dUvC`2.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Nevron.Internal.dUvC`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="hUvC">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Nevron.Internal.dUvC`2.op_Equality(Nevron.Internal.dUvC{`0,`1},Nevron.Internal.dUvC{`0,`1})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="one">The one.</param>
            <param name="other">The other.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Nevron.Internal.dUvC`2.op_Inequality(Nevron.Internal.dUvC{`0,`1},Nevron.Internal.dUvC{`0,`1})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="one">The one.</param>
            <param name="other">The other.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:Nevron.Internal.IAWC.Item(System.Int32,System.Int32)">
            <summary>
            Get cell by row and col index
            </summary>
            <param name="row">starts from 0.</param>
            <param name="col">starts from 0.</param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Internal.EbWC.Item(System.UInt16,System.UInt16)">
            <summary>
            Get or set column width, the unit is 1/256 of the width of the zero character, using default font.
            </summary>
            <param name="firstColIndex">Index to first column in the range</param>
            <param name="lastColIndex">Index to last column in the range</param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Internal.nQYC.Cache">
            <summary>
            Indicates whether the object must cashe its content
            </summary>
        </member>
        <member name="M:Nevron.Internal.nQYC.GetCachedPanelKey(Nevron.GraphicsCore.NSize@)">
            <summary>
            Gets the composite key for the cashed bitmap
            </summary>
            <param name="OQYC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.bbAd.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Internal.bbAd.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.xCAd.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Internal.xCAd.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Internal.nUAd.GetHashCode">
            <summary>
            Overriden to avoid compilation warnings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.nUAd.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal
            </summary>
            <param name="EvAd"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.KvAd.GetHashCode">
            <summary>
            Overriden to avoid compilation warnings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.KvAd.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal
            </summary>
            <param name="MWAd"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.xdbd.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.xdbd.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="AEbd"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.YEbd.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="bfbd"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.AIbd.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="CIbd"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.Ilbd.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.Ilbd.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="Klbd"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.nlbd.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="plbd"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.nMbd.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="pMbd"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.SMbd.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="vMbd"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.SMbd.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.jOCd.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="lOCd"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.MOCd.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="OOCd"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.rOCd.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="tOCd"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.YWCd.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="bxCd"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.Qjdd.GetHashCode">
            <summary>
            Overriden to avoid warnings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.Qjdd.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal
            </summary>
            <param name="Cldd"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.nCEd.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal
            </summary>
            <param name="SCEd"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.nCEd.GetHashCode">
            <summary>
            Overriden to avoid warnings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.vCEd.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal
            </summary>
            <param name="AdEd"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.vCEd.GetHashCode">
            <summary>
            Overriden to avoid warnings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.EdEd.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal
            </summary>
            <param name="KdEd"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.EdEd.GetHashCode">
            <summary>
            Overriden to avoid warnings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.blGd.GetHashCode">
            <summary>
            Gets the hash code of the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.blGd.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal
            </summary>
            <param name="fnGd"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.blGd.Clone">
            <summary>
            Creates an identical copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.jUGd.Clone">
            <summary>
            Creates an identical copy of this grid object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.fbhd.Clone">
            <summary>
            Creates an identical copy of this merge cells collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.rbhd.Clone">
            <summary>
            Creates an identical copy of this row/col style object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Internal.Clhd.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.Clhd.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="Olhd"></param>
        </member>
        <member name="M:Nevron.Internal.Clhd.CreateNonSerializedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Internal.EMhd.Current">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Internal.EMhd.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Internal.EMhd.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.EMhd.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Internal.hMhd.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Internal.hMhd.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.hMhd.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Internal.KMhd.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.KMhd.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="WMhd"></param>
        </member>
        <member name="M:Nevron.Internal.KMhd.CreateNonSerializedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Internal.Cnhd.Current">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Internal.Cnhd.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.Cnhd.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Internal.Cnhd.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Internal.hnhd.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Internal.hnhd.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Internal.Mnhd.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.Mnhd.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="Ynhd"></param>
        </member>
        <member name="M:Nevron.Internal.Mnhd.CreateNonSerializedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Internal.IOhd.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.IOhd.UpdateReferences(Nevron.INReferenceProvider)">
            <summary>
            
            </summary>
            <param name="tOhd"></param>
        </member>
        <member name="M:Nevron.Internal.IOhd.CreateNonSerializedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Internal.IOhd.GetReferenceProvider">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.IOhd.UpdateFieldReferences(Nevron.INReferenceProvider)">
            <summary>
            Updates the field references of this object
            </summary>
            <param name="UOhd"></param>
            <remark>AUTO GENERATED IN DERIVED CLASSES</remark>
        </member>
        <member name="M:Nevron.Internal.IOhd.CreateFieldNonSerializedObjects">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Internal.brhd.Current">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Internal.brhd.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.hlId`3.Clear">
            <summary>
            Clears the chunk
            </summary>
        </member>
        <member name="M:Nevron.Internal.tMld.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Nevron.Internal.pQpd.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Nevron.Internal.Qfrd.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Nevron.Internal.CGrd.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Internal.pvSd.Name">
            <summary>
            User defined name of the node
            </summary>
        </member>
        <member name="M:Nevron.Internal.hxUd.CreateScaleDecoration(Nevron.GraphicsCore.NRange1DD,Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Creates a scale decoration based on the current and view ranges.
            </summary>
            <param name="EYUd">The view range.</param>
            <param name="fYUd">The current range.</param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Internal.SbWd.WallDecorationType">
            <summary>
            Gets the wall decoration type
            </summary>
        </member>
        <member name="M:Nevron.Internal.SbWd.IsContainedInRange(Nevron.GraphicsCore.NRange1DD)">
            <summary>
            Returns true if the decoration is contained in the range
            </summary>
            <param name="bCWd"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Internal.jdxd.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Editors.NAxisAnchorTypeEditor">
            <summary>
            Summary description for NAxisAnchorTypeEditor.
            </summary>
        </member>
        <member name="T:Nevron.Editors.NAxisAnchorEditorUC">
            <summary>
            Summary description for NAxisAnchorEditorUC.
            </summary>
        </member>
        <member name="M:Nevron.Editors.NAxisAnchorEditorUC.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.Editors.NAxisAnchorEditorUC.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Editors.NAxisAnchorEditorUC.Style">
            <summary>
            Gets or sets NFillStyle object to edit.
            </summary>
        </member>
        <member name="M:Nevron.Editors.NAxisAnchorEditorUC.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:Nevron.Editors.NAxisPagingViewEditorUC">
            <summary>
            Summary description for NAxisPagingViewEditorUC.
            </summary>
        </member>
        <member name="M:Nevron.Editors.NAxisPagingViewEditorUC.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Editors.NAxisPagingViewEditorUC.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Editors.NAxisPagingViewTypeEditor">
            <summary>
            Summary description for NAxisPagingViewTypeEditor.
            </summary>
        </member>
        <member name="T:Nevron.Editors.NAxisViewEditorUC">
            <summary>
            Summary description for NAxisPagingViewEditorUC.
            </summary>
        </member>
        <member name="P:Nevron.Editors.NAxisViewEditorUC.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="M:Nevron.Editors.NAxisViewEditorUC.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:Nevron.Editors.NAxisViewTypeEditor">
            <summary>
            Summary description for NAxisViewTypeEditor.
            </summary>
        </member>
        <member name="T:Nevron.Editors.NDateTimeUnitArrayEditorUC">
            <summary>
            Summary description for NDateTimeUnitArrayEditorUC.
            </summary>
        </member>
        <member name="M:Nevron.Editors.NDateTimeUnitArrayEditorUC.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Editors.NDateTimeUnitArrayEditorUC.Style">
            <summary>
            Gets or sets the array of label fit modes to edit.
            </summary>
        </member>
        <member name="T:Nevron.Editors.NDateTimeUnitArrayTypeEditor">
            <summary>
            Summary description for NDateTimeUnitArrayTypeEditor.
            </summary>
        </member>
        <member name="T:Nevron.Editors.NLabelFitModeArrayEditorUC">
            <summary>
            Summary description for NLabelFitModeArrayEditorUC.
            </summary>
        </member>
        <member name="M:Nevron.Editors.NLabelFitModeArrayEditorUC.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Editors.NLabelFitModeArrayEditorUC.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Editors.NLabelFitModeArrayEditorUC.Style">
            <summary>
            Gets or sets the array of label fit modes to edit.
            </summary>
        </member>
        <member name="T:Nevron.Editors.NLabelFitModeArrayTypeEditor">
            <summary>
            Summary description for NLabelFitModeArrayTypeEditor.
            </summary>
        </member>
        <member name="T:Nevron.Editors.NScaleConfiguratorEditorUC">
            <summary>
            Summary description for NScaleConfiguratorEditorUC.
            </summary>
        </member>
        <member name="M:Nevron.Editors.NScaleConfiguratorEditorUC.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Editors.NScaleConfiguratorEditorUC.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Editors.NScaleConfiguratorTypeEditor">
            <summary>
            Summary description for NScaleConfiguratorTypeEditor.
            </summary>
        </member>
        <member name="M:Nevron.Editors.NScaleLabelAngleEditorUC.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Editors.NScaleLabelAngleEditorUC.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Editors.NScaleLabelAngleTypeEditor">
            <summary>
            Summary description for NScaleLabelAngleTypeEditor.
            </summary>
        </member>
        <member name="T:Nevron.Editors.NDataGridDataLabelStyleColumnStyle">
            <summary>
            Column style, which can be used for the visual editing of data 
            labels inside a DataGrid
            </summary>
        </member>
        <member name="T:Nevron.Editors.NDataGridUIntListColumnStyle">
            <summary>
            Column style, which can be used for the visual editing of lists inside a DataGrid
            </summary>
        </member>
        <member name="T:Nevron.Editors.NDataGridDoubleListColumnStyle">
            <summary>
            Column style, which can be used for the visual editing of lists inside a DataGrid
            </summary>
        </member>
        <member name="T:Nevron.Editors.NDataGridMarkerStyleColumnStyle">
            <summary>
            Column style, which can be used for the visual editing of data 
            markers inside a DataGrid
            </summary>
        </member>
        <member name="T:Nevron.Editors.NGridDataLabelStyleButton">
            <summary>
            Grdi data label style button
            </summary>
        </member>
        <member name="T:Nevron.Editors.NGridMarkerStyleButton">
            <summary>
            Grid marker style button
            </summary>
        </member>
        <member name="T:Nevron.Editors.NDataLabelStyleEditorUC">
            <summary>
            Data label style editor.
            </summary>
        </member>
        <member name="M:Nevron.Editors.NDataLabelStyleEditorUC.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Editors.NDataLabelStyleEditorUC.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Editors.NDataLabelStyleEditorUC.Style">
            <summary>
            Gets or sets the data label style to edit.
            </summary>
        </member>
        <member name="T:Nevron.Editors.NDataLabelStyleTypeEditor">
            <summary>
            Provides facilities for visual editing of NDataLabelStyle objects.
            </summary>
        </member>
        <member name="M:Nevron.Editors.NDataLabelStyleTypeEditor.#ctor">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="M:Nevron.Editors.NDataLabelStyleTypeEditor.Edit(Nevron.Chart.NDataLabelStyle,Nevron.Chart.NDataLabelStyle@)">
            <summary>
            Edits the specified style. 
            </summary>
            <param name="dataLabelStyle"></param>
            <param name="dataLabelStyleResult"></param>
            <returns></returns>
            <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
        </member>
        <member name="M:Nevron.Editors.NDataLabelStyleTypeEditor.Edit(Nevron.Chart.NDataLabelStyle,System.Boolean,Nevron.Chart.NDataLabelStyle@)">
            <summary>
            Edits the specified style. If automatic is set to true the in parameter must be treated as automatic style.
            </summary>
            <param name="dataLabelStyle"></param>
            <param name="automaticStyle"></param>
            <param name="dataLabelStyleResult"></param>
            <returns></returns>
            <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
        </member>
        <member name="T:Nevron.Editors.NGaugeAxisAnchorEditorUC">
            <summary>
            Summary description for NGaugeAxisAnchorEditorUC.
            </summary>
        </member>
        <member name="M:Nevron.Editors.NGaugeAxisAnchorEditorUC.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Editors.NGaugeAxisAnchorEditorUC.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="T:Nevron.Editors.NGaugeAxisAnchorTypeEditor">
            <summary>
            Summary description for NAxisAnchorTypeEditor.
            </summary>
        </member>
        <member name="T:Nevron.Editors.NLightModelEditorUC">
            <summary>
            Light model editor.
            </summary>
        </member>
        <member name="M:Nevron.Editors.NLightModelEditorUC.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Editors.NLightModelEditorUC.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Editors.NLightModelEditorUC.Style">
            <summary>
            Gets or sets the NBackgroundStyle object to edit.
            </summary>
        </member>
        <member name="T:Nevron.Editors.NLightModelTypeEditor">
            <summary>
            Provides facilities for visual editing of NLightModel objects.
            </summary>
        </member>
        <member name="M:Nevron.Editors.NLightModelTypeEditor.#ctor">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="M:Nevron.Editors.NLightModelTypeEditor.Edit(Nevron.GraphicsCore.NLightModel,Nevron.GraphicsCore.NLightModel@)">
            <summary>
            Edits the specified style. 
            </summary>
            <param name="lightModel"></param>
            <param name="lightModelResult"></param>
            <returns></returns>
            <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
        </member>
        <member name="M:Nevron.Editors.NLightModelTypeEditor.Edit(Nevron.GraphicsCore.NLightModel,System.Boolean,Nevron.GraphicsCore.NLightModel@)">
            <summary>
            Edits the specified style. If automatic is set to true the in parameter must be treated as automatic style.
            </summary>
            <param name="lightModel"></param>
            <param name="automaticStyle"></param>
            <param name="lightModelResult"></param>
            <returns></returns>
            <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
        </member>
        <member name="T:Nevron.Editors.NMarkerStyleEditorUC">
            <summary>
            Marker style editor user control
            </summary>
        </member>
        <member name="P:Nevron.Editors.NMarkerStyleEditorUC.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Editors.NMarkerStyleEditorUC.Style">
            <summary>
            Gets or sets the marker style to edit.
            </summary>
        </member>
        <member name="M:Nevron.Editors.NMarkerStyleEditorUC.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:Nevron.Editors.NMarkerStyleTypeEditor">
            <summary>
            Provides facilities for visual editing of NMarkerStyle objects.
            </summary>
        </member>
        <member name="M:Nevron.Editors.NMarkerStyleTypeEditor.#ctor">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="M:Nevron.Editors.NMarkerStyleTypeEditor.Edit(Nevron.Chart.NMarkerStyle,Nevron.Chart.NMarkerStyle@)">
            <summary>
            Edits the specified style. 
            </summary>
            <param name="markerStyle"></param>
            <param name="markerStyleResult"></param>
            <returns></returns>
            <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
        </member>
        <member name="M:Nevron.Editors.NMarkerStyleTypeEditor.Edit(Nevron.Chart.NMarkerStyle,System.Boolean,Nevron.Chart.NMarkerStyle@)">
            <summary>
            Edits the specified style. If automatic is set to true the in parameter must be treated as automatic style.
            </summary>
            <param name="markerStyle"></param>
            <param name="automaticStyle"></param>
            <param name="markerStyleResult"></param>
            <returns></returns>
            <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
        </member>
        <member name="T:Nevron.Editors.NProjectionEditorUC">
            <summary>
            Projection editor user control.
            </summary>
        </member>
        <member name="M:Nevron.Editors.NProjectionEditorUC.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Editors.NProjectionEditorUC.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Editors.NProjectionEditorUC.Style">
            <summary>
            Gets or sets the style to edit.
            </summary>
        </member>
        <member name="T:Nevron.Editors.NProjectionTypeEditor">
            <summary>
            Provides facilities for visual editing of NLightModel objects.
            </summary>
        </member>
        <member name="M:Nevron.Editors.NProjectionTypeEditor.#ctor">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="M:Nevron.Editors.NProjectionTypeEditor.Edit(Nevron.GraphicsCore.NProjection,Nevron.GraphicsCore.NProjection@)">
            <summary>
            Edits the specified style. 
            </summary>
            <param name="projection"></param>
            <param name="projectionResult"></param>
            <returns></returns>
            <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
        </member>
        <member name="M:Nevron.Editors.NProjectionTypeEditor.Edit(Nevron.GraphicsCore.NProjection,System.Boolean,Nevron.GraphicsCore.NProjection@)">
            <summary>
            Edits the specified style. If automatic is set to true the in parameter must be treated as automatic style.
            </summary>
            <param name="projection"></param>
            <param name="automaticStyle"></param>
            <param name="projectionResult"></param>
            <returns></returns>
            <remarks>
            If the function returns true then the out parameter holds a valid style.
            </remarks>
        </member>
        <member name="T:Nevron.Editors.NDataLabelStylePreviewRenderer">
            <summary>
            Draws preview for data label styles.
            </summary>
        </member>
        <member name="P:Nevron.Editors.NDataLabelStylePreviewRenderer.Style">
            <summary>
            Sets the NFillStyle used to create the preview.
            </summary>
        </member>
        <member name="T:Nevron.Editors.NMarkerStylePreviewRenderer">
            <summary>
            Draws preview for marker styles.
            </summary>
        </member>
        <member name="P:Nevron.Editors.NMarkerStylePreviewRenderer.Style">
            <summary>
            Sets the NFillStyle used to create the preview.
            </summary>
        </member>
        <member name="T:Nevron.Editors.NChartStyleInfo">
            <summary>
            Chart style info (used by the editors framework)
            </summary>
        </member>
        <member name="T:Nevron.Editors.NChartStylePreviewUC">
            <summary>
            Summary description for NChartStylePreviewUC.
            </summary>
        </member>
        <member name="M:Nevron.Editors.NChartStylePreviewUC.#ctor">
            <summary>
            Initiializer constructor.
            </summary>
        </member>
        <member name="M:Nevron.Editors.NChartStylePreviewUC.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Nevron.Editors.NChartStylePreviewUC.LocalizationContextName">
            <summary>
            Gets the localization context name for this class.
            </summary>
        </member>
        <member name="P:Nevron.Editors.NChartStylePreviewUC.Style">
            <summary>
            Controls the background style of the preview.
            </summary>
        </member>
    </members>
</doc>
